
Level_Version_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024768  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004840  08024918  08024918  00034918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003b92  08029158  08029158  00039158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000f9f50  0802ccec  0802ccec  0003ccec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000698  08126c3c  08126c3c  00136c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  081272d4  081272d4  00165908  2**0
                  CONTENTS
  7 .ARM          00000008  081272d4  081272d4  001372d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  081272dc  081272dc  00165908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  081272dc  081272dc  001372dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  081272f0  081272f0  001372f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000108  20000000  081272f8  00140000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_Framebuffer 00025800  20000108  08127400  00140108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00006044  20025908  0814cc00  00165908  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  2002b94c  0814cc00  0016b94c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00165908  2**0
                  CONTENTS, READONLY
 16 .debug_info   000688fa  00000000  00000000  00165938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0001229f  00000000  00000000  001ce232  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00004970  00000000  00000000  001e04d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003d68  00000000  00000000  001e4e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  000351f9  00000000  00000000  001e8bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   000452e1  00000000  00000000  0021dda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00101184  00000000  00000000  0026308a  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  0036420e  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0001201c  00000000  00000000  00364308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20025908 	.word	0x20025908
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08024900 	.word	0x08024900

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2002590c 	.word	0x2002590c
 80001ec:	08024900 	.word	0x08024900

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BQ25713_Init>:
#include "bq25713.h"


BQ25713_DATA BQ25713;

void BQ25713_Init(I2C_HandleTypeDef i2c_handle){
 80005a0:	b084      	sub	sp, #16
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	f107 0c10 	add.w	ip, r7, #16
 80005ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Initialize I2C Handle
	BQ25713.BQ25713_I2C = i2c_handle;
 80005b0:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <BQ25713_Init+0x130>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f107 0110 	add.w	r1, r7, #16
 80005b8:	2354      	movs	r3, #84	; 0x54
 80005ba:	461a      	mov	r2, r3
 80005bc:	f023 f85e 	bl	802367c <memcpy>
	BQ25713.Device_Id = BQ25713_DEVICE_ID;
 80005c0:	4b43      	ldr	r3, [pc, #268]	; (80006d0 <BQ25713_Init+0x130>)
 80005c2:	2288      	movs	r2, #136	; 0x88
 80005c4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	BQ25713.Manufacture_Id = BQ25713_MANUFACTURE_ID;
 80005c8:	4b41      	ldr	r3, [pc, #260]	; (80006d0 <BQ25713_Init+0x130>)
 80005ca:	2240      	movs	r2, #64	; 0x40
 80005cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	BQ25713.I2C_Address = BQ25713_I2C_ADDRESS;
 80005d0:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <BQ25713_Init+0x130>)
 80005d2:	22d6      	movs	r2, #214	; 0xd6
 80005d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	BQ25713.active_fast_charge = 0;
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <BQ25713_Init+0x130>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	BQ25713.is_charge = 0;
 80005e0:	4b3b      	ldr	r3, [pc, #236]	; (80006d0 <BQ25713_Init+0x130>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	BQ25713.battery_level=0;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <BQ25713_Init+0x130>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2102      	movs	r1, #2
 80005f4:	4837      	ldr	r0, [pc, #220]	; (80006d4 <BQ25713_Init+0x134>)
 80005f6:	f004 f871 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2104      	movs	r1, #4
 80005fe:	4835      	ldr	r0, [pc, #212]	; (80006d4 <BQ25713_Init+0x134>)
 8000600:	f004 f86c 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2108      	movs	r1, #8
 8000608:	4832      	ldr	r0, [pc, #200]	; (80006d4 <BQ25713_Init+0x134>)
 800060a:	f004 f867 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2110      	movs	r1, #16
 8000612:	4830      	ldr	r0, [pc, #192]	; (80006d4 <BQ25713_Init+0x134>)
 8000614:	f004 f862 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2120      	movs	r1, #32
 800061c:	482d      	ldr	r0, [pc, #180]	; (80006d4 <BQ25713_Init+0x134>)
 800061e:	f004 f85d 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	482b      	ldr	r0, [pc, #172]	; (80006d4 <BQ25713_Init+0x134>)
 8000628:	f004 f858 	bl	80046dc <HAL_GPIO_WritePin>


	uint8_t data[2];
	data[0] = 0x00;     // LSB byte of 16bit đata => Fist byte
 800062c:	2300      	movs	r3, #0
 800062e:	713b      	strb	r3, [r7, #4]
	data[1] = 0x00;  	// MSB byte of 16bit data => Second byte
 8000630:	2300      	movs	r3, #0
 8000632:	717b      	strb	r3, [r7, #5]
	uint16_t value_write = 0x0000;
 8000634:	2300      	movs	r3, #0
 8000636:	80fb      	strh	r3, [r7, #6]
	//Check if this is BQ25713 driver?
	read_register_16(BQ25713_REG_MANUFACTURER_ID , data);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	202e      	movs	r0, #46	; 0x2e
 800063e:	f000 fadd 	bl	8000bfc <read_register_16>
	if (( data[0] == BQ25713.Manufacture_Id) && (data[1] == BQ25713.Device_Id )){
 8000642:	793a      	ldrb	r2, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <BQ25713_Init+0x130>)
 8000646:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800064a:	429a      	cmp	r2, r3
 800064c:	d139      	bne.n	80006c2 <BQ25713_Init+0x122>
 800064e:	797a      	ldrb	r2, [r7, #5]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <BQ25713_Init+0x130>)
 8000652:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000656:	429a      	cmp	r2, r3
 8000658:	d133      	bne.n	80006c2 <BQ25713_Init+0x122>

		//Set VSYSMIN = 12.288V (REG0x0D/0C),
		value_write = 0x0030;
 800065a:	2330      	movs	r3, #48	; 0x30
 800065c:	80fb      	strh	r3, [r7, #6]
		write_register_16( BQ25713_REG_MIN_SYSTEM_VOLTAGE , value_write);
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	4619      	mov	r1, r3
 8000662:	200c      	movs	r0, #12
 8000664:	f000 faec 	bl	8000c40 <write_register_16>
		//SET VBAT = 16.8 V (REG0x05/04).   0xA041;
		value_write = 0x0040;
 8000668:	2340      	movs	r3, #64	; 0x40
 800066a:	80fb      	strh	r3, [r7, #6]
		write_register_16( BQ25713_REG_MAX_CHARGE_VOLTAGE , value_write);
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	4619      	mov	r1, r3
 8000670:	2004      	movs	r0, #4
 8000672:	f000 fae5 	bl	8000c40 <write_register_16>
		read_register_16 (BQ25713_REG_MAX_CHARGE_VOLTAGE , data);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	2004      	movs	r0, #4
 800067c:	f000 fabe 	bl	8000bfc <read_register_16>

		value_write = 0x0018;
 8000680:	2318      	movs	r3, #24
 8000682:	80fb      	strh	r3, [r7, #6]
		write_register_16 (BQ25713_REG_IIN_HOST , value_write);
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	4619      	mov	r1, r3
 8000688:	200e      	movs	r0, #14
 800068a:	f000 fad9 	bl	8000c40 <write_register_16>
		read_register_16 (BQ25713_REG_IIN_HOST , data);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	200e      	movs	r0, #14
 8000694:	f000 fab2 	bl	8000bfc <read_register_16>
		read_register_16 (BQ25713_REG_CHARGE_OPTION_0 , data);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	2000      	movs	r0, #0
 800069e:	f000 faad 	bl	8000bfc <read_register_16>

		value_write = 0x0E07;
 80006a2:	f640 6307 	movw	r3, #3591	; 0xe07
 80006a6:	80fb      	strh	r3, [r7, #6]
		write_register_16( BQ25713_REG_CHARGE_OPTION_0 , value_write);
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	4619      	mov	r1, r3
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fac7 	bl	8000c40 <write_register_16>

		value_write = 0xFFE0;
 80006b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80006b6:	80fb      	strh	r3, [r7, #6]
		write_register_16( BQ25713_REG_ADC_OPTION , value_write);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4619      	mov	r1, r3
 80006bc:	203a      	movs	r0, #58	; 0x3a
 80006be:	f000 fabf 	bl	8000c40 <write_register_16>

		//BQ25713_Default_Charge();
	}
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006cc:	b004      	add	sp, #16
 80006ce:	4770      	bx	lr
 80006d0:	2002b344 	.word	0x2002b344
 80006d4:	40021000 	.word	0x40021000

080006d8 <BQ25713_Default_Charge>:

void BQ25713_Default_Charge(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	//When have charge
	//Set I_CHAGE = 0 Reg 0x02/03;
	uint16_t value_write = 0x0000;
 80006de:	2300      	movs	r3, #0
 80006e0:	80fb      	strh	r3, [r7, #6]
	value_write = 0x0000;
 80006e2:	2300      	movs	r3, #0
 80006e4:	80fb      	strh	r3, [r7, #6]
	write_register_16( BQ25713_REG_CHARGE_CURRENT , value_write);
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	4619      	mov	r1, r3
 80006ea:	2002      	movs	r0, #2
 80006ec:	f000 faa8 	bl	8000c40 <write_register_16>
	//Set VSYSMIN = 12.288V (REG0x0D/0C),  0038 = > 0x0030 pour 12.288  =>0x003F =  14V
	value_write = 0x0030;
 80006f0:	2330      	movs	r3, #48	; 0x30
 80006f2:	80fb      	strh	r3, [r7, #6]
	write_register_16( BQ25713_REG_MIN_SYSTEM_VOLTAGE , value_write);
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	4619      	mov	r1, r3
 80006f8:	200c      	movs	r0, #12
 80006fa:	f000 faa1 	bl	8000c40 <write_register_16>
	//SET VBAT = 16.8 V (REG0x05/04).   0xA041;
	value_write = 0x0041;
 80006fe:	2341      	movs	r3, #65	; 0x41
 8000700:	80fb      	strh	r3, [r7, #6]
	write_register_16( BQ25713_REG_MAX_CHARGE_VOLTAGE , value_write);
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	4619      	mov	r1, r3
 8000706:	2004      	movs	r0, #4
 8000708:	f000 fa9a 	bl	8000c40 <write_register_16>

	uint8_t data[2];
		data[0] = 0x00;     // LSB byte of 16bit đata => Fist byte
 800070c:	2300      	movs	r3, #0
 800070e:	713b      	strb	r3, [r7, #4]
		data[1] = 0x00;  	// MSB byte of 16bit data => Second byte
 8000710:	2300      	movs	r3, #0
 8000712:	717b      	strb	r3, [r7, #5]

	//Disable ILIM_HIZ pin to set input current limit. (REG0x33/32 BIT7=0)
	value_write = 0x3702;
 8000714:	f243 7302 	movw	r3, #14082	; 0x3702
 8000718:	80fb      	strh	r3, [r7, #6]
	write_register_16( BQ25713_REG_CHARGE_OPTION_2 , value_write);
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	4619      	mov	r1, r3
 800071e:	2032      	movs	r0, #50	; 0x32
 8000720:	f000 fa8e 	bl	8000c40 <write_register_16>
	//Set I_CHAGE =>  512 = 0x0002 ; 256 = 0x0001 ; 1024 = 0x0004
	value_write = 0x0002;
 8000724:	2302      	movs	r3, #2
 8000726:	80fb      	strh	r3, [r7, #6]
	write_register_16( BQ25713_REG_CHARGE_CURRENT , value_write);
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	4619      	mov	r1, r3
 800072c:	2002      	movs	r0, #2
 800072e:	f000 fa87 	bl	8000c40 <write_register_16>

	read_register_16 (BQ25713_REG_CHARGE_CURRENT , data);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	2002      	movs	r0, #2
 8000738:	f000 fa60 	bl	8000bfc <read_register_16>
	read_register_16 (BQ25713_REG_IIN_HOST , data);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	200e      	movs	r0, #14
 8000742:	f000 fa5b 	bl	8000bfc <read_register_16>

	read_register_16 (BQ25713_REG_MAX_CHARGE_VOLTAGE , data);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	2004      	movs	r0, #4
 800074c:	f000 fa56 	bl	8000bfc <read_register_16>
	BQ25713.active_fast_charge = 1;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <BQ25713_Default_Charge+0x88>)
 8000752:	2201      	movs	r2, #1
 8000754:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2002b344 	.word	0x2002b344

08000764 <BQ25713_Task>:

void BQ25713_Task(){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

	uint8_t data[2];
	data[0] = 0x00;     // LSB byte of 16bit đata => Fist byte
 800076a:	2300      	movs	r3, #0
 800076c:	713b      	strb	r3, [r7, #4]
	data[1] = 0x00;  	// MSB byte of 16bit data => Second byte
 800076e:	2300      	movs	r3, #0
 8000770:	717b      	strb	r3, [r7, #5]

	read_register_16 (BQ25713_REG_ADC_VSYS_VBAT , data);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	202c      	movs	r0, #44	; 0x2c
 8000778:	f000 fa40 	bl	8000bfc <read_register_16>
	BQ25713.adc_vbat = (uint8_t)(data[1]*100/255);
 800077c:	797b      	ldrb	r3, [r7, #5]
 800077e:	461a      	mov	r2, r3
 8000780:	2364      	movs	r3, #100	; 0x64
 8000782:	fb03 f302 	mul.w	r3, r3, r2
 8000786:	4ac4      	ldr	r2, [pc, #784]	; (8000a98 <BQ25713_Task+0x334>)
 8000788:	fb82 1203 	smull	r1, r2, r2, r3
 800078c:	441a      	add	r2, r3
 800078e:	11d2      	asrs	r2, r2, #7
 8000790:	17db      	asrs	r3, r3, #31
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4bc1      	ldr	r3, [pc, #772]	; (8000a9c <BQ25713_Task+0x338>)
 8000798:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	data[0] = 0x00;     // LSB byte of 16bit đata => Fist byte
 800079c:	2300      	movs	r3, #0
 800079e:	713b      	strb	r3, [r7, #4]
	data[1] = 0x00;  	// MSB byte of 16bit data => Second byte
 80007a0:	2300      	movs	r3, #0
 80007a2:	717b      	strb	r3, [r7, #5]
	read_register_16 (BQ25713_REG_CHARGER_STATUS , data);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	2020      	movs	r0, #32
 80007aa:	f000 fa27 	bl	8000bfc <read_register_16>
	BQ25713.is_charge = (data[1] >> 7);
 80007ae:	797b      	ldrb	r3, [r7, #5]
 80007b0:	09db      	lsrs	r3, r3, #7
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4bb9      	ldr	r3, [pc, #740]	; (8000a9c <BQ25713_Task+0x338>)
 80007b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 80007ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007be:	48b8      	ldr	r0, [pc, #736]	; (8000aa0 <BQ25713_Task+0x33c>)
 80007c0:	f003 ff74 	bl	80046ac <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d124      	bne.n	8000814 <BQ25713_Task+0xb0>
		if (BQ25713.active_fast_charge == 0 ){
 80007ca:	4bb4      	ldr	r3, [pc, #720]	; (8000a9c <BQ25713_Task+0x338>)
 80007cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10a      	bne.n	80007ea <BQ25713_Task+0x86>
			if (BQ25713.adc_vbat < 75){
 80007d4:	4bb1      	ldr	r3, [pc, #708]	; (8000a9c <BQ25713_Task+0x338>)
 80007d6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80007da:	2b4a      	cmp	r3, #74	; 0x4a
 80007dc:	d805      	bhi.n	80007ea <BQ25713_Task+0x86>
				BQ25713_Default_Charge();
 80007de:	f7ff ff7b 	bl	80006d8 <BQ25713_Default_Charge>
				BQ25713.active_fast_charge =1;
 80007e2:	4bae      	ldr	r3, [pc, #696]	; (8000a9c <BQ25713_Task+0x338>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
		}
			if ((BQ25713.adc_vbat >= 75) && (BQ25713.active_fast_charge ==1)){
 80007ea:	4bac      	ldr	r3, [pc, #688]	; (8000a9c <BQ25713_Task+0x338>)
 80007ec:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80007f0:	2b4a      	cmp	r3, #74	; 0x4a
 80007f2:	d90f      	bls.n	8000814 <BQ25713_Task+0xb0>
 80007f4:	4ba9      	ldr	r3, [pc, #676]	; (8000a9c <BQ25713_Task+0x338>)
 80007f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10a      	bne.n	8000814 <BQ25713_Task+0xb0>
				uint16_t value_write = 0x0004;
 80007fe:	2304      	movs	r3, #4
 8000800:	80fb      	strh	r3, [r7, #6]
				write_register_16( BQ25713_REG_CHARGE_CURRENT , value_write);
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	4619      	mov	r1, r3
 8000806:	2002      	movs	r0, #2
 8000808:	f000 fa1a 	bl	8000c40 <write_register_16>
				BQ25713.active_fast_charge =0;
 800080c:	4ba3      	ldr	r3, [pc, #652]	; (8000a9c <BQ25713_Task+0x338>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
	}


	if (( BQ25713.adc_vbat >= 0)&&( BQ25713.adc_vbat < 40)){
 8000814:	4ba1      	ldr	r3, [pc, #644]	; (8000a9c <BQ25713_Task+0x338>)
 8000816:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800081a:	2b27      	cmp	r3, #39	; 0x27
 800081c:	d804      	bhi.n	8000828 <BQ25713_Task+0xc4>
		BQ25713.battery_level = 0;
 800081e:	4b9f      	ldr	r3, [pc, #636]	; (8000a9c <BQ25713_Task+0x338>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8000826:	e03f      	b.n	80008a8 <BQ25713_Task+0x144>
	}
	else if (( BQ25713.adc_vbat >= 40)&&( BQ25713.adc_vbat < 60)){
 8000828:	4b9c      	ldr	r3, [pc, #624]	; (8000a9c <BQ25713_Task+0x338>)
 800082a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800082e:	2b27      	cmp	r3, #39	; 0x27
 8000830:	d909      	bls.n	8000846 <BQ25713_Task+0xe2>
 8000832:	4b9a      	ldr	r3, [pc, #616]	; (8000a9c <BQ25713_Task+0x338>)
 8000834:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8000838:	2b3b      	cmp	r3, #59	; 0x3b
 800083a:	d804      	bhi.n	8000846 <BQ25713_Task+0xe2>
		BQ25713.battery_level = 1;
 800083c:	4b97      	ldr	r3, [pc, #604]	; (8000a9c <BQ25713_Task+0x338>)
 800083e:	2201      	movs	r2, #1
 8000840:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8000844:	e030      	b.n	80008a8 <BQ25713_Task+0x144>

	}
	else if (( BQ25713.adc_vbat >= 60)&&( BQ25713.adc_vbat < 80)){
 8000846:	4b95      	ldr	r3, [pc, #596]	; (8000a9c <BQ25713_Task+0x338>)
 8000848:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800084c:	2b3b      	cmp	r3, #59	; 0x3b
 800084e:	d909      	bls.n	8000864 <BQ25713_Task+0x100>
 8000850:	4b92      	ldr	r3, [pc, #584]	; (8000a9c <BQ25713_Task+0x338>)
 8000852:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8000856:	2b4f      	cmp	r3, #79	; 0x4f
 8000858:	d804      	bhi.n	8000864 <BQ25713_Task+0x100>
		BQ25713.battery_level = 2;
 800085a:	4b90      	ldr	r3, [pc, #576]	; (8000a9c <BQ25713_Task+0x338>)
 800085c:	2202      	movs	r2, #2
 800085e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8000862:	e021      	b.n	80008a8 <BQ25713_Task+0x144>
	}
	else if (( BQ25713.adc_vbat >= 80)&&( BQ25713.adc_vbat < 95)){
 8000864:	4b8d      	ldr	r3, [pc, #564]	; (8000a9c <BQ25713_Task+0x338>)
 8000866:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800086a:	2b4f      	cmp	r3, #79	; 0x4f
 800086c:	d909      	bls.n	8000882 <BQ25713_Task+0x11e>
 800086e:	4b8b      	ldr	r3, [pc, #556]	; (8000a9c <BQ25713_Task+0x338>)
 8000870:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8000874:	2b5e      	cmp	r3, #94	; 0x5e
 8000876:	d804      	bhi.n	8000882 <BQ25713_Task+0x11e>
		BQ25713.battery_level = 3;
 8000878:	4b88      	ldr	r3, [pc, #544]	; (8000a9c <BQ25713_Task+0x338>)
 800087a:	2203      	movs	r2, #3
 800087c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8000880:	e012      	b.n	80008a8 <BQ25713_Task+0x144>
	}
	else if (( BQ25713.adc_vbat >= 95)&&( BQ25713.adc_vbat < 100)){
 8000882:	4b86      	ldr	r3, [pc, #536]	; (8000a9c <BQ25713_Task+0x338>)
 8000884:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8000888:	2b5e      	cmp	r3, #94	; 0x5e
 800088a:	d909      	bls.n	80008a0 <BQ25713_Task+0x13c>
 800088c:	4b83      	ldr	r3, [pc, #524]	; (8000a9c <BQ25713_Task+0x338>)
 800088e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8000892:	2b63      	cmp	r3, #99	; 0x63
 8000894:	d804      	bhi.n	80008a0 <BQ25713_Task+0x13c>
		BQ25713.battery_level = 4;
 8000896:	4b81      	ldr	r3, [pc, #516]	; (8000a9c <BQ25713_Task+0x338>)
 8000898:	2204      	movs	r2, #4
 800089a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800089e:	e003      	b.n	80008a8 <BQ25713_Task+0x144>
	}
	else {
		BQ25713.battery_level = 5;
 80008a0:	4b7e      	ldr	r3, [pc, #504]	; (8000a9c <BQ25713_Task+0x338>)
 80008a2:	2205      	movs	r2, #5
 80008a4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}

	if (BQ25713.is_charge == 1)
 80008a8:	4b7c      	ldr	r3, [pc, #496]	; (8000a9c <BQ25713_Task+0x338>)
 80008aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	f040 80ce 	bne.w	8000a50 <BQ25713_Task+0x2ec>
	{
		if (BQ25713.battery_level == 0){
 80008b4:	4b79      	ldr	r3, [pc, #484]	; (8000a9c <BQ25713_Task+0x338>)
 80008b6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d11d      	bne.n	80008fa <BQ25713_Task+0x196>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	4878      	ldr	r0, [pc, #480]	; (8000aa4 <BQ25713_Task+0x340>)
 80008c2:	f003 ff24 	bl	800470e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2120      	movs	r1, #32
 80008ca:	4876      	ldr	r0, [pc, #472]	; (8000aa4 <BQ25713_Task+0x340>)
 80008cc:	f003 ff06 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	4873      	ldr	r0, [pc, #460]	; (8000aa4 <BQ25713_Task+0x340>)
 80008d6:	f003 ff01 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2108      	movs	r1, #8
 80008de:	4871      	ldr	r0, [pc, #452]	; (8000aa4 <BQ25713_Task+0x340>)
 80008e0:	f003 fefc 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2104      	movs	r1, #4
 80008e8:	486e      	ldr	r0, [pc, #440]	; (8000aa4 <BQ25713_Task+0x340>)
 80008ea:	f003 fef7 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2102      	movs	r1, #2
 80008f2:	486c      	ldr	r0, [pc, #432]	; (8000aa4 <BQ25713_Task+0x340>)
 80008f4:	f003 fef2 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
		}
	}
}
 80008f8:	e160      	b.n	8000bbc <BQ25713_Task+0x458>
		else if (BQ25713.battery_level == 1)
 80008fa:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <BQ25713_Task+0x338>)
 80008fc:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000900:	2b01      	cmp	r3, #1
 8000902:	d11d      	bne.n	8000940 <BQ25713_Task+0x1dc>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	4866      	ldr	r0, [pc, #408]	; (8000aa4 <BQ25713_Task+0x340>)
 800090a:	f003 fee7 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 800090e:	2120      	movs	r1, #32
 8000910:	4864      	ldr	r0, [pc, #400]	; (8000aa4 <BQ25713_Task+0x340>)
 8000912:	f003 fefc 	bl	800470e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2110      	movs	r1, #16
 800091a:	4862      	ldr	r0, [pc, #392]	; (8000aa4 <BQ25713_Task+0x340>)
 800091c:	f003 fede 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2108      	movs	r1, #8
 8000924:	485f      	ldr	r0, [pc, #380]	; (8000aa4 <BQ25713_Task+0x340>)
 8000926:	f003 fed9 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2104      	movs	r1, #4
 800092e:	485d      	ldr	r0, [pc, #372]	; (8000aa4 <BQ25713_Task+0x340>)
 8000930:	f003 fed4 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2102      	movs	r1, #2
 8000938:	485a      	ldr	r0, [pc, #360]	; (8000aa4 <BQ25713_Task+0x340>)
 800093a:	f003 fecf 	bl	80046dc <HAL_GPIO_WritePin>
}
 800093e:	e13d      	b.n	8000bbc <BQ25713_Task+0x458>
		else if (BQ25713.battery_level == 2)
 8000940:	4b56      	ldr	r3, [pc, #344]	; (8000a9c <BQ25713_Task+0x338>)
 8000942:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000946:	2b02      	cmp	r3, #2
 8000948:	d11d      	bne.n	8000986 <BQ25713_Task+0x222>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	; 0x40
 800094e:	4855      	ldr	r0, [pc, #340]	; (8000aa4 <BQ25713_Task+0x340>)
 8000950:	f003 fec4 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2120      	movs	r1, #32
 8000958:	4852      	ldr	r0, [pc, #328]	; (8000aa4 <BQ25713_Task+0x340>)
 800095a:	f003 febf 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800095e:	2110      	movs	r1, #16
 8000960:	4850      	ldr	r0, [pc, #320]	; (8000aa4 <BQ25713_Task+0x340>)
 8000962:	f003 fed4 	bl	800470e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2108      	movs	r1, #8
 800096a:	484e      	ldr	r0, [pc, #312]	; (8000aa4 <BQ25713_Task+0x340>)
 800096c:	f003 feb6 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2104      	movs	r1, #4
 8000974:	484b      	ldr	r0, [pc, #300]	; (8000aa4 <BQ25713_Task+0x340>)
 8000976:	f003 feb1 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2102      	movs	r1, #2
 800097e:	4849      	ldr	r0, [pc, #292]	; (8000aa4 <BQ25713_Task+0x340>)
 8000980:	f003 feac 	bl	80046dc <HAL_GPIO_WritePin>
}
 8000984:	e11a      	b.n	8000bbc <BQ25713_Task+0x458>
		else if (BQ25713.battery_level == 3)
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <BQ25713_Task+0x338>)
 8000988:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800098c:	2b03      	cmp	r3, #3
 800098e:	d11d      	bne.n	80009cc <BQ25713_Task+0x268>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2140      	movs	r1, #64	; 0x40
 8000994:	4843      	ldr	r0, [pc, #268]	; (8000aa4 <BQ25713_Task+0x340>)
 8000996:	f003 fea1 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2120      	movs	r1, #32
 800099e:	4841      	ldr	r0, [pc, #260]	; (8000aa4 <BQ25713_Task+0x340>)
 80009a0:	f003 fe9c 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2110      	movs	r1, #16
 80009a8:	483e      	ldr	r0, [pc, #248]	; (8000aa4 <BQ25713_Task+0x340>)
 80009aa:	f003 fe97 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80009ae:	2108      	movs	r1, #8
 80009b0:	483c      	ldr	r0, [pc, #240]	; (8000aa4 <BQ25713_Task+0x340>)
 80009b2:	f003 feac 	bl	800470e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2104      	movs	r1, #4
 80009ba:	483a      	ldr	r0, [pc, #232]	; (8000aa4 <BQ25713_Task+0x340>)
 80009bc:	f003 fe8e 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2102      	movs	r1, #2
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <BQ25713_Task+0x340>)
 80009c6:	f003 fe89 	bl	80046dc <HAL_GPIO_WritePin>
}
 80009ca:	e0f7      	b.n	8000bbc <BQ25713_Task+0x458>
		else if (BQ25713.battery_level == 4)
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <BQ25713_Task+0x338>)
 80009ce:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d11d      	bne.n	8000a12 <BQ25713_Task+0x2ae>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2140      	movs	r1, #64	; 0x40
 80009da:	4832      	ldr	r0, [pc, #200]	; (8000aa4 <BQ25713_Task+0x340>)
 80009dc:	f003 fe7e 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2120      	movs	r1, #32
 80009e4:	482f      	ldr	r0, [pc, #188]	; (8000aa4 <BQ25713_Task+0x340>)
 80009e6:	f003 fe79 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	482d      	ldr	r0, [pc, #180]	; (8000aa4 <BQ25713_Task+0x340>)
 80009f0:	f003 fe74 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2108      	movs	r1, #8
 80009f8:	482a      	ldr	r0, [pc, #168]	; (8000aa4 <BQ25713_Task+0x340>)
 80009fa:	f003 fe6f 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80009fe:	2104      	movs	r1, #4
 8000a00:	4828      	ldr	r0, [pc, #160]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a02:	f003 fe84 	bl	800470e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a0c:	f003 fe66 	bl	80046dc <HAL_GPIO_WritePin>
}
 8000a10:	e0d4      	b.n	8000bbc <BQ25713_Task+0x458>
		    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a18:	f003 fe60 	bl	80046dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a22:	f003 fe5b 	bl	80046dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2110      	movs	r1, #16
 8000a2a:	481e      	ldr	r0, [pc, #120]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a2c:	f003 fe56 	bl	80046dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a36:	f003 fe51 	bl	80046dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a40:	f003 fe4c 	bl	80046dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2102      	movs	r1, #2
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a4a:	f003 fe47 	bl	80046dc <HAL_GPIO_WritePin>
}
 8000a4e:	e0b5      	b.n	8000bbc <BQ25713_Task+0x458>
		if (BQ25713.battery_level == 0){
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <BQ25713_Task+0x338>)
 8000a52:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d126      	bne.n	8000aa8 <BQ25713_Task+0x344>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a60:	f003 fe3c 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2120      	movs	r1, #32
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a6a:	f003 fe37 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2110      	movs	r1, #16
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a74:	f003 fe32 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a7e:	f003 fe2d 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2104      	movs	r1, #4
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a88:	f003 fe28 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <BQ25713_Task+0x340>)
 8000a92:	f003 fe23 	bl	80046dc <HAL_GPIO_WritePin>
}
 8000a96:	e091      	b.n	8000bbc <BQ25713_Task+0x458>
 8000a98:	80808081 	.word	0x80808081
 8000a9c:	2002b344 	.word	0x2002b344
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40021000 	.word	0x40021000
		else if (BQ25713.battery_level == 1)
 8000aa8:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <BQ25713_Task+0x460>)
 8000aaa:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d11e      	bne.n	8000af0 <BQ25713_Task+0x38c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2140      	movs	r1, #64	; 0x40
 8000ab6:	4844      	ldr	r0, [pc, #272]	; (8000bc8 <BQ25713_Task+0x464>)
 8000ab8:	f003 fe10 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2120      	movs	r1, #32
 8000ac0:	4841      	ldr	r0, [pc, #260]	; (8000bc8 <BQ25713_Task+0x464>)
 8000ac2:	f003 fe0b 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2110      	movs	r1, #16
 8000aca:	483f      	ldr	r0, [pc, #252]	; (8000bc8 <BQ25713_Task+0x464>)
 8000acc:	f003 fe06 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	483c      	ldr	r0, [pc, #240]	; (8000bc8 <BQ25713_Task+0x464>)
 8000ad6:	f003 fe01 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2104      	movs	r1, #4
 8000ade:	483a      	ldr	r0, [pc, #232]	; (8000bc8 <BQ25713_Task+0x464>)
 8000ae0:	f003 fdfc 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4837      	ldr	r0, [pc, #220]	; (8000bc8 <BQ25713_Task+0x464>)
 8000aea:	f003 fdf7 	bl	80046dc <HAL_GPIO_WritePin>
}
 8000aee:	e065      	b.n	8000bbc <BQ25713_Task+0x458>
		else if (BQ25713.battery_level == 2)
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <BQ25713_Task+0x460>)
 8000af2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d11e      	bne.n	8000b38 <BQ25713_Task+0x3d4>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4832      	ldr	r0, [pc, #200]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b00:	f003 fdec 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2120      	movs	r1, #32
 8000b08:	482f      	ldr	r0, [pc, #188]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b0a:	f003 fde7 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2110      	movs	r1, #16
 8000b12:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b14:	f003 fde2 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b1e:	f003 fddd 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2104      	movs	r1, #4
 8000b26:	4828      	ldr	r0, [pc, #160]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b28:	f003 fdd8 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4825      	ldr	r0, [pc, #148]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b32:	f003 fdd3 	bl	80046dc <HAL_GPIO_WritePin>
}
 8000b36:	e041      	b.n	8000bbc <BQ25713_Task+0x458>
		else if (BQ25713.battery_level == 3)
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <BQ25713_Task+0x460>)
 8000b3a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d11e      	bne.n	8000b80 <BQ25713_Task+0x41c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	4820      	ldr	r0, [pc, #128]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b48:	f003 fdc8 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2120      	movs	r1, #32
 8000b50:	481d      	ldr	r0, [pc, #116]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b52:	f003 fdc3 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2110      	movs	r1, #16
 8000b5a:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b5c:	f003 fdbe 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2108      	movs	r1, #8
 8000b64:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b66:	f003 fdb9 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b70:	f003 fdb4 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b7a:	f003 fdaf 	bl	80046dc <HAL_GPIO_WritePin>
}
 8000b7e:	e01d      	b.n	8000bbc <BQ25713_Task+0x458>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b86:	f003 fda9 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b90:	f003 fda4 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2110      	movs	r1, #16
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <BQ25713_Task+0x464>)
 8000b9a:	f003 fd9f 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <BQ25713_Task+0x464>)
 8000ba4:	f003 fd9a 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2104      	movs	r1, #4
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <BQ25713_Task+0x464>)
 8000bae:	f003 fd95 	bl	80046dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <BQ25713_Task+0x464>)
 8000bb8:	f003 fd90 	bl	80046dc <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2002b344 	.word	0x2002b344
 8000bc8:	40021000 	.word	0x40021000

08000bcc <BQ25713_Get_VBat>:

uint8_t BQ25713_Get_VBat(){
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	return BQ25713.adc_vbat;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <BQ25713_Get_VBat+0x14>)
 8000bd2:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	2002b344 	.word	0x2002b344

08000be4 <BQ25713_Get_IsCharge>:
uint8_t BQ25713_Get_IsCharge(){
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	return BQ25713.is_charge;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <BQ25713_Get_IsCharge+0x14>)
 8000bea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	2002b344 	.word	0x2002b344

08000bfc <read_register_16>:

void read_register_16(uint8_t register_pointer, uint8_t* receive_buffer)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
    // first set the register pointer to the register wanted to be read
    HAL_I2C_Master_Transmit(&BQ25713.BQ25713_I2C, BQ25713.I2C_Address, &register_pointer, 1, 100);
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <read_register_16+0x40>)
 8000c0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000c0e:	b299      	uxth	r1, r3
 8000c10:	1dfa      	adds	r2, r7, #7
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <read_register_16+0x40>)
 8000c1a:	f003 fee3 	bl	80049e4 <HAL_I2C_Master_Transmit>
    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Receive(&BQ25713.BQ25713_I2C, BQ25713.I2C_Address, receive_buffer, 2, 100);
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <read_register_16+0x40>)
 8000c20:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000c24:	b299      	uxth	r1, r3
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <read_register_16+0x40>)
 8000c30:	f003 ffd6 	bl	8004be0 <HAL_I2C_Master_Receive>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2002b344 	.word	0x2002b344

08000c40 <write_register_16>:

void write_register_16(uint8_t register_pointer, uint16_t register_value)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = register_pointer;     // 0x0C in your example
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	733b      	strb	r3, [r7, #12]
    data[1] = register_value>>8;    // MSB byte of 16bit data
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	737b      	strb	r3, [r7, #13]
    data[2] = register_value;       // LSB byte of 16bit data
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&BQ25713.BQ25713_I2C, BQ25713.I2C_Address, data, 3, 100);  // data is the start pointer of our array
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <write_register_16+0x44>)
 8000c66:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000c6a:	b299      	uxth	r1, r3
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	2364      	movs	r3, #100	; 0x64
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2303      	movs	r3, #3
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <write_register_16+0x44>)
 8000c78:	f003 feb4 	bl	80049e4 <HAL_I2C_Master_Transmit>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2002b344 	.word	0x2002b344

08000c88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <vApplicationGetIdleTaskMemory+0x30>)
 8000c9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20025924 	.word	0x20025924
 8000cb8:	20025978 	.word	0x20025978

08000cbc <Lexi_Init_Data>:
#include "lexilight.h"
#include "uart_task.h"

LEXILIGHT_DATA lexilight;

void Lexi_Init_Data() {
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	lexilight.system_clock 		= SYSTEM_CLOCK_PER_SECOND;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <Lexi_Init_Data+0x60>)
 8000cc4:	601a      	str	r2, [r3, #0]
	lexilight.duty_min 			= LEXILIGHT_DUTY_MIN;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	609a      	str	r2, [r3, #8]
	lexilight.duty_max 			= LEXILIGHT_DUTY_MAX;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000cce:	2228      	movs	r2, #40	; 0x28
 8000cd0:	605a      	str	r2, [r3, #4]
	lexilight.duty_cmd 			= LEXILIGHT_DUTY_DEFAULT;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000cd4:	2214      	movs	r2, #20
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
	lexilight.duty				= 30;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000cda:	221e      	movs	r2, #30
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
	lexilight.freq_max 			= LEXILIGHT_FREQUENCY_MAX;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000ce0:	2278      	movs	r2, #120	; 0x78
 8000ce2:	60da      	str	r2, [r3, #12]
	lexilight.freq_min 			= LEXILIGHT_FREQUENCY_MIN;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000ce6:	2241      	movs	r2, #65	; 0x41
 8000ce8:	611a      	str	r2, [r3, #16]
	lexilight.freq_cmd 			= LEXILIGHT_FREQUENCY_DEFAULT;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000cec:	2250      	movs	r2, #80	; 0x50
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
	lexilight.freq				= 90;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000cf2:	225a      	movs	r2, #90	; 0x5a
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
	lexilight.lum_level 		= LIGHT_LUM_LEVEL_0;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	lexilight.lum_value			= 20;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000d00:	2214      	movs	r2, #20
 8000d02:	64da      	str	r2, [r3, #76]	; 0x4c
	lexilight.state 			= LIGHT_STATE_WAIT_500_MS;
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <Lexi_Init_Data+0x5c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2002b3a0 	.word	0x2002b3a0
 8000d1c:	00f42400 	.word	0x00f42400

08000d20 <Lexi_Task>:


void Lexi_Task (TIM_HandleTypeDef htim_pwm_led, TIM_HandleTypeDef htim_pwm_lum_driver){
 8000d20:	b084      	sub	sp, #16
 8000d22:	b5b0      	push	{r4, r5, r7, lr}
 8000d24:	b08c      	sub	sp, #48	; 0x30
 8000d26:	af0c      	add	r7, sp, #48	; 0x30
 8000d28:	f107 0410 	add.w	r4, r7, #16
 8000d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (lexilight.state)
 8000d30:	4b61      	ldr	r3, [pc, #388]	; (8000eb8 <Lexi_Task+0x198>)
 8000d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d36:	2b07      	cmp	r3, #7
 8000d38:	f200 80b2 	bhi.w	8000ea0 <Lexi_Task+0x180>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <Lexi_Task+0x24>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d65 	.word	0x08000d65
 8000d48:	08000d73 	.word	0x08000d73
 8000d4c:	08000d85 	.word	0x08000d85
 8000d50:	08000e11 	.word	0x08000e11
 8000d54:	08000e11 	.word	0x08000e11
 8000d58:	08000dcf 	.word	0x08000dcf
 8000d5c:	08000e53 	.word	0x08000e53
 8000d60:	08000d65 	.word	0x08000d65
	{
		case LIGHT_STATE_ERROR:
		case LIGHT_STATE_INIT:
			Lexi_Init_Data();
 8000d64:	f7ff ffaa 	bl	8000cbc <Lexi_Init_Data>
			lexilight.state = LIGHT_STATE_WAIT_500_MS;
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <Lexi_Task+0x198>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			break;
 8000d70:	e09b      	b.n	8000eaa <Lexi_Task+0x18a>

		case LIGHT_STATE_WAIT_500_MS:
			HAL_Delay(500);
 8000d72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d76:	f002 fd85 	bl	8003884 <HAL_Delay>
			lexilight.state = LIGHT_STATE_SERVICE;
 8000d7a:	4b4f      	ldr	r3, [pc, #316]	; (8000eb8 <Lexi_Task+0x198>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			break;
 8000d82:	e092      	b.n	8000eaa <Lexi_Task+0x18a>

		case LIGHT_STATE_SERVICE:
			Lexi_DO_LED_PWM (htim_pwm_led);
 8000d84:	466d      	mov	r5, sp
 8000d86:	f107 0420 	add.w	r4, r7, #32
 8000d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000da0:	f000 f88e 	bl	8000ec0 <Lexi_DO_LED_PWM>
			Lexi_DO_PWM_LUM_DRIVER(htim_pwm_lum_driver);
 8000da4:	466d      	mov	r5, sp
 8000da6:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000dba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc0:	f000 f8de 	bl	8000f80 <Lexi_DO_PWM_LUM_DRIVER>
			lexilight.state = LIGHT_STATE_ON;
 8000dc4:	4b3c      	ldr	r3, [pc, #240]	; (8000eb8 <Lexi_Task+0x198>)
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			break;
 8000dcc:	e06d      	b.n	8000eaa <Lexi_Task+0x18a>

		case LIGHT_STATE_LEXI:
			Lexi_DO_LED_PWM (htim_pwm_led);
 8000dce:	466d      	mov	r5, sp
 8000dd0:	f107 0420 	add.w	r4, r7, #32
 8000dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000de0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dea:	f000 f869 	bl	8000ec0 <Lexi_DO_LED_PWM>
			Lexi_DO_PWM_LUM_DRIVER(htim_pwm_lum_driver);
 8000dee:	466d      	mov	r5, sp
 8000df0:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0a:	f000 f8b9 	bl	8000f80 <Lexi_DO_PWM_LUM_DRIVER>
			break;
 8000e0e:	e04c      	b.n	8000eaa <Lexi_Task+0x18a>

		case LIGHT_STATE_ON:
		case LIGHT_STATE_STANDARD:
			Lexi_DO_Standard_PWM(htim_pwm_led);
 8000e10:	466d      	mov	r5, sp
 8000e12:	f107 0420 	add.w	r4, r7, #32
 8000e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e2c:	f000 f88e 	bl	8000f4c <Lexi_DO_Standard_PWM>
			Lexi_DO_PWM_LUM_DRIVER(htim_pwm_lum_driver);
 8000e30:	466d      	mov	r5, sp
 8000e32:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4c:	f000 f898 	bl	8000f80 <Lexi_DO_PWM_LUM_DRIVER>
			break;
 8000e50:	e02b      	b.n	8000eaa <Lexi_Task+0x18a>

		case LIGHT_STATE_OFF:
			Lexi_DO_LED_PWM (htim_pwm_led);
 8000e52:	466d      	mov	r5, sp
 8000e54:	f107 0420 	add.w	r4, r7, #32
 8000e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6e:	f000 f827 	bl	8000ec0 <Lexi_DO_LED_PWM>
			Lexi_DO_PWM_LUM_DRIVER(htim_pwm_lum_driver);
 8000e72:	466d      	mov	r5, sp
 8000e74:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e84:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8e:	f000 f877 	bl	8000f80 <Lexi_DO_PWM_LUM_DRIVER>
			//Turn OFF EN_DRIVER
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <Lexi_Task+0x19c>)
 8000e9a:	f003 fc1f 	bl	80046dc <HAL_GPIO_WritePin>
			break;
 8000e9e:	e004      	b.n	8000eaa <Lexi_Task+0x18a>
		default:
			lexilight.state = LIGHT_STATE_ERROR;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <Lexi_Task+0x198>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			break;
 8000ea8:	bf00      	nop
		}
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000eb2:	b004      	add	sp, #16
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2002b3a0 	.word	0x2002b3a0
 8000ebc:	40020c00 	.word	0x40020c00

08000ec0 <Lexi_DO_LED_PWM>:

void Lexi_DO_LED_PWM (TIM_HandleTypeDef htim){
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	f107 0c10 	add.w	ip, r7, #16
 8000ecc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Check update Freq
	if ((	lexilight.freq_cmd >= lexilight.freq_min)
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d319      	bcc.n	8000f10 <Lexi_DO_LED_PWM+0x50>
			&& (lexilight.freq_cmd <= lexilight.freq_max))
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d813      	bhi.n	8000f10 <Lexi_DO_LED_PWM+0x50>
	{
		lexilight.freq = lexilight.freq_cmd;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eec:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000eee:	6293      	str	r3, [r2, #40]	; 0x28
		int prescaler = (uint16_t)(lexilight.system_clock/(lexilight.freq*100) - 1);
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	2164      	movs	r1, #100	; 0x64
 8000efa:	fb01 f303 	mul.w	r3, r1, r3
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_PRESCALER(&htim, prescaler);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
	}
	//Check update Dutycycle
	if ((	lexilight.duty_cmd >= lexilight.duty_min)
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d30d      	bcc.n	8000f38 <Lexi_DO_LED_PWM+0x78>
			&& (lexilight.duty_cmd <= lexilight.duty_max))
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d807      	bhi.n	8000f38 <Lexi_DO_LED_PWM+0x78>
	{
		lexilight.duty = lexilight.duty_cmd;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000f2e:	6253      	str	r3, [r2, #36]	; 0x24
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1,lexilight.duty);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <Lexi_DO_LED_PWM+0x88>)
 8000f34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	b004      	add	sp, #16
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2002b3a0 	.word	0x2002b3a0

08000f4c <Lexi_DO_Standard_PWM>:

void Lexi_DO_Standard_PWM (TIM_HandleTypeDef htim){
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	f107 0c10 	add.w	ip, r7, #16
 8000f58:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		int prescaler = 119;		//Set frequency 119 = 4KHZ
 8000f5c:	2377      	movs	r3, #119	; 0x77
 8000f5e:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_PRESCALER(&htim, prescaler);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2, lexilight.duty);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <Lexi_DO_Standard_PWM+0x30>)
 8000f6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f6c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	b004      	add	sp, #16
 8000f7a:	4770      	bx	lr
 8000f7c:	2002b3a0 	.word	0x2002b3a0

08000f80 <Lexi_DO_PWM_LUM_DRIVER>:

void Lexi_DO_PWM_LUM_DRIVER (TIM_HandleTypeDef htim){
 8000f80:	b084      	sub	sp, #16
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	f107 0c10 	add.w	ip, r7, #16
 8000f8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if ((	lexilight.lum_cmd >= 0)
			&& (lexilight.lum_cmd <= 100)
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if ((	lexilight.lum_cmd >= 0)
 8000f94:	2b64      	cmp	r3, #100	; 0x64
 8000f96:	d82a      	bhi.n	8000fee <Lexi_DO_PWM_LUM_DRIVER+0x6e>
			&& (lexilight.lum != lexilight.lum_cmd))
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d024      	beq.n	8000fee <Lexi_DO_PWM_LUM_DRIVER+0x6e>
	{
		lexilight.lum = lexilight.lum_cmd;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000faa:	62d3      	str	r3, [r2, #44]	; 0x2c
		if (lexilight.lum_cmd == 0){
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d109      	bne.n	8000fc8 <Lexi_DO_PWM_LUM_DRIVER+0x48>
			//Turn off LED if LED ON
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	4811      	ldr	r0, [pc, #68]	; (8001000 <Lexi_DO_PWM_LUM_DRIVER+0x80>)
 8000fbc:	f003 fb8e 	bl	80046dc <HAL_GPIO_WritePin>
			lexilight.state_led = 0;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
			//Turn on LED if LED OFF
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
			lexilight.state_led = 1;
		}
	}
}
 8000fc6:	e012      	b.n	8000fee <Lexi_DO_PWM_LUM_DRIVER+0x6e>
			uint8_t value = lexilight.lum; // Value from 0 to 100;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	71fb      	strb	r3, [r7, #7]
			value = 100 - value;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000fd4:	71fb      	strb	r3, [r7, #7]
			__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_3, value);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <Lexi_DO_PWM_LUM_DRIVER+0x80>)
 8000fe4:	f003 fb7a 	bl	80046dc <HAL_GPIO_WritePin>
			lexilight.state_led = 1;
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <Lexi_DO_PWM_LUM_DRIVER+0x7c>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff8:	b004      	add	sp, #16
 8000ffa:	4770      	bx	lr
 8000ffc:	2002b3a0 	.word	0x2002b3a0
 8001000:	40020c00 	.word	0x40020c00

08001004 <Lexi_Get_Led_State>:
	return lexilight.freq;
}
unsigned int Lexi_Get_Luminosity(){
	return (lexilight.lum_value);
}
unsigned int Lexi_Get_Led_State(){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	if (lexilight.state == LIGHT_STATE_LEXI){
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <Lexi_Get_Led_State+0x44>)
 800100a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800100e:	2b05      	cmp	r3, #5
 8001010:	d101      	bne.n	8001016 <Lexi_Get_Led_State+0x12>
		return 2;
 8001012:	2302      	movs	r3, #2
 8001014:	e013      	b.n	800103e <Lexi_Get_Led_State+0x3a>
	}
	else if ((lexilight.state == LIGHT_STATE_ON) || (lexilight.state == LIGHT_STATE_STANDARD)){
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <Lexi_Get_Led_State+0x44>)
 8001018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800101c:	2b03      	cmp	r3, #3
 800101e:	d004      	beq.n	800102a <Lexi_Get_Led_State+0x26>
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <Lexi_Get_Led_State+0x44>)
 8001022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001026:	2b04      	cmp	r3, #4
 8001028:	d101      	bne.n	800102e <Lexi_Get_Led_State+0x2a>
		return 1;
 800102a:	2301      	movs	r3, #1
 800102c:	e007      	b.n	800103e <Lexi_Get_Led_State+0x3a>
	}
	else if (lexilight.state == LIGHT_STATE_OFF) {
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <Lexi_Get_Led_State+0x44>)
 8001030:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001034:	2b06      	cmp	r3, #6
 8001036:	d101      	bne.n	800103c <Lexi_Get_Led_State+0x38>
		return 0;
 8001038:	2300      	movs	r3, #0
 800103a:	e000      	b.n	800103e <Lexi_Get_Led_State+0x3a>
	}
	else{
		return 0;
 800103c:	2300      	movs	r3, #0
	}
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	2002b3a0 	.word	0x2002b3a0

0800104c <Lexi_Set_State_OFF>:
//Set function
void Lexi_Set_State_OFF (){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	Lexi_Set_Slider_Last_Luminosity();
 8001050:	f000 f886 	bl	8001160 <Lexi_Set_Slider_Last_Luminosity>
	lexilight.lum_cmd = 0;
 8001054:	4b02      	ldr	r3, [pc, #8]	; (8001060 <Lexi_Set_State_OFF+0x14>)
 8001056:	2200      	movs	r2, #0
 8001058:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2002b3a0 	.word	0x2002b3a0

08001064 <Lexi_Set_State_ON>:
void Lexi_Set_State_ON (){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	//lexilight.state = LIGHT_STATE_ON;
	Lexi_Get_Slider_Last_Luminosity();
 8001068:	f000 f888 	bl	800117c <Lexi_Get_Slider_Last_Luminosity>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <Lexi_Set_State_STANDARD>:
void Lexi_Set_State_STANDARD (){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	lexilight.state = LIGHT_STATE_STANDARD;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <Lexi_Set_State_STANDARD+0x14>)
 8001076:	2204      	movs	r2, #4
 8001078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Lexi_Get_Slider_Last_Luminosity();
 800107c:	f000 f87e 	bl	800117c <Lexi_Get_Slider_Last_Luminosity>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2002b3a0 	.word	0x2002b3a0

08001088 <Lexi_Set_State_LEXI>:
void Lexi_Set_State_LEXI (){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	lexilight.state = LIGHT_STATE_LEXI;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <Lexi_Set_State_LEXI+0x14>)
 800108e:	2205      	movs	r2, #5
 8001090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Lexi_Get_Slider_Last_Luminosity();
 8001094:	f000 f872 	bl	800117c <Lexi_Get_Slider_Last_Luminosity>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2002b3a0 	.word	0x2002b3a0

080010a0 <Lexi_Set_Slider_Speed>:
void Lexi_Set_Luminosity( unsigned int value){
	lexilight.lum_value =  value;
}


bool Lexi_Set_Slider_Speed(unsigned int value ){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	if ((value  <= 50 )&& (value >= 0 )){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b32      	cmp	r3, #50	; 0x32
 80010ac:	d811      	bhi.n	80010d2 <Lexi_Set_Slider_Speed+0x32>
		lexilight.slider_speed  = value;
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <Lexi_Set_Slider_Speed+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6153      	str	r3, [r2, #20]
		lexilight.freq_cmd = (unsigned int )(LEXILIGHT_FREQUENCY_MIN + value *(LEXILIGHT_FREQUENCY_MAX - LEXILIGHT_FREQUENCY_MIN)/50);
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <Lexi_Set_Slider_Speed+0x44>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	3341      	adds	r3, #65	; 0x41
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <Lexi_Set_Slider_Speed+0x40>)
 80010cc:	6393      	str	r3, [r2, #56]	; 0x38
		return true;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <Lexi_Set_Slider_Speed+0x34>
	}
	return false;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	2002b3a0 	.word	0x2002b3a0
 80010e4:	51eb851f 	.word	0x51eb851f

080010e8 <Lexi_Set_Slider_Strength>:
bool Lexi_Set_Slider_Strength(unsigned int value ){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if ((value  <= 50 )&& (value >= 0 )){
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b32      	cmp	r3, #50	; 0x32
 80010f4:	d811      	bhi.n	800111a <Lexi_Set_Slider_Strength+0x32>
		lexilight.slider_strength  = value;
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <Lexi_Set_Slider_Strength+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6193      	str	r3, [r2, #24]
		lexilight.duty_cmd = (unsigned int )(LEXILIGHT_DUTY_MIN + value *(LEXILIGHT_DUTY_MAX - LEXILIGHT_DUTY_MIN)/50);
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	461a      	mov	r2, r3
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <Lexi_Set_Slider_Strength+0x44>)
 800110a:	fba3 2302 	umull	r2, r3, r3, r2
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	330a      	adds	r3, #10
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <Lexi_Set_Slider_Strength+0x40>)
 8001114:	6353      	str	r3, [r2, #52]	; 0x34
		return true;
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <Lexi_Set_Slider_Strength+0x34>
	}
	return false;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	2002b3a0 	.word	0x2002b3a0
 800112c:	51eb851f 	.word	0x51eb851f

08001130 <Lexi_Set_Slider_Luminosity>:
bool Lexi_Set_Slider_Luminosity(unsigned int value ){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	if ((value  <= 100 )&& (value >= 0 )){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d809      	bhi.n	8001152 <Lexi_Set_Slider_Luminosity+0x22>
		lexilight.slider_lum  = value;
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <Lexi_Set_Slider_Luminosity+0x2c>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	61d3      	str	r3, [r2, #28]
		lexilight.lum_cmd = value;
 8001144:	4a05      	ldr	r2, [pc, #20]	; (800115c <Lexi_Set_Slider_Luminosity+0x2c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	63d3      	str	r3, [r2, #60]	; 0x3c
		Lexi_Set_Slider_Last_Luminosity();
 800114a:	f000 f809 	bl	8001160 <Lexi_Set_Slider_Last_Luminosity>
		return true;
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <Lexi_Set_Slider_Luminosity+0x24>
	}
	return false;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2002b3a0 	.word	0x2002b3a0

08001160 <Lexi_Set_Slider_Last_Luminosity>:

void Lexi_Set_Slider_Last_Luminosity(){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	lexilight.slider_lum_last = lexilight.lum_cmd;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <Lexi_Set_Slider_Last_Luminosity+0x18>)
 8001166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001168:	4a03      	ldr	r2, [pc, #12]	; (8001178 <Lexi_Set_Slider_Last_Luminosity+0x18>)
 800116a:	6213      	str	r3, [r2, #32]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2002b3a0 	.word	0x2002b3a0

0800117c <Lexi_Get_Slider_Last_Luminosity>:

void Lexi_Get_Slider_Last_Luminosity(){
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	lexilight.lum_cmd = lexilight.slider_lum_last;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <Lexi_Get_Slider_Last_Luminosity+0x18>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <Lexi_Get_Slider_Last_Luminosity+0x18>)
 8001186:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2002b3a0 	.word	0x2002b3a0

08001198 <Lexi_Get_Slider_Speed>:


unsigned int Lexi_Get_Slider_Speed(){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return lexilight.slider_speed;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <Lexi_Get_Slider_Speed+0x14>)
 800119e:	695b      	ldr	r3, [r3, #20]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2002b3a0 	.word	0x2002b3a0

080011b0 <Lexi_Get_Slider_Strength>:
unsigned int Lexi_Get_Slider_Strength(){
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	return lexilight.slider_strength;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <Lexi_Get_Slider_Strength+0x14>)
 80011b6:	699b      	ldr	r3, [r3, #24]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2002b3a0 	.word	0x2002b3a0

080011c8 <Lexi_Get_Slider_Luminosity>:
unsigned int Lexi_Get_Slider_Luminosity(){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	return lexilight.slider_lum;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <Lexi_Get_Slider_Luminosity+0x14>)
 80011ce:	69db      	ldr	r3, [r3, #28]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2002b3a0 	.word	0x2002b3a0

080011e0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

UART_DATA Uart_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)  //current UART
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <HAL_UART_RxCpltCallback+0x88>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d136      	bne.n	8001260 <HAL_UART_RxCpltCallback+0x80>
	{
		uint8_t i;
		if (Uart_data.Rx_indx == 0)  //clear Rx_Buffer before receiving new data
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_UART_RxCpltCallback+0x36>
		{
			for (i=0 ; i<100 ; i++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e007      	b.n	8001210 <HAL_UART_RxCpltCallback+0x30>
				Uart_data.Rx_Buffer[i]=0;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	4a1a      	ldr	r2, [pc, #104]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 8001204:	4413      	add	r3, r2
 8001206:	2200      	movs	r2, #0
 8001208:	70da      	strb	r2, [r3, #3]
			for (i=0 ; i<100 ; i++) {
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3301      	adds	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b63      	cmp	r3, #99	; 0x63
 8001214:	d9f4      	bls.n	8001200 <HAL_UART_RxCpltCallback+0x20>
			}
		}

		if ((Uart_data.Rx_data[0]!=13)&&(Uart_data.Rx_data[0]!=10)) //if received data different from ascii 13 (enter)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	2b0d      	cmp	r3, #13
 800121c:	d012      	beq.n	8001244 <HAL_UART_RxCpltCallback+0x64>
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	2b0a      	cmp	r3, #10
 8001224:	d00e      	beq.n	8001244 <HAL_UART_RxCpltCallback+0x64>
		//if (Uart_data.Rx_data[0]!=0)
		{
			Uart_data.Rx_Buffer[Uart_data.Rx_indx]=Uart_data.Rx_data[0];    //add data to Rx_Buffer
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4619      	mov	r1, r3
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 800122e:	785a      	ldrb	r2, [r3, #1]
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 8001232:	440b      	add	r3, r1
 8001234:	70da      	strb	r2, [r3, #3]
			Uart_data.Rx_indx++;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e008      	b.n	8001256 <HAL_UART_RxCpltCallback+0x76>
		}
		else            //if received data = 13
		{
			Uart_data.Rx_indx=0;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
			Uart_data.Transfer_cplt=true;//transfer complete, data is ready to read
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_UART_RxCpltCallback+0x8c>)
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
			UART_Task();
 8001252:	f001 fde1 	bl	8002e18 <UART_Task>
		}
		HAL_UART_Receive_IT(&huart1, Uart_data.Rx_data, 1);   //activate UART receive interrupt every time
 8001256:	2201      	movs	r2, #1
 8001258:	4905      	ldr	r1, [pc, #20]	; (8001270 <HAL_UART_RxCpltCallback+0x90>)
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <HAL_UART_RxCpltCallback+0x94>)
 800125c:	f007 f9d0 	bl	8008600 <HAL_UART_Receive_IT>
	}
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40011000 	.word	0x40011000
 800126c:	2002b6ac 	.word	0x2002b6ac
 8001270:	2002b6ad 	.word	0x2002b6ad
 8001274:	2002b66c 	.word	0x2002b66c

08001278 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == TP_INT_Pin){
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001288:	d101      	bne.n	800128e <HAL_GPIO_EXTI_Callback+0x16>
		Ft6236_Read();	//Read Value From Touch Screen
 800128a:	f001 fd2b 	bl	8002ce4 <Ft6236_Read>
	}
	//Check Charge Current
	if ( GPIO_Pin == CHRG_OK_Pin){
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001294:	d109      	bne.n	80012aa <HAL_GPIO_EXTI_Callback+0x32>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129a:	4815      	ldr	r0, [pc, #84]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x78>)
 800129c:	f003 fa06 	bl	80046ac <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_EXTI_Callback+0x32>
			BQ25713_Default_Charge();
 80012a6:	f7ff fa17 	bl	80006d8 <BQ25713_Default_Charge>
		}
	}
	if ( GPIO_Pin == CMD_ON_OFF_Pin){
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012b0:	d11a      	bne.n	80012e8 <HAL_GPIO_EXTI_Callback+0x70>
		if(HAL_GPIO_ReadPin(CMD_ON_OFF_GPIO_Port, CMD_ON_OFF_Pin) == GPIO_PIN_RESET){
 80012b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b6:	480f      	ldr	r0, [pc, #60]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80012b8:	f003 f9f8 	bl	80046ac <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_GPIO_EXTI_Callback+0x5e>
			value_update = 1;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x80>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	801a      	strh	r2, [r3, #0]
			Lexi_Set_State_OFF();
 80012c8:	f7ff fec0 	bl	800104c <Lexi_Set_State_OFF>
			//Turn off bluetooth
			//HAL_GPIO_WritePin(CMD_ALIM_BLE_GPIO_Port, CMD_ALIM_BLE_Pin , GPIO_PIN_SET);
			__HAL_TIM_SET_COMPARE(&htim4 , TIM_CHANNEL_4,0);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_GPIO_EXTI_Callback+0x84>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
			//HAL_GPIO_WritePin(CMD_ALIM_BLE_GPIO_Port, CMD_ALIM_BLE_Pin ,GPIO_PIN_RESET);
			__HAL_TIM_SET_COMPARE(&htim4 , TIM_CHANNEL_4,100);
			//Turn on screen
		}
	}
}
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_EXTI_Callback+0x70>
			value_update = 0;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x80>)
 80012d8:	2200      	movs	r2, #0
 80012da:	801a      	strh	r2, [r3, #0]
			Lexi_Set_State_ON();
 80012dc:	f7ff fec2 	bl	8001064 <Lexi_Set_State_ON>
			__HAL_TIM_SET_COMPARE(&htim4 , TIM_CHANNEL_4,100);
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_GPIO_EXTI_Callback+0x84>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	20025b78 	.word	0x20025b78
 80012fc:	2002b490 	.word	0x2002b490

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b0ad      	sub	sp, #180	; 0xb4
 8001304:	af1c      	add	r7, sp, #112	; 0x70
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001306:	f002 fa7b 	bl	8003800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130a:	f000 f8d9 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130e:	f000 fd47 	bl	8001da0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001312:	f000 f971 	bl	80015f8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001316:	f000 fa21 	bl	800175c <MX_LTDC_Init>
  MX_SPI3_Init();
 800131a:	f000 fa9f 	bl	800185c <MX_SPI3_Init>
  MX_I2C3_Init();
 800131e:	f000 f9dd 	bl	80016dc <MX_I2C3_Init>
  MX_TIM3_Init();
 8001322:	f000 fc0f 	bl	8001b44 <MX_TIM3_Init>
  MX_CRC_Init();
 8001326:	f000 f953 	bl	80015d0 <MX_CRC_Init>
  MX_TIM4_Init();
 800132a:	f000 fc63 	bl	8001bf4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800132e:	f000 fbb1 	bl	8001a94 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001332:	f000 f993 	bl	800165c <MX_I2C1_Init>
  MX_UART4_Init();
 8001336:	f000 fcb5 	bl	8001ca4 <MX_UART4_Init>
  MX_UART7_Init();
 800133a:	f000 fcdd 	bl	8001cf8 <MX_UART7_Init>
  MX_USART1_UART_Init();
 800133e:	f000 fd05 	bl	8001d4c <MX_USART1_UART_Init>
  MX_TouchGFX_Init();
 8001342:	f00a fadb 	bl	800b8fc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  Lexi_Init_Data();								//Init Data LexiLight
 8001346:	f7ff fcb9 	bl	8000cbc <Lexi_Init_Data>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);		//Start PWM TIM2 Channel 1 -- LED LAMPE
 800134a:	2100      	movs	r1, #0
 800134c:	484f      	ldr	r0, [pc, #316]	; (800148c <main+0x18c>)
 800134e:	f006 fb37 	bl	80079c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		//Start PWM TIM3 Channel 3 -- LED DRIVER
 8001352:	2108      	movs	r1, #8
 8001354:	484e      	ldr	r0, [pc, #312]	; (8001490 <main+0x190>)
 8001356:	f006 fb33 	bl	80079c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);		//Start PWM TIM4 Channel 1 -- LED BACKLIGHT
 800135a:	210c      	movs	r1, #12
 800135c:	484d      	ldr	r0, [pc, #308]	; (8001494 <main+0x194>)
 800135e:	f006 fb2f 	bl	80079c0 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3,20);	//Set Duty = 0
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <main+0x190>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2214      	movs	r2, #20
 8001368:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4 , TIM_CHANNEL_4,100);	//Set Duty = 0
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <main+0x194>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2264      	movs	r2, #100	; 0x64
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim2 , TIM_CHANNEL_1,10);	//Set Duty = 0
 8001372:	4b46      	ldr	r3, [pc, #280]	; (800148c <main+0x18c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	220a      	movs	r2, #10
 8001378:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	2101      	movs	r1, #1
 800137e:	4846      	ldr	r0, [pc, #280]	; (8001498 <main+0x198>)
 8001380:	f003 f9ac 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2102      	movs	r1, #2
 8001388:	4844      	ldr	r0, [pc, #272]	; (800149c <main+0x19c>)
 800138a:	f003 f9a7 	bl	80046dc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2120      	movs	r1, #32
 8001392:	4841      	ldr	r0, [pc, #260]	; (8001498 <main+0x198>)
 8001394:	f003 f9a2 	bl	80046dc <HAL_GPIO_WritePin>

  Ft6236_Init(hi2c3);	//Tactile
 8001398:	4c41      	ldr	r4, [pc, #260]	; (80014a0 <main+0x1a0>)
 800139a:	4668      	mov	r0, sp
 800139c:	f104 0310 	add.w	r3, r4, #16
 80013a0:	2244      	movs	r2, #68	; 0x44
 80013a2:	4619      	mov	r1, r3
 80013a4:	f022 f96a 	bl	802367c <memcpy>
 80013a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ac:	f001 fc62 	bl	8002c74 <Ft6236_Init>
  HAL_GPIO_WritePin(CMD_ALIM_BLE_GPIO_Port, CMD_ALIM_BLE_Pin ,GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2140      	movs	r1, #64	; 0x40
 80013b4:	4839      	ldr	r0, [pc, #228]	; (800149c <main+0x19c>)
 80013b6:	f003 f991 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, Uart_data.Rx_data, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	4939      	ldr	r1, [pc, #228]	; (80014a4 <main+0x1a4>)
 80013be:	483a      	ldr	r0, [pc, #232]	; (80014a8 <main+0x1a8>)
 80013c0:	f007 f91e 	bl	8008600 <HAL_UART_Receive_IT>
  UART_Init();
 80013c4:	f001 fd22 	bl	8002e0c <UART_Init>
  BQ25713_Init( hi2c1);
 80013c8:	4c38      	ldr	r4, [pc, #224]	; (80014ac <main+0x1ac>)
 80013ca:	4668      	mov	r0, sp
 80013cc:	f104 0310 	add.w	r3, r4, #16
 80013d0:	2244      	movs	r2, #68	; 0x44
 80013d2:	4619      	mov	r1, r3
 80013d4:	f022 f952 	bl	802367c <memcpy>
 80013d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013dc:	f7ff f8e0 	bl	80005a0 <BQ25713_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <main+0x1b0>)
 80013e2:	f107 0420 	add.w	r4, r7, #32
 80013e6:	461d      	mov	r5, r3
 80013e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 ff71 	bl	80092e2 <osThreadCreate>
 8001400:	4602      	mov	r2, r0
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <main+0x1b4>)
 8001404:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(secondTask, StartSecondTask, osPriorityNormal, 0, 512);
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <main+0x1b8>)
 8001408:	1d3c      	adds	r4, r7, #4
 800140a:	461d      	mov	r5, r3
 800140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(secondTask), NULL);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f007 ff60 	bl	80092e2 <osThreadCreate>
 8001422:	4602      	mov	r2, r0
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <main+0x1bc>)
 8001426:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001428:	f007 ff54 	bl	80092d4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t count_1 =0;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  while (1)
  {
	  Lexi_Task (htim2, htim3);	//Led
 8001432:	4e16      	ldr	r6, [pc, #88]	; (800148c <main+0x18c>)
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <main+0x190>)
 8001436:	ac0c      	add	r4, sp, #48	; 0x30
 8001438:	461d      	mov	r5, r3
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001446:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800144a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800144e:	466d      	mov	r5, sp
 8001450:	f106 0410 	add.w	r4, r6, #16
 8001454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001460:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001464:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001468:	f7ff fc5a 	bl	8000d20 <Lexi_Task>
	  //HAL_Delay(50);
	  count_1 ++;
 800146c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001470:	3301      	adds	r3, #1
 8001472:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  if (count_1 > 15){
 8001476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800147a:	2b0f      	cmp	r3, #15
 800147c:	d9d9      	bls.n	8001432 <main+0x132>
		  BQ25713_Task();
 800147e:	f7ff f971 	bl	8000764 <BQ25713_Task>
		  count_1 = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  Lexi_Task (htim2, htim3);	//Led
 8001488:	e7d3      	b.n	8001432 <main+0x132>
 800148a:	bf00      	nop
 800148c:	2002b868 	.word	0x2002b868
 8001490:	2002b52c 	.word	0x2002b52c
 8001494:	2002b490 	.word	0x2002b490
 8001498:	40020000 	.word	0x40020000
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	2002b3fc 	.word	0x2002b3fc
 80014a4:	2002b6ad 	.word	0x2002b6ad
 80014a8:	2002b66c 	.word	0x2002b66c
 80014ac:	2002b4d0 	.word	0x2002b4d0
 80014b0:	08024924 	.word	0x08024924
 80014b4:	2002b3f8 	.word	0x2002b3f8
 80014b8:	0802494c 	.word	0x0802494c
 80014bc:	2002b3f4 	.word	0x2002b3f4

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0a0      	sub	sp, #128	; 0x80
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014ca:	2230      	movs	r2, #48	; 0x30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f022 f8df 	bl	8023692 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2230      	movs	r2, #48	; 0x30
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f022 f8d0 	bl	8023692 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(8);
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <SystemClock_Config+0x108>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014fa:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <SystemClock_Config+0x108>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <SystemClock_Config+0x108>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <SystemClock_Config+0x108>)
 8001508:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800150c:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <SystemClock_Config+0x108>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a2c      	ldr	r2, [pc, #176]	; (80015c8 <SystemClock_Config+0x108>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <SystemClock_Config+0x108>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <SystemClock_Config+0x10c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <SystemClock_Config+0x10c>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <SystemClock_Config+0x10c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800154a:	2302      	movs	r3, #2
 800154c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154e:	2301      	movs	r3, #1
 8001550:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001552:	2310      	movs	r3, #16
 8001554:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001556:	2300      	movs	r3, #0
 8001558:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800155a:	2300      	movs	r3, #0
 800155c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001562:	4618      	mov	r0, r3
 8001564:	f005 f938 	bl	80067d8 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800156e:	f000 fdb7 	bl	80020e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001576:	2300      	movs	r3, #0
 8001578:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001586:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f005 fb93 	bl	8006cb8 <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001598:	f000 fda2 	bl	80020e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800159c:	2308      	movs	r3, #8
 800159e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80015a0:	233c      	movs	r3, #60	; 0x3c
 80015a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80015a4:	2305      	movs	r3, #5
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 fd7f 	bl	80070b4 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80015bc:	f000 fd90 	bl	80020e0 <Error_Handler>
  }
}
 80015c0:	bf00      	nop
 80015c2:	3780      	adds	r7, #128	; 0x80
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_CRC_Init+0x20>)
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <MX_CRC_Init+0x24>)
 80015d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_CRC_Init+0x20>)
 80015dc:	f002 fa86 	bl	8003aec <HAL_CRC_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80015e6:	f000 fd7b 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2002b524 	.word	0x2002b524
 80015f4:	40023000 	.word	0x40023000

080015f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_DMA2D_Init+0x5c>)
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <MX_DMA2D_Init+0x60>)
 8001600:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_DMA2D_Init+0x5c>)
 800160a:	2202      	movs	r2, #2
 800160c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_DMA2D_Init+0x5c>)
 800161c:	2202      	movs	r2, #2
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <MX_DMA2D_Init+0x5c>)
 800162e:	f002 fa9b 	bl	8003b68 <HAL_DMA2D_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001638:	f000 fd52 	bl	80020e0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800163c:	2101      	movs	r1, #1
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001640:	f002 fd5c 	bl	80040fc <HAL_DMA2D_ConfigLayer>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800164a:	f000 fd49 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2002b828 	.word	0x2002b828
 8001658:	4002b000 	.word	0x4002b000

0800165c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <MX_I2C1_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <MX_I2C1_Init+0x7c>)
 800166a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_I2C1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_I2C1_Init+0x74>)
 800167a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_I2C1_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_I2C1_Init+0x74>)
 800169a:	f003 f86b 	bl	8004774 <HAL_I2C_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a4:	f000 fd1c 	bl	80020e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a8:	2100      	movs	r1, #0
 80016aa:	4809      	ldr	r0, [pc, #36]	; (80016d0 <MX_I2C1_Init+0x74>)
 80016ac:	f004 fc83 	bl	8005fb6 <HAL_I2CEx_ConfigAnalogFilter>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80016b6:	f000 fd13 	bl	80020e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ba:	2100      	movs	r1, #0
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_I2C1_Init+0x74>)
 80016be:	f004 fcb6 	bl	800602e <HAL_I2CEx_ConfigDigitalFilter>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80016c8:	f000 fd0a 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2002b4d0 	.word	0x2002b4d0
 80016d4:	40005400 	.word	0x40005400
 80016d8:	000186a0 	.word	0x000186a0

080016dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_I2C3_Init+0x74>)
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <MX_I2C3_Init+0x78>)
 80016e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_I2C3_Init+0x74>)
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <MX_I2C3_Init+0x7c>)
 80016ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_I2C3_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_I2C3_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_I2C3_Init+0x74>)
 80016fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_I2C3_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_I2C3_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_I2C3_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_I2C3_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_I2C3_Init+0x74>)
 800171a:	f003 f82b 	bl	8004774 <HAL_I2C_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001724:	f000 fcdc 	bl	80020e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	4809      	ldr	r0, [pc, #36]	; (8001750 <MX_I2C3_Init+0x74>)
 800172c:	f004 fc43 	bl	8005fb6 <HAL_I2CEx_ConfigAnalogFilter>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001736:	f000 fcd3 	bl	80020e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800173a:	2100      	movs	r1, #0
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_I2C3_Init+0x74>)
 800173e:	f004 fc76 	bl	800602e <HAL_I2CEx_ConfigDigitalFilter>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001748:	f000 fcca 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2002b3fc 	.word	0x2002b3fc
 8001754:	40005c00 	.word	0x40005c00
 8001758:	000186a0 	.word	0x000186a0

0800175c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08e      	sub	sp, #56	; 0x38
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2234      	movs	r2, #52	; 0x34
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f021 ff92 	bl	8023692 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800176e:	4b39      	ldr	r3, [pc, #228]	; (8001854 <MX_LTDC_Init+0xf8>)
 8001770:	4a39      	ldr	r2, [pc, #228]	; (8001858 <MX_LTDC_Init+0xfc>)
 8001772:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001774:	4b37      	ldr	r3, [pc, #220]	; (8001854 <MX_LTDC_Init+0xf8>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <MX_LTDC_Init+0xf8>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <MX_LTDC_Init+0xf8>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001786:	4b33      	ldr	r3, [pc, #204]	; (8001854 <MX_LTDC_Init+0xf8>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <MX_LTDC_Init+0xf8>)
 800178e:	2209      	movs	r2, #9
 8001790:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <MX_LTDC_Init+0xf8>)
 8001794:	2201      	movs	r2, #1
 8001796:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 19;
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <MX_LTDC_Init+0xf8>)
 800179a:	2213      	movs	r2, #19
 800179c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017a0:	2203      	movs	r2, #3
 80017a2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 259;
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017a6:	f240 1203 	movw	r2, #259	; 0x103
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017ae:	f240 1243 	movw	r2, #323	; 0x143
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017b6:	f240 1217 	movw	r2, #279	; 0x117
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017be:	f240 1247 	movw	r2, #327	; 0x147
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017dc:	481d      	ldr	r0, [pc, #116]	; (8001854 <MX_LTDC_Init+0xf8>)
 80017de:	f004 fc65 	bl	80060ac <HAL_LTDC_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80017e8:	f000 fc7a 	bl	80020e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80017f0:	23f0      	movs	r3, #240	; 0xf0
 80017f2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80017f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017fc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017fe:	2302      	movs	r3, #2
 8001800:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001802:	23ff      	movs	r3, #255	; 0xff
 8001804:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8001806:	23ff      	movs	r3, #255	; 0xff
 8001808:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001810:	2305      	movs	r3, #5
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x00000000;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001818:	23f0      	movs	r3, #240	; 0xf0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800181c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_LTDC_Init+0xf8>)
 800183c:	f004 fdbe 	bl	80063bc <HAL_LTDC_ConfigLayer>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001846:	f000 fc4b 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3738      	adds	r7, #56	; 0x38
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2002b5c4 	.word	0x2002b5c4
 8001858:	40016800 	.word	0x40016800

0800185c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001860:	4b8a      	ldr	r3, [pc, #552]	; (8001a8c <MX_SPI3_Init+0x230>)
 8001862:	4a8b      	ldr	r2, [pc, #556]	; (8001a90 <MX_SPI3_Init+0x234>)
 8001864:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001866:	4b89      	ldr	r3, [pc, #548]	; (8001a8c <MX_SPI3_Init+0x230>)
 8001868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800186c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800186e:	4b87      	ldr	r3, [pc, #540]	; (8001a8c <MX_SPI3_Init+0x230>)
 8001870:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001874:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001876:	4b85      	ldr	r3, [pc, #532]	; (8001a8c <MX_SPI3_Init+0x230>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187c:	4b83      	ldr	r3, [pc, #524]	; (8001a8c <MX_SPI3_Init+0x230>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001882:	4b82      	ldr	r3, [pc, #520]	; (8001a8c <MX_SPI3_Init+0x230>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001888:	4b80      	ldr	r3, [pc, #512]	; (8001a8c <MX_SPI3_Init+0x230>)
 800188a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001890:	4b7e      	ldr	r3, [pc, #504]	; (8001a8c <MX_SPI3_Init+0x230>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001896:	4b7d      	ldr	r3, [pc, #500]	; (8001a8c <MX_SPI3_Init+0x230>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800189c:	4b7b      	ldr	r3, [pc, #492]	; (8001a8c <MX_SPI3_Init+0x230>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a2:	4b7a      	ldr	r3, [pc, #488]	; (8001a8c <MX_SPI3_Init+0x230>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80018a8:	4b78      	ldr	r3, [pc, #480]	; (8001a8c <MX_SPI3_Init+0x230>)
 80018aa:	220a      	movs	r2, #10
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018ae:	4877      	ldr	r0, [pc, #476]	; (8001a8c <MX_SPI3_Init+0x230>)
 80018b0:	f005 fdbe 	bl	8007430 <HAL_SPI_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80018ba:	f000 fc11 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */


  writeReg(0x10); //Sleep IN
 80018be:	2010      	movs	r0, #16
 80018c0:	f000 fb6c 	bl	8001f9c <writeReg>
  HAL_Delay(200);
 80018c4:	20c8      	movs	r0, #200	; 0xc8
 80018c6:	f001 ffdd 	bl	8003884 <HAL_Delay>
  writeReg(0x01); //SW Reset
 80018ca:	2001      	movs	r0, #1
 80018cc:	f000 fb66 	bl	8001f9c <writeReg>
  HAL_Delay(200);
 80018d0:	20c8      	movs	r0, #200	; 0xc8
 80018d2:	f001 ffd7 	bl	8003884 <HAL_Delay>

  writeReg(0x11);//Sleep Out
 80018d6:	2011      	movs	r0, #17
 80018d8:	f000 fb60 	bl	8001f9c <writeReg>
  HAL_Delay(200);
 80018dc:	20c8      	movs	r0, #200	; 0xc8
 80018de:	f001 ffd1 	bl	8003884 <HAL_Delay>

  writeReg(0x29); //Display on
 80018e2:	2029      	movs	r0, #41	; 0x29
 80018e4:	f000 fb5a 	bl	8001f9c <writeReg>

  writeReg(0x36);	//Memory Data Access Control
 80018e8:	2036      	movs	r0, #54	; 0x36
 80018ea:	f000 fb57 	bl	8001f9c <writeReg>
  writeData(0x54);
 80018ee:	2054      	movs	r0, #84	; 0x54
 80018f0:	f000 fb78 	bl	8001fe4 <writeData>


  writeReg(0x3A);	// SPI 4 wire 16 bit color
 80018f4:	203a      	movs	r0, #58	; 0x3a
 80018f6:	f000 fb51 	bl	8001f9c <writeReg>
  writeData (0x05); //  #05
 80018fa:	2005      	movs	r0, #5
 80018fc:	f000 fb72 	bl	8001fe4 <writeData>

  writeReg(0xB0);	//Ram Control
 8001900:	20b0      	movs	r0, #176	; 0xb0
 8001902:	f000 fb4b 	bl	8001f9c <writeReg>
  writeData (0x11);//
 8001906:	2011      	movs	r0, #17
 8001908:	f000 fb6c 	bl	8001fe4 <writeData>
  writeData (0xC8);
 800190c:	20c8      	movs	r0, #200	; 0xc8
 800190e:	f000 fb69 	bl	8001fe4 <writeData>

  writeReg(0xB1);
 8001912:	20b1      	movs	r0, #177	; 0xb1
 8001914:	f000 fb42 	bl	8001f9c <writeReg>
  writeData (0xC2);//
 8001918:	20c2      	movs	r0, #194	; 0xc2
 800191a:	f000 fb63 	bl	8001fe4 <writeData>
  writeData (0xFF);
 800191e:	20ff      	movs	r0, #255	; 0xff
 8001920:	f000 fb60 	bl	8001fe4 <writeData>
  writeData (0xFF);
 8001924:	20ff      	movs	r0, #255	; 0xff
 8001926:	f000 fb5d 	bl	8001fe4 <writeData>

  writeReg(0x0B);
 800192a:	200b      	movs	r0, #11
 800192c:	f000 fb36 	bl	8001f9c <writeReg>
  writeData(0x00);
 8001930:	2000      	movs	r0, #0
 8001932:	f000 fb57 	bl	8001fe4 <writeData>

  writeReg(0x20);	//Inversion Color OFF
 8001936:	2020      	movs	r0, #32
 8001938:	f000 fb30 	bl	8001f9c <writeReg>
  writeReg(0x21);	//Inversion Color ON
 800193c:	2021      	movs	r0, #33	; 0x21
 800193e:	f000 fb2d 	bl	8001f9c <writeReg>
  //--------------------------------ST7789V Frame rate setting----------------------------------//

  writeReg(0xB2);
 8001942:	20b2      	movs	r0, #178	; 0xb2
 8001944:	f000 fb2a 	bl	8001f9c <writeReg>
  writeData (0x0C);
 8001948:	200c      	movs	r0, #12
 800194a:	f000 fb4b 	bl	8001fe4 <writeData>
  writeData (0x0C);
 800194e:	200c      	movs	r0, #12
 8001950:	f000 fb48 	bl	8001fe4 <writeData>
  writeData (0x00);
 8001954:	2000      	movs	r0, #0
 8001956:	f000 fb45 	bl	8001fe4 <writeData>
  writeData (0x33);
 800195a:	2033      	movs	r0, #51	; 0x33
 800195c:	f000 fb42 	bl	8001fe4 <writeData>
  writeData (0x33);
 8001960:	2033      	movs	r0, #51	; 0x33
 8001962:	f000 fb3f 	bl	8001fe4 <writeData>

  writeReg(0xB7);
 8001966:	20b7      	movs	r0, #183	; 0xb7
 8001968:	f000 fb18 	bl	8001f9c <writeReg>
  writeData (0x35);
 800196c:	2035      	movs	r0, #53	; 0x35
 800196e:	f000 fb39 	bl	8001fe4 <writeData>

  //---------------------------------ST7789V Power setting--------------------------------------//

  writeReg(0xBB);
 8001972:	20bb      	movs	r0, #187	; 0xbb
 8001974:	f000 fb12 	bl	8001f9c <writeReg>
  writeData (0x2b);
 8001978:	202b      	movs	r0, #43	; 0x2b
 800197a:	f000 fb33 	bl	8001fe4 <writeData>

  writeReg(0xC0);
 800197e:	20c0      	movs	r0, #192	; 0xc0
 8001980:	f000 fb0c 	bl	8001f9c <writeReg>
  writeData (0x2C);
 8001984:	202c      	movs	r0, #44	; 0x2c
 8001986:	f000 fb2d 	bl	8001fe4 <writeData>

  writeReg(0xC2);
 800198a:	20c2      	movs	r0, #194	; 0xc2
 800198c:	f000 fb06 	bl	8001f9c <writeReg>
  writeData (0x01);
 8001990:	2001      	movs	r0, #1
 8001992:	f000 fb27 	bl	8001fe4 <writeData>

  writeReg(0xC3);
 8001996:	20c3      	movs	r0, #195	; 0xc3
 8001998:	f000 fb00 	bl	8001f9c <writeReg>
  writeData (0x17);
 800199c:	2017      	movs	r0, #23
 800199e:	f000 fb21 	bl	8001fe4 <writeData>

  writeReg(0xC4);
 80019a2:	20c4      	movs	r0, #196	; 0xc4
 80019a4:	f000 fafa 	bl	8001f9c <writeReg>
  writeData (0x20);
 80019a8:	2020      	movs	r0, #32
 80019aa:	f000 fb1b 	bl	8001fe4 <writeData>

  writeReg(0xC6);
 80019ae:	20c6      	movs	r0, #198	; 0xc6
 80019b0:	f000 faf4 	bl	8001f9c <writeReg>
  writeData (0x0A);
 80019b4:	200a      	movs	r0, #10
 80019b6:	f000 fb15 	bl	8001fe4 <writeData>

  writeReg(0xD0);
 80019ba:	20d0      	movs	r0, #208	; 0xd0
 80019bc:	f000 faee 	bl	8001f9c <writeReg>
  writeData (0xA4);
 80019c0:	20a4      	movs	r0, #164	; 0xa4
 80019c2:	f000 fb0f 	bl	8001fe4 <writeData>
  writeData (0xA1);
 80019c6:	20a1      	movs	r0, #161	; 0xa1
 80019c8:	f000 fb0c 	bl	8001fe4 <writeData>

  //--------------------------------ST7789S gamma setting---------------------------------------//

  writeReg(0xE0);
 80019cc:	20e0      	movs	r0, #224	; 0xe0
 80019ce:	f000 fae5 	bl	8001f9c <writeReg>
  writeData (0xD0);
 80019d2:	20d0      	movs	r0, #208	; 0xd0
 80019d4:	f000 fb06 	bl	8001fe4 <writeData>
  writeData (0x0F);
 80019d8:	200f      	movs	r0, #15
 80019da:	f000 fb03 	bl	8001fe4 <writeData>
  writeData (0x17);
 80019de:	2017      	movs	r0, #23
 80019e0:	f000 fb00 	bl	8001fe4 <writeData>
  writeData (0x0D);
 80019e4:	200d      	movs	r0, #13
 80019e6:	f000 fafd 	bl	8001fe4 <writeData>
  writeData (0x0E);
 80019ea:	200e      	movs	r0, #14
 80019ec:	f000 fafa 	bl	8001fe4 <writeData>
  writeData (0x02);
 80019f0:	2002      	movs	r0, #2
 80019f2:	f000 faf7 	bl	8001fe4 <writeData>
  writeData (0x3D);
 80019f6:	203d      	movs	r0, #61	; 0x3d
 80019f8:	f000 faf4 	bl	8001fe4 <writeData>
  writeData (0x44);
 80019fc:	2044      	movs	r0, #68	; 0x44
 80019fe:	f000 faf1 	bl	8001fe4 <writeData>
  writeData (0x4E);
 8001a02:	204e      	movs	r0, #78	; 0x4e
 8001a04:	f000 faee 	bl	8001fe4 <writeData>
  writeData (0x0C);
 8001a08:	200c      	movs	r0, #12
 8001a0a:	f000 faeb 	bl	8001fe4 <writeData>
  writeData (0x1B);
 8001a0e:	201b      	movs	r0, #27
 8001a10:	f000 fae8 	bl	8001fe4 <writeData>
  writeData (0x1B);
 8001a14:	201b      	movs	r0, #27
 8001a16:	f000 fae5 	bl	8001fe4 <writeData>
  writeData (0x1C);
 8001a1a:	201c      	movs	r0, #28
 8001a1c:	f000 fae2 	bl	8001fe4 <writeData>
  writeData (0x1F);
 8001a20:	201f      	movs	r0, #31
 8001a22:	f000 fadf 	bl	8001fe4 <writeData>

  writeReg(0xE1);
 8001a26:	20e1      	movs	r0, #225	; 0xe1
 8001a28:	f000 fab8 	bl	8001f9c <writeReg>
  writeData (0xD0);
 8001a2c:	20d0      	movs	r0, #208	; 0xd0
 8001a2e:	f000 fad9 	bl	8001fe4 <writeData>
  writeData (0x0F);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 fad6 	bl	8001fe4 <writeData>
  writeData (0x17);
 8001a38:	2017      	movs	r0, #23
 8001a3a:	f000 fad3 	bl	8001fe4 <writeData>
  writeData (0x0D);
 8001a3e:	200d      	movs	r0, #13
 8001a40:	f000 fad0 	bl	8001fe4 <writeData>
  writeData (0x0E);
 8001a44:	200e      	movs	r0, #14
 8001a46:	f000 facd 	bl	8001fe4 <writeData>
  writeData (0x02);
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f000 faca 	bl	8001fe4 <writeData>
  writeData (0x3D);
 8001a50:	203d      	movs	r0, #61	; 0x3d
 8001a52:	f000 fac7 	bl	8001fe4 <writeData>
  writeData (0x44);
 8001a56:	2044      	movs	r0, #68	; 0x44
 8001a58:	f000 fac4 	bl	8001fe4 <writeData>
  writeData (0x4E);
 8001a5c:	204e      	movs	r0, #78	; 0x4e
 8001a5e:	f000 fac1 	bl	8001fe4 <writeData>
  writeData (0x0C);
 8001a62:	200c      	movs	r0, #12
 8001a64:	f000 fabe 	bl	8001fe4 <writeData>
  writeData (0x1B);
 8001a68:	201b      	movs	r0, #27
 8001a6a:	f000 fabb 	bl	8001fe4 <writeData>
  writeData (0x1B);
 8001a6e:	201b      	movs	r0, #27
 8001a70:	f000 fab8 	bl	8001fe4 <writeData>
  writeData (0x1C);
 8001a74:	201c      	movs	r0, #28
 8001a76:	f000 fab5 	bl	8001fe4 <writeData>
  writeData (0x1F);
 8001a7a:	201f      	movs	r0, #31
 8001a7c:	f000 fab2 	bl	8001fe4 <writeData>


  writeReg(0x29);
 8001a80:	2029      	movs	r0, #41	; 0x29
 8001a82:	f000 fa8b 	bl	8001f9c <writeReg>

  /* USER CODE END SPI3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2002b56c 	.word	0x2002b56c
 8001a90:	40003c00 	.word	0x40003c00

08001a94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	615a      	str	r2, [r3, #20]
 8001ab4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001abc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001ac0:	2277      	movs	r2, #119	; 0x77
 8001ac2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001acc:	2264      	movs	r2, #100	; 0x64
 8001ace:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001adc:	4818      	ldr	r0, [pc, #96]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001ade:	f005 ff44 	bl	800796a <HAL_TIM_PWM_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ae8:	f000 fafa 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af4:	f107 0320 	add.w	r3, r7, #32
 8001af8:	4619      	mov	r1, r3
 8001afa:	4811      	ldr	r0, [pc, #68]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001afc:	f006 fc0a 	bl	8008314 <HAL_TIMEx_MasterConfigSynchronization>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001b06:	f000 faeb 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0a:	2360      	movs	r3, #96	; 0x60
 8001b0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4807      	ldr	r0, [pc, #28]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001b22:	f006 f893 	bl	8007c4c <HAL_TIM_PWM_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b2c:	f000 fad8 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <MX_TIM2_Init+0xac>)
 8001b32:	f000 fd85 	bl	8002640 <HAL_TIM_MspPostInit>

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2002b868 	.word	0x2002b868

08001b44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <MX_TIM3_Init+0xac>)
 8001b6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001b6e:	2277      	movs	r2, #119	; 0x77
 8001b70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001b7a:	2264      	movs	r2, #100	; 0x64
 8001b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b8a:	4818      	ldr	r0, [pc, #96]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001b8c:	f005 feed 	bl	800796a <HAL_TIM_PWM_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b96:	f000 faa3 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba2:	f107 0320 	add.w	r3, r7, #32
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4810      	ldr	r0, [pc, #64]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001baa:	f006 fbb3 	bl	8008314 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001bb4:	f000 fa94 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	2360      	movs	r3, #96	; 0x60
 8001bba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001bbc:	2332      	movs	r3, #50	; 0x32
 8001bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2208      	movs	r2, #8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001bd0:	f006 f83c 	bl	8007c4c <HAL_TIM_PWM_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001bda:	f000 fa81 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bde:	4803      	ldr	r0, [pc, #12]	; (8001bec <MX_TIM3_Init+0xa8>)
 8001be0:	f000 fd2e 	bl	8002640 <HAL_TIM_MspPostInit>

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2002b52c 	.word	0x2002b52c
 8001bf0:	40000400 	.word	0x40000400

08001bf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	615a      	str	r2, [r3, #20]
 8001c14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c18:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <MX_TIM4_Init+0xac>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 119;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c1e:	2277      	movs	r2, #119	; 0x77
 8001c20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c2a:	2264      	movs	r2, #100	; 0x64
 8001c2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c3a:	4818      	ldr	r0, [pc, #96]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c3c:	f005 fe95 	bl	800796a <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001c46:	f000 fa4b 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c52:	f107 0320 	add.w	r3, r7, #32
 8001c56:	4619      	mov	r1, r3
 8001c58:	4810      	ldr	r0, [pc, #64]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c5a:	f006 fb5b 	bl	8008314 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001c64:	f000 fa3c 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c68:	2360      	movs	r3, #96	; 0x60
 8001c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c80:	f005 ffe4 	bl	8007c4c <HAL_TIM_PWM_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c8a:	f000 fa29 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <MX_TIM4_Init+0xa8>)
 8001c90:	f000 fcd6 	bl	8002640 <HAL_TIM_MspPostInit>

}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	; 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2002b490 	.word	0x2002b490
 8001ca0:	40000800 	.word	0x40000800

08001ca4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <MX_UART4_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_UART4_Init+0x4c>)
 8001cdc:	f006 fbaa 	bl	8008434 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f000 f9fb 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2002b7e8 	.word	0x2002b7e8
 8001cf4:	40004c00 	.word	0x40004c00

08001cf8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <MX_UART7_Init+0x50>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001d04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d08:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_UART7_Init+0x4c>)
 8001d30:	f006 fb80 	bl	8008434 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f000 f9d1 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2002b450 	.word	0x2002b450
 8001d48:	40007800 	.word	0x40007800

08001d4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <MX_USART1_UART_Init+0x50>)
 8001d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d72:	220c      	movs	r2, #12
 8001d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_USART1_UART_Init+0x4c>)
 8001d84:	f006 fb56 	bl	8008434 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d8e:	f000 f9a7 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2002b66c 	.word	0x2002b66c
 8001d9c:	40011000 	.word	0x40011000

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	4b71      	ldr	r3, [pc, #452]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a70      	ldr	r2, [pc, #448]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b6e      	ldr	r3, [pc, #440]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a69      	ldr	r2, [pc, #420]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b67      	ldr	r3, [pc, #412]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a62      	ldr	r2, [pc, #392]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b60      	ldr	r3, [pc, #384]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b5c      	ldr	r3, [pc, #368]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a5b      	ldr	r2, [pc, #364]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b59      	ldr	r3, [pc, #356]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a54      	ldr	r2, [pc, #336]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b52      	ldr	r3, [pc, #328]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b4e      	ldr	r3, [pc, #312]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a4d      	ldr	r2, [pc, #308]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <MX_GPIO_Init+0x1e0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CMD_LED2_Pin|CMD_LED3_Pin|CMD_LED4_Pin|CMD_LED5_Pin 
 8001e5e:	2200      	movs	r2, #0
 8001e60:	217e      	movs	r1, #126	; 0x7e
 8001e62:	4848      	ldr	r0, [pc, #288]	; (8001f84 <MX_GPIO_Init+0x1e4>)
 8001e64:	f002 fc3a 	bl	80046dc <HAL_GPIO_WritePin>
                          |CMD_LED6_Pin|CMD_LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_OTG_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f248 0120 	movw	r1, #32800	; 0x8020
 8001e6e:	4846      	ldr	r0, [pc, #280]	; (8001f88 <MX_GPIO_Init+0x1e8>)
 8001e70:	f002 fc34 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2120      	movs	r1, #32
 8001e78:	4844      	ldr	r0, [pc, #272]	; (8001f8c <MX_GPIO_Init+0x1ec>)
 8001e7a:	f002 fc2f 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TP_RESET_Pin|EN_DRIVER_Pin|CS_LCD_Pin|CMD_ALIM_LCD_Pin 
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f242 2143 	movw	r1, #8771	; 0x2243
 8001e84:	4842      	ldr	r0, [pc, #264]	; (8001f90 <MX_GPIO_Init+0x1f0>)
 8001e86:	f002 fc29 	bl	80046dc <HAL_GPIO_WritePin>
                          |CMD_ALIM_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CMD_LED2_Pin CMD_LED3_Pin CMD_LED4_Pin CMD_LED5_Pin 
                           CMD_LED6_Pin CMD_LED1_Pin */
  GPIO_InitStruct.Pin = CMD_LED2_Pin|CMD_LED3_Pin|CMD_LED4_Pin|CMD_LED5_Pin 
 8001e8a:	237e      	movs	r3, #126	; 0x7e
 8001e8c:	61fb      	str	r3, [r7, #28]
                          |CMD_LED6_Pin|CMD_LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4838      	ldr	r0, [pc, #224]	; (8001f84 <MX_GPIO_Init+0x1e4>)
 8001ea2:	f002 fa59 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_OK_Pin */
  GPIO_InitStruct.Pin = CHRG_OK_Pin;
 8001ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <MX_GPIO_Init+0x1f4>)
 8001eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHRG_OK_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4833      	ldr	r0, [pc, #204]	; (8001f88 <MX_GPIO_Init+0x1e8>)
 8001ebc:	f002 fa4c 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROCHOT_Pin */
  GPIO_InitStruct.Pin = PROCHOT_Pin;
 8001ec0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PROCHOT_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	482c      	ldr	r0, [pc, #176]	; (8001f88 <MX_GPIO_Init+0x1e8>)
 8001ed6:	f002 fa3f 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_OTG_Pin PC5 */
  GPIO_InitStruct.Pin = EN_OTG_Pin|GPIO_PIN_5;
 8001eda:	f248 0320 	movw	r3, #32800	; 0x8020
 8001ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4825      	ldr	r0, [pc, #148]	; (8001f88 <MX_GPIO_Init+0x1e8>)
 8001ef4:	f002 fa30 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481f      	ldr	r0, [pc, #124]	; (8001f8c <MX_GPIO_Init+0x1ec>)
 8001f10:	f002 fa22 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RESET_Pin EN_DRIVER_Pin CS_LCD_Pin CMD_ALIM_LCD_Pin 
                           CMD_ALIM_BLE_Pin */
  GPIO_InitStruct.Pin = TP_RESET_Pin|EN_DRIVER_Pin|CS_LCD_Pin|CMD_ALIM_LCD_Pin 
 8001f14:	f242 2343 	movw	r3, #8771	; 0x2243
 8001f18:	61fb      	str	r3, [r7, #28]
                          |CMD_ALIM_BLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4818      	ldr	r0, [pc, #96]	; (8001f90 <MX_GPIO_Init+0x1f0>)
 8001f2e:	f002 fa13 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8001f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <MX_GPIO_Init+0x1f4>)
 8001f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4812      	ldr	r0, [pc, #72]	; (8001f90 <MX_GPIO_Init+0x1f0>)
 8001f48:	f002 fa06 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : CMD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = CMD_ON_OFF_Pin;
 8001f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_GPIO_Init+0x1f8>)
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CMD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <MX_GPIO_Init+0x1f0>)
 8001f62:	f002 f9f9 	bl	8004358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2028      	movs	r0, #40	; 0x28
 8001f6c:	f001 fd86 	bl	8003a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f70:	2028      	movs	r0, #40	; 0x28
 8001f72:	f001 fd9f 	bl	8003ab4 <HAL_NVIC_EnableIRQ>

}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	; 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	10110000 	.word	0x10110000
 8001f98:	10310000 	.word	0x10310000

08001f9c <writeReg>:

/* USER CODE BEGIN 4 */
void writeReg(uint8_t reg)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2120      	movs	r1, #32
 8001faa:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <writeReg+0x3c>)
 8001fac:	f002 fb96 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <writeReg+0x40>)
 8001fb6:	f002 fb91 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &reg, 1, 10);
 8001fba:	1df9      	adds	r1, r7, #7
 8001fbc:	230a      	movs	r3, #10
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <writeReg+0x44>)
 8001fc2:	f005 fa99 	bl	80074f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4804      	ldr	r0, [pc, #16]	; (8001fdc <writeReg+0x40>)
 8001fcc:	f002 fb86 	bl	80046dc <HAL_GPIO_WritePin>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40020800 	.word	0x40020800
 8001fdc:	40020c00 	.word	0x40020c00
 8001fe0:	2002b56c 	.word	0x2002b56c

08001fe4 <writeData>:

void writeData(uint8_t data)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	480b      	ldr	r0, [pc, #44]	; (8002020 <writeData+0x3c>)
 8001ff4:	f002 fb72 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	4809      	ldr	r0, [pc, #36]	; (8002024 <writeData+0x40>)
 8001ffe:	f002 fb6d 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &data, 1, 10);
 8002002:	1df9      	adds	r1, r7, #7
 8002004:	230a      	movs	r3, #10
 8002006:	2201      	movs	r2, #1
 8002008:	4807      	ldr	r0, [pc, #28]	; (8002028 <writeData+0x44>)
 800200a:	f005 fa75 	bl	80074f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	2101      	movs	r1, #1
 8002012:	4804      	ldr	r0, [pc, #16]	; (8002024 <writeData+0x40>)
 8002014:	f002 fb62 	bl	80046dc <HAL_GPIO_WritePin>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	2002b56c 	.word	0x2002b56c

0800202c <StartSecondTask>:
void StartSecondTask(void const * argument)
{
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	b09f      	sub	sp, #124	; 0x7c
 8002030:	af1c      	add	r7, sp, #112	; 0x70
 8002032:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		Lexi_Task (htim2, htim3);	//Led
 8002034:	4e18      	ldr	r6, [pc, #96]	; (8002098 <StartSecondTask+0x6c>)
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <StartSecondTask+0x70>)
 8002038:	ac0c      	add	r4, sp, #48	; 0x30
 800203a:	461d      	mov	r5, r3
 800203c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800204c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002050:	466d      	mov	r5, sp
 8002052:	f106 0410 	add.w	r4, r6, #16
 8002056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002062:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002066:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800206a:	f7fe fe59 	bl	8000d20 <Lexi_Task>
		count++;
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <StartSecondTask+0x74>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <StartSecondTask+0x74>)
 8002078:	801a      	strh	r2, [r3, #0]
		if (count > 500){
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <StartSecondTask+0x74>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002082:	d904      	bls.n	800208e <StartSecondTask+0x62>
			BQ25713_Task();
 8002084:	f7fe fb6e 	bl	8000764 <BQ25713_Task>
			count = 0;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <StartSecondTask+0x74>)
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
		}
		osDelay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f007 f973 	bl	800937a <osDelay>
		Lexi_Task (htim2, htim3);	//Led
 8002094:	e7ce      	b.n	8002034 <StartSecondTask+0x8>
 8002096:	bf00      	nop
 8002098:	2002b868 	.word	0x2002b868
 800209c:	2002b52c 	.word	0x2002b52c
 80020a0:	20025b7a 	.word	0x20025b7a

080020a4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	MX_TouchGFX_Init();
 80020ac:	f009 fc26 	bl	800b8fc <MX_TouchGFX_Init>
	MX_TouchGFX_Process();
 80020b0:	f009 fc2a 	bl	800b908 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f007 f960 	bl	800937a <osDelay>
 80020ba:	e7fb      	b.n	80020b4 <StartDefaultTask+0x10>

080020bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020ce:	f001 fbb9 	bl	8003844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_MspInit+0x54>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_MspInit+0x54>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_MspInit+0x54>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_MspInit+0x54>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_MspInit+0x54>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_MspInit+0x54>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	210f      	movs	r1, #15
 8002132:	f06f 0001 	mvn.w	r0, #1
 8002136:	f001 fca1 	bl	8003a7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_CRC_MspInit+0x3c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10d      	bne.n	8002176 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_CRC_MspInit+0x40>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_CRC_MspInit+0x40>)
 8002164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_CRC_MspInit+0x40>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023000 	.word	0x40023000
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <HAL_DMA2D_MspInit+0x48>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d115      	bne.n	80021ca <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_DMA2D_MspInit+0x4c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <HAL_DMA2D_MspInit+0x4c>)
 80021a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_DMA2D_MspInit+0x4c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2105      	movs	r1, #5
 80021be:	205a      	movs	r0, #90	; 0x5a
 80021c0:	f001 fc5c 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80021c4:	205a      	movs	r0, #90	; 0x5a
 80021c6:	f001 fc75 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	4002b000 	.word	0x4002b000
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_DMA2D_MspDeInit+0x2c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d108      	bne.n	8002200 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_DMA2D_MspDeInit+0x30>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_DMA2D_MspDeInit+0x30>)
 80021f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80021fa:	205a      	movs	r0, #90	; 0x5a
 80021fc:	f001 fc68 	bl	8003ad0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	4002b000 	.word	0x4002b000
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a42      	ldr	r2, [pc, #264]	; (8002338 <HAL_I2C_MspInit+0x128>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12c      	bne.n	800228c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_I2C_MspInit+0x12c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a40      	ldr	r2, [pc, #256]	; (800233c <HAL_I2C_MspInit+0x12c>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b3e      	ldr	r3, [pc, #248]	; (800233c <HAL_I2C_MspInit+0x12c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224e:	23c0      	movs	r3, #192	; 0xc0
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002252:	2312      	movs	r3, #18
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002256:	2301      	movs	r3, #1
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225e:	2304      	movs	r3, #4
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4619      	mov	r1, r3
 8002268:	4835      	ldr	r0, [pc, #212]	; (8002340 <HAL_I2C_MspInit+0x130>)
 800226a:	f002 f875 	bl	8004358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_I2C_MspInit+0x12c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_I2C_MspInit+0x12c>)
 8002278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_I2C_MspInit+0x12c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800228a:	e050      	b.n	800232e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <HAL_I2C_MspInit+0x134>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d14b      	bne.n	800232e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_I2C_MspInit+0x12c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a27      	ldr	r2, [pc, #156]	; (800233c <HAL_I2C_MspInit+0x12c>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_I2C_MspInit+0x12c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b21      	ldr	r3, [pc, #132]	; (800233c <HAL_I2C_MspInit+0x12c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_I2C_MspInit+0x12c>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_I2C_MspInit+0x12c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d4:	2312      	movs	r3, #18
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022e0:	2304      	movs	r3, #4
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	4817      	ldr	r0, [pc, #92]	; (8002348 <HAL_I2C_MspInit+0x138>)
 80022ec:	f002 f834 	bl	8004358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f6:	2312      	movs	r3, #18
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fa:	2301      	movs	r3, #1
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002302:	2304      	movs	r3, #4
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	480f      	ldr	r0, [pc, #60]	; (800234c <HAL_I2C_MspInit+0x13c>)
 800230e:	f002 f823 	bl	8004358 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_I2C_MspInit+0x12c>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_I2C_MspInit+0x12c>)
 800231c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_I2C_MspInit+0x12c>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
}
 800232e:	bf00      	nop
 8002330:	3730      	adds	r7, #48	; 0x30
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40005400 	.word	0x40005400
 800233c:	40023800 	.word	0x40023800
 8002340:	40020400 	.word	0x40020400
 8002344:	40005c00 	.word	0x40005c00
 8002348:	40020800 	.word	0x40020800
 800234c:	40020000 	.word	0x40020000

08002350 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08e      	sub	sp, #56	; 0x38
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a63      	ldr	r2, [pc, #396]	; (80024fc <HAL_LTDC_MspInit+0x1ac>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f040 80c0 	bne.w	80024f4 <HAL_LTDC_MspInit+0x1a4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
 8002378:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	4a60      	ldr	r2, [pc, #384]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 800237e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002382:	6453      	str	r3, [r2, #68]	; 0x44
 8002384:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a59      	ldr	r2, [pc, #356]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6313      	str	r3, [r2, #48]	; 0x30
 80023a0:	4b57      	ldr	r3, [pc, #348]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	6313      	str	r3, [r2, #48]	; 0x30
 80023bc:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023d2:	f043 0310 	orr.w	r3, r3, #16
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b49      	ldr	r3, [pc, #292]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	4b45      	ldr	r3, [pc, #276]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4a44      	ldr	r2, [pc, #272]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	6313      	str	r3, [r2, #48]	; 0x30
 80023f4:	4b42      	ldr	r3, [pc, #264]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a3d      	ldr	r2, [pc, #244]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_LTDC_MspInit+0x1b0>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 800241c:	f641 0358 	movw	r3, #6232	; 0x1858
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800242e:	230e      	movs	r3, #14
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	4832      	ldr	r0, [pc, #200]	; (8002504 <HAL_LTDC_MspInit+0x1b4>)
 800243a:	f001 ff8d 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800243e:	2303      	movs	r3, #3
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800244e:	2309      	movs	r3, #9
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	4619      	mov	r1, r3
 8002458:	482b      	ldr	r0, [pc, #172]	; (8002508 <HAL_LTDC_MspInit+0x1b8>)
 800245a:	f001 ff7d 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 800245e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002470:	230e      	movs	r3, #14
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	4824      	ldr	r0, [pc, #144]	; (800250c <HAL_LTDC_MspInit+0x1bc>)
 800247c:	f001 ff6c 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002480:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002492:	230e      	movs	r3, #14
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249a:	4619      	mov	r1, r3
 800249c:	481a      	ldr	r0, [pc, #104]	; (8002508 <HAL_LTDC_MspInit+0x1b8>)
 800249e:	f001 ff5b 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80024a2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024b4:	230e      	movs	r3, #14
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024bc:	4619      	mov	r1, r3
 80024be:	4814      	ldr	r0, [pc, #80]	; (8002510 <HAL_LTDC_MspInit+0x1c0>)
 80024c0:	f001 ff4a 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024c4:	23c0      	movs	r3, #192	; 0xc0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024d4:	230e      	movs	r3, #14
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	480d      	ldr	r0, [pc, #52]	; (8002514 <HAL_LTDC_MspInit+0x1c4>)
 80024e0:	f001 ff3a 	bl	8004358 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2105      	movs	r1, #5
 80024e8:	2058      	movs	r0, #88	; 0x58
 80024ea:	f001 fac7 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024ee:	2058      	movs	r0, #88	; 0x58
 80024f0:	f001 fae0 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024f4:	bf00      	nop
 80024f6:	3738      	adds	r7, #56	; 0x38
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40016800 	.word	0x40016800
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40021000 	.word	0x40021000
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40020800 	.word	0x40020800

08002518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_SPI_MspInit+0x84>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d12c      	bne.n	8002594 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002572:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002584:	2306      	movs	r3, #6
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <HAL_SPI_MspInit+0x8c>)
 8002590:	f001 fee2 	bl	8004358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002594:	bf00      	nop
 8002596:	3728      	adds	r7, #40	; 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40003c00 	.word	0x40003c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020800 	.word	0x40020800

080025a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025d6:	e026      	b.n	8002626 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a16      	ldr	r2, [pc, #88]	; (8002638 <HAL_TIM_PWM_MspInit+0x90>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
}
 80025fe:	e012      	b.n	8002626 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <HAL_TIM_PWM_MspInit+0x94>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10d      	bne.n	8002626 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_TIM_PWM_MspInit+0x8c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
}
 8002626:	bf00      	nop
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800

08002640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d11f      	bne.n	80026a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800267e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002690:	2301      	movs	r3, #1
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4829      	ldr	r0, [pc, #164]	; (8002740 <HAL_TIM_MspPostInit+0x100>)
 800269c:	f001 fe5c 	bl	8004358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80026a0:	e048      	b.n	8002734 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a27      	ldr	r2, [pc, #156]	; (8002744 <HAL_TIM_MspPostInit+0x104>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d11f      	bne.n	80026ec <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a21      	ldr	r2, [pc, #132]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026da:	2302      	movs	r3, #2
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4818      	ldr	r0, [pc, #96]	; (8002748 <HAL_TIM_MspPostInit+0x108>)
 80026e6:	f001 fe37 	bl	8004358 <HAL_GPIO_Init>
}
 80026ea:	e023      	b.n	8002734 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <HAL_TIM_MspPostInit+0x10c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d11e      	bne.n	8002734 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_TIM_MspPostInit+0xfc>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002724:	2302      	movs	r3, #2
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	4808      	ldr	r0, [pc, #32]	; (8002750 <HAL_TIM_MspPostInit+0x110>)
 8002730:	f001 fe12 	bl	8004358 <HAL_GPIO_Init>
}
 8002734:	bf00      	nop
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000
 8002744:	40000400 	.word	0x40000400
 8002748:	40020800 	.word	0x40020800
 800274c:	40000800 	.word	0x40000800
 8002750:	40020c00 	.word	0x40020c00

08002754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08e      	sub	sp, #56	; 0x38
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a54      	ldr	r2, [pc, #336]	; (80028c4 <HAL_UART_MspInit+0x170>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d12c      	bne.n	80027d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_UART_MspInit+0x174>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <HAL_UART_MspInit+0x174>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_UART_MspInit+0x174>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027ae:	2303      	movs	r3, #3
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027be:	2308      	movs	r3, #8
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c6:	4619      	mov	r1, r3
 80027c8:	4840      	ldr	r0, [pc, #256]	; (80028cc <HAL_UART_MspInit+0x178>)
 80027ca:	f001 fdc5 	bl	8004358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027ce:	e074      	b.n	80028ba <HAL_UART_MspInit+0x166>
  else if(huart->Instance==UART7)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <HAL_UART_MspInit+0x17c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d135      	bne.n	8002846 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_UART7_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_UART_MspInit+0x174>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <HAL_UART_MspInit+0x174>)
 80027e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_UART_MspInit+0x174>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_UART_MspInit+0x174>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002800:	f043 0310 	orr.w	r3, r3, #16
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002812:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002824:	2308      	movs	r3, #8
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282c:	4619      	mov	r1, r3
 800282e:	4829      	ldr	r0, [pc, #164]	; (80028d4 <HAL_UART_MspInit+0x180>)
 8002830:	f001 fd92 	bl	8004358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2105      	movs	r1, #5
 8002838:	2052      	movs	r0, #82	; 0x52
 800283a:	f001 f91f 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800283e:	2052      	movs	r0, #82	; 0x52
 8002840:	f001 f938 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
}
 8002844:	e039      	b.n	80028ba <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <HAL_UART_MspInit+0x184>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d134      	bne.n	80028ba <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_UART_MspInit+0x174>)
 800285a:	f043 0310 	orr.w	r3, r3, #16
 800285e:	6453      	str	r3, [r2, #68]	; 0x44
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6313      	str	r3, [r2, #48]	; 0x30
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_UART_MspInit+0x174>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002888:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800289a:	2307      	movs	r3, #7
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	4619      	mov	r1, r3
 80028a4:	4809      	ldr	r0, [pc, #36]	; (80028cc <HAL_UART_MspInit+0x178>)
 80028a6:	f001 fd57 	bl	8004358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2105      	movs	r1, #5
 80028ae:	2025      	movs	r0, #37	; 0x25
 80028b0:	f001 f8e4 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028b4:	2025      	movs	r0, #37	; 0x25
 80028b6:	f001 f8fd 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3738      	adds	r7, #56	; 0x38
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40004c00 	.word	0x40004c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40007800 	.word	0x40007800
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40011000 	.word	0x40011000

080028dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80028ec:	2200      	movs	r2, #0
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	2019      	movs	r0, #25
 80028f2:	f001 f8c3 	bl	8003a7c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80028f6:	2019      	movs	r0, #25
 80028f8:	f001 f8dc 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_InitTick+0xa0>)
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_InitTick+0xa0>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6453      	str	r3, [r2, #68]	; 0x44
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_InitTick+0xa0>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002918:	f107 0210 	add.w	r2, r7, #16
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f004 fb94 	bl	8007050 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002928:	f004 fb7e 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 800292c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	4a13      	ldr	r2, [pc, #76]	; (8002980 <HAL_InitTick+0xa4>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	3b01      	subs	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_InitTick+0xa8>)
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_InitTick+0xac>)
 8002940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_InitTick+0xa8>)
 8002944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002948:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_InitTick+0xa8>)
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_InitTick+0xa8>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_InitTick+0xa8>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800295c:	4809      	ldr	r0, [pc, #36]	; (8002984 <HAL_InitTick+0xa8>)
 800295e:	f004 ffab 	bl	80078b8 <HAL_TIM_Base_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002968:	4806      	ldr	r0, [pc, #24]	; (8002984 <HAL_InitTick+0xa8>)
 800296a:	f004 ffda 	bl	8007922 <HAL_TIM_Base_Start_IT>
 800296e:	4603      	mov	r3, r0
 8002970:	e000      	b.n	8002974 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	3730      	adds	r7, #48	; 0x30
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	431bde83 	.word	0x431bde83
 8002984:	2002b8a8 	.word	0x2002b8a8
 8002988:	40010000 	.word	0x40010000

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800299e:	e7fe      	b.n	800299e <HardFault_Handler+0x4>

080029a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <MemManage_Handler+0x4>

080029a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029aa:	e7fe      	b.n	80029aa <BusFault_Handler+0x4>

080029ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <UsageFault_Handler+0x4>

080029b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029c6:	f005 f839 	bl	8007a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2002b8a8 	.word	0x2002b8a8

080029d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <USART1_IRQHandler+0x10>)
 80029da:	f005 fe67 	bl	80086ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2002b66c 	.word	0x2002b66c

080029e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80029ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029f0:	f001 fea8 	bl	8004744 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80029f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029f8:	f001 fea4 	bl	8004744 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80029fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a00:	f001 fea0 	bl	8004744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <UART7_IRQHandler+0x10>)
 8002a0e:	f005 fe4d 	bl	80086ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2002b450 	.word	0x2002b450

08002a1c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <LTDC_IRQHandler+0x10>)
 8002a22:	f003 fc13 	bl	800624c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2002b5c4 	.word	0x2002b5c4

08002a30 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <DMA2D_IRQHandler+0x10>)
 8002a36:	f001 fa50 	bl	8003eda <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2002b828 	.word	0x2002b828

08002a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
	return 1;
 8002a48:	2301      	movs	r3, #1
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_kill>:

int _kill(int pid, int sig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a5e:	f020 fdc1 	bl	80235e4 <__errno>
 8002a62:	4602      	mov	r2, r0
 8002a64:	2316      	movs	r3, #22
 8002a66:	6013      	str	r3, [r2, #0]
	return -1;
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_exit>:

void _exit (int status)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ffe7 	bl	8002a54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a86:	e7fe      	b.n	8002a86 <_exit+0x12>

08002a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e00a      	b.n	8002ab0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a9a:	f3af 8000 	nop.w
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	60ba      	str	r2, [r7, #8]
 8002aa6:	b2ca      	uxtb	r2, r1
 8002aa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3301      	adds	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	dbf0      	blt.n	8002a9a <_read+0x12>
	}

return len;
 8002ab8:	687b      	ldr	r3, [r7, #4]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e009      	b.n	8002ae8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	60ba      	str	r2, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	dbf1      	blt.n	8002ad4 <_write+0x12>
	}
	return len;
 8002af0:	687b      	ldr	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_close>:

int _close(int file)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
	return -1;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b22:	605a      	str	r2, [r3, #4]
	return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <_isatty>:

int _isatty(int file)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	return 1;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
	return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <_sbrk+0x50>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x16>
		heap_end = &end;
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <_sbrk+0x50>)
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <_sbrk+0x54>)
 8002b78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <_sbrk+0x50>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <_sbrk+0x50>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	466a      	mov	r2, sp
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d907      	bls.n	8002b9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002b8e:	f020 fd29 	bl	80235e4 <__errno>
 8002b92:	4602      	mov	r2, r0
 8002b94:	230c      	movs	r3, #12
 8002b96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	e006      	b.n	8002bac <_sbrk+0x48>
	}

	heap_end += incr;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <_sbrk+0x50>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <_sbrk+0x50>)
 8002ba8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20025b7c 	.word	0x20025b7c
 8002bb8:	2002b950 	.word	0x2002b950

08002bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <SystemInit+0x28>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <SystemInit+0x28>)
 8002bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SystemInit+0x28>)
 8002bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <Ft6236_Read_Register>:
FT6236_DATA FT6236;



void Ft6236_Read_Register(uint8_t register_pointer, uint8_t* receive_buffer , uint8_t buffer_size)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	4603      	mov	r3, r0
 8002bf0:	6039      	str	r1, [r7, #0]
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Read(&FT6236.FT6236_I2C, FT6236.FT6236_I2C_Address, (uint16_t)register_pointer, I2C_MEMADD_SIZE_8BIT, receive_buffer, buffer_size, 100);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <Ft6236_Read_Register+0x44>)
 8002bfe:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	b298      	uxth	r0, r3
 8002c06:	79bb      	ldrb	r3, [r7, #6]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2264      	movs	r2, #100	; 0x64
 8002c0c:	9202      	str	r2, [sp, #8]
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2301      	movs	r3, #1
 8002c16:	4602      	mov	r2, r0
 8002c18:	4804      	ldr	r0, [pc, #16]	; (8002c2c <Ft6236_Read_Register+0x44>)
 8002c1a:	f002 fb01 	bl	8005220 <HAL_I2C_Mem_Read>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
	{
	    /* Re-Initialize the BUS */
		//Init
	}
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2002b8e8 	.word	0x2002b8e8

08002c30 <Ft6236_Write_Register>:

void Ft6236_Write_Register(uint8_t register_pointer, uint8_t register_value)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af04      	add	r7, sp, #16
 8002c36:	4603      	mov	r3, r0
 8002c38:	460a      	mov	r2, r1
 8002c3a:	71fb      	strb	r3, [r7, #7]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(&FT6236.FT6236_I2C, FT6236.FT6236_I2C_Address, (uint16_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &register_value, 1, 100);
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <Ft6236_Write_Register+0x40>)
 8002c46:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	2364      	movs	r3, #100	; 0x64
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	2301      	movs	r3, #1
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	1dbb      	adds	r3, r7, #6
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4804      	ldr	r0, [pc, #16]	; (8002c70 <Ft6236_Write_Register+0x40>)
 8002c5e:	f002 f9e5 	bl	800502c <HAL_I2C_Mem_Write>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
	{
		/* Re-Initialize the BUS */
		//Init
	}

}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2002b8e8 	.word	0x2002b8e8

08002c74 <Ft6236_Init>:


void Ft6236_Init(I2C_HandleTypeDef i2c_handle){
 8002c74:	b084      	sub	sp, #16
 8002c76:	b580      	push	{r7, lr}
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	f107 0c08 	add.w	ip, r7, #8
 8002c7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(TP_RESET_GPIO_Port , TP_RESET_Pin , GPIO_PIN_SET);
 8002c82:	2201      	movs	r2, #1
 8002c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c88:	4814      	ldr	r0, [pc, #80]	; (8002cdc <Ft6236_Init+0x68>)
 8002c8a:	f001 fd27 	bl	80046dc <HAL_GPIO_WritePin>
	FT6236.FT6236_I2C_Address = FT6236_ADDRESS;
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <Ft6236_Init+0x6c>)
 8002c90:	2270      	movs	r2, #112	; 0x70
 8002c92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	FT6236.FT6236_I2C = i2c_handle;
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <Ft6236_Init+0x6c>)
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f107 0108 	add.w	r1, r7, #8
 8002c9e:	2354      	movs	r3, #84	; 0x54
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f020 fceb 	bl	802367c <memcpy>
	FT6236.FT6236_Contact_Detected =  FALSE;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <Ft6236_Init+0x6c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	FT6236.PosX = 0;
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <Ft6236_Init+0x6c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	FT6236.PosY = 0;
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <Ft6236_Init+0x6c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	Ft6236_Write_Register (0x00 , 0x00);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7ff ffb5 	bl	8002c30 <Ft6236_Write_Register>
	Ft6236_Write_Register (0xA4 , 0x00);
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	20a4      	movs	r0, #164	; 0xa4
 8002cca:	f7ff ffb1 	bl	8002c30 <Ft6236_Write_Register>
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cd6:	b004      	add	sp, #16
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40020c00 	.word	0x40020c00
 8002ce0:	2002b8e8 	.word	0x2002b8e8

08002ce4 <Ft6236_Read>:

void Ft6236_Read(void){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
	uint8_t data[3] = {0};
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	2100      	movs	r1, #0
 8002cee:	460a      	mov	r2, r1
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	460a      	mov	r2, r1
 8002cf4:	709a      	strb	r2, [r3, #2]
	uint8_t Event_Flag = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	71fb      	strb	r3, [r7, #7]

	Ft6236_Read_Register( 0x03, data , 2);
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	2003      	movs	r0, #3
 8002d02:	f7ff ff71 	bl	8002be8 <Ft6236_Read_Register>

	Event_Flag = (data[0] & 0xC0) >> 6;
 8002d06:	793b      	ldrb	r3, [r7, #4]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	71fb      	strb	r3, [r7, #7]
	if (Event_Flag == 2){	//Detect a contact
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d133      	bne.n	8002d7a <Ft6236_Read+0x96>
		//Do Something
		FT6236.FT6236_Contact_Detected =  true;
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <Ft6236_Read+0xa8>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

		//Read PosX
		data[0] &= 0x07;
 8002d1a:	793b      	ldrb	r3, [r7, #4]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	713b      	strb	r3, [r7, #4]
		FT6236.PosX = 240 - (data[0]<<8 | data[1]);
 8002d24:	793b      	ldrb	r3, [r7, #4]
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	b21a      	sxth	r2, r3
 8002d2a:	797b      	ldrb	r3, [r7, #5]
 8002d2c:	b21b      	sxth	r3, r3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <Ft6236_Read+0xa8>)
 8002d3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		//Read PosY
		Ft6236_Read_Register( 0x05, data , 2);
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	2202      	movs	r2, #2
 8002d44:	4619      	mov	r1, r3
 8002d46:	2005      	movs	r0, #5
 8002d48:	f7ff ff4e 	bl	8002be8 <Ft6236_Read_Register>
		data[0] &= 0x7;
 8002d4c:	793b      	ldrb	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	713b      	strb	r3, [r7, #4]
		FT6236.PosY = 320 - ((data[0] & 0x07)<<8 | data[1]);
 8002d56:	793b      	ldrb	r3, [r7, #4]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d60:	b21a      	sxth	r2, r3
 8002d62:	797b      	ldrb	r3, [r7, #5]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <Ft6236_Read+0xa8>)
 8002d74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	}
	else {
		//Do Something
		FT6236.FT6236_Contact_Detected =  false;
	}
}
 8002d78:	e003      	b.n	8002d82 <Ft6236_Read+0x9e>
		FT6236.FT6236_Contact_Detected =  false;
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <Ft6236_Read+0xa8>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2002b8e8 	.word	0x2002b8e8

08002d90 <Ft6236_TS_DetectTouch>:

bool Ft6236_TS_DetectTouch(){
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
	return FT6236.FT6236_Contact_Detected;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <Ft6236_TS_DetectTouch+0x14>)
 8002d96:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	2002b8e8 	.word	0x2002b8e8

08002da8 <Ft6236_TS_GetX>:

uint16_t Ft6236_TS_GetX(){
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
	return FT6236.PosX;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <Ft6236_TS_GetX+0x14>)
 8002dae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	2002b8e8 	.word	0x2002b8e8

08002dc0 <Ft6236_TS_GetY>:

uint16_t Ft6236_TS_GetY(){
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
	return FT6236.PosY;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <Ft6236_TS_GetY+0x14>)
 8002dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	2002b8e8 	.word	0x2002b8e8

08002dd8 <BSP_TS_GetState>:

void BSP_TS_GetState(TS_StateTypeDef* TsState){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	TsState->TouchDetected = Ft6236_TS_DetectTouch();
 8002de0:	f7ff ffd6 	bl	8002d90 <Ft6236_TS_DetectTouch>
 8002de4:	4603      	mov	r3, r0
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	801a      	strh	r2, [r3, #0]
	TsState->X = Ft6236_TS_GetX();
 8002dec:	f7ff ffdc 	bl	8002da8 <Ft6236_TS_GetX>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	805a      	strh	r2, [r3, #2]
	TsState->Y = Ft6236_TS_GetY();
 8002df8:	f7ff ffe2 	bl	8002dc0 <Ft6236_TS_GetY>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	809a      	strh	r2, [r3, #4]
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <UART_Init>:
		HAL_UART_Receive_IT(&huart5, Uart_data.Rx_data, 1);   //activate UART receive interrupt every time
	}
}
*/
//UART MAIN TASK
void UART_Init(){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	//HAL_UART_Receive_IT(&huart5, Rx_data, 1);
	UART_Reset_CMD();
 8002e10:	f000 fa8e 	bl	8003330 <UART_Reset_CMD>
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <UART_Task>:

void UART_Task(){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
	if (Uart_data.Transfer_cplt)
 8002e1e:	4b90      	ldr	r3, [pc, #576]	; (8003060 <UART_Task+0x248>)
 8002e20:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 827c 	beq.w	8003322 <UART_Task+0x50a>
	{
		if 	((  Uart_data.Rx_Buffer[0]  == 's')
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <UART_Task+0x248>)
 8002e2c:	78db      	ldrb	r3, [r3, #3]
 8002e2e:	2b73      	cmp	r3, #115	; 0x73
 8002e30:	d129      	bne.n	8002e86 <UART_Task+0x6e>
			&& (Uart_data.Rx_Buffer[1]  == 'p')
 8002e32:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <UART_Task+0x248>)
 8002e34:	791b      	ldrb	r3, [r3, #4]
 8002e36:	2b70      	cmp	r3, #112	; 0x70
 8002e38:	d125      	bne.n	8002e86 <UART_Task+0x6e>
			&& (Uart_data.Rx_Buffer[2]  == 'e')
 8002e3a:	4b89      	ldr	r3, [pc, #548]	; (8003060 <UART_Task+0x248>)
 8002e3c:	795b      	ldrb	r3, [r3, #5]
 8002e3e:	2b65      	cmp	r3, #101	; 0x65
 8002e40:	d121      	bne.n	8002e86 <UART_Task+0x6e>
			&& (Uart_data.Rx_Buffer[3]  == 'e')
 8002e42:	4b87      	ldr	r3, [pc, #540]	; (8003060 <UART_Task+0x248>)
 8002e44:	799b      	ldrb	r3, [r3, #6]
 8002e46:	2b65      	cmp	r3, #101	; 0x65
 8002e48:	d11d      	bne.n	8002e86 <UART_Task+0x6e>
			&& (Uart_data.Rx_Buffer[4]  == 'd'))
 8002e4a:	4b85      	ldr	r3, [pc, #532]	; (8003060 <UART_Task+0x248>)
 8002e4c:	79db      	ldrb	r3, [r3, #7]
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d119      	bne.n	8002e86 <UART_Task+0x6e>
		{
			uint8_t value = (Uart_data.Rx_Buffer[5] - '0')*10 + (Uart_data.Rx_Buffer[6] - '0');
 8002e52:	4b83      	ldr	r3, [pc, #524]	; (8003060 <UART_Task+0x248>)
 8002e54:	7a1b      	ldrb	r3, [r3, #8]
 8002e56:	461a      	mov	r2, r3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <UART_Task+0x248>)
 8002e62:	7a5b      	ldrb	r3, [r3, #9]
 8002e64:	4413      	add	r3, r2
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	3b10      	subs	r3, #16
 8002e6a:	71fb      	strb	r3, [r7, #7]
			if ((value >=0) && (value <=50)){
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	2b32      	cmp	r3, #50	; 0x32
 8002e70:	d806      	bhi.n	8002e80 <UART_Task+0x68>
				Lexi_Set_Slider_Speed(value);
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe f913 	bl	80010a0 <Lexi_Set_Slider_Speed>
				UART_Send_True();
 8002e7a:	f000 fbe5 	bl	8003648 <UART_Send_True>
		{
 8002e7e:	e24c      	b.n	800331a <UART_Task+0x502>
			}
			else{
				UART_Send_False();
 8002e80:	f000 fc04 	bl	800368c <UART_Send_False>
		{
 8002e84:	e249      	b.n	800331a <UART_Task+0x502>
			}
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 's')
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <UART_Task+0x248>)
 8002e88:	78db      	ldrb	r3, [r3, #3]
 8002e8a:	2b73      	cmp	r3, #115	; 0x73
 8002e8c:	d135      	bne.n	8002efa <UART_Task+0xe2>
					&& (Uart_data.Rx_Buffer[1]  == 't')
 8002e8e:	4b74      	ldr	r3, [pc, #464]	; (8003060 <UART_Task+0x248>)
 8002e90:	791b      	ldrb	r3, [r3, #4]
 8002e92:	2b74      	cmp	r3, #116	; 0x74
 8002e94:	d131      	bne.n	8002efa <UART_Task+0xe2>
					&& (Uart_data.Rx_Buffer[2]  == 'r')
 8002e96:	4b72      	ldr	r3, [pc, #456]	; (8003060 <UART_Task+0x248>)
 8002e98:	795b      	ldrb	r3, [r3, #5]
 8002e9a:	2b72      	cmp	r3, #114	; 0x72
 8002e9c:	d12d      	bne.n	8002efa <UART_Task+0xe2>
					&& (Uart_data.Rx_Buffer[3]  == 'e')
 8002e9e:	4b70      	ldr	r3, [pc, #448]	; (8003060 <UART_Task+0x248>)
 8002ea0:	799b      	ldrb	r3, [r3, #6]
 8002ea2:	2b65      	cmp	r3, #101	; 0x65
 8002ea4:	d129      	bne.n	8002efa <UART_Task+0xe2>
					&& (Uart_data.Rx_Buffer[4]  == 'n')
 8002ea6:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <UART_Task+0x248>)
 8002ea8:	79db      	ldrb	r3, [r3, #7]
 8002eaa:	2b6e      	cmp	r3, #110	; 0x6e
 8002eac:	d125      	bne.n	8002efa <UART_Task+0xe2>
					&& (Uart_data.Rx_Buffer[5]  == 'g')
 8002eae:	4b6c      	ldr	r3, [pc, #432]	; (8003060 <UART_Task+0x248>)
 8002eb0:	7a1b      	ldrb	r3, [r3, #8]
 8002eb2:	2b67      	cmp	r3, #103	; 0x67
 8002eb4:	d121      	bne.n	8002efa <UART_Task+0xe2>
					&& (Uart_data.Rx_Buffer[6]  == 't')
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <UART_Task+0x248>)
 8002eb8:	7a5b      	ldrb	r3, [r3, #9]
 8002eba:	2b74      	cmp	r3, #116	; 0x74
 8002ebc:	d11d      	bne.n	8002efa <UART_Task+0xe2>
					&& (Uart_data.Rx_Buffer[7]  == 'h'))
 8002ebe:	4b68      	ldr	r3, [pc, #416]	; (8003060 <UART_Task+0x248>)
 8002ec0:	7a9b      	ldrb	r3, [r3, #10]
 8002ec2:	2b68      	cmp	r3, #104	; 0x68
 8002ec4:	d119      	bne.n	8002efa <UART_Task+0xe2>
		{
			uint8_t value =(Uart_data.Rx_Buffer[8] - '0')*10 + (Uart_data.Rx_Buffer[9] - '0');
 8002ec6:	4b66      	ldr	r3, [pc, #408]	; (8003060 <UART_Task+0x248>)
 8002ec8:	7adb      	ldrb	r3, [r3, #11]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	0092      	lsls	r2, r2, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <UART_Task+0x248>)
 8002ed6:	7b1b      	ldrb	r3, [r3, #12]
 8002ed8:	4413      	add	r3, r2
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3b10      	subs	r3, #16
 8002ede:	71bb      	strb	r3, [r7, #6]
			if ((value >=0) && (value <=50)){
 8002ee0:	79bb      	ldrb	r3, [r7, #6]
 8002ee2:	2b32      	cmp	r3, #50	; 0x32
 8002ee4:	d806      	bhi.n	8002ef4 <UART_Task+0xdc>
				Lexi_Set_Slider_Strength(value);
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe f8fd 	bl	80010e8 <Lexi_Set_Slider_Strength>
				UART_Send_True();
 8002eee:	f000 fbab 	bl	8003648 <UART_Send_True>
		{
 8002ef2:	e212      	b.n	800331a <UART_Task+0x502>
			}
			else{
				UART_Send_False();
 8002ef4:	f000 fbca 	bl	800368c <UART_Send_False>
		{
 8002ef8:	e20f      	b.n	800331a <UART_Task+0x502>
			}
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 'l')
 8002efa:	4b59      	ldr	r3, [pc, #356]	; (8003060 <UART_Task+0x248>)
 8002efc:	78db      	ldrb	r3, [r3, #3]
 8002efe:	2b6c      	cmp	r3, #108	; 0x6c
 8002f00:	d12f      	bne.n	8002f62 <UART_Task+0x14a>
					&& (Uart_data.Rx_Buffer[1]  == 'u')
 8002f02:	4b57      	ldr	r3, [pc, #348]	; (8003060 <UART_Task+0x248>)
 8002f04:	791b      	ldrb	r3, [r3, #4]
 8002f06:	2b75      	cmp	r3, #117	; 0x75
 8002f08:	d12b      	bne.n	8002f62 <UART_Task+0x14a>
					&& (Uart_data.Rx_Buffer[2]  == 'm'))
 8002f0a:	4b55      	ldr	r3, [pc, #340]	; (8003060 <UART_Task+0x248>)
 8002f0c:	795b      	ldrb	r3, [r3, #5]
 8002f0e:	2b6d      	cmp	r3, #109	; 0x6d
 8002f10:	d127      	bne.n	8002f62 <UART_Task+0x14a>
		{
			uint8_t value = (Uart_data.Rx_Buffer[3] - '0')*100 + (Uart_data.Rx_Buffer[4] - '0')*10 + (Uart_data.Rx_Buffer[5] - '0');
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <UART_Task+0x248>)
 8002f14:	799b      	ldrb	r3, [r3, #6]
 8002f16:	461a      	mov	r2, r3
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	0091      	lsls	r1, r2, #2
 8002f20:	461a      	mov	r2, r3
 8002f22:	460b      	mov	r3, r1
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <UART_Task+0x248>)
 8002f2c:	79db      	ldrb	r3, [r3, #7]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	0089      	lsls	r1, r1, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	4b48      	ldr	r3, [pc, #288]	; (8003060 <UART_Task+0x248>)
 8002f3e:	7a1b      	ldrb	r3, [r3, #8]
 8002f40:	4413      	add	r3, r2
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3330      	adds	r3, #48	; 0x30
 8002f46:	717b      	strb	r3, [r7, #5]
			if ((value >=0) && (value <=100)){
 8002f48:	797b      	ldrb	r3, [r7, #5]
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d806      	bhi.n	8002f5c <UART_Task+0x144>
				Lexi_Set_Slider_Luminosity(value);
 8002f4e:	797b      	ldrb	r3, [r7, #5]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe f8ed 	bl	8001130 <Lexi_Set_Slider_Luminosity>
				UART_Send_True();
 8002f56:	f000 fb77 	bl	8003648 <UART_Send_True>
		{
 8002f5a:	e1de      	b.n	800331a <UART_Task+0x502>
			}
			else{
				UART_Send_False();
 8002f5c:	f000 fb96 	bl	800368c <UART_Send_False>
		{
 8002f60:	e1db      	b.n	800331a <UART_Task+0x502>
			}
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 'r')
 8002f62:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <UART_Task+0x248>)
 8002f64:	78db      	ldrb	r3, [r3, #3]
 8002f66:	2b72      	cmp	r3, #114	; 0x72
 8002f68:	d11c      	bne.n	8002fa4 <UART_Task+0x18c>
					&& (Uart_data.Rx_Buffer[1]  == 'e')
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <UART_Task+0x248>)
 8002f6c:	791b      	ldrb	r3, [r3, #4]
 8002f6e:	2b65      	cmp	r3, #101	; 0x65
 8002f70:	d118      	bne.n	8002fa4 <UART_Task+0x18c>
					&& (Uart_data.Rx_Buffer[2]  == 'a')
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <UART_Task+0x248>)
 8002f74:	795b      	ldrb	r3, [r3, #5]
 8002f76:	2b61      	cmp	r3, #97	; 0x61
 8002f78:	d114      	bne.n	8002fa4 <UART_Task+0x18c>
					&& (Uart_data.Rx_Buffer[3]  == 'd')
 8002f7a:	4b39      	ldr	r3, [pc, #228]	; (8003060 <UART_Task+0x248>)
 8002f7c:	799b      	ldrb	r3, [r3, #6]
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d110      	bne.n	8002fa4 <UART_Task+0x18c>
					&& (Uart_data.Rx_Buffer[4]  == 'i')
 8002f82:	4b37      	ldr	r3, [pc, #220]	; (8003060 <UART_Task+0x248>)
 8002f84:	79db      	ldrb	r3, [r3, #7]
 8002f86:	2b69      	cmp	r3, #105	; 0x69
 8002f88:	d10c      	bne.n	8002fa4 <UART_Task+0x18c>
					&& (Uart_data.Rx_Buffer[5]  == 'n')
 8002f8a:	4b35      	ldr	r3, [pc, #212]	; (8003060 <UART_Task+0x248>)
 8002f8c:	7a1b      	ldrb	r3, [r3, #8]
 8002f8e:	2b6e      	cmp	r3, #110	; 0x6e
 8002f90:	d108      	bne.n	8002fa4 <UART_Task+0x18c>
					&& (Uart_data.Rx_Buffer[6]  == 'g'))
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <UART_Task+0x248>)
 8002f94:	7a5b      	ldrb	r3, [r3, #9]
 8002f96:	2b67      	cmp	r3, #103	; 0x67
 8002f98:	d104      	bne.n	8002fa4 <UART_Task+0x18c>
		{
			Lexi_Set_State_LEXI();
 8002f9a:	f7fe f875 	bl	8001088 <Lexi_Set_State_LEXI>
			UART_Send_True();
 8002f9e:	f000 fb53 	bl	8003648 <UART_Send_True>
 8002fa2:	e1ba      	b.n	800331a <UART_Task+0x502>
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 'n')
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <UART_Task+0x248>)
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	2b6e      	cmp	r3, #110	; 0x6e
 8002faa:	d118      	bne.n	8002fde <UART_Task+0x1c6>
					&& (Uart_data.Rx_Buffer[1]  == 'o')
 8002fac:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <UART_Task+0x248>)
 8002fae:	791b      	ldrb	r3, [r3, #4]
 8002fb0:	2b6f      	cmp	r3, #111	; 0x6f
 8002fb2:	d114      	bne.n	8002fde <UART_Task+0x1c6>
					&& (Uart_data.Rx_Buffer[2]  == 'r')
 8002fb4:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <UART_Task+0x248>)
 8002fb6:	795b      	ldrb	r3, [r3, #5]
 8002fb8:	2b72      	cmp	r3, #114	; 0x72
 8002fba:	d110      	bne.n	8002fde <UART_Task+0x1c6>
					&& (Uart_data.Rx_Buffer[3]  == 'm')
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <UART_Task+0x248>)
 8002fbe:	799b      	ldrb	r3, [r3, #6]
 8002fc0:	2b6d      	cmp	r3, #109	; 0x6d
 8002fc2:	d10c      	bne.n	8002fde <UART_Task+0x1c6>
					&& (Uart_data.Rx_Buffer[4]  == 'a')
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <UART_Task+0x248>)
 8002fc6:	79db      	ldrb	r3, [r3, #7]
 8002fc8:	2b61      	cmp	r3, #97	; 0x61
 8002fca:	d108      	bne.n	8002fde <UART_Task+0x1c6>
					&& (Uart_data.Rx_Buffer[5]  == 'l'))
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <UART_Task+0x248>)
 8002fce:	7a1b      	ldrb	r3, [r3, #8]
 8002fd0:	2b6c      	cmp	r3, #108	; 0x6c
 8002fd2:	d104      	bne.n	8002fde <UART_Task+0x1c6>
		{
			Lexi_Set_State_STANDARD();
 8002fd4:	f7fe f84c 	bl	8001070 <Lexi_Set_State_STANDARD>
			UART_Send_True();
 8002fd8:	f000 fb36 	bl	8003648 <UART_Send_True>
 8002fdc:	e19d      	b.n	800331a <UART_Task+0x502>
		}
		else if ((  Uart_data.Rx_Buffer[0]  == 'o')
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <UART_Task+0x248>)
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	2b6f      	cmp	r3, #111	; 0x6f
 8002fe4:	d10c      	bne.n	8003000 <UART_Task+0x1e8>
				&& (Uart_data.Rx_Buffer[1]  == 'f')
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <UART_Task+0x248>)
 8002fe8:	791b      	ldrb	r3, [r3, #4]
 8002fea:	2b66      	cmp	r3, #102	; 0x66
 8002fec:	d108      	bne.n	8003000 <UART_Task+0x1e8>
				&& (Uart_data.Rx_Buffer[2]  == 'f'))
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <UART_Task+0x248>)
 8002ff0:	795b      	ldrb	r3, [r3, #5]
 8002ff2:	2b66      	cmp	r3, #102	; 0x66
 8002ff4:	d104      	bne.n	8003000 <UART_Task+0x1e8>
		{
			Lexi_Set_State_OFF();
 8002ff6:	f7fe f829 	bl	800104c <Lexi_Set_State_OFF>
			UART_Send_True();
 8002ffa:	f000 fb25 	bl	8003648 <UART_Send_True>
 8002ffe:	e18c      	b.n	800331a <UART_Task+0x502>
		}

		else if		((  Uart_data.Rx_Buffer[0]  == 's')
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <UART_Task+0x248>)
 8003002:	78db      	ldrb	r3, [r3, #3]
 8003004:	2b73      	cmp	r3, #115	; 0x73
 8003006:	d12d      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[1]  == 't')
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <UART_Task+0x248>)
 800300a:	791b      	ldrb	r3, [r3, #4]
 800300c:	2b74      	cmp	r3, #116	; 0x74
 800300e:	d129      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[2]  == 'a')
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <UART_Task+0x248>)
 8003012:	795b      	ldrb	r3, [r3, #5]
 8003014:	2b61      	cmp	r3, #97	; 0x61
 8003016:	d125      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[3]  == 't')
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <UART_Task+0x248>)
 800301a:	799b      	ldrb	r3, [r3, #6]
 800301c:	2b74      	cmp	r3, #116	; 0x74
 800301e:	d121      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[4]  == 'e')
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <UART_Task+0x248>)
 8003022:	79db      	ldrb	r3, [r3, #7]
 8003024:	2b65      	cmp	r3, #101	; 0x65
 8003026:	d11d      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[5]  == '_')
 8003028:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <UART_Task+0x248>)
 800302a:	7a1b      	ldrb	r3, [r3, #8]
 800302c:	2b5f      	cmp	r3, #95	; 0x5f
 800302e:	d119      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[6]  == 's')
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <UART_Task+0x248>)
 8003032:	7a5b      	ldrb	r3, [r3, #9]
 8003034:	2b73      	cmp	r3, #115	; 0x73
 8003036:	d115      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[7]  == 'p')
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <UART_Task+0x248>)
 800303a:	7a9b      	ldrb	r3, [r3, #10]
 800303c:	2b70      	cmp	r3, #112	; 0x70
 800303e:	d111      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[8]  == 'e')
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <UART_Task+0x248>)
 8003042:	7adb      	ldrb	r3, [r3, #11]
 8003044:	2b65      	cmp	r3, #101	; 0x65
 8003046:	d10d      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[9]  == 'e')
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <UART_Task+0x248>)
 800304a:	7b1b      	ldrb	r3, [r3, #12]
 800304c:	2b65      	cmp	r3, #101	; 0x65
 800304e:	d109      	bne.n	8003064 <UART_Task+0x24c>
					&& (Uart_data.Rx_Buffer[10]  == 'd'))
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <UART_Task+0x248>)
 8003052:	7b5b      	ldrb	r3, [r3, #13]
 8003054:	2b64      	cmp	r3, #100	; 0x64
 8003056:	d105      	bne.n	8003064 <UART_Task+0x24c>
		{
			UART_Send_Speed();
 8003058:	f000 f97c 	bl	8003354 <UART_Send_Speed>
 800305c:	e15d      	b.n	800331a <UART_Task+0x502>
 800305e:	bf00      	nop
 8003060:	2002b6ac 	.word	0x2002b6ac
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 's')
 8003064:	4b83      	ldr	r3, [pc, #524]	; (8003274 <UART_Task+0x45c>)
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	2b73      	cmp	r3, #115	; 0x73
 800306a:	d136      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[1]  == 't')
 800306c:	4b81      	ldr	r3, [pc, #516]	; (8003274 <UART_Task+0x45c>)
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	2b74      	cmp	r3, #116	; 0x74
 8003072:	d132      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[2]  == 'a')
 8003074:	4b7f      	ldr	r3, [pc, #508]	; (8003274 <UART_Task+0x45c>)
 8003076:	795b      	ldrb	r3, [r3, #5]
 8003078:	2b61      	cmp	r3, #97	; 0x61
 800307a:	d12e      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[3]  == 't')
 800307c:	4b7d      	ldr	r3, [pc, #500]	; (8003274 <UART_Task+0x45c>)
 800307e:	799b      	ldrb	r3, [r3, #6]
 8003080:	2b74      	cmp	r3, #116	; 0x74
 8003082:	d12a      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[4]  == 'e')
 8003084:	4b7b      	ldr	r3, [pc, #492]	; (8003274 <UART_Task+0x45c>)
 8003086:	79db      	ldrb	r3, [r3, #7]
 8003088:	2b65      	cmp	r3, #101	; 0x65
 800308a:	d126      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[5]  == '_')
 800308c:	4b79      	ldr	r3, [pc, #484]	; (8003274 <UART_Task+0x45c>)
 800308e:	7a1b      	ldrb	r3, [r3, #8]
 8003090:	2b5f      	cmp	r3, #95	; 0x5f
 8003092:	d122      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[6]  == 's')
 8003094:	4b77      	ldr	r3, [pc, #476]	; (8003274 <UART_Task+0x45c>)
 8003096:	7a5b      	ldrb	r3, [r3, #9]
 8003098:	2b73      	cmp	r3, #115	; 0x73
 800309a:	d11e      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[7]  == 't')
 800309c:	4b75      	ldr	r3, [pc, #468]	; (8003274 <UART_Task+0x45c>)
 800309e:	7a9b      	ldrb	r3, [r3, #10]
 80030a0:	2b74      	cmp	r3, #116	; 0x74
 80030a2:	d11a      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[8]  == 'r')
 80030a4:	4b73      	ldr	r3, [pc, #460]	; (8003274 <UART_Task+0x45c>)
 80030a6:	7adb      	ldrb	r3, [r3, #11]
 80030a8:	2b72      	cmp	r3, #114	; 0x72
 80030aa:	d116      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[9]  == 'e')
 80030ac:	4b71      	ldr	r3, [pc, #452]	; (8003274 <UART_Task+0x45c>)
 80030ae:	7b1b      	ldrb	r3, [r3, #12]
 80030b0:	2b65      	cmp	r3, #101	; 0x65
 80030b2:	d112      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[10]  == 'n')
 80030b4:	4b6f      	ldr	r3, [pc, #444]	; (8003274 <UART_Task+0x45c>)
 80030b6:	7b5b      	ldrb	r3, [r3, #13]
 80030b8:	2b6e      	cmp	r3, #110	; 0x6e
 80030ba:	d10e      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[11]  == 'g')
 80030bc:	4b6d      	ldr	r3, [pc, #436]	; (8003274 <UART_Task+0x45c>)
 80030be:	7b9b      	ldrb	r3, [r3, #14]
 80030c0:	2b67      	cmp	r3, #103	; 0x67
 80030c2:	d10a      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[12]  == 't')
 80030c4:	4b6b      	ldr	r3, [pc, #428]	; (8003274 <UART_Task+0x45c>)
 80030c6:	7bdb      	ldrb	r3, [r3, #15]
 80030c8:	2b74      	cmp	r3, #116	; 0x74
 80030ca:	d106      	bne.n	80030da <UART_Task+0x2c2>
						&& (Uart_data.Rx_Buffer[13]  == 'h'))
 80030cc:	4b69      	ldr	r3, [pc, #420]	; (8003274 <UART_Task+0x45c>)
 80030ce:	7c1b      	ldrb	r3, [r3, #16]
 80030d0:	2b68      	cmp	r3, #104	; 0x68
 80030d2:	d102      	bne.n	80030da <UART_Task+0x2c2>
		{
			UART_Send_Strength();
 80030d4:	f000 f970 	bl	80033b8 <UART_Send_Strength>
 80030d8:	e11f      	b.n	800331a <UART_Task+0x502>
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 's')
 80030da:	4b66      	ldr	r3, [pc, #408]	; (8003274 <UART_Task+0x45c>)
 80030dc:	78db      	ldrb	r3, [r3, #3]
 80030de:	2b73      	cmp	r3, #115	; 0x73
 80030e0:	d122      	bne.n	8003128 <UART_Task+0x310>
						&& (Uart_data.Rx_Buffer[1]  == 't')
 80030e2:	4b64      	ldr	r3, [pc, #400]	; (8003274 <UART_Task+0x45c>)
 80030e4:	791b      	ldrb	r3, [r3, #4]
 80030e6:	2b74      	cmp	r3, #116	; 0x74
 80030e8:	d11e      	bne.n	8003128 <UART_Task+0x310>
						&& (Uart_data.Rx_Buffer[2]  == 'a')
 80030ea:	4b62      	ldr	r3, [pc, #392]	; (8003274 <UART_Task+0x45c>)
 80030ec:	795b      	ldrb	r3, [r3, #5]
 80030ee:	2b61      	cmp	r3, #97	; 0x61
 80030f0:	d11a      	bne.n	8003128 <UART_Task+0x310>
						&& (Uart_data.Rx_Buffer[3]  == 't')
 80030f2:	4b60      	ldr	r3, [pc, #384]	; (8003274 <UART_Task+0x45c>)
 80030f4:	799b      	ldrb	r3, [r3, #6]
 80030f6:	2b74      	cmp	r3, #116	; 0x74
 80030f8:	d116      	bne.n	8003128 <UART_Task+0x310>
						&& (Uart_data.Rx_Buffer[4]  == 'e')
 80030fa:	4b5e      	ldr	r3, [pc, #376]	; (8003274 <UART_Task+0x45c>)
 80030fc:	79db      	ldrb	r3, [r3, #7]
 80030fe:	2b65      	cmp	r3, #101	; 0x65
 8003100:	d112      	bne.n	8003128 <UART_Task+0x310>
						&& (Uart_data.Rx_Buffer[5]  == '_')
 8003102:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <UART_Task+0x45c>)
 8003104:	7a1b      	ldrb	r3, [r3, #8]
 8003106:	2b5f      	cmp	r3, #95	; 0x5f
 8003108:	d10e      	bne.n	8003128 <UART_Task+0x310>
						&& (Uart_data.Rx_Buffer[6]  == 'l')
 800310a:	4b5a      	ldr	r3, [pc, #360]	; (8003274 <UART_Task+0x45c>)
 800310c:	7a5b      	ldrb	r3, [r3, #9]
 800310e:	2b6c      	cmp	r3, #108	; 0x6c
 8003110:	d10a      	bne.n	8003128 <UART_Task+0x310>
						&& (Uart_data.Rx_Buffer[7]  == 'u')
 8003112:	4b58      	ldr	r3, [pc, #352]	; (8003274 <UART_Task+0x45c>)
 8003114:	7a9b      	ldrb	r3, [r3, #10]
 8003116:	2b75      	cmp	r3, #117	; 0x75
 8003118:	d106      	bne.n	8003128 <UART_Task+0x310>
						&& (Uart_data.Rx_Buffer[8]  == 'm'))
 800311a:	4b56      	ldr	r3, [pc, #344]	; (8003274 <UART_Task+0x45c>)
 800311c:	7adb      	ldrb	r3, [r3, #11]
 800311e:	2b6d      	cmp	r3, #109	; 0x6d
 8003120:	d102      	bne.n	8003128 <UART_Task+0x310>
		{
			UART_Send_Lum();
 8003122:	f000 f97b 	bl	800341c <UART_Send_Lum>
 8003126:	e0f8      	b.n	800331a <UART_Task+0x502>
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 's')
 8003128:	4b52      	ldr	r3, [pc, #328]	; (8003274 <UART_Task+0x45c>)
 800312a:	78db      	ldrb	r3, [r3, #3]
 800312c:	2b73      	cmp	r3, #115	; 0x73
 800312e:	d12e      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[1]  == 't')
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <UART_Task+0x45c>)
 8003132:	791b      	ldrb	r3, [r3, #4]
 8003134:	2b74      	cmp	r3, #116	; 0x74
 8003136:	d12a      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[2]  == 'a')
 8003138:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <UART_Task+0x45c>)
 800313a:	795b      	ldrb	r3, [r3, #5]
 800313c:	2b61      	cmp	r3, #97	; 0x61
 800313e:	d126      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[3]  == 't')
 8003140:	4b4c      	ldr	r3, [pc, #304]	; (8003274 <UART_Task+0x45c>)
 8003142:	799b      	ldrb	r3, [r3, #6]
 8003144:	2b74      	cmp	r3, #116	; 0x74
 8003146:	d122      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[4]  == 'e')
 8003148:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <UART_Task+0x45c>)
 800314a:	79db      	ldrb	r3, [r3, #7]
 800314c:	2b65      	cmp	r3, #101	; 0x65
 800314e:	d11e      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[5]  == '_')
 8003150:	4b48      	ldr	r3, [pc, #288]	; (8003274 <UART_Task+0x45c>)
 8003152:	7a1b      	ldrb	r3, [r3, #8]
 8003154:	2b5f      	cmp	r3, #95	; 0x5f
 8003156:	d11a      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[6]  == 'b')
 8003158:	4b46      	ldr	r3, [pc, #280]	; (8003274 <UART_Task+0x45c>)
 800315a:	7a5b      	ldrb	r3, [r3, #9]
 800315c:	2b62      	cmp	r3, #98	; 0x62
 800315e:	d116      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[7]  == 'a')
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <UART_Task+0x45c>)
 8003162:	7a9b      	ldrb	r3, [r3, #10]
 8003164:	2b61      	cmp	r3, #97	; 0x61
 8003166:	d112      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[8]  == 't')
 8003168:	4b42      	ldr	r3, [pc, #264]	; (8003274 <UART_Task+0x45c>)
 800316a:	7adb      	ldrb	r3, [r3, #11]
 800316c:	2b74      	cmp	r3, #116	; 0x74
 800316e:	d10e      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[9]  == 'e')
 8003170:	4b40      	ldr	r3, [pc, #256]	; (8003274 <UART_Task+0x45c>)
 8003172:	7b1b      	ldrb	r3, [r3, #12]
 8003174:	2b65      	cmp	r3, #101	; 0x65
 8003176:	d10a      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[10]  == 'r')
 8003178:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <UART_Task+0x45c>)
 800317a:	7b5b      	ldrb	r3, [r3, #13]
 800317c:	2b72      	cmp	r3, #114	; 0x72
 800317e:	d106      	bne.n	800318e <UART_Task+0x376>
						&& (Uart_data.Rx_Buffer[11]  == 'y'))
 8003180:	4b3c      	ldr	r3, [pc, #240]	; (8003274 <UART_Task+0x45c>)
 8003182:	7b9b      	ldrb	r3, [r3, #14]
 8003184:	2b79      	cmp	r3, #121	; 0x79
 8003186:	d102      	bne.n	800318e <UART_Task+0x376>
		{
			UART_Send_Batery();
 8003188:	f000 f98e 	bl	80034a8 <UART_Send_Batery>
 800318c:	e0c5      	b.n	800331a <UART_Task+0x502>
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 's')
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <UART_Task+0x45c>)
 8003190:	78db      	ldrb	r3, [r3, #3]
 8003192:	2b73      	cmp	r3, #115	; 0x73
 8003194:	d12e      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[1]  == 't')
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <UART_Task+0x45c>)
 8003198:	791b      	ldrb	r3, [r3, #4]
 800319a:	2b74      	cmp	r3, #116	; 0x74
 800319c:	d12a      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[2]  == 'a')
 800319e:	4b35      	ldr	r3, [pc, #212]	; (8003274 <UART_Task+0x45c>)
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	2b61      	cmp	r3, #97	; 0x61
 80031a4:	d126      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[3]  == 't')
 80031a6:	4b33      	ldr	r3, [pc, #204]	; (8003274 <UART_Task+0x45c>)
 80031a8:	799b      	ldrb	r3, [r3, #6]
 80031aa:	2b74      	cmp	r3, #116	; 0x74
 80031ac:	d122      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[4]  == 'e')
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <UART_Task+0x45c>)
 80031b0:	79db      	ldrb	r3, [r3, #7]
 80031b2:	2b65      	cmp	r3, #101	; 0x65
 80031b4:	d11e      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[5]  == '_')
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <UART_Task+0x45c>)
 80031b8:	7a1b      	ldrb	r3, [r3, #8]
 80031ba:	2b5f      	cmp	r3, #95	; 0x5f
 80031bc:	d11a      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[6]  == 'c')
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <UART_Task+0x45c>)
 80031c0:	7a5b      	ldrb	r3, [r3, #9]
 80031c2:	2b63      	cmp	r3, #99	; 0x63
 80031c4:	d116      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[7]  == 'h')
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <UART_Task+0x45c>)
 80031c8:	7a9b      	ldrb	r3, [r3, #10]
 80031ca:	2b68      	cmp	r3, #104	; 0x68
 80031cc:	d112      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[8]  == 'a')
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <UART_Task+0x45c>)
 80031d0:	7adb      	ldrb	r3, [r3, #11]
 80031d2:	2b61      	cmp	r3, #97	; 0x61
 80031d4:	d10e      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[9]  == 'r')
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <UART_Task+0x45c>)
 80031d8:	7b1b      	ldrb	r3, [r3, #12]
 80031da:	2b72      	cmp	r3, #114	; 0x72
 80031dc:	d10a      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[10]  == 'g')
 80031de:	4b25      	ldr	r3, [pc, #148]	; (8003274 <UART_Task+0x45c>)
 80031e0:	7b5b      	ldrb	r3, [r3, #13]
 80031e2:	2b67      	cmp	r3, #103	; 0x67
 80031e4:	d106      	bne.n	80031f4 <UART_Task+0x3dc>
						&& (Uart_data.Rx_Buffer[11]  == 'e'))
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <UART_Task+0x45c>)
 80031e8:	7b9b      	ldrb	r3, [r3, #14]
 80031ea:	2b65      	cmp	r3, #101	; 0x65
 80031ec:	d102      	bne.n	80031f4 <UART_Task+0x3dc>
		{
			UART_Send_Charge();
 80031ee:	f000 fa6f 	bl	80036d0 <UART_Send_Charge>
 80031f2:	e092      	b.n	800331a <UART_Task+0x502>
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 's')
 80031f4:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <UART_Task+0x45c>)
 80031f6:	78db      	ldrb	r3, [r3, #3]
 80031f8:	2b73      	cmp	r3, #115	; 0x73
 80031fa:	d13d      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[1]  == 't')
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <UART_Task+0x45c>)
 80031fe:	791b      	ldrb	r3, [r3, #4]
 8003200:	2b74      	cmp	r3, #116	; 0x74
 8003202:	d139      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[2]  == 'a')
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <UART_Task+0x45c>)
 8003206:	795b      	ldrb	r3, [r3, #5]
 8003208:	2b61      	cmp	r3, #97	; 0x61
 800320a:	d135      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[3]  == 't')
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <UART_Task+0x45c>)
 800320e:	799b      	ldrb	r3, [r3, #6]
 8003210:	2b74      	cmp	r3, #116	; 0x74
 8003212:	d131      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[4]  == 'e')
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <UART_Task+0x45c>)
 8003216:	79db      	ldrb	r3, [r3, #7]
 8003218:	2b65      	cmp	r3, #101	; 0x65
 800321a:	d12d      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[5]  == '_')
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <UART_Task+0x45c>)
 800321e:	7a1b      	ldrb	r3, [r3, #8]
 8003220:	2b5f      	cmp	r3, #95	; 0x5f
 8003222:	d129      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[6]  == 'm')
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <UART_Task+0x45c>)
 8003226:	7a5b      	ldrb	r3, [r3, #9]
 8003228:	2b6d      	cmp	r3, #109	; 0x6d
 800322a:	d125      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[7]  == 'o')
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <UART_Task+0x45c>)
 800322e:	7a9b      	ldrb	r3, [r3, #10]
 8003230:	2b6f      	cmp	r3, #111	; 0x6f
 8003232:	d121      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[8]  == 'd')
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <UART_Task+0x45c>)
 8003236:	7adb      	ldrb	r3, [r3, #11]
 8003238:	2b64      	cmp	r3, #100	; 0x64
 800323a:	d11d      	bne.n	8003278 <UART_Task+0x460>
						&& (Uart_data.Rx_Buffer[9]  == 'e'))
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <UART_Task+0x45c>)
 800323e:	7b1b      	ldrb	r3, [r3, #12]
 8003240:	2b65      	cmp	r3, #101	; 0x65
 8003242:	d119      	bne.n	8003278 <UART_Task+0x460>
		{
			uint8_t val_lum = Lexi_Get_Slider_Luminosity();
 8003244:	f7fd ffc0 	bl	80011c8 <Lexi_Get_Slider_Luminosity>
 8003248:	4603      	mov	r3, r0
 800324a:	713b      	strb	r3, [r7, #4]
			uint8_t val_mode = Lexi_Get_Led_State();
 800324c:	f7fd feda 	bl	8001004 <Lexi_Get_Led_State>
 8003250:	4603      	mov	r3, r0
 8003252:	70fb      	strb	r3, [r7, #3]
			if (val_lum == 0){
 8003254:	793b      	ldrb	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <UART_Task+0x448>
				//Send Off
				UART_Send_LedOff();
 800325a:	f000 f9af 	bl	80035bc <UART_Send_LedOff>
		{
 800325e:	e05c      	b.n	800331a <UART_Task+0x502>
			}
			else
			{
				if (val_mode == 2){
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d102      	bne.n	800326c <UART_Task+0x454>
					//Send Reading
					UART_Send_LedReading();
 8003266:	f000 f963 	bl	8003530 <UART_Send_LedReading>
		{
 800326a:	e056      	b.n	800331a <UART_Task+0x502>
				}
				else{
					//Send Normal
					UART_Send_LedNormal();
 800326c:	f000 f984 	bl	8003578 <UART_Send_LedNormal>
		{
 8003270:	e053      	b.n	800331a <UART_Task+0x502>
 8003272:	bf00      	nop
 8003274:	2002b6ac 	.word	0x2002b6ac
				}
			}
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 's')
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <UART_Task+0x514>)
 800327a:	78db      	ldrb	r3, [r3, #3]
 800327c:	2b73      	cmp	r3, #115	; 0x73
 800327e:	d12e      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[1]  == 't')
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <UART_Task+0x514>)
 8003282:	791b      	ldrb	r3, [r3, #4]
 8003284:	2b74      	cmp	r3, #116	; 0x74
 8003286:	d12a      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[2]  == 'a')
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <UART_Task+0x514>)
 800328a:	795b      	ldrb	r3, [r3, #5]
 800328c:	2b61      	cmp	r3, #97	; 0x61
 800328e:	d126      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[3]  == 't')
 8003290:	4b26      	ldr	r3, [pc, #152]	; (800332c <UART_Task+0x514>)
 8003292:	799b      	ldrb	r3, [r3, #6]
 8003294:	2b74      	cmp	r3, #116	; 0x74
 8003296:	d122      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[4]  == 'e')
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <UART_Task+0x514>)
 800329a:	79db      	ldrb	r3, [r3, #7]
 800329c:	2b65      	cmp	r3, #101	; 0x65
 800329e:	d11e      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[5]  == '_')
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <UART_Task+0x514>)
 80032a2:	7a1b      	ldrb	r3, [r3, #8]
 80032a4:	2b5f      	cmp	r3, #95	; 0x5f
 80032a6:	d11a      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[6]  == 's')
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <UART_Task+0x514>)
 80032aa:	7a5b      	ldrb	r3, [r3, #9]
 80032ac:	2b73      	cmp	r3, #115	; 0x73
 80032ae:	d116      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[7]  == 'c')
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <UART_Task+0x514>)
 80032b2:	7a9b      	ldrb	r3, [r3, #10]
 80032b4:	2b63      	cmp	r3, #99	; 0x63
 80032b6:	d112      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[8]  == 'r')
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <UART_Task+0x514>)
 80032ba:	7adb      	ldrb	r3, [r3, #11]
 80032bc:	2b72      	cmp	r3, #114	; 0x72
 80032be:	d10e      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[9]  == 'e')
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <UART_Task+0x514>)
 80032c2:	7b1b      	ldrb	r3, [r3, #12]
 80032c4:	2b65      	cmp	r3, #101	; 0x65
 80032c6:	d10a      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[10]  == 'e')
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <UART_Task+0x514>)
 80032ca:	7b5b      	ldrb	r3, [r3, #13]
 80032cc:	2b65      	cmp	r3, #101	; 0x65
 80032ce:	d106      	bne.n	80032de <UART_Task+0x4c6>
						&& (Uart_data.Rx_Buffer[11]  == 'n'))
 80032d0:	4b16      	ldr	r3, [pc, #88]	; (800332c <UART_Task+0x514>)
 80032d2:	7b9b      	ldrb	r3, [r3, #14]
 80032d4:	2b6e      	cmp	r3, #110	; 0x6e
 80032d6:	d102      	bne.n	80032de <UART_Task+0x4c6>
		{
			UART_Send_ScreenOn();
 80032d8:	f000 f994 	bl	8003604 <UART_Send_ScreenOn>
 80032dc:	e01d      	b.n	800331a <UART_Task+0x502>
		}
		else if		((  Uart_data.Rx_Buffer[0]  == 'v')
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <UART_Task+0x514>)
 80032e0:	78db      	ldrb	r3, [r3, #3]
 80032e2:	2b76      	cmp	r3, #118	; 0x76
 80032e4:	d119      	bne.n	800331a <UART_Task+0x502>
						&& (Uart_data.Rx_Buffer[1]  == 'e')
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <UART_Task+0x514>)
 80032e8:	791b      	ldrb	r3, [r3, #4]
 80032ea:	2b65      	cmp	r3, #101	; 0x65
 80032ec:	d115      	bne.n	800331a <UART_Task+0x502>
						&& (Uart_data.Rx_Buffer[2]  == 'r')
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <UART_Task+0x514>)
 80032f0:	795b      	ldrb	r3, [r3, #5]
 80032f2:	2b72      	cmp	r3, #114	; 0x72
 80032f4:	d111      	bne.n	800331a <UART_Task+0x502>
						&& (Uart_data.Rx_Buffer[3]  == 's')
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <UART_Task+0x514>)
 80032f8:	799b      	ldrb	r3, [r3, #6]
 80032fa:	2b73      	cmp	r3, #115	; 0x73
 80032fc:	d10d      	bne.n	800331a <UART_Task+0x502>
						&& (Uart_data.Rx_Buffer[4]  == 'i')
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <UART_Task+0x514>)
 8003300:	79db      	ldrb	r3, [r3, #7]
 8003302:	2b69      	cmp	r3, #105	; 0x69
 8003304:	d109      	bne.n	800331a <UART_Task+0x502>
						&& (Uart_data.Rx_Buffer[5]  == 'o')
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <UART_Task+0x514>)
 8003308:	7a1b      	ldrb	r3, [r3, #8]
 800330a:	2b6f      	cmp	r3, #111	; 0x6f
 800330c:	d105      	bne.n	800331a <UART_Task+0x502>
						&& (Uart_data.Rx_Buffer[6]  == 'n'))
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <UART_Task+0x514>)
 8003310:	7a5b      	ldrb	r3, [r3, #9]
 8003312:	2b6e      	cmp	r3, #110	; 0x6e
 8003314:	d101      	bne.n	800331a <UART_Task+0x502>
		{
			UART_Send_Version();
 8003316:	f000 fa0d 	bl	8003734 <UART_Send_Version>
		}
		Uart_data.Transfer_cplt = false;
 800331a:	4b04      	ldr	r3, [pc, #16]	; (800332c <UART_Task+0x514>)
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	}
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2002b6ac 	.word	0x2002b6ac

08003330 <UART_Reset_CMD>:
void UART_Reset_CMD(){
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
	Uart_data.Uart_cmd = UART_WAIT_CMD;
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <UART_Reset_CMD+0x20>)
 8003336:	220b      	movs	r2, #11
 8003338:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	Uart_data.Uart_cmd_value = 0;
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <UART_Reset_CMD+0x20>)
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	2002b6ac 	.word	0x2002b6ac

08003354 <UART_Send_Speed>:

void UART_Send_Speed(){
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 800335a:	f000 fa0b 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	uint8_t data = Lexi_Get_Slider_Speed();
 800335e:	f7fd ff1b 	bl	8001198 <Lexi_Get_Slider_Speed>
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
	if (data < 10){
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	2b09      	cmp	r3, #9
 800336a:	d806      	bhi.n	800337a <UART_Send_Speed+0x26>
		sprintf(Uart_data.Tx_Buffer,"speed:0%i", data);
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	461a      	mov	r2, r3
 8003370:	490d      	ldr	r1, [pc, #52]	; (80033a8 <UART_Send_Speed+0x54>)
 8003372:	480e      	ldr	r0, [pc, #56]	; (80033ac <UART_Send_Speed+0x58>)
 8003374:	f020 fd5a 	bl	8023e2c <siprintf>
 8003378:	e005      	b.n	8003386 <UART_Send_Speed+0x32>
	}
	else{
		sprintf(Uart_data.Tx_Buffer,"speed:%i", data);
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	461a      	mov	r2, r3
 800337e:	490c      	ldr	r1, [pc, #48]	; (80033b0 <UART_Send_Speed+0x5c>)
 8003380:	480a      	ldr	r0, [pc, #40]	; (80033ac <UART_Send_Speed+0x58>)
 8003382:	f020 fd53 	bl	8023e2c <siprintf>
	}
	len=strlen(Uart_data.Tx_Buffer);
 8003386:	4809      	ldr	r0, [pc, #36]	; (80033ac <UART_Send_Speed+0x58>)
 8003388:	f7fc ff32 	bl	80001f0 <strlen>
 800338c:	4603      	mov	r3, r0
 800338e:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 8003390:	79bb      	ldrb	r3, [r7, #6]
 8003392:	b29a      	uxth	r2, r3
 8003394:	2364      	movs	r3, #100	; 0x64
 8003396:	4905      	ldr	r1, [pc, #20]	; (80033ac <UART_Send_Speed+0x58>)
 8003398:	4806      	ldr	r0, [pc, #24]	; (80033b4 <UART_Send_Speed+0x60>)
 800339a:	f005 f898 	bl	80084ce <HAL_UART_Transmit>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	08024968 	.word	0x08024968
 80033ac:	2002b7af 	.word	0x2002b7af
 80033b0:	08024974 	.word	0x08024974
 80033b4:	2002b66c 	.word	0x2002b66c

080033b8 <UART_Send_Strength>:

void UART_Send_Strength(){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 80033be:	f000 f9d9 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	uint8_t data = Lexi_Get_Slider_Strength();
 80033c2:	f7fd fef5 	bl	80011b0 <Lexi_Get_Slider_Strength>
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
	if (data < 10){
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d806      	bhi.n	80033de <UART_Send_Strength+0x26>
		sprintf(Uart_data.Tx_Buffer,"strength:0%i", data);
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	461a      	mov	r2, r3
 80033d4:	490d      	ldr	r1, [pc, #52]	; (800340c <UART_Send_Strength+0x54>)
 80033d6:	480e      	ldr	r0, [pc, #56]	; (8003410 <UART_Send_Strength+0x58>)
 80033d8:	f020 fd28 	bl	8023e2c <siprintf>
 80033dc:	e005      	b.n	80033ea <UART_Send_Strength+0x32>
	}
	else{
		sprintf(Uart_data.Tx_Buffer,"strength:%i", data);
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	461a      	mov	r2, r3
 80033e2:	490c      	ldr	r1, [pc, #48]	; (8003414 <UART_Send_Strength+0x5c>)
 80033e4:	480a      	ldr	r0, [pc, #40]	; (8003410 <UART_Send_Strength+0x58>)
 80033e6:	f020 fd21 	bl	8023e2c <siprintf>
	}
	len=strlen(Uart_data.Tx_Buffer);
 80033ea:	4809      	ldr	r0, [pc, #36]	; (8003410 <UART_Send_Strength+0x58>)
 80033ec:	f7fc ff00 	bl	80001f0 <strlen>
 80033f0:	4603      	mov	r3, r0
 80033f2:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 80033f4:	79bb      	ldrb	r3, [r7, #6]
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	2364      	movs	r3, #100	; 0x64
 80033fa:	4905      	ldr	r1, [pc, #20]	; (8003410 <UART_Send_Strength+0x58>)
 80033fc:	4806      	ldr	r0, [pc, #24]	; (8003418 <UART_Send_Strength+0x60>)
 80033fe:	f005 f866 	bl	80084ce <HAL_UART_Transmit>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	08024980 	.word	0x08024980
 8003410:	2002b7af 	.word	0x2002b7af
 8003414:	08024990 	.word	0x08024990
 8003418:	2002b66c 	.word	0x2002b66c

0800341c <UART_Send_Lum>:

void UART_Send_Lum(){
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 8003422:	f000 f9a7 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	uint8_t data = Lexi_Get_Slider_Luminosity();
 8003426:	f7fd fecf 	bl	80011c8 <Lexi_Get_Slider_Luminosity>
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
	if (( data > 0) && ( data < 10)){
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <UART_Send_Lum+0x2c>
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	2b09      	cmp	r3, #9
 8003438:	d806      	bhi.n	8003448 <UART_Send_Lum+0x2c>
			sprintf(Uart_data.Tx_Buffer,"lum:00%i", data);
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	461a      	mov	r2, r3
 800343e:	4915      	ldr	r1, [pc, #84]	; (8003494 <UART_Send_Lum+0x78>)
 8003440:	4815      	ldr	r0, [pc, #84]	; (8003498 <UART_Send_Lum+0x7c>)
 8003442:	f020 fcf3 	bl	8023e2c <siprintf>
 8003446:	e015      	b.n	8003474 <UART_Send_Lum+0x58>
	}
	else if ((data < 100) && (data >= 10))
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	2b63      	cmp	r3, #99	; 0x63
 800344c:	d809      	bhi.n	8003462 <UART_Send_Lum+0x46>
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2b09      	cmp	r3, #9
 8003452:	d906      	bls.n	8003462 <UART_Send_Lum+0x46>
	{
		sprintf(Uart_data.Tx_Buffer,"lum:0%i", data);
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	461a      	mov	r2, r3
 8003458:	4910      	ldr	r1, [pc, #64]	; (800349c <UART_Send_Lum+0x80>)
 800345a:	480f      	ldr	r0, [pc, #60]	; (8003498 <UART_Send_Lum+0x7c>)
 800345c:	f020 fce6 	bl	8023e2c <siprintf>
 8003460:	e008      	b.n	8003474 <UART_Send_Lum+0x58>
	}
	else if (data == 100){
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b64      	cmp	r3, #100	; 0x64
 8003466:	d105      	bne.n	8003474 <UART_Send_Lum+0x58>
		sprintf(Uart_data.Tx_Buffer,"lum:%i", data);
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	461a      	mov	r2, r3
 800346c:	490c      	ldr	r1, [pc, #48]	; (80034a0 <UART_Send_Lum+0x84>)
 800346e:	480a      	ldr	r0, [pc, #40]	; (8003498 <UART_Send_Lum+0x7c>)
 8003470:	f020 fcdc 	bl	8023e2c <siprintf>
	}
	len=strlen(Uart_data.Tx_Buffer);
 8003474:	4808      	ldr	r0, [pc, #32]	; (8003498 <UART_Send_Lum+0x7c>)
 8003476:	f7fc febb 	bl	80001f0 <strlen>
 800347a:	4603      	mov	r3, r0
 800347c:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 800347e:	79bb      	ldrb	r3, [r7, #6]
 8003480:	b29a      	uxth	r2, r3
 8003482:	2364      	movs	r3, #100	; 0x64
 8003484:	4904      	ldr	r1, [pc, #16]	; (8003498 <UART_Send_Lum+0x7c>)
 8003486:	4807      	ldr	r0, [pc, #28]	; (80034a4 <UART_Send_Lum+0x88>)
 8003488:	f005 f821 	bl	80084ce <HAL_UART_Transmit>
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	0802499c 	.word	0x0802499c
 8003498:	2002b7af 	.word	0x2002b7af
 800349c:	080249a8 	.word	0x080249a8
 80034a0:	080249b0 	.word	0x080249b0
 80034a4:	2002b66c 	.word	0x2002b66c

080034a8 <UART_Send_Batery>:
void UART_Send_Batery(){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 80034ae:	f000 f961 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	uint8_t data = BQ25713_Get_VBat();
 80034b2:	f7fd fb8b 	bl	8000bcc <BQ25713_Get_VBat>
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
	if (data < 10){
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	2b09      	cmp	r3, #9
 80034be:	d806      	bhi.n	80034ce <UART_Send_Batery+0x26>
		sprintf(Uart_data.Tx_Buffer,"batery:00%i", data);
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	461a      	mov	r2, r3
 80034c4:	4915      	ldr	r1, [pc, #84]	; (800351c <UART_Send_Batery+0x74>)
 80034c6:	4816      	ldr	r0, [pc, #88]	; (8003520 <UART_Send_Batery+0x78>)
 80034c8:	f020 fcb0 	bl	8023e2c <siprintf>
 80034cc:	e015      	b.n	80034fa <UART_Send_Batery+0x52>
	}
	else if ((data < 100) && (data >= 10))
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	2b63      	cmp	r3, #99	; 0x63
 80034d2:	d809      	bhi.n	80034e8 <UART_Send_Batery+0x40>
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b09      	cmp	r3, #9
 80034d8:	d906      	bls.n	80034e8 <UART_Send_Batery+0x40>
	{
		sprintf(Uart_data.Tx_Buffer,"batery:0%i", data);
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	461a      	mov	r2, r3
 80034de:	4911      	ldr	r1, [pc, #68]	; (8003524 <UART_Send_Batery+0x7c>)
 80034e0:	480f      	ldr	r0, [pc, #60]	; (8003520 <UART_Send_Batery+0x78>)
 80034e2:	f020 fca3 	bl	8023e2c <siprintf>
 80034e6:	e008      	b.n	80034fa <UART_Send_Batery+0x52>
	}
	else if (data == 100){
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d105      	bne.n	80034fa <UART_Send_Batery+0x52>
		sprintf(Uart_data.Tx_Buffer,"batery:%i", data);
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	461a      	mov	r2, r3
 80034f2:	490d      	ldr	r1, [pc, #52]	; (8003528 <UART_Send_Batery+0x80>)
 80034f4:	480a      	ldr	r0, [pc, #40]	; (8003520 <UART_Send_Batery+0x78>)
 80034f6:	f020 fc99 	bl	8023e2c <siprintf>
	}
	len=strlen(Uart_data.Tx_Buffer);
 80034fa:	4809      	ldr	r0, [pc, #36]	; (8003520 <UART_Send_Batery+0x78>)
 80034fc:	f7fc fe78 	bl	80001f0 <strlen>
 8003500:	4603      	mov	r3, r0
 8003502:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 8003504:	79bb      	ldrb	r3, [r7, #6]
 8003506:	b29a      	uxth	r2, r3
 8003508:	2364      	movs	r3, #100	; 0x64
 800350a:	4905      	ldr	r1, [pc, #20]	; (8003520 <UART_Send_Batery+0x78>)
 800350c:	4807      	ldr	r0, [pc, #28]	; (800352c <UART_Send_Batery+0x84>)
 800350e:	f004 ffde 	bl	80084ce <HAL_UART_Transmit>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	080249b8 	.word	0x080249b8
 8003520:	2002b7af 	.word	0x2002b7af
 8003524:	080249c4 	.word	0x080249c4
 8003528:	080249d0 	.word	0x080249d0
 800352c:	2002b66c 	.word	0x2002b66c

08003530 <UART_Send_LedReading>:
void UART_Send_LedReading(){
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 8003536:	f000 f91d 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	sprintf(Uart_data.Tx_Buffer,"ledreading");
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <UART_Send_LedReading+0x3c>)
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <UART_Send_LedReading+0x40>)
 800353e:	cb03      	ldmia	r3!, {r0, r1}
 8003540:	6010      	str	r0, [r2, #0]
 8003542:	6051      	str	r1, [r2, #4]
 8003544:	8819      	ldrh	r1, [r3, #0]
 8003546:	789b      	ldrb	r3, [r3, #2]
 8003548:	8111      	strh	r1, [r2, #8]
 800354a:	7293      	strb	r3, [r2, #10]
	len=strlen(Uart_data.Tx_Buffer);
 800354c:	4807      	ldr	r0, [pc, #28]	; (800356c <UART_Send_LedReading+0x3c>)
 800354e:	f7fc fe4f 	bl	80001f0 <strlen>
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	b29a      	uxth	r2, r3
 800355a:	2364      	movs	r3, #100	; 0x64
 800355c:	4903      	ldr	r1, [pc, #12]	; (800356c <UART_Send_LedReading+0x3c>)
 800355e:	4805      	ldr	r0, [pc, #20]	; (8003574 <UART_Send_LedReading+0x44>)
 8003560:	f004 ffb5 	bl	80084ce <HAL_UART_Transmit>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	2002b7af 	.word	0x2002b7af
 8003570:	080249dc 	.word	0x080249dc
 8003574:	2002b66c 	.word	0x2002b66c

08003578 <UART_Send_LedNormal>:
void UART_Send_LedNormal(){
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 800357e:	f000 f8f9 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	sprintf(Uart_data.Tx_Buffer,"lednormal");
 8003582:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <UART_Send_LedNormal+0x38>)
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <UART_Send_LedNormal+0x3c>)
 8003586:	cb03      	ldmia	r3!, {r0, r1}
 8003588:	6010      	str	r0, [r2, #0]
 800358a:	6051      	str	r1, [r2, #4]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	8113      	strh	r3, [r2, #8]
	len=strlen(Uart_data.Tx_Buffer);
 8003590:	4807      	ldr	r0, [pc, #28]	; (80035b0 <UART_Send_LedNormal+0x38>)
 8003592:	f7fc fe2d 	bl	80001f0 <strlen>
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	b29a      	uxth	r2, r3
 800359e:	2364      	movs	r3, #100	; 0x64
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <UART_Send_LedNormal+0x38>)
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <UART_Send_LedNormal+0x40>)
 80035a4:	f004 ff93 	bl	80084ce <HAL_UART_Transmit>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	2002b7af 	.word	0x2002b7af
 80035b4:	080249e8 	.word	0x080249e8
 80035b8:	2002b66c 	.word	0x2002b66c

080035bc <UART_Send_LedOff>:
void UART_Send_LedOff(){
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 80035c2:	f000 f8d7 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	sprintf(Uart_data.Tx_Buffer,"ledoff");
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <UART_Send_LedOff+0x3c>)
 80035c8:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <UART_Send_LedOff+0x40>)
 80035ca:	6810      	ldr	r0, [r2, #0]
 80035cc:	6018      	str	r0, [r3, #0]
 80035ce:	8891      	ldrh	r1, [r2, #4]
 80035d0:	7992      	ldrb	r2, [r2, #6]
 80035d2:	8099      	strh	r1, [r3, #4]
 80035d4:	719a      	strb	r2, [r3, #6]
	len=strlen(Uart_data.Tx_Buffer);
 80035d6:	4808      	ldr	r0, [pc, #32]	; (80035f8 <UART_Send_LedOff+0x3c>)
 80035d8:	f7fc fe0a 	bl	80001f0 <strlen>
 80035dc:	4603      	mov	r3, r0
 80035de:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	2364      	movs	r3, #100	; 0x64
 80035e6:	4904      	ldr	r1, [pc, #16]	; (80035f8 <UART_Send_LedOff+0x3c>)
 80035e8:	4805      	ldr	r0, [pc, #20]	; (8003600 <UART_Send_LedOff+0x44>)
 80035ea:	f004 ff70 	bl	80084ce <HAL_UART_Transmit>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	2002b7af 	.word	0x2002b7af
 80035fc:	080249f4 	.word	0x080249f4
 8003600:	2002b66c 	.word	0x2002b66c

08003604 <UART_Send_ScreenOn>:
void UART_Send_ScreenOn(){
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 800360a:	f000 f8b3 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	sprintf(Uart_data.Tx_Buffer,"screenon");
 800360e:	4a0b      	ldr	r2, [pc, #44]	; (800363c <UART_Send_ScreenOn+0x38>)
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <UART_Send_ScreenOn+0x3c>)
 8003612:	cb03      	ldmia	r3!, {r0, r1}
 8003614:	6010      	str	r0, [r2, #0]
 8003616:	6051      	str	r1, [r2, #4]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	7213      	strb	r3, [r2, #8]
	len=strlen(Uart_data.Tx_Buffer);
 800361c:	4807      	ldr	r0, [pc, #28]	; (800363c <UART_Send_ScreenOn+0x38>)
 800361e:	f7fc fde7 	bl	80001f0 <strlen>
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	b29a      	uxth	r2, r3
 800362a:	2364      	movs	r3, #100	; 0x64
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <UART_Send_ScreenOn+0x38>)
 800362e:	4805      	ldr	r0, [pc, #20]	; (8003644 <UART_Send_ScreenOn+0x40>)
 8003630:	f004 ff4d 	bl	80084ce <HAL_UART_Transmit>
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	2002b7af 	.word	0x2002b7af
 8003640:	080249fc 	.word	0x080249fc
 8003644:	2002b66c 	.word	0x2002b66c

08003648 <UART_Send_True>:
	uint8_t len;
	sprintf(Uart_data.Tx_Buffer,"screenoff");
	len=strlen(Uart_data.Tx_Buffer);
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
}
void UART_Send_True(){
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 800364e:	f000 f891 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	sprintf(Uart_data.Tx_Buffer,"true");
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <UART_Send_True+0x38>)
 8003654:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <UART_Send_True+0x3c>)
 8003656:	6810      	ldr	r0, [r2, #0]
 8003658:	6018      	str	r0, [r3, #0]
 800365a:	7912      	ldrb	r2, [r2, #4]
 800365c:	711a      	strb	r2, [r3, #4]
	len=strlen(Uart_data.Tx_Buffer);
 800365e:	4808      	ldr	r0, [pc, #32]	; (8003680 <UART_Send_True+0x38>)
 8003660:	f7fc fdc6 	bl	80001f0 <strlen>
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	b29a      	uxth	r2, r3
 800366c:	2364      	movs	r3, #100	; 0x64
 800366e:	4904      	ldr	r1, [pc, #16]	; (8003680 <UART_Send_True+0x38>)
 8003670:	4805      	ldr	r0, [pc, #20]	; (8003688 <UART_Send_True+0x40>)
 8003672:	f004 ff2c 	bl	80084ce <HAL_UART_Transmit>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2002b7af 	.word	0x2002b7af
 8003684:	08024a14 	.word	0x08024a14
 8003688:	2002b66c 	.word	0x2002b66c

0800368c <UART_Send_False>:
void UART_Send_False(){
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 8003692:	f000 f86f 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	sprintf(Uart_data.Tx_Buffer,"false");
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <UART_Send_False+0x38>)
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <UART_Send_False+0x3c>)
 800369a:	6810      	ldr	r0, [r2, #0]
 800369c:	6018      	str	r0, [r3, #0]
 800369e:	8892      	ldrh	r2, [r2, #4]
 80036a0:	809a      	strh	r2, [r3, #4]
	len=strlen(Uart_data.Tx_Buffer);
 80036a2:	4808      	ldr	r0, [pc, #32]	; (80036c4 <UART_Send_False+0x38>)
 80036a4:	f7fc fda4 	bl	80001f0 <strlen>
 80036a8:	4603      	mov	r3, r0
 80036aa:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	2364      	movs	r3, #100	; 0x64
 80036b2:	4904      	ldr	r1, [pc, #16]	; (80036c4 <UART_Send_False+0x38>)
 80036b4:	4805      	ldr	r0, [pc, #20]	; (80036cc <UART_Send_False+0x40>)
 80036b6:	f004 ff0a 	bl	80084ce <HAL_UART_Transmit>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2002b7af 	.word	0x2002b7af
 80036c8:	08024a1c 	.word	0x08024a1c
 80036cc:	2002b66c 	.word	0x2002b66c

080036d0 <UART_Send_Charge>:
void UART_Send_Charge(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 80036d6:	f000 f84d 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t data = BQ25713_Get_IsCharge();
 80036da:	f7fd fa83 	bl	8000be4 <BQ25713_Get_IsCharge>
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
	uint8_t len;
	if (data == 1){
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d106      	bne.n	80036f6 <UART_Send_Charge+0x26>
		sprintf(Uart_data.Tx_Buffer,"true");
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <UART_Send_Charge+0x54>)
 80036ea:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <UART_Send_Charge+0x58>)
 80036ec:	6810      	ldr	r0, [r2, #0]
 80036ee:	6018      	str	r0, [r3, #0]
 80036f0:	7912      	ldrb	r2, [r2, #4]
 80036f2:	711a      	strb	r2, [r3, #4]
 80036f4:	e005      	b.n	8003702 <UART_Send_Charge+0x32>
	}
	else {
		sprintf(Uart_data.Tx_Buffer,"false");
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <UART_Send_Charge+0x54>)
 80036f8:	4a0c      	ldr	r2, [pc, #48]	; (800372c <UART_Send_Charge+0x5c>)
 80036fa:	6810      	ldr	r0, [r2, #0]
 80036fc:	6018      	str	r0, [r3, #0]
 80036fe:	8892      	ldrh	r2, [r2, #4]
 8003700:	809a      	strh	r2, [r3, #4]
	}
	len=strlen(Uart_data.Tx_Buffer);
 8003702:	4808      	ldr	r0, [pc, #32]	; (8003724 <UART_Send_Charge+0x54>)
 8003704:	f7fc fd74 	bl	80001f0 <strlen>
 8003708:	4603      	mov	r3, r0
 800370a:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 800370c:	79bb      	ldrb	r3, [r7, #6]
 800370e:	b29a      	uxth	r2, r3
 8003710:	2364      	movs	r3, #100	; 0x64
 8003712:	4904      	ldr	r1, [pc, #16]	; (8003724 <UART_Send_Charge+0x54>)
 8003714:	4806      	ldr	r0, [pc, #24]	; (8003730 <UART_Send_Charge+0x60>)
 8003716:	f004 feda 	bl	80084ce <HAL_UART_Transmit>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2002b7af 	.word	0x2002b7af
 8003728:	08024a14 	.word	0x08024a14
 800372c:	08024a1c 	.word	0x08024a1c
 8003730:	2002b66c 	.word	0x2002b66c

08003734 <UART_Send_Version>:
	sprintf(Uart_data.Tx_Buffer,"error");
	len=strlen(Uart_data.Tx_Buffer);
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
}

void UART_Send_Version(){
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
	UART_Init_Buffer_Tx();
 800373a:	f000 f81b 	bl	8003774 <UART_Init_Buffer_Tx>
	uint8_t len;
	sprintf(Uart_data.Tx_Buffer, VERSION_FIRMWARE);
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <UART_Send_Version+0x34>)
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <UART_Send_Version+0x38>)
 8003742:	cb03      	ldmia	r3!, {r0, r1}
 8003744:	6010      	str	r0, [r2, #0]
 8003746:	6051      	str	r1, [r2, #4]
	len=strlen(Uart_data.Tx_Buffer);
 8003748:	4807      	ldr	r0, [pc, #28]	; (8003768 <UART_Send_Version+0x34>)
 800374a:	f7fc fd51 	bl	80001f0 <strlen>
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, Uart_data.Tx_Buffer, len, 100);
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	b29a      	uxth	r2, r3
 8003756:	2364      	movs	r3, #100	; 0x64
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <UART_Send_Version+0x34>)
 800375a:	4805      	ldr	r0, [pc, #20]	; (8003770 <UART_Send_Version+0x3c>)
 800375c:	f004 feb7 	bl	80084ce <HAL_UART_Transmit>
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2002b7af 	.word	0x2002b7af
 800376c:	08024a2c 	.word	0x08024a2c
 8003770:	2002b66c 	.word	0x2002b66c

08003774 <UART_Init_Buffer_Tx>:

void UART_Init_Buffer_Tx(){
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	71fb      	strb	r3, [r7, #7]
	for (i = 0 ; i < 50 ; i++){
 800377e:	2300      	movs	r3, #0
 8003780:	71fb      	strb	r3, [r7, #7]
 8003782:	e008      	b.n	8003796 <UART_Init_Buffer_Tx+0x22>
		Uart_data.Tx_Buffer[i] = 0;
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <UART_Init_Buffer_Tx+0x34>)
 8003788:	4413      	add	r3, r2
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
	for (i = 0 ; i < 50 ; i++){
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	3301      	adds	r3, #1
 8003794:	71fb      	strb	r3, [r7, #7]
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b31      	cmp	r3, #49	; 0x31
 800379a:	d9f3      	bls.n	8003784 <UART_Init_Buffer_Tx+0x10>
	}
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	2002b6ac 	.word	0x2002b6ac

080037ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80037ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037b2:	e003      	b.n	80037bc <LoopCopyDataInit>

080037b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037ba:	3104      	adds	r1, #4

080037bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037bc:	480b      	ldr	r0, [pc, #44]	; (80037ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037c4:	d3f6      	bcc.n	80037b4 <CopyDataInit>
  ldr  r2, =_sbss
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037c8:	e002      	b.n	80037d0 <LoopFillZerobss>

080037ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037cc:	f842 3b04 	str.w	r3, [r2], #4

080037d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037d4:	d3f9      	bcc.n	80037ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037d6:	f7ff f9f1 	bl	8002bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037da:	f01f ff1b 	bl	8023614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037de:	f7fd fd8f 	bl	8001300 <main>
  bx  lr    
 80037e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037e4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80037e8:	081272f8 	.word	0x081272f8
  ldr  r0, =_sdata
 80037ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037f0:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 80037f4:	20025908 	.word	0x20025908
  ldr  r3, = _ebss
 80037f8:	2002b94c 	.word	0x2002b94c

080037fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037fc:	e7fe      	b.n	80037fc <ADC_IRQHandler>
	...

08003800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_Init+0x40>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <HAL_Init+0x40>)
 800380a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800380e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_Init+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <HAL_Init+0x40>)
 8003816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800381c:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_Init+0x40>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a07      	ldr	r2, [pc, #28]	; (8003840 <HAL_Init+0x40>)
 8003822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003828:	2003      	movs	r0, #3
 800382a:	f000 f91c 	bl	8003a66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800382e:	2000      	movs	r0, #0
 8003830:	f7ff f854 	bl	80028dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003834:	f7fe fc5c 	bl	80020f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023c00 	.word	0x40023c00

08003844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_IncTick+0x20>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x24>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4413      	add	r3, r2
 8003854:	4a04      	ldr	r2, [pc, #16]	; (8003868 <HAL_IncTick+0x24>)
 8003856:	6013      	str	r3, [r2, #0]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c
 8003868:	2002b944 	.word	0x2002b944

0800386c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return uwTick;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <HAL_GetTick+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2002b944 	.word	0x2002b944

08003884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800388c:	f7ff ffee 	bl	800386c <HAL_GetTick>
 8003890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d005      	beq.n	80038aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_Delay+0x40>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038aa:	bf00      	nop
 80038ac:	f7ff ffde 	bl	800386c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d8f7      	bhi.n	80038ac <HAL_Delay+0x28>
  {
  }
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	2000000c 	.word	0x2000000c

080038c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fa:	4a04      	ldr	r2, [pc, #16]	; (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	; (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db10      	blt.n	800399c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4909      	ldr	r1, [pc, #36]	; (80039a8 <__NVIC_DisableIRQ+0x40>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	3320      	adds	r3, #32
 8003990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003994:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003998:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100

080039ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db0a      	blt.n	80039d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	490c      	ldr	r1, [pc, #48]	; (80039f8 <__NVIC_SetPriority+0x4c>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d4:	e00a      	b.n	80039ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4908      	ldr	r1, [pc, #32]	; (80039fc <__NVIC_SetPriority+0x50>)
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3b04      	subs	r3, #4
 80039e4:	0112      	lsls	r2, r2, #4
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	440b      	add	r3, r1
 80039ea:	761a      	strb	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000e100 	.word	0xe000e100
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	; 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f1c3 0307 	rsb	r3, r3, #7
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	bf28      	it	cs
 8003a1e:	2304      	movcs	r3, #4
 8003a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d902      	bls.n	8003a30 <NVIC_EncodePriority+0x30>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3b03      	subs	r3, #3
 8003a2e:	e000      	b.n	8003a32 <NVIC_EncodePriority+0x32>
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	f04f 32ff 	mov.w	r2, #4294967295
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	401a      	ands	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a48:	f04f 31ff 	mov.w	r1, #4294967295
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43d9      	mvns	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a58:	4313      	orrs	r3, r2
         );
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3724      	adds	r7, #36	; 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff2a 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8e:	f7ff ff3f 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003a92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	6978      	ldr	r0, [r7, #20]
 8003a9a:	f7ff ffb1 	bl	8003a00 <NVIC_EncodePriority>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff80 	bl	80039ac <__NVIC_SetPriority>
}
 8003aac:	bf00      	nop
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ff32 	bl	800392c <__NVIC_EnableIRQ>
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff ff42 	bl	8003968 <__NVIC_DisableIRQ>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00e      	b.n	8003b1c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	795b      	ldrb	r3, [r3, #5]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fe fb1a 	bl	8002148 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d004      	beq.n	8003b42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e00c      	b.n	8003b5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2205      	movs	r2, #5
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e03b      	b.n	8003bf2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fe fafc 	bl	800218c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	f023 0107 	bic.w	r1, r3, #7
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68d1      	ldr	r1, [r2, #12]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e05f      	b.n	8003cce <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003c0e:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <HAL_DMA2D_DeInit+0xdc>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02e      	beq.n	8003c78 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d107      	bne.n	8003c38 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8c1 	bl	8003db0 <HAL_DMA2D_Abort>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d021      	beq.n	8003c78 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e04a      	b.n	8003cce <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d108      	bne.n	8003c58 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8003c46:	2100      	movs	r1, #0
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f8f7 	bl	8003e3c <HAL_DMA2D_CLUTLoading_Abort>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d011      	beq.n	8003c78 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e03a      	b.n	8003cce <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d108      	bne.n	8003c78 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003c66:	2101      	movs	r1, #1
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f8e7 	bl	8003e3c <HAL_DMA2D_CLUTLoading_Abort>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e02a      	b.n	8003cce <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	223f      	movs	r2, #63	; 0x3f
 8003c86:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fe fa93 	bl	80021dc <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800

08003cdc <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_DMA2D_Start_IT+0x1c>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e020      	b.n	8003d3a <HAL_DMA2D_Start_IT+0x5e>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fa84 	bl	8004220 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003d26:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af02      	add	r7, sp, #8
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e024      	b.n	8003da8 <HAL_DMA2D_BlendingStart_IT+0x66>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fa4d 	bl	8004220 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003d94:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 0205 	bic.w	r2, r3, #5
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0204 	orr.w	r2, r2, #4
 8003dca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dcc:	f7ff fd4e 	bl	800386c <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003dd2:	e017      	b.n	8003e04 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003dd4:	f7ff fd4a 	bl	800386c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de2:	d90f      	bls.n	8003e04 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e017      	b.n	8003e34 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e0      	bne.n	8003dd4 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8003e20:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3324      	adds	r3, #36	; 0x24
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0204 	orr.w	r2, r2, #4
 8003e5c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d103      	bne.n	8003e6c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	331c      	adds	r3, #28
 8003e6a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003e6c:	f7ff fcfe 	bl	800386c <HAL_GetTick>
 8003e70:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003e72:	e017      	b.n	8003ea4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003e74:	f7ff fcfa 	bl	800386c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e82:	d90f      	bls.n	8003ea4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2203      	movs	r2, #3
 8003e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e016      	b.n	8003ed2 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e1      	bne.n	8003e74 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d026      	beq.n	8003f4a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d021      	beq.n	8003f4a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f14:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2201      	movs	r2, #1
 8003f28:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d026      	beq.n	8003fa2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d021      	beq.n	8003fa2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2220      	movs	r2, #32
 8003f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	f043 0202 	orr.w	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2204      	movs	r2, #4
 8003f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d026      	beq.n	8003ffa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d021      	beq.n	8003ffa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2208      	movs	r2, #8
 8003fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	f043 0204 	orr.w	r2, r3, #4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00e      	beq.n	800402c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2204      	movs	r2, #4
 8004024:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f853 	bl	80040d2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d024      	beq.n	8004080 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01f      	beq.n	8004080 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800404e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2202      	movs	r2, #2
 8004056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01f      	beq.n	80040ca <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01a      	beq.n	80040ca <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040a2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2210      	movs	r2, #16
 80040aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f80e 	bl	80040e6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_DMA2D_ConfigLayer+0x20>
 8004118:	2302      	movs	r3, #2
 800411a:	e079      	b.n	8004210 <HAL_DMA2D_ConfigLayer+0x114>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	3318      	adds	r3, #24
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004146:	4b35      	ldr	r3, [pc, #212]	; (800421c <HAL_DMA2D_ConfigLayer+0x120>)
 8004148:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b0a      	cmp	r3, #10
 8004150:	d003      	beq.n	800415a <HAL_DMA2D_ConfigLayer+0x5e>
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b09      	cmp	r3, #9
 8004158:	d107      	bne.n	800416a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e005      	b.n	8004176 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	061b      	lsls	r3, r3, #24
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d120      	bne.n	80041be <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	43db      	mvns	r3, r3
 8004186:	ea02 0103 	and.w	r1, r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	430a      	orrs	r2, r1
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b0a      	cmp	r3, #10
 80041a4:	d003      	beq.n	80041ae <HAL_DMA2D_ConfigLayer+0xb2>
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d127      	bne.n	80041fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
 80041bc:	e01f      	b.n	80041fe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	43db      	mvns	r3, r3
 80041c8:	ea02 0103 	and.w	r1, r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b0a      	cmp	r3, #10
 80041e6:	d003      	beq.n	80041f0 <HAL_DMA2D_ConfigLayer+0xf4>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b09      	cmp	r3, #9
 80041ee:	d106      	bne.n	80041fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041fc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	ff03000f 	.word	0xff03000f

08004220 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004220:	b480      	push	{r7}
 8004222:	b08b      	sub	sp, #44	; 0x2c
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	041a      	lsls	r2, r3, #16
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004258:	d174      	bne.n	8004344 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004260:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004268:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004270:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	431a      	orrs	r2, r3
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	4313      	orrs	r3, r2
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
 8004290:	e053      	b.n	800433a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d106      	bne.n	80042a8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4313      	orrs	r3, r2
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
 80042a6:	e048      	b.n	800433a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d111      	bne.n	80042d4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	0cdb      	lsrs	r3, r3, #19
 80042b4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	0a9b      	lsrs	r3, r3, #10
 80042ba:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	08db      	lsrs	r3, r3, #3
 80042c0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	02db      	lsls	r3, r3, #11
 80042ca:	4313      	orrs	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
 80042d2:	e032      	b.n	800433a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d117      	bne.n	800430c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	0fdb      	lsrs	r3, r3, #31
 80042e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	0cdb      	lsrs	r3, r3, #19
 80042e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	0adb      	lsrs	r3, r3, #11
 80042ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	029b      	lsls	r3, r3, #10
 80042fc:	431a      	orrs	r2, r3
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	03db      	lsls	r3, r3, #15
 8004302:	4313      	orrs	r3, r2
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
 800430a:	e016      	b.n	800433a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	0f1b      	lsrs	r3, r3, #28
 8004310:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	0d1b      	lsrs	r3, r3, #20
 8004316:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	0b1b      	lsrs	r3, r3, #12
 800431c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	011a      	lsls	r2, r3, #4
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	431a      	orrs	r2, r3
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	4313      	orrs	r3, r2
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004342:	e003      	b.n	800434c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	60da      	str	r2, [r3, #12]
}
 800434c:	bf00      	nop
 800434e:	372c      	adds	r7, #44	; 0x2c
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e177      	b.n	8004664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	429a      	cmp	r2, r3
 800438e:	f040 8166 	bne.w	800465e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d00b      	beq.n	80043b2 <HAL_GPIO_Init+0x5a>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d007      	beq.n	80043b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043a6:	2b11      	cmp	r3, #17
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b12      	cmp	r3, #18
 80043b0:	d130      	bne.n	8004414 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	2203      	movs	r2, #3
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e8:	2201      	movs	r2, #1
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 0201 	and.w	r2, r3, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2203      	movs	r2, #3
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0xfc>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b12      	cmp	r3, #18
 8004452:	d123      	bne.n	800449c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	08da      	lsrs	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3208      	adds	r2, #8
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	220f      	movs	r2, #15
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	08da      	lsrs	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3208      	adds	r2, #8
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	2203      	movs	r2, #3
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0203 	and.w	r2, r3, #3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80c0 	beq.w	800465e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	4b65      	ldr	r3, [pc, #404]	; (8004678 <HAL_GPIO_Init+0x320>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	4a64      	ldr	r2, [pc, #400]	; (8004678 <HAL_GPIO_Init+0x320>)
 80044e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ec:	6453      	str	r3, [r2, #68]	; 0x44
 80044ee:	4b62      	ldr	r3, [pc, #392]	; (8004678 <HAL_GPIO_Init+0x320>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044fa:	4a60      	ldr	r2, [pc, #384]	; (800467c <HAL_GPIO_Init+0x324>)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a57      	ldr	r2, [pc, #348]	; (8004680 <HAL_GPIO_Init+0x328>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d037      	beq.n	8004596 <HAL_GPIO_Init+0x23e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a56      	ldr	r2, [pc, #344]	; (8004684 <HAL_GPIO_Init+0x32c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d031      	beq.n	8004592 <HAL_GPIO_Init+0x23a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a55      	ldr	r2, [pc, #340]	; (8004688 <HAL_GPIO_Init+0x330>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <HAL_GPIO_Init+0x236>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a54      	ldr	r2, [pc, #336]	; (800468c <HAL_GPIO_Init+0x334>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d025      	beq.n	800458a <HAL_GPIO_Init+0x232>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a53      	ldr	r2, [pc, #332]	; (8004690 <HAL_GPIO_Init+0x338>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01f      	beq.n	8004586 <HAL_GPIO_Init+0x22e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a52      	ldr	r2, [pc, #328]	; (8004694 <HAL_GPIO_Init+0x33c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d019      	beq.n	8004582 <HAL_GPIO_Init+0x22a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a51      	ldr	r2, [pc, #324]	; (8004698 <HAL_GPIO_Init+0x340>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_GPIO_Init+0x226>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a50      	ldr	r2, [pc, #320]	; (800469c <HAL_GPIO_Init+0x344>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00d      	beq.n	800457a <HAL_GPIO_Init+0x222>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a4f      	ldr	r2, [pc, #316]	; (80046a0 <HAL_GPIO_Init+0x348>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0x21e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a4e      	ldr	r2, [pc, #312]	; (80046a4 <HAL_GPIO_Init+0x34c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_GPIO_Init+0x21a>
 800456e:	2309      	movs	r3, #9
 8004570:	e012      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004572:	230a      	movs	r3, #10
 8004574:	e010      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004576:	2308      	movs	r3, #8
 8004578:	e00e      	b.n	8004598 <HAL_GPIO_Init+0x240>
 800457a:	2307      	movs	r3, #7
 800457c:	e00c      	b.n	8004598 <HAL_GPIO_Init+0x240>
 800457e:	2306      	movs	r3, #6
 8004580:	e00a      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004582:	2305      	movs	r3, #5
 8004584:	e008      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004586:	2304      	movs	r3, #4
 8004588:	e006      	b.n	8004598 <HAL_GPIO_Init+0x240>
 800458a:	2303      	movs	r3, #3
 800458c:	e004      	b.n	8004598 <HAL_GPIO_Init+0x240>
 800458e:	2302      	movs	r3, #2
 8004590:	e002      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_GPIO_Init+0x240>
 8004596:	2300      	movs	r3, #0
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	f002 0203 	and.w	r2, r2, #3
 800459e:	0092      	lsls	r2, r2, #2
 80045a0:	4093      	lsls	r3, r2
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045a8:	4934      	ldr	r1, [pc, #208]	; (800467c <HAL_GPIO_Init+0x324>)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	3302      	adds	r3, #2
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b6:	4b3c      	ldr	r3, [pc, #240]	; (80046a8 <HAL_GPIO_Init+0x350>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045da:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <HAL_GPIO_Init+0x350>)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045e0:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <HAL_GPIO_Init+0x350>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004604:	4a28      	ldr	r2, [pc, #160]	; (80046a8 <HAL_GPIO_Init+0x350>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800460a:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <HAL_GPIO_Init+0x350>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <HAL_GPIO_Init+0x350>)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <HAL_GPIO_Init+0x350>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004658:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_GPIO_Init+0x350>)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3301      	adds	r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	f67f ae84 	bls.w	8004374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3724      	adds	r7, #36	; 0x24
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40023800 	.word	0x40023800
 800467c:	40013800 	.word	0x40013800
 8004680:	40020000 	.word	0x40020000
 8004684:	40020400 	.word	0x40020400
 8004688:	40020800 	.word	0x40020800
 800468c:	40020c00 	.word	0x40020c00
 8004690:	40021000 	.word	0x40021000
 8004694:	40021400 	.word	0x40021400
 8004698:	40021800 	.word	0x40021800
 800469c:	40021c00 	.word	0x40021c00
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40022400 	.word	0x40022400
 80046a8:	40013c00 	.word	0x40013c00

080046ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	887b      	ldrh	r3, [r7, #2]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
 80046c8:	e001      	b.n	80046ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	807b      	strh	r3, [r7, #2]
 80046e8:	4613      	mov	r3, r2
 80046ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046ec:	787b      	ldrb	r3, [r7, #1]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046f8:	e003      	b.n	8004702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	041a      	lsls	r2, r3, #16
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	619a      	str	r2, [r3, #24]
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	460b      	mov	r3, r1
 8004718:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695a      	ldr	r2, [r3, #20]
 800471e:	887b      	ldrh	r3, [r7, #2]
 8004720:	401a      	ands	r2, r3
 8004722:	887b      	ldrh	r3, [r7, #2]
 8004724:	429a      	cmp	r2, r3
 8004726:	d104      	bne.n	8004732 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	041a      	lsls	r2, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004730:	e002      	b.n	8004738 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	619a      	str	r2, [r3, #24]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	4013      	ands	r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800475a:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fc fd88 	bl	8001278 <HAL_GPIO_EXTI_Callback>
  }
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40013c00 	.word	0x40013c00

08004774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e11f      	b.n	80049c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fd fd38 	bl	8002210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2224      	movs	r2, #36	; 0x24
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047d8:	f002 fc12 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 80047dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4a7b      	ldr	r2, [pc, #492]	; (80049d0 <HAL_I2C_Init+0x25c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d807      	bhi.n	80047f8 <HAL_I2C_Init+0x84>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a7a      	ldr	r2, [pc, #488]	; (80049d4 <HAL_I2C_Init+0x260>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	bf94      	ite	ls
 80047f0:	2301      	movls	r3, #1
 80047f2:	2300      	movhi	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e006      	b.n	8004806 <HAL_I2C_Init+0x92>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a77      	ldr	r2, [pc, #476]	; (80049d8 <HAL_I2C_Init+0x264>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	bf94      	ite	ls
 8004800:	2301      	movls	r3, #1
 8004802:	2300      	movhi	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e0db      	b.n	80049c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a72      	ldr	r2, [pc, #456]	; (80049dc <HAL_I2C_Init+0x268>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	0c9b      	lsrs	r3, r3, #18
 8004818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a64      	ldr	r2, [pc, #400]	; (80049d0 <HAL_I2C_Init+0x25c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d802      	bhi.n	8004848 <HAL_I2C_Init+0xd4>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	3301      	adds	r3, #1
 8004846:	e009      	b.n	800485c <HAL_I2C_Init+0xe8>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	4a63      	ldr	r2, [pc, #396]	; (80049e0 <HAL_I2C_Init+0x26c>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	3301      	adds	r3, #1
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	430b      	orrs	r3, r1
 8004862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800486e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4956      	ldr	r1, [pc, #344]	; (80049d0 <HAL_I2C_Init+0x25c>)
 8004878:	428b      	cmp	r3, r1
 800487a:	d80d      	bhi.n	8004898 <HAL_I2C_Init+0x124>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1e59      	subs	r1, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	fbb1 f3f3 	udiv	r3, r1, r3
 800488a:	3301      	adds	r3, #1
 800488c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004890:	2b04      	cmp	r3, #4
 8004892:	bf38      	it	cc
 8004894:	2304      	movcc	r3, #4
 8004896:	e04f      	b.n	8004938 <HAL_I2C_Init+0x1c4>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d111      	bne.n	80048c4 <HAL_I2C_Init+0x150>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1e58      	subs	r0, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	440b      	add	r3, r1
 80048ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e012      	b.n	80048ea <HAL_I2C_Init+0x176>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1e58      	subs	r0, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	0099      	lsls	r1, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048da:	3301      	adds	r3, #1
 80048dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Init+0x17e>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e022      	b.n	8004938 <HAL_I2C_Init+0x1c4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10e      	bne.n	8004918 <HAL_I2C_Init+0x1a4>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1e58      	subs	r0, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	440b      	add	r3, r1
 8004908:	fbb0 f3f3 	udiv	r3, r0, r3
 800490c:	3301      	adds	r3, #1
 800490e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004916:	e00f      	b.n	8004938 <HAL_I2C_Init+0x1c4>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e58      	subs	r0, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	0099      	lsls	r1, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	fbb0 f3f3 	udiv	r3, r0, r3
 800492e:	3301      	adds	r3, #1
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	6809      	ldr	r1, [r1, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6911      	ldr	r1, [r2, #16]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	430b      	orrs	r3, r1
 800497a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	000186a0 	.word	0x000186a0
 80049d4:	001e847f 	.word	0x001e847f
 80049d8:	003d08ff 	.word	0x003d08ff
 80049dc:	431bde83 	.word	0x431bde83
 80049e0:	10624dd3 	.word	0x10624dd3

080049e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	461a      	mov	r2, r3
 80049f0:	460b      	mov	r3, r1
 80049f2:	817b      	strh	r3, [r7, #10]
 80049f4:	4613      	mov	r3, r2
 80049f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049f8:	f7fe ff38 	bl	800386c <HAL_GetTick>
 80049fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	f040 80e0 	bne.w	8004bcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	2319      	movs	r3, #25
 8004a12:	2201      	movs	r2, #1
 8004a14:	4970      	ldr	r1, [pc, #448]	; (8004bd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f001 f8f0 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0d3      	b.n	8004bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_I2C_Master_Transmit+0x50>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0cc      	b.n	8004bce <HAL_I2C_Master_Transmit+0x1ea>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d007      	beq.n	8004a5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0201 	orr.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2221      	movs	r2, #33	; 0x21
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2210      	movs	r2, #16
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	893a      	ldrh	r2, [r7, #8]
 8004a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a50      	ldr	r2, [pc, #320]	; (8004bdc <HAL_I2C_Master_Transmit+0x1f8>)
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a9c:	8979      	ldrh	r1, [r7, #10]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6a3a      	ldr	r2, [r7, #32]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fde2 	bl	800566c <I2C_MasterRequestWrite>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e08d      	b.n	8004bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ac8:	e066      	b.n	8004b98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	6a39      	ldr	r1, [r7, #32]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f001 f96a 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d107      	bne.n	8004af2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06b      	b.n	8004bce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d11b      	bne.n	8004b6c <HAL_I2C_Master_Transmit+0x188>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d017      	beq.n	8004b6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	6a39      	ldr	r1, [r7, #32]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f001 f95a 	bl	8005e2a <I2C_WaitOnBTFFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d107      	bne.n	8004b94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e01a      	b.n	8004bce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d194      	bne.n	8004aca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	00100002 	.word	0x00100002
 8004bdc:	ffff0000 	.word	0xffff0000

08004be0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08c      	sub	sp, #48	; 0x30
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	461a      	mov	r2, r3
 8004bec:	460b      	mov	r3, r1
 8004bee:	817b      	strh	r3, [r7, #10]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bf4:	f7fe fe3a 	bl	800386c <HAL_GetTick>
 8004bf8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	f040 820b 	bne.w	800501e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2319      	movs	r3, #25
 8004c0e:	2201      	movs	r2, #1
 8004c10:	497c      	ldr	r1, [pc, #496]	; (8004e04 <HAL_I2C_Master_Receive+0x224>)
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fff2 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e1fe      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2C_Master_Receive+0x50>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e1f7      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d007      	beq.n	8004c56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0201 	orr.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2222      	movs	r2, #34	; 0x22
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2210      	movs	r2, #16
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	893a      	ldrh	r2, [r7, #8]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a5c      	ldr	r2, [pc, #368]	; (8004e08 <HAL_I2C_Master_Receive+0x228>)
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c98:	8979      	ldrh	r1, [r7, #10]
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fd66 	bl	8005770 <I2C_MasterRequestRead>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e1b8      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d113      	bne.n	8004cde <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	e18c      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d11b      	bne.n	8004d1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e16c      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d11b      	bne.n	8004d5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	e14c      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d84:	e138      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	f200 80f1 	bhi.w	8004f72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d123      	bne.n	8004de0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f001 f885 	bl	8005eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e139      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dde:	e10b      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d14e      	bne.n	8004e86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	2200      	movs	r2, #0
 8004df0:	4906      	ldr	r1, [pc, #24]	; (8004e0c <HAL_I2C_Master_Receive+0x22c>)
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 ff02 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e10e      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
 8004e02:	bf00      	nop
 8004e04:	00100002 	.word	0x00100002
 8004e08:	ffff0000 	.word	0xffff0000
 8004e0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e84:	e0b8      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	4966      	ldr	r1, [pc, #408]	; (8005028 <HAL_I2C_Master_Receive+0x448>)
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 feb3 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0bf      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	2200      	movs	r2, #0
 8004eea:	494f      	ldr	r1, [pc, #316]	; (8005028 <HAL_I2C_Master_Receive+0x448>)
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fe85 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e091      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f70:	e042      	b.n	8004ff8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 ff98 	bl	8005eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e04c      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d118      	bne.n	8004ff8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f47f aec2 	bne.w	8004d86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3728      	adds	r7, #40	; 0x28
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	00010004 	.word	0x00010004

0800502c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4603      	mov	r3, r0
 800503c:	817b      	strh	r3, [r7, #10]
 800503e:	460b      	mov	r3, r1
 8005040:	813b      	strh	r3, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005046:	f7fe fc11 	bl	800386c <HAL_GetTick>
 800504a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b20      	cmp	r3, #32
 8005056:	f040 80d9 	bne.w	800520c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	2319      	movs	r3, #25
 8005060:	2201      	movs	r2, #1
 8005062:	496d      	ldr	r1, [pc, #436]	; (8005218 <HAL_I2C_Mem_Write+0x1ec>)
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fdc9 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
 8005072:	e0cc      	b.n	800520e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_I2C_Mem_Write+0x56>
 800507e:	2302      	movs	r3, #2
 8005080:	e0c5      	b.n	800520e <HAL_I2C_Mem_Write+0x1e2>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d007      	beq.n	80050a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2221      	movs	r2, #33	; 0x21
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2240      	movs	r2, #64	; 0x40
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4a4d      	ldr	r2, [pc, #308]	; (800521c <HAL_I2C_Mem_Write+0x1f0>)
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ea:	88f8      	ldrh	r0, [r7, #6]
 80050ec:	893a      	ldrh	r2, [r7, #8]
 80050ee:	8979      	ldrh	r1, [r7, #10]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	4603      	mov	r3, r0
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fc04 	bl	8005908 <I2C_RequestMemoryWrite>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d052      	beq.n	80051ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e081      	b.n	800520e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fe4a 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00d      	beq.n	8005136 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	2b04      	cmp	r3, #4
 8005120:	d107      	bne.n	8005132 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005130:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e06b      	b.n	800520e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d11b      	bne.n	80051ac <HAL_I2C_Mem_Write+0x180>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005178:	2b00      	cmp	r3, #0
 800517a:	d017      	beq.n	80051ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1aa      	bne.n	800510a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fe36 	bl	8005e2a <I2C_WaitOnBTFFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d107      	bne.n	80051dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e016      	b.n	800520e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	e000      	b.n	800520e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
  }
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	00100002 	.word	0x00100002
 800521c:	ffff0000 	.word	0xffff0000

08005220 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	; 0x30
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4603      	mov	r3, r0
 8005230:	817b      	strh	r3, [r7, #10]
 8005232:	460b      	mov	r3, r1
 8005234:	813b      	strh	r3, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800523a:	f7fe fb17 	bl	800386c <HAL_GetTick>
 800523e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b20      	cmp	r3, #32
 800524a:	f040 8208 	bne.w	800565e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	2319      	movs	r3, #25
 8005254:	2201      	movs	r2, #1
 8005256:	497b      	ldr	r1, [pc, #492]	; (8005444 <HAL_I2C_Mem_Read+0x224>)
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fccf 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
 8005266:	e1fb      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_I2C_Mem_Read+0x56>
 8005272:	2302      	movs	r3, #2
 8005274:	e1f4      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b01      	cmp	r3, #1
 800528a:	d007      	beq.n	800529c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2222      	movs	r2, #34	; 0x22
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2240      	movs	r2, #64	; 0x40
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4a5b      	ldr	r2, [pc, #364]	; (8005448 <HAL_I2C_Mem_Read+0x228>)
 80052dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052de:	88f8      	ldrh	r0, [r7, #6]
 80052e0:	893a      	ldrh	r2, [r7, #8]
 80052e2:	8979      	ldrh	r1, [r7, #10]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	4603      	mov	r3, r0
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fb9e 	bl	8005a30 <I2C_RequestMemoryRead>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e1b0      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	d113      	bne.n	800532e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005306:	2300      	movs	r3, #0
 8005308:	623b      	str	r3, [r7, #32]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	623b      	str	r3, [r7, #32]
 800531a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e184      	b.n	8005638 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	2b01      	cmp	r3, #1
 8005334:	d11b      	bne.n	800536e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e164      	b.n	8005638 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	2b02      	cmp	r3, #2
 8005374:	d11b      	bne.n	80053ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005384:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005396:	2300      	movs	r3, #0
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	e144      	b.n	8005638 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053c4:	e138      	b.n	8005638 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	f200 80f1 	bhi.w	80055b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d123      	bne.n	8005420 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fd65 	bl	8005eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e139      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800541e:	e10b      	b.n	8005638 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005424:	2b02      	cmp	r3, #2
 8005426:	d14e      	bne.n	80054c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2200      	movs	r2, #0
 8005430:	4906      	ldr	r1, [pc, #24]	; (800544c <HAL_I2C_Mem_Read+0x22c>)
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 fbe2 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e10e      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
 8005442:	bf00      	nop
 8005444:	00100002 	.word	0x00100002
 8005448:	ffff0000 	.word	0xffff0000
 800544c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054c4:	e0b8      	b.n	8005638 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2200      	movs	r2, #0
 80054ce:	4966      	ldr	r1, [pc, #408]	; (8005668 <HAL_I2C_Mem_Read+0x448>)
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fb93 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0bf      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2200      	movs	r2, #0
 800552a:	494f      	ldr	r1, [pc, #316]	; (8005668 <HAL_I2C_Mem_Read+0x448>)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fb65 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e091      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055b0:	e042      	b.n	8005638 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fc78 	bl	8005eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e04c      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b04      	cmp	r3, #4
 8005604:	d118      	bne.n	8005638 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563c:	2b00      	cmp	r3, #0
 800563e:	f47f aec2 	bne.w	80053c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	e000      	b.n	8005660 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800565e:	2302      	movs	r3, #2
  }
}
 8005660:	4618      	mov	r0, r3
 8005662:	3728      	adds	r7, #40	; 0x28
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	00010004 	.word	0x00010004

0800566c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	460b      	mov	r3, r1
 800567a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d006      	beq.n	8005696 <I2C_MasterRequestWrite+0x2a>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d003      	beq.n	8005696 <I2C_MasterRequestWrite+0x2a>
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005694:	d108      	bne.n	80056a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	e00b      	b.n	80056c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	2b12      	cmp	r3, #18
 80056ae:	d107      	bne.n	80056c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 fa95 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e035      	b.n	800575e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fa:	d108      	bne.n	800570e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056fc:	897b      	ldrh	r3, [r7, #10]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800570a:	611a      	str	r2, [r3, #16]
 800570c:	e01b      	b.n	8005746 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	11db      	asrs	r3, r3, #7
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f003 0306 	and.w	r3, r3, #6
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f063 030f 	orn	r3, r3, #15
 800571e:	b2da      	uxtb	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	490f      	ldr	r1, [pc, #60]	; (8005768 <I2C_MasterRequestWrite+0xfc>)
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fabc 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e010      	b.n	800575e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800573c:	897b      	ldrh	r3, [r7, #10]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4908      	ldr	r1, [pc, #32]	; (800576c <I2C_MasterRequestWrite+0x100>)
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 faac 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	00010008 	.word	0x00010008
 800576c:	00010002 	.word	0x00010002

08005770 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	460b      	mov	r3, r1
 800577e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005794:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d006      	beq.n	80057aa <I2C_MasterRequestRead+0x3a>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d003      	beq.n	80057aa <I2C_MasterRequestRead+0x3a>
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057a8:	d108      	bne.n	80057bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e00b      	b.n	80057d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	2b11      	cmp	r3, #17
 80057c2:	d107      	bne.n	80057d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fa0b 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00c      	beq.n	8005806 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e078      	b.n	80058f8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800580e:	d108      	bne.n	8005822 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005810:	897b      	ldrh	r3, [r7, #10]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	e05e      	b.n	80058e0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005822:	897b      	ldrh	r3, [r7, #10]
 8005824:	11db      	asrs	r3, r3, #7
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 0306 	and.w	r3, r3, #6
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f063 030f 	orn	r3, r3, #15
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4930      	ldr	r1, [pc, #192]	; (8005900 <I2C_MasterRequestRead+0x190>)
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 fa32 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e053      	b.n	80058f8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005850:	897b      	ldrh	r3, [r7, #10]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	4929      	ldr	r1, [pc, #164]	; (8005904 <I2C_MasterRequestRead+0x194>)
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fa22 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e043      	b.n	80058f8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005870:	2300      	movs	r3, #0
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005894:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f9aa 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e017      	b.n	80058f8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80058c8:	897b      	ldrh	r3, [r7, #10]
 80058ca:	11db      	asrs	r3, r3, #7
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f003 0306 	and.w	r3, r3, #6
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f063 030e 	orn	r3, r3, #14
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4907      	ldr	r1, [pc, #28]	; (8005904 <I2C_MasterRequestRead+0x194>)
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f9df 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	00010008 	.word	0x00010008
 8005904:	00010002 	.word	0x00010002

08005908 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	4608      	mov	r0, r1
 8005912:	4611      	mov	r1, r2
 8005914:	461a      	mov	r2, r3
 8005916:	4603      	mov	r3, r0
 8005918:	817b      	strh	r3, [r7, #10]
 800591a:	460b      	mov	r3, r1
 800591c:	813b      	strh	r3, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	2200      	movs	r2, #0
 800593a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f95c 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e05f      	b.n	8005a24 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005972:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	492c      	ldr	r1, [pc, #176]	; (8005a2c <I2C_RequestMemoryWrite+0x124>)
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f995 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e04c      	b.n	8005a24 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a2:	6a39      	ldr	r1, [r7, #32]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f9ff 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00d      	beq.n	80059cc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d107      	bne.n	80059c8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e02b      	b.n	8005a24 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059d2:	893b      	ldrh	r3, [r7, #8]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	e021      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059de:	893b      	ldrh	r3, [r7, #8]
 80059e0:	0a1b      	lsrs	r3, r3, #8
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ee:	6a39      	ldr	r1, [r7, #32]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f9d9 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00d      	beq.n	8005a18 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d107      	bne.n	8005a14 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e005      	b.n	8005a24 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a18:	893b      	ldrh	r3, [r7, #8]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	00010002 	.word	0x00010002

08005a30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	817b      	strh	r3, [r7, #10]
 8005a42:	460b      	mov	r3, r1
 8005a44:	813b      	strh	r3, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f8c0 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e0a9      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a9c:	897b      	ldrh	r3, [r7, #10]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aaa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	6a3a      	ldr	r2, [r7, #32]
 8005ab0:	4951      	ldr	r1, [pc, #324]	; (8005bf8 <I2C_RequestMemoryRead+0x1c8>)
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f8f9 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e096      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ada:	6a39      	ldr	r1, [r7, #32]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f963 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00d      	beq.n	8005b04 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d107      	bne.n	8005b00 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e075      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d105      	bne.n	8005b16 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0a:	893b      	ldrh	r3, [r7, #8]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	e021      	b.n	8005b5a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b16:	893b      	ldrh	r3, [r7, #8]
 8005b18:	0a1b      	lsrs	r3, r3, #8
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b26:	6a39      	ldr	r1, [r7, #32]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f93d 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d107      	bne.n	8005b4c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e04f      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b50:	893b      	ldrh	r3, [r7, #8]
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5c:	6a39      	ldr	r1, [r7, #32]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f922 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00d      	beq.n	8005b86 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d107      	bne.n	8005b82 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e034      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f82a 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e013      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bc8:	897b      	ldrh	r3, [r7, #10]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	6a3a      	ldr	r2, [r7, #32]
 8005bdc:	4906      	ldr	r1, [pc, #24]	; (8005bf8 <I2C_RequestMemoryRead+0x1c8>)
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f863 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	00010002 	.word	0x00010002

08005bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0c:	e025      	b.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d021      	beq.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7fd fe29 	bl	800386c <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d302      	bcc.n	8005c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d116      	bne.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e023      	b.n	8005ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10d      	bne.n	8005c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	43da      	mvns	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	e00c      	b.n	8005c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	43da      	mvns	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf0c      	ite	eq
 8005c92:	2301      	moveq	r3, #1
 8005c94:	2300      	movne	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d0b6      	beq.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cb8:	e051      	b.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc8:	d123      	bne.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e046      	b.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d021      	beq.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fd fda7 	bl	800386c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d116      	bne.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f043 0220 	orr.w	r2, r3, #32
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e020      	b.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10c      	bne.n	8005d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf14      	ite	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	2300      	moveq	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	e00b      	b.n	8005d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	43da      	mvns	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d18d      	bne.n	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005db4:	e02d      	b.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f8ce 	bl	8005f58 <I2C_IsAcknowledgeFailed>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e02d      	b.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d021      	beq.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fd fd4d 	bl	800386c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d116      	bne.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e007      	b.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d1ca      	bne.n	8005db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e36:	e02d      	b.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f88d 	bl	8005f58 <I2C_IsAcknowledgeFailed>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e02d      	b.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d021      	beq.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e50:	f7fd fd0c 	bl	800386c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d302      	bcc.n	8005e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d116      	bne.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	f043 0220 	orr.w	r2, r3, #32
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e007      	b.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d1ca      	bne.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eb8:	e042      	b.n	8005f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d119      	bne.n	8005efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0210 	mvn.w	r2, #16
 8005ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e029      	b.n	8005f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efc:	f7fd fcb6 	bl	800386c <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d302      	bcc.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	f043 0220 	orr.w	r2, r3, #32
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e007      	b.n	8005f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d1b5      	bne.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6e:	d11b      	bne.n	8005fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d129      	bne.n	8006020 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2224      	movs	r2, #36	; 0x24
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0210 	bic.w	r2, r2, #16
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b20      	cmp	r3, #32
 8006046:	d12a      	bne.n	800609e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2224      	movs	r2, #36	; 0x24
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006068:	89fb      	ldrh	r3, [r7, #14]
 800606a:	f023 030f 	bic.w	r3, r3, #15
 800606e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	b29a      	uxth	r2, r3
 8006074:	89fb      	ldrh	r3, [r7, #14]
 8006076:	4313      	orrs	r3, r2
 8006078:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	89fa      	ldrh	r2, [r7, #14]
 8006080:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e000      	b.n	80060a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800609e:	2302      	movs	r3, #2
  }
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e0bf      	b.n	800623e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fc f93c 	bl	8002350 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80060ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6999      	ldr	r1, [r3, #24]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006104:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6899      	ldr	r1, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b4a      	ldr	r3, [pc, #296]	; (8006248 <HAL_LTDC_Init+0x19c>)
 8006120:	400b      	ands	r3, r1
 8006122:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6899      	ldr	r1, [r3, #8]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68d9      	ldr	r1, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <HAL_LTDC_Init+0x19c>)
 800614e:	400b      	ands	r3, r1
 8006150:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68d9      	ldr	r1, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6919      	ldr	r1, [r3, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b33      	ldr	r3, [pc, #204]	; (8006248 <HAL_LTDC_Init+0x19c>)
 800617c:	400b      	ands	r3, r1
 800617e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	041b      	lsls	r3, r3, #16
 8006186:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6919      	ldr	r1, [r3, #16]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6959      	ldr	r1, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b27      	ldr	r3, [pc, #156]	; (8006248 <HAL_LTDC_Init+0x19c>)
 80061aa:	400b      	ands	r3, r1
 80061ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6959      	ldr	r1, [r3, #20]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061dc:	041b      	lsls	r3, r3, #16
 80061de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0206 	orr.w	r2, r2, #6
 800621a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	f000f800 	.word	0xf000f800

0800624c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006262:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d023      	beq.n	80062b6 <HAL_LTDC_IRQHandler+0x6a>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01e      	beq.n	80062b6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0204 	bic.w	r2, r2, #4
 8006286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2204      	movs	r2, #4
 800628e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006296:	f043 0201 	orr.w	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2204      	movs	r2, #4
 80062a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f86f 	bl	8006394 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d023      	beq.n	8006308 <HAL_LTDC_IRQHandler+0xbc>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01e      	beq.n	8006308 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0202 	bic.w	r2, r2, #2
 80062d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2202      	movs	r2, #2
 80062e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062e8:	f043 0202 	orr.w	r2, r3, #2
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2204      	movs	r2, #4
 80062f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f846 	bl	8006394 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01b      	beq.n	800634a <HAL_LTDC_IRQHandler+0xfe>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d016      	beq.n	800634a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f00c fa73 	bl	8012830 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01b      	beq.n	800638c <HAL_LTDC_IRQHandler+0x140>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d016      	beq.n	800638c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0208 	bic.w	r2, r2, #8
 800636c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2208      	movs	r2, #8
 8006374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f80e 	bl	80063a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800638c:	bf00      	nop
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063bc:	b5b0      	push	{r4, r5, r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_LTDC_ConfigLayer+0x1a>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e02c      	b.n	8006430 <HAL_LTDC_ConfigLayer+0x74>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2134      	movs	r1, #52	; 0x34
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	4413      	add	r3, r2
 80063f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4614      	mov	r4, r2
 80063fa:	461d      	mov	r5, r3
 80063fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f849 	bl	80064a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2201      	movs	r2, #1
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bdb0      	pop	{r4, r5, r7, pc}

08006438 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_LTDC_ProgramLineEvent+0x18>
 800644c:	2302      	movs	r3, #2
 800644e:	e023      	b.n	8006498 <HAL_LTDC_ProgramLineEvent+0x60>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0201 	bic.w	r2, r2, #1
 800646e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006470:	4a0c      	ldr	r2, [pc, #48]	; (80064a4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40016800 	.word	0x40016800

080064a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b089      	sub	sp, #36	; 0x24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	0c1b      	lsrs	r3, r3, #16
 80064c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c4:	4413      	add	r3, r2
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	01db      	lsls	r3, r3, #7
 80064d4:	4413      	add	r3, r2
 80064d6:	3384      	adds	r3, #132	; 0x84
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	4611      	mov	r1, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	01d2      	lsls	r2, r2, #7
 80064e4:	440a      	add	r2, r1
 80064e6:	3284      	adds	r2, #132	; 0x84
 80064e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	0c1b      	lsrs	r3, r3, #16
 80064fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fe:	4413      	add	r3, r2
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	01db      	lsls	r3, r3, #7
 800650c:	440b      	add	r3, r1
 800650e:	3384      	adds	r3, #132	; 0x84
 8006510:	4619      	mov	r1, r3
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006526:	4413      	add	r3, r2
 8006528:	041b      	lsls	r3, r3, #16
 800652a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	01db      	lsls	r3, r3, #7
 8006536:	4413      	add	r3, r2
 8006538:	3384      	adds	r3, #132	; 0x84
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	4611      	mov	r1, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	01d2      	lsls	r2, r2, #7
 8006546:	440a      	add	r2, r1
 8006548:	3284      	adds	r2, #132	; 0x84
 800654a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800654e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800655e:	4413      	add	r3, r2
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4619      	mov	r1, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	01db      	lsls	r3, r3, #7
 800656c:	440b      	add	r3, r1
 800656e:	3384      	adds	r3, #132	; 0x84
 8006570:	4619      	mov	r1, r3
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	01db      	lsls	r3, r3, #7
 8006582:	4413      	add	r3, r2
 8006584:	3384      	adds	r3, #132	; 0x84
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	4611      	mov	r1, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	01d2      	lsls	r2, r2, #7
 8006592:	440a      	add	r2, r1
 8006594:	3284      	adds	r2, #132	; 0x84
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	01db      	lsls	r3, r3, #7
 80065a6:	4413      	add	r3, r2
 80065a8:	3384      	adds	r3, #132	; 0x84
 80065aa:	461a      	mov	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	01db      	lsls	r3, r3, #7
 80065d8:	4413      	add	r3, r2
 80065da:	3384      	adds	r3, #132	; 0x84
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	01db      	lsls	r3, r3, #7
 80065e8:	4413      	add	r3, r2
 80065ea:	3384      	adds	r3, #132	; 0x84
 80065ec:	461a      	mov	r2, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065f8:	461a      	mov	r2, r3
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	431a      	orrs	r2, r3
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4619      	mov	r1, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	01db      	lsls	r3, r3, #7
 800660c:	440b      	add	r3, r1
 800660e:	3384      	adds	r3, #132	; 0x84
 8006610:	4619      	mov	r1, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	01db      	lsls	r3, r3, #7
 8006622:	4413      	add	r3, r2
 8006624:	3384      	adds	r3, #132	; 0x84
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	4611      	mov	r1, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	01d2      	lsls	r2, r2, #7
 8006632:	440a      	add	r2, r1
 8006634:	3284      	adds	r2, #132	; 0x84
 8006636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800663a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	01db      	lsls	r3, r3, #7
 8006646:	4413      	add	r3, r2
 8006648:	3384      	adds	r3, #132	; 0x84
 800664a:	461a      	mov	r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	01db      	lsls	r3, r3, #7
 800665c:	4413      	add	r3, r2
 800665e:	3384      	adds	r3, #132	; 0x84
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	4611      	mov	r1, r2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	01d2      	lsls	r2, r2, #7
 800666c:	440a      	add	r2, r1
 800666e:	3284      	adds	r2, #132	; 0x84
 8006670:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006674:	f023 0307 	bic.w	r3, r3, #7
 8006678:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	69da      	ldr	r2, [r3, #28]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	6809      	ldr	r1, [r1, #0]
 8006686:	4608      	mov	r0, r1
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	01c9      	lsls	r1, r1, #7
 800668c:	4401      	add	r1, r0
 800668e:	3184      	adds	r1, #132	; 0x84
 8006690:	4313      	orrs	r3, r2
 8006692:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	01db      	lsls	r3, r3, #7
 800669e:	4413      	add	r3, r2
 80066a0:	3384      	adds	r3, #132	; 0x84
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	01db      	lsls	r3, r3, #7
 80066ae:	4413      	add	r3, r2
 80066b0:	3384      	adds	r3, #132	; 0x84
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	01db      	lsls	r3, r3, #7
 80066c2:	4413      	add	r3, r2
 80066c4:	3384      	adds	r3, #132	; 0x84
 80066c6:	461a      	mov	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80066d6:	2304      	movs	r3, #4
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e01b      	b.n	8006714 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d102      	bne.n	80066ea <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80066e4:	2303      	movs	r3, #3
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	e014      	b.n	8006714 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00b      	beq.n	800670a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d007      	beq.n	800670a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d003      	beq.n	800670a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006706:	2b07      	cmp	r3, #7
 8006708:	d102      	bne.n	8006710 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800670a:	2302      	movs	r3, #2
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	e001      	b.n	8006714 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006710:	2301      	movs	r3, #1
 8006712:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	01db      	lsls	r3, r3, #7
 800671e:	4413      	add	r3, r2
 8006720:	3384      	adds	r3, #132	; 0x84
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	4611      	mov	r1, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	01d2      	lsls	r2, r2, #7
 800672e:	440a      	add	r2, r1
 8006730:	3284      	adds	r2, #132	; 0x84
 8006732:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006736:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	041a      	lsls	r2, r3, #16
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6859      	ldr	r1, [r3, #4]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	1acb      	subs	r3, r1, r3
 800674e:	69f9      	ldr	r1, [r7, #28]
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	3303      	adds	r3, #3
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6809      	ldr	r1, [r1, #0]
 800675a:	4608      	mov	r0, r1
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	01c9      	lsls	r1, r1, #7
 8006760:	4401      	add	r1, r0
 8006762:	3184      	adds	r1, #132	; 0x84
 8006764:	4313      	orrs	r3, r2
 8006766:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	01db      	lsls	r3, r3, #7
 8006772:	4413      	add	r3, r2
 8006774:	3384      	adds	r3, #132	; 0x84
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	4611      	mov	r1, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	01d2      	lsls	r2, r2, #7
 8006782:	440a      	add	r2, r1
 8006784:	3284      	adds	r2, #132	; 0x84
 8006786:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	01db      	lsls	r3, r3, #7
 800679a:	4413      	add	r3, r2
 800679c:	3384      	adds	r3, #132	; 0x84
 800679e:	461a      	mov	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	01db      	lsls	r3, r3, #7
 80067b0:	4413      	add	r3, r2
 80067b2:	3384      	adds	r3, #132	; 0x84
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	4611      	mov	r1, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	01d2      	lsls	r2, r2, #7
 80067c0:	440a      	add	r2, r1
 80067c2:	3284      	adds	r2, #132	; 0x84
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	6013      	str	r3, [r2, #0]
}
 80067ca:	bf00      	nop
 80067cc:	3724      	adds	r7, #36	; 0x24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e25b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d075      	beq.n	80068e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067f6:	4ba3      	ldr	r3, [pc, #652]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 030c 	and.w	r3, r3, #12
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00c      	beq.n	800681c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006802:	4ba0      	ldr	r3, [pc, #640]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800680a:	2b08      	cmp	r3, #8
 800680c:	d112      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b9d      	ldr	r3, [pc, #628]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800681a:	d10b      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	4b99      	ldr	r3, [pc, #612]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05b      	beq.n	80068e0 <HAL_RCC_OscConfig+0x108>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d157      	bne.n	80068e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e236      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d106      	bne.n	800684c <HAL_RCC_OscConfig+0x74>
 800683e:	4b91      	ldr	r3, [pc, #580]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a90      	ldr	r2, [pc, #576]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e01d      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006854:	d10c      	bne.n	8006870 <HAL_RCC_OscConfig+0x98>
 8006856:	4b8b      	ldr	r3, [pc, #556]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a8a      	ldr	r2, [pc, #552]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800685c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	4b88      	ldr	r3, [pc, #544]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a87      	ldr	r2, [pc, #540]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e00b      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 8006870:	4b84      	ldr	r3, [pc, #528]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a83      	ldr	r2, [pc, #524]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4b81      	ldr	r3, [pc, #516]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a80      	ldr	r2, [pc, #512]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7fc ffec 	bl	800386c <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006898:	f7fc ffe8 	bl	800386c <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	; 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e1fb      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	4b76      	ldr	r3, [pc, #472]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0xc0>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fc ffd8 	bl	800386c <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fc ffd4 	bl	800386c <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	; 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e1e7      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	4b6c      	ldr	r3, [pc, #432]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0xe8>
 80068de:	e000      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d063      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ee:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068fa:	4b62      	ldr	r3, [pc, #392]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006902:	2b08      	cmp	r3, #8
 8006904:	d11c      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006906:	4b5f      	ldr	r3, [pc, #380]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d116      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	4b5c      	ldr	r3, [pc, #368]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d001      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e1bb      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692a:	4b56      	ldr	r3, [pc, #344]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4952      	ldr	r1, [pc, #328]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693e:	e03a      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d020      	beq.n	800698a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006948:	4b4f      	ldr	r3, [pc, #316]	; (8006a88 <HAL_RCC_OscConfig+0x2b0>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fc ff8d 	bl	800386c <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006956:	f7fc ff89 	bl	800386c <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e19c      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	4b46      	ldr	r3, [pc, #280]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006974:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4940      	ldr	r1, [pc, #256]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	4313      	orrs	r3, r2
 8006986:	600b      	str	r3, [r1, #0]
 8006988:	e015      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698a:	4b3f      	ldr	r3, [pc, #252]	; (8006a88 <HAL_RCC_OscConfig+0x2b0>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fc ff6c 	bl	800386c <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006998:	f7fc ff68 	bl	800386c <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e17b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d030      	beq.n	8006a24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ca:	4b30      	ldr	r3, [pc, #192]	; (8006a8c <HAL_RCC_OscConfig+0x2b4>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fc ff4c 	bl	800386c <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069d8:	f7fc ff48 	bl	800386c <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e15b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	4b26      	ldr	r3, [pc, #152]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCC_OscConfig+0x200>
 80069f6:	e015      	b.n	8006a24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f8:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <HAL_RCC_OscConfig+0x2b4>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fe:	f7fc ff35 	bl	800386c <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a06:	f7fc ff31 	bl	800386c <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e144      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a18:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1f0      	bne.n	8006a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80a0 	beq.w	8006b72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10f      	bne.n	8006a62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a50:	6413      	str	r3, [r2, #64]	; 0x40
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	60bb      	str	r3, [r7, #8]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_RCC_OscConfig+0x2b8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d121      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a6e:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <HAL_RCC_OscConfig+0x2b8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a07      	ldr	r2, [pc, #28]	; (8006a90 <HAL_RCC_OscConfig+0x2b8>)
 8006a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a7a:	f7fc fef7 	bl	800386c <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a80:	e011      	b.n	8006aa6 <HAL_RCC_OscConfig+0x2ce>
 8006a82:	bf00      	nop
 8006a84:	40023800 	.word	0x40023800
 8006a88:	42470000 	.word	0x42470000
 8006a8c:	42470e80 	.word	0x42470e80
 8006a90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a94:	f7fc feea 	bl	800386c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e0fd      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa6:	4b81      	ldr	r3, [pc, #516]	; (8006cac <HAL_RCC_OscConfig+0x4d4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x2f0>
 8006aba:	4b7d      	ldr	r3, [pc, #500]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abe:	4a7c      	ldr	r2, [pc, #496]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ac0:	f043 0301 	orr.w	r3, r3, #1
 8006ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac6:	e01c      	b.n	8006b02 <HAL_RCC_OscConfig+0x32a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b05      	cmp	r3, #5
 8006ace:	d10c      	bne.n	8006aea <HAL_RCC_OscConfig+0x312>
 8006ad0:	4b77      	ldr	r3, [pc, #476]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad4:	4a76      	ldr	r2, [pc, #472]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ad6:	f043 0304 	orr.w	r3, r3, #4
 8006ada:	6713      	str	r3, [r2, #112]	; 0x70
 8006adc:	4b74      	ldr	r3, [pc, #464]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	4a73      	ldr	r2, [pc, #460]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae8:	e00b      	b.n	8006b02 <HAL_RCC_OscConfig+0x32a>
 8006aea:	4b71      	ldr	r3, [pc, #452]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4a70      	ldr	r2, [pc, #448]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
 8006af6:	4b6e      	ldr	r3, [pc, #440]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	4a6d      	ldr	r2, [pc, #436]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006afc:	f023 0304 	bic.w	r3, r3, #4
 8006b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d015      	beq.n	8006b36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0a:	f7fc feaf 	bl	800386c <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b10:	e00a      	b.n	8006b28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b12:	f7fc feab 	bl	800386c <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e0bc      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b28:	4b61      	ldr	r3, [pc, #388]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ee      	beq.n	8006b12 <HAL_RCC_OscConfig+0x33a>
 8006b34:	e014      	b.n	8006b60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b36:	f7fc fe99 	bl	800386c <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b3c:	e00a      	b.n	8006b54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b3e:	f7fc fe95 	bl	800386c <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0a6      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b54:	4b56      	ldr	r3, [pc, #344]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1ee      	bne.n	8006b3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d105      	bne.n	8006b72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b66:	4b52      	ldr	r3, [pc, #328]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	4a51      	ldr	r2, [pc, #324]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8092 	beq.w	8006ca0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b7c:	4b4c      	ldr	r3, [pc, #304]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 030c 	and.w	r3, r3, #12
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d05c      	beq.n	8006c42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d141      	bne.n	8006c14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b90:	4b48      	ldr	r3, [pc, #288]	; (8006cb4 <HAL_RCC_OscConfig+0x4dc>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fc fe69 	bl	800386c <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b9e:	f7fc fe65 	bl	800386c <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e078      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb0:	4b3f      	ldr	r3, [pc, #252]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f0      	bne.n	8006b9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	019b      	lsls	r3, r3, #6
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	061b      	lsls	r3, r3, #24
 8006be0:	4933      	ldr	r1, [pc, #204]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be6:	4b33      	ldr	r3, [pc, #204]	; (8006cb4 <HAL_RCC_OscConfig+0x4dc>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bec:	f7fc fe3e 	bl	800386c <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fc fe3a 	bl	800386c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e04d      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c06:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f0      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x41c>
 8006c12:	e045      	b.n	8006ca0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c14:	4b27      	ldr	r3, [pc, #156]	; (8006cb4 <HAL_RCC_OscConfig+0x4dc>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1a:	f7fc fe27 	bl	800386c <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c22:	f7fc fe23 	bl	800386c <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e036      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c34:	4b1e      	ldr	r3, [pc, #120]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1f0      	bne.n	8006c22 <HAL_RCC_OscConfig+0x44a>
 8006c40:	e02e      	b.n	8006ca0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e029      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d11c      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d115      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c76:	4013      	ands	r3, r2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10d      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40007000 	.word	0x40007000
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	42470060 	.word	0x42470060

08006cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0cc      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ccc:	4b68      	ldr	r3, [pc, #416]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d90c      	bls.n	8006cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cda:	4b65      	ldr	r3, [pc, #404]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce2:	4b63      	ldr	r3, [pc, #396]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0b8      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d020      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d0c:	4b59      	ldr	r3, [pc, #356]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	4a58      	ldr	r2, [pc, #352]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d24:	4b53      	ldr	r3, [pc, #332]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	4a52      	ldr	r2, [pc, #328]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d30:	4b50      	ldr	r3, [pc, #320]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	494d      	ldr	r1, [pc, #308]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d044      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d107      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d56:	4b47      	ldr	r3, [pc, #284]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d119      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e07f      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d107      	bne.n	8006d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d76:	4b3f      	ldr	r3, [pc, #252]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e06f      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d86:	4b3b      	ldr	r3, [pc, #236]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e067      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d96:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f023 0203 	bic.w	r2, r3, #3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4934      	ldr	r1, [pc, #208]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006da8:	f7fc fd60 	bl	800386c <HAL_GetTick>
 8006dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006db0:	f7fc fd5c 	bl	800386c <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e04f      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc6:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 020c 	and.w	r2, r3, #12
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d1eb      	bne.n	8006db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dd8:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d20c      	bcs.n	8006e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de6:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dee:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d001      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e032      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e0c:	4b19      	ldr	r3, [pc, #100]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4916      	ldr	r1, [pc, #88]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e2a:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	490e      	ldr	r1, [pc, #56]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e3e:	f000 f821 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8006e42:	4601      	mov	r1, r0
 8006e44:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <HAL_RCC_ClockConfig+0x1c0>)
 8006e50:	5cd3      	ldrb	r3, [r2, r3]
 8006e52:	fa21 f303 	lsr.w	r3, r1, r3
 8006e56:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <HAL_RCC_ClockConfig+0x1c4>)
 8006e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fb fd3c 	bl	80028dc <HAL_InitTick>

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40023c00 	.word	0x40023c00
 8006e74:	40023800 	.word	0x40023800
 8006e78:	080251cc 	.word	0x080251cc
 8006e7c:	20000004 	.word	0x20000004
 8006e80:	20000008 	.word	0x20000008

08006e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	607b      	str	r3, [r7, #4]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	2300      	movs	r3, #0
 8006e94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e9a:	4b50      	ldr	r3, [pc, #320]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 030c 	and.w	r3, r3, #12
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d007      	beq.n	8006eb6 <HAL_RCC_GetSysClockFreq+0x32>
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d008      	beq.n	8006ebc <HAL_RCC_GetSysClockFreq+0x38>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f040 808d 	bne.w	8006fca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006eb0:	4b4b      	ldr	r3, [pc, #300]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006eb2:	60bb      	str	r3, [r7, #8]
       break;
 8006eb4:	e08c      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eb6:	4b4b      	ldr	r3, [pc, #300]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006eb8:	60bb      	str	r3, [r7, #8]
      break;
 8006eba:	e089      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ebc:	4b47      	ldr	r3, [pc, #284]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ec6:	4b45      	ldr	r3, [pc, #276]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d023      	beq.n	8006f1a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ed2:	4b42      	ldr	r3, [pc, #264]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	f04f 0400 	mov.w	r4, #0
 8006edc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	ea03 0501 	and.w	r5, r3, r1
 8006ee8:	ea04 0602 	and.w	r6, r4, r2
 8006eec:	4a3d      	ldr	r2, [pc, #244]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006eee:	fb02 f106 	mul.w	r1, r2, r6
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	fb02 f205 	mul.w	r2, r2, r5
 8006ef8:	440a      	add	r2, r1
 8006efa:	493a      	ldr	r1, [pc, #232]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006efc:	fba5 0101 	umull	r0, r1, r5, r1
 8006f00:	1853      	adds	r3, r2, r1
 8006f02:	4619      	mov	r1, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f04f 0400 	mov.w	r4, #0
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	f7f9 f9c7 	bl	80002a0 <__aeabi_uldivmod>
 8006f12:	4603      	mov	r3, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e049      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f1a:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	099b      	lsrs	r3, r3, #6
 8006f20:	f04f 0400 	mov.w	r4, #0
 8006f24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f28:	f04f 0200 	mov.w	r2, #0
 8006f2c:	ea03 0501 	and.w	r5, r3, r1
 8006f30:	ea04 0602 	and.w	r6, r4, r2
 8006f34:	4629      	mov	r1, r5
 8006f36:	4632      	mov	r2, r6
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	f04f 0400 	mov.w	r4, #0
 8006f40:	0154      	lsls	r4, r2, #5
 8006f42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f46:	014b      	lsls	r3, r1, #5
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	1b49      	subs	r1, r1, r5
 8006f4e:	eb62 0206 	sbc.w	r2, r2, r6
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	f04f 0400 	mov.w	r4, #0
 8006f5a:	0194      	lsls	r4, r2, #6
 8006f5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f60:	018b      	lsls	r3, r1, #6
 8006f62:	1a5b      	subs	r3, r3, r1
 8006f64:	eb64 0402 	sbc.w	r4, r4, r2
 8006f68:	f04f 0100 	mov.w	r1, #0
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	00e2      	lsls	r2, r4, #3
 8006f72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f76:	00d9      	lsls	r1, r3, #3
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	195b      	adds	r3, r3, r5
 8006f7e:	eb44 0406 	adc.w	r4, r4, r6
 8006f82:	f04f 0100 	mov.w	r1, #0
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	02a2      	lsls	r2, r4, #10
 8006f8c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006f90:	0299      	lsls	r1, r3, #10
 8006f92:	460b      	mov	r3, r1
 8006f94:	4614      	mov	r4, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	4621      	mov	r1, r4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f04f 0400 	mov.w	r4, #0
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	f7f9 f97c 	bl	80002a0 <__aeabi_uldivmod>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	0c1b      	lsrs	r3, r3, #16
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	3301      	adds	r3, #1
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc6:	60bb      	str	r3, [r7, #8]
      break;
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006fcc:	60bb      	str	r3, [r7, #8]
      break;
 8006fce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	00f42400 	.word	0x00f42400
 8006fe4:	017d7840 	.word	0x017d7840

08006fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000004 	.word	0x20000004

08007000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007004:	f7ff fff0 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8007008:	4601      	mov	r1, r0
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	0a9b      	lsrs	r3, r3, #10
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	4a03      	ldr	r2, [pc, #12]	; (8007024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007016:	5cd3      	ldrb	r3, [r2, r3]
 8007018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40023800 	.word	0x40023800
 8007024:	080251dc 	.word	0x080251dc

08007028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800702c:	f7ff ffdc 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8007030:	4601      	mov	r1, r0
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	0b5b      	lsrs	r3, r3, #13
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	4a03      	ldr	r2, [pc, #12]	; (800704c <HAL_RCC_GetPCLK2Freq+0x24>)
 800703e:	5cd3      	ldrb	r3, [r2, r3]
 8007040:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007044:	4618      	mov	r0, r3
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40023800 	.word	0x40023800
 800704c:	080251dc 	.word	0x080251dc

08007050 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	220f      	movs	r2, #15
 800705e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007060:	4b12      	ldr	r3, [pc, #72]	; (80070ac <HAL_RCC_GetClockConfig+0x5c>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 0203 	and.w	r2, r3, #3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <HAL_RCC_GetClockConfig+0x5c>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007078:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <HAL_RCC_GetClockConfig+0x5c>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007084:	4b09      	ldr	r3, [pc, #36]	; (80070ac <HAL_RCC_GetClockConfig+0x5c>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	08db      	lsrs	r3, r3, #3
 800708a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <HAL_RCC_GetClockConfig+0x60>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	601a      	str	r2, [r3, #0]
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40023800 	.word	0x40023800
 80070b0:	40023c00 	.word	0x40023c00

080070b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d075      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070e8:	4bad      	ldr	r3, [pc, #692]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070ee:	f7fc fbbd 	bl	800386c <HAL_GetTick>
 80070f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070f4:	e008      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070f6:	f7fc fbb9 	bl	800386c <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e18b      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007108:	4ba6      	ldr	r3, [pc, #664]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1f0      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	019a      	lsls	r2, r3, #6
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	071b      	lsls	r3, r3, #28
 800712c:	499d      	ldr	r1, [pc, #628]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01f      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007140:	4b98      	ldr	r3, [pc, #608]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007146:	0f1b      	lsrs	r3, r3, #28
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	019a      	lsls	r2, r3, #6
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	061b      	lsls	r3, r3, #24
 800715a:	431a      	orrs	r2, r3
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	071b      	lsls	r3, r3, #28
 8007160:	4990      	ldr	r1, [pc, #576]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007168:	4b8e      	ldr	r3, [pc, #568]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800716a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800716e:	f023 021f 	bic.w	r2, r3, #31
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	3b01      	subs	r3, #1
 8007178:	498a      	ldr	r1, [pc, #552]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00d      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	019a      	lsls	r2, r3, #6
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	061b      	lsls	r3, r3, #24
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	071b      	lsls	r3, r3, #28
 80071a0:	4980      	ldr	r1, [pc, #512]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071a8:	4b7d      	ldr	r3, [pc, #500]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071ae:	f7fc fb5d 	bl	800386c <HAL_GetTick>
 80071b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071b4:	e008      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071b6:	f7fc fb59 	bl	800386c <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e12b      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071c8:	4b76      	ldr	r3, [pc, #472]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d079      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071ec:	4b6e      	ldr	r3, [pc, #440]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071f2:	f7fc fb3b 	bl	800386c <HAL_GetTick>
 80071f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071f8:	e008      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071fa:	f7fc fb37 	bl	800386c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e109      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800720c:	4b65      	ldr	r3, [pc, #404]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007218:	d0ef      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	d020      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007226:	4b5f      	ldr	r3, [pc, #380]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722c:	0f1b      	lsrs	r3, r3, #28
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	019a      	lsls	r2, r3, #6
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	061b      	lsls	r3, r3, #24
 8007240:	431a      	orrs	r2, r3
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	071b      	lsls	r3, r3, #28
 8007246:	4957      	ldr	r1, [pc, #348]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800724e:	4b55      	ldr	r3, [pc, #340]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007254:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	3b01      	subs	r3, #1
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	4950      	ldr	r1, [pc, #320]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01e      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007274:	4b4b      	ldr	r3, [pc, #300]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727a:	0e1b      	lsrs	r3, r3, #24
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	019a      	lsls	r2, r3, #6
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	061b      	lsls	r3, r3, #24
 800728c:	431a      	orrs	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	071b      	lsls	r3, r3, #28
 8007294:	4943      	ldr	r1, [pc, #268]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800729c:	4b41      	ldr	r3, [pc, #260]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800729e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	493e      	ldr	r1, [pc, #248]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072b2:	4b3d      	ldr	r3, [pc, #244]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072b8:	f7fc fad8 	bl	800386c <HAL_GetTick>
 80072bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80072c0:	f7fc fad4 	bl	800386c <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e0a6      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072d2:	4b34      	ldr	r3, [pc, #208]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072de:	d1ef      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 808d 	beq.w	8007408 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	4b2c      	ldr	r3, [pc, #176]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	4a2b      	ldr	r2, [pc, #172]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072fc:	6413      	str	r3, [r2, #64]	; 0x40
 80072fe:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800730a:	4b28      	ldr	r3, [pc, #160]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a27      	ldr	r2, [pc, #156]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007314:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007316:	f7fc faa9 	bl	800386c <HAL_GetTick>
 800731a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800731c:	e008      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800731e:	f7fc faa5 	bl	800386c <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e077      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007330:	4b1e      	ldr	r3, [pc, #120]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800733c:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800733e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007344:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d039      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	429a      	cmp	r2, r3
 8007358:	d032      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800735a:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800735c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007362:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007364:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800736a:	4b11      	ldr	r3, [pc, #68]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007370:	4a0c      	ldr	r2, [pc, #48]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b01      	cmp	r3, #1
 8007380:	d11e      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007382:	f7fc fa73 	bl	800386c <HAL_GetTick>
 8007386:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007388:	e014      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fc fa6f 	bl	800386c <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	; 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d90b      	bls.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e03f      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80073a0:	42470068 	.word	0x42470068
 80073a4:	40023800 	.word	0x40023800
 80073a8:	42470070 	.word	0x42470070
 80073ac:	40007000 	.word	0x40007000
 80073b0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b4:	4b1c      	ldr	r3, [pc, #112]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0e4      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073cc:	d10d      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x336>
 80073ce:	4b16      	ldr	r3, [pc, #88]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e2:	4911      	ldr	r1, [pc, #68]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	608b      	str	r3, [r1, #8]
 80073e8:	e005      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80073ea:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	4a0e      	ldr	r2, [pc, #56]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073f4:	6093      	str	r3, [r2, #8]
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007402:	4909      	ldr	r1, [pc, #36]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007404:	4313      	orrs	r3, r2
 8007406:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800741a:	4b04      	ldr	r3, [pc, #16]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800741c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40023800 	.word	0x40023800
 800742c:	424711e0 	.word	0x424711e0

08007430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e056      	b.n	80074f0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fb f85b 	bl	8002518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007478:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	ea42 0103 	orr.w	r1, r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	0c1b      	lsrs	r3, r3, #16
 80074c0:	f003 0104 	and.w	r1, r3, #4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69da      	ldr	r2, [r3, #28]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_SPI_Transmit+0x22>
 8007516:	2302      	movs	r3, #2
 8007518:	e11e      	b.n	8007758 <HAL_SPI_Transmit+0x260>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007522:	f7fc f9a3 	bl	800386c <HAL_GetTick>
 8007526:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d002      	beq.n	800753e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007538:	2302      	movs	r3, #2
 800753a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800753c:	e103      	b.n	8007746 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_SPI_Transmit+0x52>
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800754e:	e0fa      	b.n	8007746 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2203      	movs	r2, #3
 8007554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007596:	d107      	bne.n	80075a8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d007      	beq.n	80075c6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ce:	d14b      	bne.n	8007668 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_SPI_Transmit+0xe6>
 80075d8:	8afb      	ldrh	r3, [r7, #22]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d13e      	bne.n	800765c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	881a      	ldrh	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	1c9a      	adds	r2, r3, #2
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007602:	e02b      	b.n	800765c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b02      	cmp	r3, #2
 8007610:	d112      	bne.n	8007638 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	881a      	ldrh	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	1c9a      	adds	r2, r3, #2
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	86da      	strh	r2, [r3, #54]	; 0x36
 8007636:	e011      	b.n	800765c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007638:	f7fc f918 	bl	800386c <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d803      	bhi.n	8007650 <HAL_SPI_Transmit+0x158>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764e:	d102      	bne.n	8007656 <HAL_SPI_Transmit+0x15e>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	77fb      	strb	r3, [r7, #31]
          goto error;
 800765a:	e074      	b.n	8007746 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1ce      	bne.n	8007604 <HAL_SPI_Transmit+0x10c>
 8007666:	e04c      	b.n	8007702 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_SPI_Transmit+0x17e>
 8007670:	8afb      	ldrh	r3, [r7, #22]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d140      	bne.n	80076f8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	330c      	adds	r3, #12
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800769c:	e02c      	b.n	80076f8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d113      	bne.n	80076d4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	7812      	ldrb	r2, [r2, #0]
 80076b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80076d2:	e011      	b.n	80076f8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076d4:	f7fc f8ca 	bl	800386c <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d803      	bhi.n	80076ec <HAL_SPI_Transmit+0x1f4>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	d102      	bne.n	80076f2 <HAL_SPI_Transmit+0x1fa>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076f6:	e026      	b.n	8007746 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1cd      	bne.n	800769e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f894 	bl	8007834 <SPI_EndRxTxTransaction>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2220      	movs	r2, #32
 8007716:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	613b      	str	r3, [r7, #16]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e000      	b.n	8007746 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007744:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007756:	7ffb      	ldrb	r3, [r7, #31]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3720      	adds	r7, #32
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007770:	e04c      	b.n	800780c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d048      	beq.n	800780c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800777a:	f7fc f877 	bl	800386c <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d902      	bls.n	8007790 <SPI_WaitFlagStateUntilTimeout+0x30>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d13d      	bne.n	800780c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800779e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077a8:	d111      	bne.n	80077ce <SPI_WaitFlagStateUntilTimeout+0x6e>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b2:	d004      	beq.n	80077be <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077bc:	d107      	bne.n	80077ce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d6:	d10f      	bne.n	80077f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e00f      	b.n	800782c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	4013      	ands	r3, r2
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	429a      	cmp	r2, r3
 800781a:	bf0c      	ite	eq
 800781c:	2301      	moveq	r3, #1
 800781e:	2300      	movne	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	461a      	mov	r2, r3
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	429a      	cmp	r2, r3
 8007828:	d1a3      	bne.n	8007772 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007840:	4b1b      	ldr	r3, [pc, #108]	; (80078b0 <SPI_EndRxTxTransaction+0x7c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <SPI_EndRxTxTransaction+0x80>)
 8007846:	fba2 2303 	umull	r2, r3, r2, r3
 800784a:	0d5b      	lsrs	r3, r3, #21
 800784c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007850:	fb02 f303 	mul.w	r3, r2, r3
 8007854:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800785e:	d112      	bne.n	8007886 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2200      	movs	r2, #0
 8007868:	2180      	movs	r1, #128	; 0x80
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff ff78 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d016      	beq.n	80078a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787a:	f043 0220 	orr.w	r2, r3, #32
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e00f      	b.n	80078a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	3b01      	subs	r3, #1
 8007890:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789c:	2b80      	cmp	r3, #128	; 0x80
 800789e:	d0f2      	beq.n	8007886 <SPI_EndRxTxTransaction+0x52>
 80078a0:	e000      	b.n	80078a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80078a2:	bf00      	nop
  }

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000004 	.word	0x20000004
 80078b4:	165e9f81 	.word	0x165e9f81

080078b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e01d      	b.n	8007906 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f815 	bl	800790e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f000 fa96 	bl	8007e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b06      	cmp	r3, #6
 800794a:	d007      	beq.n	800795c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e01d      	b.n	80079b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d106      	bne.n	8007996 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7fa fe09 	bl	80025a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2202      	movs	r2, #2
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f000 fa3d 	bl	8007e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2201      	movs	r2, #1
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fc78 	bl	80082c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a15      	ldr	r2, [pc, #84]	; (8007a34 <HAL_TIM_PWM_Start+0x74>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d004      	beq.n	80079ec <HAL_TIM_PWM_Start+0x2c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a14      	ldr	r2, [pc, #80]	; (8007a38 <HAL_TIM_PWM_Start+0x78>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d101      	bne.n	80079f0 <HAL_TIM_PWM_Start+0x30>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <HAL_TIM_PWM_Start+0x32>
 80079f0:	2300      	movs	r3, #0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b06      	cmp	r3, #6
 8007a16:	d007      	beq.n	8007a28 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40010000 	.word	0x40010000
 8007a38:	40010400 	.word	0x40010400

08007a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d122      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d11b      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f06f 0202 	mvn.w	r2, #2
 8007a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f9b4 	bl	8007dec <HAL_TIM_IC_CaptureCallback>
 8007a84:	e005      	b.n	8007a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9a6 	bl	8007dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9b7 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d122      	bne.n	8007aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d11b      	bne.n	8007aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0204 	mvn.w	r2, #4
 8007abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f98a 	bl	8007dec <HAL_TIM_IC_CaptureCallback>
 8007ad8:	e005      	b.n	8007ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f97c 	bl	8007dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f98d 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b08      	cmp	r3, #8
 8007af8:	d122      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d11b      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0208 	mvn.w	r2, #8
 8007b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2204      	movs	r2, #4
 8007b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f960 	bl	8007dec <HAL_TIM_IC_CaptureCallback>
 8007b2c:	e005      	b.n	8007b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f952 	bl	8007dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f963 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0310 	and.w	r3, r3, #16
 8007b4a:	2b10      	cmp	r3, #16
 8007b4c:	d122      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d11b      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0210 	mvn.w	r2, #16
 8007b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2208      	movs	r2, #8
 8007b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f936 	bl	8007dec <HAL_TIM_IC_CaptureCallback>
 8007b80:	e005      	b.n	8007b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f928 	bl	8007dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f939 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d10e      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d107      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f06f 0201 	mvn.w	r2, #1
 8007bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7fa fa7e 	bl	80020bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bca:	2b80      	cmp	r3, #128	; 0x80
 8007bcc:	d10e      	bne.n	8007bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd8:	2b80      	cmp	r3, #128	; 0x80
 8007bda:	d107      	bne.n	8007bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc1a 	bl	8008420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf6:	2b40      	cmp	r3, #64	; 0x40
 8007bf8:	d10e      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c04:	2b40      	cmp	r3, #64	; 0x40
 8007c06:	d107      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f8fe 	bl	8007e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	d10e      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	d107      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0220 	mvn.w	r2, #32
 8007c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fbe4 	bl	800840c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e0b4      	b.n	8007dd0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2202      	movs	r2, #2
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b0c      	cmp	r3, #12
 8007c7a:	f200 809f 	bhi.w	8007dbc <HAL_TIM_PWM_ConfigChannel+0x170>
 8007c7e:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cb9 	.word	0x08007cb9
 8007c88:	08007dbd 	.word	0x08007dbd
 8007c8c:	08007dbd 	.word	0x08007dbd
 8007c90:	08007dbd 	.word	0x08007dbd
 8007c94:	08007cf9 	.word	0x08007cf9
 8007c98:	08007dbd 	.word	0x08007dbd
 8007c9c:	08007dbd 	.word	0x08007dbd
 8007ca0:	08007dbd 	.word	0x08007dbd
 8007ca4:	08007d3b 	.word	0x08007d3b
 8007ca8:	08007dbd 	.word	0x08007dbd
 8007cac:	08007dbd 	.word	0x08007dbd
 8007cb0:	08007dbd 	.word	0x08007dbd
 8007cb4:	08007d7b 	.word	0x08007d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 f952 	bl	8007f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0208 	orr.w	r2, r2, #8
 8007cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0204 	bic.w	r2, r2, #4
 8007ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6999      	ldr	r1, [r3, #24]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	619a      	str	r2, [r3, #24]
      break;
 8007cf6:	e062      	b.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f9a2 	bl	8008048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699a      	ldr	r2, [r3, #24]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6999      	ldr	r1, [r3, #24]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	021a      	lsls	r2, r3, #8
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	430a      	orrs	r2, r1
 8007d36:	619a      	str	r2, [r3, #24]
      break;
 8007d38:	e041      	b.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 f9f7 	bl	8008134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0208 	orr.w	r2, r2, #8
 8007d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0204 	bic.w	r2, r2, #4
 8007d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69d9      	ldr	r1, [r3, #28]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	691a      	ldr	r2, [r3, #16]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	61da      	str	r2, [r3, #28]
      break;
 8007d78:	e021      	b.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 fa4b 	bl	800821c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69da      	ldr	r2, [r3, #28]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69da      	ldr	r2, [r3, #28]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69d9      	ldr	r1, [r3, #28]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	021a      	lsls	r2, r3, #8
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	61da      	str	r2, [r3, #28]
      break;
 8007dba:	e000      	b.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007dbc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a40      	ldr	r2, [pc, #256]	; (8007f3c <TIM_Base_SetConfig+0x114>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d013      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e46:	d00f      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a3d      	ldr	r2, [pc, #244]	; (8007f40 <TIM_Base_SetConfig+0x118>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00b      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a3c      	ldr	r2, [pc, #240]	; (8007f44 <TIM_Base_SetConfig+0x11c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d007      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a3b      	ldr	r2, [pc, #236]	; (8007f48 <TIM_Base_SetConfig+0x120>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d003      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a3a      	ldr	r2, [pc, #232]	; (8007f4c <TIM_Base_SetConfig+0x124>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d108      	bne.n	8007e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2f      	ldr	r2, [pc, #188]	; (8007f3c <TIM_Base_SetConfig+0x114>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d02b      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e88:	d027      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2c      	ldr	r2, [pc, #176]	; (8007f40 <TIM_Base_SetConfig+0x118>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d023      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2b      	ldr	r2, [pc, #172]	; (8007f44 <TIM_Base_SetConfig+0x11c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d01f      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2a      	ldr	r2, [pc, #168]	; (8007f48 <TIM_Base_SetConfig+0x120>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01b      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a29      	ldr	r2, [pc, #164]	; (8007f4c <TIM_Base_SetConfig+0x124>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d017      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a28      	ldr	r2, [pc, #160]	; (8007f50 <TIM_Base_SetConfig+0x128>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d013      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a27      	ldr	r2, [pc, #156]	; (8007f54 <TIM_Base_SetConfig+0x12c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00f      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a26      	ldr	r2, [pc, #152]	; (8007f58 <TIM_Base_SetConfig+0x130>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00b      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a25      	ldr	r2, [pc, #148]	; (8007f5c <TIM_Base_SetConfig+0x134>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d007      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a24      	ldr	r2, [pc, #144]	; (8007f60 <TIM_Base_SetConfig+0x138>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d003      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a23      	ldr	r2, [pc, #140]	; (8007f64 <TIM_Base_SetConfig+0x13c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d108      	bne.n	8007eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <TIM_Base_SetConfig+0x114>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_Base_SetConfig+0xf8>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a0c      	ldr	r2, [pc, #48]	; (8007f4c <TIM_Base_SetConfig+0x124>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d103      	bne.n	8007f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	615a      	str	r2, [r3, #20]
}
 8007f2e:	bf00      	nop
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40010000 	.word	0x40010000
 8007f40:	40000400 	.word	0x40000400
 8007f44:	40000800 	.word	0x40000800
 8007f48:	40000c00 	.word	0x40000c00
 8007f4c:	40010400 	.word	0x40010400
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40014400 	.word	0x40014400
 8007f58:	40014800 	.word	0x40014800
 8007f5c:	40001800 	.word	0x40001800
 8007f60:	40001c00 	.word	0x40001c00
 8007f64:	40002000 	.word	0x40002000

08007f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	f023 0201 	bic.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0303 	bic.w	r3, r3, #3
 8007f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 0302 	bic.w	r3, r3, #2
 8007fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a20      	ldr	r2, [pc, #128]	; (8008040 <TIM_OC1_SetConfig+0xd8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_OC1_SetConfig+0x64>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <TIM_OC1_SetConfig+0xdc>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d10c      	bne.n	8007fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0308 	bic.w	r3, r3, #8
 8007fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f023 0304 	bic.w	r3, r3, #4
 8007fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <TIM_OC1_SetConfig+0xd8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d003      	beq.n	8007ff6 <TIM_OC1_SetConfig+0x8e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a14      	ldr	r2, [pc, #80]	; (8008044 <TIM_OC1_SetConfig+0xdc>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d111      	bne.n	800801a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	621a      	str	r2, [r3, #32]
}
 8008034:	bf00      	nop
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	40010000 	.word	0x40010000
 8008044:	40010400 	.word	0x40010400

08008048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f023 0210 	bic.w	r2, r3, #16
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800807e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f023 0320 	bic.w	r3, r3, #32
 8008092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a22      	ldr	r2, [pc, #136]	; (800812c <TIM_OC2_SetConfig+0xe4>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d003      	beq.n	80080b0 <TIM_OC2_SetConfig+0x68>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a21      	ldr	r2, [pc, #132]	; (8008130 <TIM_OC2_SetConfig+0xe8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d10d      	bne.n	80080cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a17      	ldr	r2, [pc, #92]	; (800812c <TIM_OC2_SetConfig+0xe4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d003      	beq.n	80080dc <TIM_OC2_SetConfig+0x94>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a16      	ldr	r2, [pc, #88]	; (8008130 <TIM_OC2_SetConfig+0xe8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d113      	bne.n	8008104 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	621a      	str	r2, [r3, #32]
}
 800811e:	bf00      	nop
 8008120:	371c      	adds	r7, #28
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40010000 	.word	0x40010000
 8008130:	40010400 	.word	0x40010400

08008134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0303 	bic.w	r3, r3, #3
 800816a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800817c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a21      	ldr	r2, [pc, #132]	; (8008214 <TIM_OC3_SetConfig+0xe0>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d003      	beq.n	800819a <TIM_OC3_SetConfig+0x66>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a20      	ldr	r2, [pc, #128]	; (8008218 <TIM_OC3_SetConfig+0xe4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d10d      	bne.n	80081b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	021b      	lsls	r3, r3, #8
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a16      	ldr	r2, [pc, #88]	; (8008214 <TIM_OC3_SetConfig+0xe0>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d003      	beq.n	80081c6 <TIM_OC3_SetConfig+0x92>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a15      	ldr	r2, [pc, #84]	; (8008218 <TIM_OC3_SetConfig+0xe4>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d113      	bne.n	80081ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	621a      	str	r2, [r3, #32]
}
 8008208:	bf00      	nop
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	40010000 	.word	0x40010000
 8008218:	40010400 	.word	0x40010400

0800821c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	021b      	lsls	r3, r3, #8
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	4313      	orrs	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	031b      	lsls	r3, r3, #12
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a12      	ldr	r2, [pc, #72]	; (80082c0 <TIM_OC4_SetConfig+0xa4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d003      	beq.n	8008284 <TIM_OC4_SetConfig+0x68>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a11      	ldr	r2, [pc, #68]	; (80082c4 <TIM_OC4_SetConfig+0xa8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d109      	bne.n	8008298 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800828a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	019b      	lsls	r3, r3, #6
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	4313      	orrs	r3, r2
 8008296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	621a      	str	r2, [r3, #32]
}
 80082b2:	bf00      	nop
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40010400 	.word	0x40010400

080082c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	2201      	movs	r2, #1
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1a      	ldr	r2, [r3, #32]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	43db      	mvns	r3, r3
 80082ea:	401a      	ands	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a1a      	ldr	r2, [r3, #32]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 031f 	and.w	r3, r3, #31
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008300:	431a      	orrs	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	621a      	str	r2, [r3, #32]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008328:	2302      	movs	r3, #2
 800832a:	e05a      	b.n	80083e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a21      	ldr	r2, [pc, #132]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d022      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008378:	d01d      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a1d      	ldr	r2, [pc, #116]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d018      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1a      	ldr	r2, [pc, #104]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00e      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a18      	ldr	r2, [pc, #96]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d009      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a17      	ldr	r2, [pc, #92]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d004      	beq.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a15      	ldr	r2, [pc, #84]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d10c      	bne.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40010000 	.word	0x40010000
 80083f4:	40000400 	.word	0x40000400
 80083f8:	40000800 	.word	0x40000800
 80083fc:	40000c00 	.word	0x40000c00
 8008400:	40010400 	.word	0x40010400
 8008404:	40014000 	.word	0x40014000
 8008408:	40001800 	.word	0x40001800

0800840c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e03f      	b.n	80084c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d106      	bne.n	8008460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fa f97a 	bl	8002754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2224      	movs	r2, #36	; 0x24
 8008464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fb97 	bl	8008bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800848c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695a      	ldr	r2, [r3, #20]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800849c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b088      	sub	sp, #32
 80084d2:	af02      	add	r7, sp, #8
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	603b      	str	r3, [r7, #0]
 80084da:	4613      	mov	r3, r2
 80084dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	f040 8083 	bne.w	80085f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <HAL_UART_Transmit+0x2e>
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e07b      	b.n	80085f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_UART_Transmit+0x40>
 800850a:	2302      	movs	r3, #2
 800850c:	e074      	b.n	80085f8 <HAL_UART_Transmit+0x12a>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2221      	movs	r2, #33	; 0x21
 8008520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008524:	f7fb f9a2 	bl	800386c <HAL_GetTick>
 8008528:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	88fa      	ldrh	r2, [r7, #6]
 800852e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	88fa      	ldrh	r2, [r7, #6]
 8008534:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800853e:	e042      	b.n	80085c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008544:	b29b      	uxth	r3, r3
 8008546:	3b01      	subs	r3, #1
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008556:	d122      	bne.n	800859e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2200      	movs	r2, #0
 8008560:	2180      	movs	r1, #128	; 0x80
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f9b6 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e042      	b.n	80085f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008584:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	3302      	adds	r3, #2
 8008592:	60bb      	str	r3, [r7, #8]
 8008594:	e017      	b.n	80085c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	3301      	adds	r3, #1
 800859a:	60bb      	str	r3, [r7, #8]
 800859c:	e013      	b.n	80085c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2200      	movs	r2, #0
 80085a6:	2180      	movs	r1, #128	; 0x80
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 f993 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e01f      	b.n	80085f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	60ba      	str	r2, [r7, #8]
 80085be:	781a      	ldrb	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1b7      	bne.n	8008540 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	2140      	movs	r1, #64	; 0x40
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f97a 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e006      	b.n	80085f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2220      	movs	r2, #32
 80085ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e000      	b.n	80085f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80085f6:	2302      	movs	r3, #2
  }
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b20      	cmp	r3, #32
 8008618:	d140      	bne.n	800869c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <HAL_UART_Receive_IT+0x26>
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e039      	b.n	800869e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_UART_Receive_IT+0x38>
 8008634:	2302      	movs	r3, #2
 8008636:	e032      	b.n	800869e <HAL_UART_Receive_IT+0x9e>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	88fa      	ldrh	r2, [r7, #6]
 800864a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	88fa      	ldrh	r2, [r7, #6]
 8008650:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2222      	movs	r2, #34	; 0x22
 800865c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008676:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	695a      	ldr	r2, [r3, #20]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0220 	orr.w	r2, r2, #32
 8008696:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	e000      	b.n	800869e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800869c:	2302      	movs	r3, #2
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
	...

080086ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f003 030f 	and.w	r3, r3, #15
 80086da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10d      	bne.n	80086fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d008      	beq.n	80086fe <HAL_UART_IRQHandler+0x52>
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	f003 0320 	and.w	r3, r3, #32
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f9d6 	bl	8008aa8 <UART_Receive_IT>
      return;
 80086fc:	e0d1      	b.n	80088a2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80b0 	beq.w	8008866 <HAL_UART_IRQHandler+0x1ba>
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <HAL_UART_IRQHandler+0x70>
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80a5 	beq.w	8008866 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <HAL_UART_IRQHandler+0x90>
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008734:	f043 0201 	orr.w	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 0304 	and.w	r3, r3, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <HAL_UART_IRQHandler+0xb0>
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008754:	f043 0202 	orr.w	r2, r3, #2
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <HAL_UART_IRQHandler+0xd0>
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008774:	f043 0204 	orr.w	r2, r3, #4
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00f      	beq.n	80087a6 <HAL_UART_IRQHandler+0xfa>
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b00      	cmp	r3, #0
 800878e:	d104      	bne.n	800879a <HAL_UART_IRQHandler+0xee>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d005      	beq.n	80087a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879e:	f043 0208 	orr.w	r2, r3, #8
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d078      	beq.n	80088a0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <HAL_UART_IRQHandler+0x11c>
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	f003 0320 	and.w	r3, r3, #32
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f970 	bl	8008aa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d2:	2b40      	cmp	r3, #64	; 0x40
 80087d4:	bf0c      	ite	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	2300      	movne	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e2:	f003 0308 	and.w	r3, r3, #8
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <HAL_UART_IRQHandler+0x144>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d031      	beq.n	8008854 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f8b9 	bl	8008968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008800:	2b40      	cmp	r3, #64	; 0x40
 8008802:	d123      	bne.n	800884c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695a      	ldr	r2, [r3, #20]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008812:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008818:	2b00      	cmp	r3, #0
 800881a:	d013      	beq.n	8008844 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008820:	4a21      	ldr	r2, [pc, #132]	; (80088a8 <HAL_UART_IRQHandler+0x1fc>)
 8008822:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008828:	4618      	mov	r0, r3
 800882a:	f7fb f97b 	bl	8003b24 <HAL_DMA_Abort_IT>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d016      	beq.n	8008862 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800883e:	4610      	mov	r0, r2
 8008840:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008842:	e00e      	b.n	8008862 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f83b 	bl	80088c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884a:	e00a      	b.n	8008862 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f837 	bl	80088c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008852:	e006      	b.n	8008862 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f833 	bl	80088c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008860:	e01e      	b.n	80088a0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008862:	bf00      	nop
    return;
 8008864:	e01c      	b.n	80088a0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886c:	2b00      	cmp	r3, #0
 800886e:	d008      	beq.n	8008882 <HAL_UART_IRQHandler+0x1d6>
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008876:	2b00      	cmp	r3, #0
 8008878:	d003      	beq.n	8008882 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f8a6 	bl	80089cc <UART_Transmit_IT>
    return;
 8008880:	e00f      	b.n	80088a2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <HAL_UART_IRQHandler+0x1f6>
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d005      	beq.n	80088a2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f8ee 	bl	8008a78 <UART_EndTransmit_IT>
    return;
 800889c:	bf00      	nop
 800889e:	e000      	b.n	80088a2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80088a0:	bf00      	nop
  }
}
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	080089a5 	.word	0x080089a5

080088ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e4:	e02c      	b.n	8008940 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d028      	beq.n	8008940 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <UART_WaitOnFlagUntilTimeout+0x30>
 80088f4:	f7fa ffba 	bl	800386c <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	429a      	cmp	r2, r3
 8008902:	d21d      	bcs.n	8008940 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008912:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	695a      	ldr	r2, [r3, #20]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0201 	bic.w	r2, r2, #1
 8008922:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2220      	movs	r2, #32
 8008930:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e00f      	b.n	8008960 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4013      	ands	r3, r2
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	429a      	cmp	r2, r3
 800894e:	bf0c      	ite	eq
 8008950:	2301      	moveq	r3, #1
 8008952:	2300      	movne	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	461a      	mov	r2, r3
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	429a      	cmp	r2, r3
 800895c:	d0c3      	beq.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800897e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	695a      	ldr	r2, [r3, #20]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0201 	bic.w	r2, r2, #1
 800898e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7ff ff7e 	bl	80088c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c4:	bf00      	nop
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b21      	cmp	r3, #33	; 0x21
 80089de:	d144      	bne.n	8008a6a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e8:	d11a      	bne.n	8008a20 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	461a      	mov	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d105      	bne.n	8008a14 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	1c9a      	adds	r2, r3, #2
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	621a      	str	r2, [r3, #32]
 8008a12:	e00e      	b.n	8008a32 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	621a      	str	r2, [r3, #32]
 8008a1e:	e008      	b.n	8008a32 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	1c59      	adds	r1, r3, #1
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6211      	str	r1, [r2, #32]
 8008a2a:	781a      	ldrb	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10f      	bne.n	8008a66 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e000      	b.n	8008a6c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008a6a:	2302      	movs	r3, #2
  }
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff ff07 	bl	80088ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b22      	cmp	r3, #34	; 0x22
 8008aba:	d171      	bne.n	8008ba0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac4:	d123      	bne.n	8008b0e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10e      	bne.n	8008af2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	1c9a      	adds	r2, r3, #2
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	629a      	str	r2, [r3, #40]	; 0x28
 8008af0:	e029      	b.n	8008b46 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8008b0c:	e01b      	b.n	8008b46 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10a      	bne.n	8008b2c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6858      	ldr	r0, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	1c59      	adds	r1, r3, #1
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6291      	str	r1, [r2, #40]	; 0x28
 8008b26:	b2c2      	uxtb	r2, r0
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e00c      	b.n	8008b46 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	1c58      	adds	r0, r3, #1
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	6288      	str	r0, [r1, #40]	; 0x28
 8008b3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	4619      	mov	r1, r3
 8008b54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d120      	bne.n	8008b9c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0220 	bic.w	r2, r2, #32
 8008b68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695a      	ldr	r2, [r3, #20]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0201 	bic.w	r2, r2, #1
 8008b88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7f8 fb24 	bl	80011e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e002      	b.n	8008ba2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e000      	b.n	8008ba2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008ba0:	2302      	movs	r3, #2
  }
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008bee:	f023 030c 	bic.w	r3, r3, #12
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6812      	ldr	r2, [r2, #0]
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	430b      	orrs	r3, r1
 8008bfa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699a      	ldr	r2, [r3, #24]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c1a:	f040 818b 	bne.w	8008f34 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4ac1      	ldr	r2, [pc, #772]	; (8008f28 <UART_SetConfig+0x37c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d005      	beq.n	8008c34 <UART_SetConfig+0x88>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4abf      	ldr	r2, [pc, #764]	; (8008f2c <UART_SetConfig+0x380>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	f040 80bd 	bne.w	8008dae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c34:	f7fe f9f8 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 8008c38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	461d      	mov	r5, r3
 8008c3e:	f04f 0600 	mov.w	r6, #0
 8008c42:	46a8      	mov	r8, r5
 8008c44:	46b1      	mov	r9, r6
 8008c46:	eb18 0308 	adds.w	r3, r8, r8
 8008c4a:	eb49 0409 	adc.w	r4, r9, r9
 8008c4e:	4698      	mov	r8, r3
 8008c50:	46a1      	mov	r9, r4
 8008c52:	eb18 0805 	adds.w	r8, r8, r5
 8008c56:	eb49 0906 	adc.w	r9, r9, r6
 8008c5a:	f04f 0100 	mov.w	r1, #0
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008c66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008c6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008c6e:	4688      	mov	r8, r1
 8008c70:	4691      	mov	r9, r2
 8008c72:	eb18 0005 	adds.w	r0, r8, r5
 8008c76:	eb49 0106 	adc.w	r1, r9, r6
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	461d      	mov	r5, r3
 8008c80:	f04f 0600 	mov.w	r6, #0
 8008c84:	196b      	adds	r3, r5, r5
 8008c86:	eb46 0406 	adc.w	r4, r6, r6
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	f7f7 fb07 	bl	80002a0 <__aeabi_uldivmod>
 8008c92:	4603      	mov	r3, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	461a      	mov	r2, r3
 8008c98:	4ba5      	ldr	r3, [pc, #660]	; (8008f30 <UART_SetConfig+0x384>)
 8008c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	461d      	mov	r5, r3
 8008ca8:	f04f 0600 	mov.w	r6, #0
 8008cac:	46a9      	mov	r9, r5
 8008cae:	46b2      	mov	sl, r6
 8008cb0:	eb19 0309 	adds.w	r3, r9, r9
 8008cb4:	eb4a 040a 	adc.w	r4, sl, sl
 8008cb8:	4699      	mov	r9, r3
 8008cba:	46a2      	mov	sl, r4
 8008cbc:	eb19 0905 	adds.w	r9, r9, r5
 8008cc0:	eb4a 0a06 	adc.w	sl, sl, r6
 8008cc4:	f04f 0100 	mov.w	r1, #0
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008cd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008cd8:	4689      	mov	r9, r1
 8008cda:	4692      	mov	sl, r2
 8008cdc:	eb19 0005 	adds.w	r0, r9, r5
 8008ce0:	eb4a 0106 	adc.w	r1, sl, r6
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	461d      	mov	r5, r3
 8008cea:	f04f 0600 	mov.w	r6, #0
 8008cee:	196b      	adds	r3, r5, r5
 8008cf0:	eb46 0406 	adc.w	r4, r6, r6
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	4623      	mov	r3, r4
 8008cf8:	f7f7 fad2 	bl	80002a0 <__aeabi_uldivmod>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	461a      	mov	r2, r3
 8008d02:	4b8b      	ldr	r3, [pc, #556]	; (8008f30 <UART_SetConfig+0x384>)
 8008d04:	fba3 1302 	umull	r1, r3, r3, r2
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	2164      	movs	r1, #100	; 0x64
 8008d0c:	fb01 f303 	mul.w	r3, r1, r3
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	00db      	lsls	r3, r3, #3
 8008d14:	3332      	adds	r3, #50	; 0x32
 8008d16:	4a86      	ldr	r2, [pc, #536]	; (8008f30 <UART_SetConfig+0x384>)
 8008d18:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1c:	095b      	lsrs	r3, r3, #5
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d24:	4498      	add	r8, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	461d      	mov	r5, r3
 8008d2a:	f04f 0600 	mov.w	r6, #0
 8008d2e:	46a9      	mov	r9, r5
 8008d30:	46b2      	mov	sl, r6
 8008d32:	eb19 0309 	adds.w	r3, r9, r9
 8008d36:	eb4a 040a 	adc.w	r4, sl, sl
 8008d3a:	4699      	mov	r9, r3
 8008d3c:	46a2      	mov	sl, r4
 8008d3e:	eb19 0905 	adds.w	r9, r9, r5
 8008d42:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d46:	f04f 0100 	mov.w	r1, #0
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d5a:	4689      	mov	r9, r1
 8008d5c:	4692      	mov	sl, r2
 8008d5e:	eb19 0005 	adds.w	r0, r9, r5
 8008d62:	eb4a 0106 	adc.w	r1, sl, r6
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	461d      	mov	r5, r3
 8008d6c:	f04f 0600 	mov.w	r6, #0
 8008d70:	196b      	adds	r3, r5, r5
 8008d72:	eb46 0406 	adc.w	r4, r6, r6
 8008d76:	461a      	mov	r2, r3
 8008d78:	4623      	mov	r3, r4
 8008d7a:	f7f7 fa91 	bl	80002a0 <__aeabi_uldivmod>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	460c      	mov	r4, r1
 8008d82:	461a      	mov	r2, r3
 8008d84:	4b6a      	ldr	r3, [pc, #424]	; (8008f30 <UART_SetConfig+0x384>)
 8008d86:	fba3 1302 	umull	r1, r3, r3, r2
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	2164      	movs	r1, #100	; 0x64
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	3332      	adds	r3, #50	; 0x32
 8008d98:	4a65      	ldr	r2, [pc, #404]	; (8008f30 <UART_SetConfig+0x384>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	095b      	lsrs	r3, r3, #5
 8008da0:	f003 0207 	and.w	r2, r3, #7
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4442      	add	r2, r8
 8008daa:	609a      	str	r2, [r3, #8]
 8008dac:	e26f      	b.n	800928e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dae:	f7fe f927 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 8008db2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	461d      	mov	r5, r3
 8008db8:	f04f 0600 	mov.w	r6, #0
 8008dbc:	46a8      	mov	r8, r5
 8008dbe:	46b1      	mov	r9, r6
 8008dc0:	eb18 0308 	adds.w	r3, r8, r8
 8008dc4:	eb49 0409 	adc.w	r4, r9, r9
 8008dc8:	4698      	mov	r8, r3
 8008dca:	46a1      	mov	r9, r4
 8008dcc:	eb18 0805 	adds.w	r8, r8, r5
 8008dd0:	eb49 0906 	adc.w	r9, r9, r6
 8008dd4:	f04f 0100 	mov.w	r1, #0
 8008dd8:	f04f 0200 	mov.w	r2, #0
 8008ddc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008de0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008de4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008de8:	4688      	mov	r8, r1
 8008dea:	4691      	mov	r9, r2
 8008dec:	eb18 0005 	adds.w	r0, r8, r5
 8008df0:	eb49 0106 	adc.w	r1, r9, r6
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	461d      	mov	r5, r3
 8008dfa:	f04f 0600 	mov.w	r6, #0
 8008dfe:	196b      	adds	r3, r5, r5
 8008e00:	eb46 0406 	adc.w	r4, r6, r6
 8008e04:	461a      	mov	r2, r3
 8008e06:	4623      	mov	r3, r4
 8008e08:	f7f7 fa4a 	bl	80002a0 <__aeabi_uldivmod>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b47      	ldr	r3, [pc, #284]	; (8008f30 <UART_SetConfig+0x384>)
 8008e14:	fba3 2302 	umull	r2, r3, r3, r2
 8008e18:	095b      	lsrs	r3, r3, #5
 8008e1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	461d      	mov	r5, r3
 8008e22:	f04f 0600 	mov.w	r6, #0
 8008e26:	46a9      	mov	r9, r5
 8008e28:	46b2      	mov	sl, r6
 8008e2a:	eb19 0309 	adds.w	r3, r9, r9
 8008e2e:	eb4a 040a 	adc.w	r4, sl, sl
 8008e32:	4699      	mov	r9, r3
 8008e34:	46a2      	mov	sl, r4
 8008e36:	eb19 0905 	adds.w	r9, r9, r5
 8008e3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8008e3e:	f04f 0100 	mov.w	r1, #0
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e52:	4689      	mov	r9, r1
 8008e54:	4692      	mov	sl, r2
 8008e56:	eb19 0005 	adds.w	r0, r9, r5
 8008e5a:	eb4a 0106 	adc.w	r1, sl, r6
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	461d      	mov	r5, r3
 8008e64:	f04f 0600 	mov.w	r6, #0
 8008e68:	196b      	adds	r3, r5, r5
 8008e6a:	eb46 0406 	adc.w	r4, r6, r6
 8008e6e:	461a      	mov	r2, r3
 8008e70:	4623      	mov	r3, r4
 8008e72:	f7f7 fa15 	bl	80002a0 <__aeabi_uldivmod>
 8008e76:	4603      	mov	r3, r0
 8008e78:	460c      	mov	r4, r1
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4b2c      	ldr	r3, [pc, #176]	; (8008f30 <UART_SetConfig+0x384>)
 8008e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	2164      	movs	r1, #100	; 0x64
 8008e86:	fb01 f303 	mul.w	r3, r1, r3
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	3332      	adds	r3, #50	; 0x32
 8008e90:	4a27      	ldr	r2, [pc, #156]	; (8008f30 <UART_SetConfig+0x384>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	095b      	lsrs	r3, r3, #5
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e9e:	4498      	add	r8, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	461d      	mov	r5, r3
 8008ea4:	f04f 0600 	mov.w	r6, #0
 8008ea8:	46a9      	mov	r9, r5
 8008eaa:	46b2      	mov	sl, r6
 8008eac:	eb19 0309 	adds.w	r3, r9, r9
 8008eb0:	eb4a 040a 	adc.w	r4, sl, sl
 8008eb4:	4699      	mov	r9, r3
 8008eb6:	46a2      	mov	sl, r4
 8008eb8:	eb19 0905 	adds.w	r9, r9, r5
 8008ebc:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ec0:	f04f 0100 	mov.w	r1, #0
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ecc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ed0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ed4:	4689      	mov	r9, r1
 8008ed6:	4692      	mov	sl, r2
 8008ed8:	eb19 0005 	adds.w	r0, r9, r5
 8008edc:	eb4a 0106 	adc.w	r1, sl, r6
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	461d      	mov	r5, r3
 8008ee6:	f04f 0600 	mov.w	r6, #0
 8008eea:	196b      	adds	r3, r5, r5
 8008eec:	eb46 0406 	adc.w	r4, r6, r6
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4623      	mov	r3, r4
 8008ef4:	f7f7 f9d4 	bl	80002a0 <__aeabi_uldivmod>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	461a      	mov	r2, r3
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <UART_SetConfig+0x384>)
 8008f00:	fba3 1302 	umull	r1, r3, r3, r2
 8008f04:	095b      	lsrs	r3, r3, #5
 8008f06:	2164      	movs	r1, #100	; 0x64
 8008f08:	fb01 f303 	mul.w	r3, r1, r3
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	3332      	adds	r3, #50	; 0x32
 8008f12:	4a07      	ldr	r2, [pc, #28]	; (8008f30 <UART_SetConfig+0x384>)
 8008f14:	fba2 2303 	umull	r2, r3, r2, r3
 8008f18:	095b      	lsrs	r3, r3, #5
 8008f1a:	f003 0207 	and.w	r2, r3, #7
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4442      	add	r2, r8
 8008f24:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008f26:	e1b2      	b.n	800928e <UART_SetConfig+0x6e2>
 8008f28:	40011000 	.word	0x40011000
 8008f2c:	40011400 	.word	0x40011400
 8008f30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4ad7      	ldr	r2, [pc, #860]	; (8009298 <UART_SetConfig+0x6ec>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d005      	beq.n	8008f4a <UART_SetConfig+0x39e>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4ad6      	ldr	r2, [pc, #856]	; (800929c <UART_SetConfig+0x6f0>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	f040 80d1 	bne.w	80090ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f4a:	f7fe f86d 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 8008f4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	469a      	mov	sl, r3
 8008f54:	f04f 0b00 	mov.w	fp, #0
 8008f58:	46d0      	mov	r8, sl
 8008f5a:	46d9      	mov	r9, fp
 8008f5c:	eb18 0308 	adds.w	r3, r8, r8
 8008f60:	eb49 0409 	adc.w	r4, r9, r9
 8008f64:	4698      	mov	r8, r3
 8008f66:	46a1      	mov	r9, r4
 8008f68:	eb18 080a 	adds.w	r8, r8, sl
 8008f6c:	eb49 090b 	adc.w	r9, r9, fp
 8008f70:	f04f 0100 	mov.w	r1, #0
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f84:	4688      	mov	r8, r1
 8008f86:	4691      	mov	r9, r2
 8008f88:	eb1a 0508 	adds.w	r5, sl, r8
 8008f8c:	eb4b 0609 	adc.w	r6, fp, r9
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4619      	mov	r1, r3
 8008f96:	f04f 0200 	mov.w	r2, #0
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	f04f 0400 	mov.w	r4, #0
 8008fa2:	0094      	lsls	r4, r2, #2
 8008fa4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fa8:	008b      	lsls	r3, r1, #2
 8008faa:	461a      	mov	r2, r3
 8008fac:	4623      	mov	r3, r4
 8008fae:	4628      	mov	r0, r5
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	f7f7 f975 	bl	80002a0 <__aeabi_uldivmod>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	461a      	mov	r2, r3
 8008fbc:	4bb8      	ldr	r3, [pc, #736]	; (80092a0 <UART_SetConfig+0x6f4>)
 8008fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8008fc2:	095b      	lsrs	r3, r3, #5
 8008fc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	469b      	mov	fp, r3
 8008fcc:	f04f 0c00 	mov.w	ip, #0
 8008fd0:	46d9      	mov	r9, fp
 8008fd2:	46e2      	mov	sl, ip
 8008fd4:	eb19 0309 	adds.w	r3, r9, r9
 8008fd8:	eb4a 040a 	adc.w	r4, sl, sl
 8008fdc:	4699      	mov	r9, r3
 8008fde:	46a2      	mov	sl, r4
 8008fe0:	eb19 090b 	adds.w	r9, r9, fp
 8008fe4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008fe8:	f04f 0100 	mov.w	r1, #0
 8008fec:	f04f 0200 	mov.w	r2, #0
 8008ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ff4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ff8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ffc:	4689      	mov	r9, r1
 8008ffe:	4692      	mov	sl, r2
 8009000:	eb1b 0509 	adds.w	r5, fp, r9
 8009004:	eb4c 060a 	adc.w	r6, ip, sl
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	4619      	mov	r1, r3
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	f04f 0400 	mov.w	r4, #0
 800901a:	0094      	lsls	r4, r2, #2
 800901c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009020:	008b      	lsls	r3, r1, #2
 8009022:	461a      	mov	r2, r3
 8009024:	4623      	mov	r3, r4
 8009026:	4628      	mov	r0, r5
 8009028:	4631      	mov	r1, r6
 800902a:	f7f7 f939 	bl	80002a0 <__aeabi_uldivmod>
 800902e:	4603      	mov	r3, r0
 8009030:	460c      	mov	r4, r1
 8009032:	461a      	mov	r2, r3
 8009034:	4b9a      	ldr	r3, [pc, #616]	; (80092a0 <UART_SetConfig+0x6f4>)
 8009036:	fba3 1302 	umull	r1, r3, r3, r2
 800903a:	095b      	lsrs	r3, r3, #5
 800903c:	2164      	movs	r1, #100	; 0x64
 800903e:	fb01 f303 	mul.w	r3, r1, r3
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	3332      	adds	r3, #50	; 0x32
 8009048:	4a95      	ldr	r2, [pc, #596]	; (80092a0 <UART_SetConfig+0x6f4>)
 800904a:	fba2 2303 	umull	r2, r3, r2, r3
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009054:	4498      	add	r8, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	469b      	mov	fp, r3
 800905a:	f04f 0c00 	mov.w	ip, #0
 800905e:	46d9      	mov	r9, fp
 8009060:	46e2      	mov	sl, ip
 8009062:	eb19 0309 	adds.w	r3, r9, r9
 8009066:	eb4a 040a 	adc.w	r4, sl, sl
 800906a:	4699      	mov	r9, r3
 800906c:	46a2      	mov	sl, r4
 800906e:	eb19 090b 	adds.w	r9, r9, fp
 8009072:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009076:	f04f 0100 	mov.w	r1, #0
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800908a:	4689      	mov	r9, r1
 800908c:	4692      	mov	sl, r2
 800908e:	eb1b 0509 	adds.w	r5, fp, r9
 8009092:	eb4c 060a 	adc.w	r6, ip, sl
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	4619      	mov	r1, r3
 800909c:	f04f 0200 	mov.w	r2, #0
 80090a0:	f04f 0300 	mov.w	r3, #0
 80090a4:	f04f 0400 	mov.w	r4, #0
 80090a8:	0094      	lsls	r4, r2, #2
 80090aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090ae:	008b      	lsls	r3, r1, #2
 80090b0:	461a      	mov	r2, r3
 80090b2:	4623      	mov	r3, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	4631      	mov	r1, r6
 80090b8:	f7f7 f8f2 	bl	80002a0 <__aeabi_uldivmod>
 80090bc:	4603      	mov	r3, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	461a      	mov	r2, r3
 80090c2:	4b77      	ldr	r3, [pc, #476]	; (80092a0 <UART_SetConfig+0x6f4>)
 80090c4:	fba3 1302 	umull	r1, r3, r3, r2
 80090c8:	095b      	lsrs	r3, r3, #5
 80090ca:	2164      	movs	r1, #100	; 0x64
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	3332      	adds	r3, #50	; 0x32
 80090d6:	4a72      	ldr	r2, [pc, #456]	; (80092a0 <UART_SetConfig+0x6f4>)
 80090d8:	fba2 2303 	umull	r2, r3, r2, r3
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	f003 020f 	and.w	r2, r3, #15
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4442      	add	r2, r8
 80090e8:	609a      	str	r2, [r3, #8]
 80090ea:	e0d0      	b.n	800928e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80090ec:	f7fd ff88 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 80090f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	469a      	mov	sl, r3
 80090f6:	f04f 0b00 	mov.w	fp, #0
 80090fa:	46d0      	mov	r8, sl
 80090fc:	46d9      	mov	r9, fp
 80090fe:	eb18 0308 	adds.w	r3, r8, r8
 8009102:	eb49 0409 	adc.w	r4, r9, r9
 8009106:	4698      	mov	r8, r3
 8009108:	46a1      	mov	r9, r4
 800910a:	eb18 080a 	adds.w	r8, r8, sl
 800910e:	eb49 090b 	adc.w	r9, r9, fp
 8009112:	f04f 0100 	mov.w	r1, #0
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800911e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009122:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009126:	4688      	mov	r8, r1
 8009128:	4691      	mov	r9, r2
 800912a:	eb1a 0508 	adds.w	r5, sl, r8
 800912e:	eb4b 0609 	adc.w	r6, fp, r9
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	4619      	mov	r1, r3
 8009138:	f04f 0200 	mov.w	r2, #0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	f04f 0400 	mov.w	r4, #0
 8009144:	0094      	lsls	r4, r2, #2
 8009146:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800914a:	008b      	lsls	r3, r1, #2
 800914c:	461a      	mov	r2, r3
 800914e:	4623      	mov	r3, r4
 8009150:	4628      	mov	r0, r5
 8009152:	4631      	mov	r1, r6
 8009154:	f7f7 f8a4 	bl	80002a0 <__aeabi_uldivmod>
 8009158:	4603      	mov	r3, r0
 800915a:	460c      	mov	r4, r1
 800915c:	461a      	mov	r2, r3
 800915e:	4b50      	ldr	r3, [pc, #320]	; (80092a0 <UART_SetConfig+0x6f4>)
 8009160:	fba3 2302 	umull	r2, r3, r3, r2
 8009164:	095b      	lsrs	r3, r3, #5
 8009166:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	469b      	mov	fp, r3
 800916e:	f04f 0c00 	mov.w	ip, #0
 8009172:	46d9      	mov	r9, fp
 8009174:	46e2      	mov	sl, ip
 8009176:	eb19 0309 	adds.w	r3, r9, r9
 800917a:	eb4a 040a 	adc.w	r4, sl, sl
 800917e:	4699      	mov	r9, r3
 8009180:	46a2      	mov	sl, r4
 8009182:	eb19 090b 	adds.w	r9, r9, fp
 8009186:	eb4a 0a0c 	adc.w	sl, sl, ip
 800918a:	f04f 0100 	mov.w	r1, #0
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009196:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800919a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800919e:	4689      	mov	r9, r1
 80091a0:	4692      	mov	sl, r2
 80091a2:	eb1b 0509 	adds.w	r5, fp, r9
 80091a6:	eb4c 060a 	adc.w	r6, ip, sl
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	4619      	mov	r1, r3
 80091b0:	f04f 0200 	mov.w	r2, #0
 80091b4:	f04f 0300 	mov.w	r3, #0
 80091b8:	f04f 0400 	mov.w	r4, #0
 80091bc:	0094      	lsls	r4, r2, #2
 80091be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091c2:	008b      	lsls	r3, r1, #2
 80091c4:	461a      	mov	r2, r3
 80091c6:	4623      	mov	r3, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	4631      	mov	r1, r6
 80091cc:	f7f7 f868 	bl	80002a0 <__aeabi_uldivmod>
 80091d0:	4603      	mov	r3, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	461a      	mov	r2, r3
 80091d6:	4b32      	ldr	r3, [pc, #200]	; (80092a0 <UART_SetConfig+0x6f4>)
 80091d8:	fba3 1302 	umull	r1, r3, r3, r2
 80091dc:	095b      	lsrs	r3, r3, #5
 80091de:	2164      	movs	r1, #100	; 0x64
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	3332      	adds	r3, #50	; 0x32
 80091ea:	4a2d      	ldr	r2, [pc, #180]	; (80092a0 <UART_SetConfig+0x6f4>)
 80091ec:	fba2 2303 	umull	r2, r3, r2, r3
 80091f0:	095b      	lsrs	r3, r3, #5
 80091f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091f6:	4498      	add	r8, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	469b      	mov	fp, r3
 80091fc:	f04f 0c00 	mov.w	ip, #0
 8009200:	46d9      	mov	r9, fp
 8009202:	46e2      	mov	sl, ip
 8009204:	eb19 0309 	adds.w	r3, r9, r9
 8009208:	eb4a 040a 	adc.w	r4, sl, sl
 800920c:	4699      	mov	r9, r3
 800920e:	46a2      	mov	sl, r4
 8009210:	eb19 090b 	adds.w	r9, r9, fp
 8009214:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009218:	f04f 0100 	mov.w	r1, #0
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009224:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009228:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800922c:	4689      	mov	r9, r1
 800922e:	4692      	mov	sl, r2
 8009230:	eb1b 0509 	adds.w	r5, fp, r9
 8009234:	eb4c 060a 	adc.w	r6, ip, sl
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	4619      	mov	r1, r3
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	f04f 0400 	mov.w	r4, #0
 800924a:	0094      	lsls	r4, r2, #2
 800924c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009250:	008b      	lsls	r3, r1, #2
 8009252:	461a      	mov	r2, r3
 8009254:	4623      	mov	r3, r4
 8009256:	4628      	mov	r0, r5
 8009258:	4631      	mov	r1, r6
 800925a:	f7f7 f821 	bl	80002a0 <__aeabi_uldivmod>
 800925e:	4603      	mov	r3, r0
 8009260:	460c      	mov	r4, r1
 8009262:	461a      	mov	r2, r3
 8009264:	4b0e      	ldr	r3, [pc, #56]	; (80092a0 <UART_SetConfig+0x6f4>)
 8009266:	fba3 1302 	umull	r1, r3, r3, r2
 800926a:	095b      	lsrs	r3, r3, #5
 800926c:	2164      	movs	r1, #100	; 0x64
 800926e:	fb01 f303 	mul.w	r3, r1, r3
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	3332      	adds	r3, #50	; 0x32
 8009278:	4a09      	ldr	r2, [pc, #36]	; (80092a0 <UART_SetConfig+0x6f4>)
 800927a:	fba2 2303 	umull	r2, r3, r2, r3
 800927e:	095b      	lsrs	r3, r3, #5
 8009280:	f003 020f 	and.w	r2, r3, #15
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4442      	add	r2, r8
 800928a:	609a      	str	r2, [r3, #8]
}
 800928c:	e7ff      	b.n	800928e <UART_SetConfig+0x6e2>
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	40011000 	.word	0x40011000
 800929c:	40011400 	.word	0x40011400
 80092a0:	51eb851f 	.word	0x51eb851f

080092a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80092b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092b6:	2b84      	cmp	r3, #132	; 0x84
 80092b8:	d005      	beq.n	80092c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80092ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	3303      	adds	r3, #3
 80092c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80092c6:	68fb      	ldr	r3, [r7, #12]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80092d8:	f001 f8ba 	bl	800a450 <vTaskStartScheduler>
  
  return osOK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80092e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e4:	b089      	sub	sp, #36	; 0x24
 80092e6:	af04      	add	r7, sp, #16
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d020      	beq.n	8009336 <osThreadCreate+0x54>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01c      	beq.n	8009336 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685c      	ldr	r4, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681d      	ldr	r5, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691e      	ldr	r6, [r3, #16]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff ffc8 	bl	80092a4 <makeFreeRtosPriority>
 8009314:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800931e:	9202      	str	r2, [sp, #8]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	9100      	str	r1, [sp, #0]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	4632      	mov	r2, r6
 8009328:	4629      	mov	r1, r5
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fed6 	bl	800a0dc <xTaskCreateStatic>
 8009330:	4603      	mov	r3, r0
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	e01c      	b.n	8009370 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685c      	ldr	r4, [r3, #4]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009342:	b29e      	uxth	r6, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff ffaa 	bl	80092a4 <makeFreeRtosPriority>
 8009350:	4602      	mov	r2, r0
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	9200      	str	r2, [sp, #0]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	4632      	mov	r2, r6
 800935e:	4629      	mov	r1, r5
 8009360:	4620      	mov	r0, r4
 8009362:	f000 ff14 	bl	800a18e <xTaskCreate>
 8009366:	4603      	mov	r3, r0
 8009368:	2b01      	cmp	r3, #1
 800936a:	d001      	beq.n	8009370 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800936c:	2300      	movs	r3, #0
 800936e:	e000      	b.n	8009372 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009370:	68fb      	ldr	r3, [r7, #12]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800937a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <osDelay+0x16>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	e000      	b.n	8009392 <osDelay+0x18>
 8009390:	2301      	movs	r3, #1
 8009392:	4618      	mov	r0, r3
 8009394:	f001 f828 	bl	800a3e8 <vTaskDelay>
  
  return osOK;
 8009398:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f103 0208 	add.w	r2, r3, #8
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f103 0208 	add.w	r2, r3, #8
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f103 0208 	add.w	r2, r3, #8
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689a      	ldr	r2, [r3, #8]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	601a      	str	r2, [r3, #0]
}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d103      	bne.n	8009464 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	e00c      	b.n	800947e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3308      	adds	r3, #8
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	e002      	b.n	8009472 <vListInsert+0x2e>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	429a      	cmp	r2, r3
 800947c:	d2f6      	bcs.n	800946c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	601a      	str	r2, [r3, #0]
}
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094b6:	b480      	push	{r7}
 80094b8:	b085      	sub	sp, #20
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	6892      	ldr	r2, [r2, #8]
 80094cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6852      	ldr	r2, [r2, #4]
 80094d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d103      	bne.n	80094ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	1e5a      	subs	r2, r3, #1
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
	...

0800950c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d109      	bne.n	8009534 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	60bb      	str	r3, [r7, #8]
 8009532:	e7fe      	b.n	8009532 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009534:	f001 fef2 	bl	800b31c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009540:	68f9      	ldr	r1, [r7, #12]
 8009542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009544:	fb01 f303 	mul.w	r3, r1, r3
 8009548:	441a      	add	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009564:	3b01      	subs	r3, #1
 8009566:	68f9      	ldr	r1, [r7, #12]
 8009568:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	441a      	add	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	22ff      	movs	r2, #255	; 0xff
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	22ff      	movs	r2, #255	; 0xff
 8009580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d114      	bne.n	80095b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d01a      	beq.n	80095c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3310      	adds	r3, #16
 8009596:	4618      	mov	r0, r3
 8009598:	f001 f99c 	bl	800a8d4 <xTaskRemoveFromEventList>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d012      	beq.n	80095c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095a2:	4b0d      	ldr	r3, [pc, #52]	; (80095d8 <xQueueGenericReset+0xcc>)
 80095a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	e009      	b.n	80095c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3310      	adds	r3, #16
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff fef2 	bl	80093a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3324      	adds	r3, #36	; 0x24
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff feed 	bl	80093a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095c8:	f001 fed6 	bl	800b378 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095cc:	2301      	movs	r3, #1
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d109      	bne.n	8009604 <xQueueGenericCreate+0x28>
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	e7fe      	b.n	8009602 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800960a:	2300      	movs	r3, #0
 800960c:	61fb      	str	r3, [r7, #28]
 800960e:	e004      	b.n	800961a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	fb02 f303 	mul.w	r3, r2, r3
 8009618:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	3348      	adds	r3, #72	; 0x48
 800961e:	4618      	mov	r0, r3
 8009620:	f001 ff96 	bl	800b550 <pvPortMalloc>
 8009624:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00f      	beq.n	800964c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	3348      	adds	r3, #72	; 0x48
 8009630:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800963a:	79fa      	ldrb	r2, [r7, #7]
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	4613      	mov	r3, r2
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 f805 	bl	8009656 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800964c:	69bb      	ldr	r3, [r7, #24]
	}
 800964e:	4618      	mov	r0, r3
 8009650:	3720      	adds	r7, #32
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
 8009662:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d103      	bne.n	8009672 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	e002      	b.n	8009678 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009684:	2101      	movs	r1, #1
 8009686:	69b8      	ldr	r0, [r7, #24]
 8009688:	f7ff ff40 	bl	800950c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08e      	sub	sp, #56	; 0x38
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096a2:	2300      	movs	r3, #0
 80096a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d109      	bne.n	80096c4 <xQueueGenericSend+0x30>
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80096c2:	e7fe      	b.n	80096c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <xQueueGenericSend+0x3e>
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <xQueueGenericSend+0x42>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <xQueueGenericSend+0x44>
 80096d6:	2300      	movs	r3, #0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <xQueueGenericSend+0x5c>
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
 80096ee:	e7fe      	b.n	80096ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d103      	bne.n	80096fe <xQueueGenericSend+0x6a>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d101      	bne.n	8009702 <xQueueGenericSend+0x6e>
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <xQueueGenericSend+0x70>
 8009702:	2300      	movs	r3, #0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d109      	bne.n	800971c <xQueueGenericSend+0x88>
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	623b      	str	r3, [r7, #32]
 800971a:	e7fe      	b.n	800971a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800971c:	f001 fa96 	bl	800ac4c <xTaskGetSchedulerState>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <xQueueGenericSend+0x98>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <xQueueGenericSend+0x9c>
 800972c:	2301      	movs	r3, #1
 800972e:	e000      	b.n	8009732 <xQueueGenericSend+0x9e>
 8009730:	2300      	movs	r3, #0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <xQueueGenericSend+0xb6>
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e7fe      	b.n	8009748 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800974a:	f001 fde7 	bl	800b31c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009756:	429a      	cmp	r2, r3
 8009758:	d302      	bcc.n	8009760 <xQueueGenericSend+0xcc>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b02      	cmp	r3, #2
 800975e:	d129      	bne.n	80097b4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009766:	f000 fba9 	bl	8009ebc <prvCopyDataToQueue>
 800976a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	2b00      	cmp	r3, #0
 8009772:	d010      	beq.n	8009796 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	3324      	adds	r3, #36	; 0x24
 8009778:	4618      	mov	r0, r3
 800977a:	f001 f8ab 	bl	800a8d4 <xTaskRemoveFromEventList>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d013      	beq.n	80097ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009784:	4b3f      	ldr	r3, [pc, #252]	; (8009884 <xQueueGenericSend+0x1f0>)
 8009786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	e00a      	b.n	80097ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d007      	beq.n	80097ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800979c:	4b39      	ldr	r3, [pc, #228]	; (8009884 <xQueueGenericSend+0x1f0>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097ac:	f001 fde4 	bl	800b378 <vPortExitCritical>
				return pdPASS;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e063      	b.n	800987c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d103      	bne.n	80097c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097ba:	f001 fddd 	bl	800b378 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	e05c      	b.n	800987c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097c8:	f107 0314 	add.w	r3, r7, #20
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 f8e3 	bl	800a998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097d6:	f001 fdcf 	bl	800b378 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097da:	f000 fe97 	bl	800a50c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097de:	f001 fd9d 	bl	800b31c <vPortEnterCritical>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097e8:	b25b      	sxtb	r3, r3
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ee:	d103      	bne.n	80097f8 <xQueueGenericSend+0x164>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097fe:	b25b      	sxtb	r3, r3
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d103      	bne.n	800980e <xQueueGenericSend+0x17a>
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800980e:	f001 fdb3 	bl	800b378 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009812:	1d3a      	adds	r2, r7, #4
 8009814:	f107 0314 	add.w	r3, r7, #20
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f001 f8d2 	bl	800a9c4 <xTaskCheckForTimeOut>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d124      	bne.n	8009870 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009828:	f000 fc40 	bl	800a0ac <prvIsQueueFull>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d018      	beq.n	8009864 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	3310      	adds	r3, #16
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	4611      	mov	r1, r2
 800983a:	4618      	mov	r0, r3
 800983c:	f001 f826 	bl	800a88c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009842:	f000 fbcb 	bl	8009fdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009846:	f000 fe6f 	bl	800a528 <xTaskResumeAll>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	f47f af7c 	bne.w	800974a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009852:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <xQueueGenericSend+0x1f0>)
 8009854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	e772      	b.n	800974a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009866:	f000 fbb9 	bl	8009fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800986a:	f000 fe5d 	bl	800a528 <xTaskResumeAll>
 800986e:	e76c      	b.n	800974a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009872:	f000 fbb3 	bl	8009fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009876:	f000 fe57 	bl	800a528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800987a:	2300      	movs	r3, #0
		}
	}
}
 800987c:	4618      	mov	r0, r3
 800987e:	3738      	adds	r7, #56	; 0x38
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08e      	sub	sp, #56	; 0x38
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	2b00      	cmp	r3, #0
 800989e:	d109      	bne.n	80098b4 <xQueueGenericSendFromISR+0x2c>
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
 80098b2:	e7fe      	b.n	80098b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d103      	bne.n	80098c2 <xQueueGenericSendFromISR+0x3a>
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <xQueueGenericSendFromISR+0x3e>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e000      	b.n	80098c8 <xQueueGenericSendFromISR+0x40>
 80098c6:	2300      	movs	r3, #0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d109      	bne.n	80098e0 <xQueueGenericSendFromISR+0x58>
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	623b      	str	r3, [r7, #32]
 80098de:	e7fe      	b.n	80098de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d103      	bne.n	80098ee <xQueueGenericSendFromISR+0x66>
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <xQueueGenericSendFromISR+0x6a>
 80098ee:	2301      	movs	r3, #1
 80098f0:	e000      	b.n	80098f4 <xQueueGenericSendFromISR+0x6c>
 80098f2:	2300      	movs	r3, #0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <xQueueGenericSendFromISR+0x84>
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	61fb      	str	r3, [r7, #28]
 800990a:	e7fe      	b.n	800990a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800990c:	f001 fde2 	bl	800b4d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009910:	f3ef 8211 	mrs	r2, BASEPRI
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	61ba      	str	r2, [r7, #24]
 8009926:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009928:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800992a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009934:	429a      	cmp	r2, r3
 8009936:	d302      	bcc.n	800993e <xQueueGenericSendFromISR+0xb6>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d12c      	bne.n	8009998 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800994e:	f000 fab5 	bl	8009ebc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009952:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995a:	d112      	bne.n	8009982 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d016      	beq.n	8009992 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	4618      	mov	r0, r3
 800996a:	f000 ffb3 	bl	800a8d4 <xTaskRemoveFromEventList>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00e      	beq.n	8009992 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00b      	beq.n	8009992 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	e007      	b.n	8009992 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009982:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009986:	3301      	adds	r3, #1
 8009988:	b2db      	uxtb	r3, r3
 800998a:	b25a      	sxtb	r2, r3
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009992:	2301      	movs	r3, #1
 8009994:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009996:	e001      	b.n	800999c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009998:	2300      	movs	r3, #0
 800999a:	637b      	str	r3, [r7, #52]	; 0x34
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3738      	adds	r7, #56	; 0x38
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08e      	sub	sp, #56	; 0x38
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d109      	bne.n	80099d8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	623b      	str	r3, [r7, #32]
 80099d6:	e7fe      	b.n	80099d6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d009      	beq.n	80099f4 <xQueueGiveFromISR+0x44>
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	e7fe      	b.n	80099f2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d103      	bne.n	8009a04 <xQueueGiveFromISR+0x54>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <xQueueGiveFromISR+0x58>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <xQueueGiveFromISR+0x5a>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d109      	bne.n	8009a22 <xQueueGiveFromISR+0x72>
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	61bb      	str	r3, [r7, #24]
 8009a20:	e7fe      	b.n	8009a20 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a22:	f001 fd57 	bl	800b4d4 <vPortValidateInterruptPriority>
	__asm volatile
 8009a26:	f3ef 8211 	mrs	r2, BASEPRI
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	617a      	str	r2, [r7, #20]
 8009a3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d22b      	bcs.n	8009aaa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6c:	d112      	bne.n	8009a94 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d016      	beq.n	8009aa4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a78:	3324      	adds	r3, #36	; 0x24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 ff2a 	bl	800a8d4 <xTaskRemoveFromEventList>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00e      	beq.n	8009aa4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00b      	beq.n	8009aa4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	e007      	b.n	8009aa4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a98:	3301      	adds	r3, #1
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	b25a      	sxtb	r2, r3
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa8:	e001      	b.n	8009aae <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	637b      	str	r3, [r7, #52]	; 0x34
 8009aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3738      	adds	r7, #56	; 0x38
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08c      	sub	sp, #48	; 0x30
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <xQueueReceive+0x2e>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	623b      	str	r3, [r7, #32]
 8009af0:	e7fe      	b.n	8009af0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <xQueueReceive+0x3c>
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <xQueueReceive+0x40>
 8009b00:	2301      	movs	r3, #1
 8009b02:	e000      	b.n	8009b06 <xQueueReceive+0x42>
 8009b04:	2300      	movs	r3, #0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d109      	bne.n	8009b1e <xQueueReceive+0x5a>
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	61fb      	str	r3, [r7, #28]
 8009b1c:	e7fe      	b.n	8009b1c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b1e:	f001 f895 	bl	800ac4c <xTaskGetSchedulerState>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <xQueueReceive+0x6a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <xQueueReceive+0x6e>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <xQueueReceive+0x70>
 8009b32:	2300      	movs	r3, #0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d109      	bne.n	8009b4c <xQueueReceive+0x88>
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	e7fe      	b.n	8009b4a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b4c:	f001 fbe6 	bl	800b31c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d01f      	beq.n	8009b9c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b5c:	68b9      	ldr	r1, [r7, #8]
 8009b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b60:	f000 fa16 	bl	8009f90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	1e5a      	subs	r2, r3, #1
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00f      	beq.n	8009b94 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	3310      	adds	r3, #16
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 feab 	bl	800a8d4 <xTaskRemoveFromEventList>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d007      	beq.n	8009b94 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b84:	4b3c      	ldr	r3, [pc, #240]	; (8009c78 <xQueueReceive+0x1b4>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b94:	f001 fbf0 	bl	800b378 <vPortExitCritical>
				return pdPASS;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e069      	b.n	8009c70 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d103      	bne.n	8009baa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ba2:	f001 fbe9 	bl	800b378 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e062      	b.n	8009c70 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bb0:	f107 0310 	add.w	r3, r7, #16
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 feef 	bl	800a998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bbe:	f001 fbdb 	bl	800b378 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bc2:	f000 fca3 	bl	800a50c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bc6:	f001 fba9 	bl	800b31c <vPortEnterCritical>
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bd0:	b25b      	sxtb	r3, r3
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd6:	d103      	bne.n	8009be0 <xQueueReceive+0x11c>
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009be6:	b25b      	sxtb	r3, r3
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d103      	bne.n	8009bf6 <xQueueReceive+0x132>
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bf6:	f001 fbbf 	bl	800b378 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bfa:	1d3a      	adds	r2, r7, #4
 8009bfc:	f107 0310 	add.w	r3, r7, #16
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fede 	bl	800a9c4 <xTaskCheckForTimeOut>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d123      	bne.n	8009c56 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c10:	f000 fa36 	bl	800a080 <prvIsQueueEmpty>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d017      	beq.n	8009c4a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1c:	3324      	adds	r3, #36	; 0x24
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4611      	mov	r1, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 fe32 	bl	800a88c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c2a:	f000 f9d7 	bl	8009fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c2e:	f000 fc7b 	bl	800a528 <xTaskResumeAll>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d189      	bne.n	8009b4c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009c38:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <xQueueReceive+0x1b4>)
 8009c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	e780      	b.n	8009b4c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c4c:	f000 f9c6 	bl	8009fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c50:	f000 fc6a 	bl	800a528 <xTaskResumeAll>
 8009c54:	e77a      	b.n	8009b4c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c58:	f000 f9c0 	bl	8009fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c5c:	f000 fc64 	bl	800a528 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c62:	f000 fa0d 	bl	800a080 <prvIsQueueEmpty>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f43f af6f 	beq.w	8009b4c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3730      	adds	r7, #48	; 0x30
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08e      	sub	sp, #56	; 0x38
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c86:	2300      	movs	r3, #0
 8009c88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d109      	bne.n	8009cac <xQueueSemaphoreTake+0x30>
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	623b      	str	r3, [r7, #32]
 8009caa:	e7fe      	b.n	8009caa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d009      	beq.n	8009cc8 <xQueueSemaphoreTake+0x4c>
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	61fb      	str	r3, [r7, #28]
 8009cc6:	e7fe      	b.n	8009cc6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cc8:	f000 ffc0 	bl	800ac4c <xTaskGetSchedulerState>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <xQueueSemaphoreTake+0x5c>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <xQueueSemaphoreTake+0x60>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e000      	b.n	8009cde <xQueueSemaphoreTake+0x62>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <xQueueSemaphoreTake+0x7a>
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	61bb      	str	r3, [r7, #24]
 8009cf4:	e7fe      	b.n	8009cf4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cf6:	f001 fb11 	bl	800b31c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d024      	beq.n	8009d50 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	1e5a      	subs	r2, r3, #1
 8009d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d104      	bne.n	8009d20 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009d16:	f001 f95f 	bl	800afd8 <pvTaskIncrementMutexHeldCount>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00f      	beq.n	8009d48 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	3310      	adds	r3, #16
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 fdd1 	bl	800a8d4 <xTaskRemoveFromEventList>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d007      	beq.n	8009d48 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d38:	4b53      	ldr	r3, [pc, #332]	; (8009e88 <xQueueSemaphoreTake+0x20c>)
 8009d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d48:	f001 fb16 	bl	800b378 <vPortExitCritical>
				return pdPASS;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e096      	b.n	8009e7e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d110      	bne.n	8009d78 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d009      	beq.n	8009d70 <xQueueSemaphoreTake+0xf4>
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	e7fe      	b.n	8009d6e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009d70:	f001 fb02 	bl	800b378 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d74:	2300      	movs	r3, #0
 8009d76:	e082      	b.n	8009e7e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d106      	bne.n	8009d8c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d7e:	f107 030c 	add.w	r3, r7, #12
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 fe08 	bl	800a998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d8c:	f001 faf4 	bl	800b378 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d90:	f000 fbbc 	bl	800a50c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d94:	f001 fac2 	bl	800b31c <vPortEnterCritical>
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d9e:	b25b      	sxtb	r3, r3
 8009da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da4:	d103      	bne.n	8009dae <xQueueSemaphoreTake+0x132>
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009db4:	b25b      	sxtb	r3, r3
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dba:	d103      	bne.n	8009dc4 <xQueueSemaphoreTake+0x148>
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dc4:	f001 fad8 	bl	800b378 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dc8:	463a      	mov	r2, r7
 8009dca:	f107 030c 	add.w	r3, r7, #12
 8009dce:	4611      	mov	r1, r2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fdf7 	bl	800a9c4 <xTaskCheckForTimeOut>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d132      	bne.n	8009e42 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dde:	f000 f94f 	bl	800a080 <prvIsQueueEmpty>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d026      	beq.n	8009e36 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d109      	bne.n	8009e04 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009df0:	f001 fa94 	bl	800b31c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 ff45 	bl	800ac88 <xTaskPriorityInherit>
 8009dfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e00:	f001 faba 	bl	800b378 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e06:	3324      	adds	r3, #36	; 0x24
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fd3d 	bl	800a88c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e14:	f000 f8e2 	bl	8009fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e18:	f000 fb86 	bl	800a528 <xTaskResumeAll>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f47f af69 	bne.w	8009cf6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009e24:	4b18      	ldr	r3, [pc, #96]	; (8009e88 <xQueueSemaphoreTake+0x20c>)
 8009e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	e75f      	b.n	8009cf6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e38:	f000 f8d0 	bl	8009fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e3c:	f000 fb74 	bl	800a528 <xTaskResumeAll>
 8009e40:	e759      	b.n	8009cf6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e44:	f000 f8ca 	bl	8009fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e48:	f000 fb6e 	bl	800a528 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e4e:	f000 f917 	bl	800a080 <prvIsQueueEmpty>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f43f af4e 	beq.w	8009cf6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00d      	beq.n	8009e7c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009e60:	f001 fa5c 	bl	800b31c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e66:	f000 f811 	bl	8009e8c <prvGetDisinheritPriorityAfterTimeout>
 8009e6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e72:	4618      	mov	r0, r3
 8009e74:	f001 f812 	bl	800ae9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009e78:	f001 fa7e 	bl	800b378 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3738      	adds	r7, #56	; 0x38
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d006      	beq.n	8009eaa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f1c3 0307 	rsb	r3, r3, #7
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	e001      	b.n	8009eae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009eae:	68fb      	ldr	r3, [r7, #12]
	}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10d      	bne.n	8009ef6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d14d      	bne.n	8009f7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 ff54 	bl	800ad94 <xTaskPriorityDisinherit>
 8009eec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	605a      	str	r2, [r3, #4]
 8009ef4:	e043      	b.n	8009f7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d119      	bne.n	8009f30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6898      	ldr	r0, [r3, #8]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	461a      	mov	r2, r3
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	f019 fbb8 	bl	802367c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f14:	441a      	add	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d32b      	bcc.n	8009f7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	609a      	str	r2, [r3, #8]
 8009f2e:	e026      	b.n	8009f7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68d8      	ldr	r0, [r3, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f38:	461a      	mov	r2, r3
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	f019 fb9e 	bl	802367c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f48:	425b      	negs	r3, r3
 8009f4a:	441a      	add	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d207      	bcs.n	8009f6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f64:	425b      	negs	r3, r3
 8009f66:	441a      	add	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d105      	bne.n	8009f7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f86:	697b      	ldr	r3, [r7, #20]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d018      	beq.n	8009fd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	441a      	add	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68da      	ldr	r2, [r3, #12]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d303      	bcc.n	8009fc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68d9      	ldr	r1, [r3, #12]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fcc:	461a      	mov	r2, r3
 8009fce:	6838      	ldr	r0, [r7, #0]
 8009fd0:	f019 fb54 	bl	802367c <memcpy>
	}
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fe4:	f001 f99a 	bl	800b31c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ff0:	e011      	b.n	800a016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d012      	beq.n	800a020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3324      	adds	r3, #36	; 0x24
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fc68 	bl	800a8d4 <xTaskRemoveFromEventList>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a00a:	f000 fd3b 	bl	800aa84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	3b01      	subs	r3, #1
 800a012:	b2db      	uxtb	r3, r3
 800a014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	dce9      	bgt.n	8009ff2 <prvUnlockQueue+0x16>
 800a01e:	e000      	b.n	800a022 <prvUnlockQueue+0x46>
					break;
 800a020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	22ff      	movs	r2, #255	; 0xff
 800a026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a02a:	f001 f9a5 	bl	800b378 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a02e:	f001 f975 	bl	800b31c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a03a:	e011      	b.n	800a060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d012      	beq.n	800a06a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3310      	adds	r3, #16
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fc43 	bl	800a8d4 <xTaskRemoveFromEventList>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a054:	f000 fd16 	bl	800aa84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dce9      	bgt.n	800a03c <prvUnlockQueue+0x60>
 800a068:	e000      	b.n	800a06c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a06a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	22ff      	movs	r2, #255	; 0xff
 800a070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a074:	f001 f980 	bl	800b378 <vPortExitCritical>
}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a088:	f001 f948 	bl	800b31c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	2b00      	cmp	r3, #0
 800a092:	d102      	bne.n	800a09a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	60fb      	str	r3, [r7, #12]
 800a098:	e001      	b.n	800a09e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a09e:	f001 f96b 	bl	800b378 <vPortExitCritical>

	return xReturn;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0b4:	f001 f932 	bl	800b31c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d102      	bne.n	800a0ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	e001      	b.n	800a0ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0ce:	f001 f953 	bl	800b378 <vPortExitCritical>

	return xReturn;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b08e      	sub	sp, #56	; 0x38
 800a0e0:	af04      	add	r7, sp, #16
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d109      	bne.n	800a104 <xTaskCreateStatic+0x28>
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	623b      	str	r3, [r7, #32]
 800a102:	e7fe      	b.n	800a102 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	2b00      	cmp	r3, #0
 800a108:	d109      	bne.n	800a11e <xTaskCreateStatic+0x42>
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	61fb      	str	r3, [r7, #28]
 800a11c:	e7fe      	b.n	800a11c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a11e:	2354      	movs	r3, #84	; 0x54
 800a120:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b54      	cmp	r3, #84	; 0x54
 800a126:	d009      	beq.n	800a13c <xTaskCreateStatic+0x60>
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	61bb      	str	r3, [r7, #24]
 800a13a:	e7fe      	b.n	800a13a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d01e      	beq.n	800a180 <xTaskCreateStatic+0xa4>
 800a142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01b      	beq.n	800a180 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a150:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	2202      	movs	r2, #2
 800a156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a15a:	2300      	movs	r3, #0
 800a15c:	9303      	str	r3, [sp, #12]
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	f107 0314 	add.w	r3, r7, #20
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68b9      	ldr	r1, [r7, #8]
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 f850 	bl	800a218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a17a:	f000 f8cb 	bl	800a314 <prvAddNewTaskToReadyList>
 800a17e:	e001      	b.n	800a184 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a180:	2300      	movs	r3, #0
 800a182:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a184:	697b      	ldr	r3, [r7, #20]
	}
 800a186:	4618      	mov	r0, r3
 800a188:	3728      	adds	r7, #40	; 0x28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b08c      	sub	sp, #48	; 0x30
 800a192:	af04      	add	r7, sp, #16
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	60b9      	str	r1, [r7, #8]
 800a198:	603b      	str	r3, [r7, #0]
 800a19a:	4613      	mov	r3, r2
 800a19c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 f9d4 	bl	800b550 <pvPortMalloc>
 800a1a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00e      	beq.n	800a1ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a1b0:	2054      	movs	r0, #84	; 0x54
 800a1b2:	f001 f9cd 	bl	800b550 <pvPortMalloc>
 800a1b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	631a      	str	r2, [r3, #48]	; 0x30
 800a1c4:	e005      	b.n	800a1d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a1c6:	6978      	ldr	r0, [r7, #20]
 800a1c8:	f001 fa84 	bl	800b6d4 <vPortFree>
 800a1cc:	e001      	b.n	800a1d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d017      	beq.n	800a208 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1e0:	88fa      	ldrh	r2, [r7, #6]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9303      	str	r3, [sp, #12]
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	9302      	str	r3, [sp, #8]
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 f80e 	bl	800a218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1fc:	69f8      	ldr	r0, [r7, #28]
 800a1fe:	f000 f889 	bl	800a314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a202:	2301      	movs	r3, #1
 800a204:	61bb      	str	r3, [r7, #24]
 800a206:	e002      	b.n	800a20e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a208:	f04f 33ff 	mov.w	r3, #4294967295
 800a20c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a20e:	69bb      	ldr	r3, [r7, #24]
	}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a230:	3b01      	subs	r3, #1
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	f023 0307 	bic.w	r3, r3, #7
 800a23e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	2b00      	cmp	r3, #0
 800a248:	d009      	beq.n	800a25e <prvInitialiseNewTask+0x46>
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	e7fe      	b.n	800a25c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
 800a262:	e012      	b.n	800a28a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4413      	add	r3, r2
 800a26a:	7819      	ldrb	r1, [r3, #0]
 800a26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	4413      	add	r3, r2
 800a272:	3334      	adds	r3, #52	; 0x34
 800a274:	460a      	mov	r2, r1
 800a276:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	4413      	add	r3, r2
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d006      	beq.n	800a292 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	3301      	adds	r3, #1
 800a288:	61fb      	str	r3, [r7, #28]
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	2b0f      	cmp	r3, #15
 800a28e:	d9e9      	bls.n	800a264 <prvInitialiseNewTask+0x4c>
 800a290:	e000      	b.n	800a294 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a292:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	2b06      	cmp	r3, #6
 800a2a0:	d901      	bls.n	800a2a6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2a2:	2306      	movs	r3, #6
 800a2a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7ff f890 	bl	80093e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	3318      	adds	r3, #24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff f88b 	bl	80093e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	f1c3 0207 	rsb	r2, r3, #7
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	69b8      	ldr	r0, [r7, #24]
 800a2f6:	f000 fee9 	bl	800b0cc <pxPortInitialiseStack>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a30a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a30c:	bf00      	nop
 800a30e:	3720      	adds	r7, #32
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a31c:	f000 fffe 	bl	800b31c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a320:	4b2a      	ldr	r3, [pc, #168]	; (800a3cc <prvAddNewTaskToReadyList+0xb8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3301      	adds	r3, #1
 800a326:	4a29      	ldr	r2, [pc, #164]	; (800a3cc <prvAddNewTaskToReadyList+0xb8>)
 800a328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a32a:	4b29      	ldr	r3, [pc, #164]	; (800a3d0 <prvAddNewTaskToReadyList+0xbc>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d109      	bne.n	800a346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a332:	4a27      	ldr	r2, [pc, #156]	; (800a3d0 <prvAddNewTaskToReadyList+0xbc>)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a338:	4b24      	ldr	r3, [pc, #144]	; (800a3cc <prvAddNewTaskToReadyList+0xb8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d110      	bne.n	800a362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a340:	f000 fbc4 	bl	800aacc <prvInitialiseTaskLists>
 800a344:	e00d      	b.n	800a362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a346:	4b23      	ldr	r3, [pc, #140]	; (800a3d4 <prvAddNewTaskToReadyList+0xc0>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d109      	bne.n	800a362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a34e:	4b20      	ldr	r3, [pc, #128]	; (800a3d0 <prvAddNewTaskToReadyList+0xbc>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	429a      	cmp	r2, r3
 800a35a:	d802      	bhi.n	800a362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a35c:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <prvAddNewTaskToReadyList+0xbc>)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a362:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <prvAddNewTaskToReadyList+0xc4>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3301      	adds	r3, #1
 800a368:	4a1b      	ldr	r2, [pc, #108]	; (800a3d8 <prvAddNewTaskToReadyList+0xc4>)
 800a36a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	2201      	movs	r2, #1
 800a372:	409a      	lsls	r2, r3
 800a374:	4b19      	ldr	r3, [pc, #100]	; (800a3dc <prvAddNewTaskToReadyList+0xc8>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4313      	orrs	r3, r2
 800a37a:	4a18      	ldr	r2, [pc, #96]	; (800a3dc <prvAddNewTaskToReadyList+0xc8>)
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a382:	4613      	mov	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <prvAddNewTaskToReadyList+0xcc>)
 800a38c:	441a      	add	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3304      	adds	r3, #4
 800a392:	4619      	mov	r1, r3
 800a394:	4610      	mov	r0, r2
 800a396:	f7ff f831 	bl	80093fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a39a:	f000 ffed 	bl	800b378 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a39e:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <prvAddNewTaskToReadyList+0xc0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00e      	beq.n	800a3c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3a6:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <prvAddNewTaskToReadyList+0xbc>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d207      	bcs.n	800a3c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3b4:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <prvAddNewTaskToReadyList+0xd0>)
 800a3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20025c80 	.word	0x20025c80
 800a3d0:	20025b80 	.word	0x20025b80
 800a3d4:	20025c8c 	.word	0x20025c8c
 800a3d8:	20025c9c 	.word	0x20025c9c
 800a3dc:	20025c88 	.word	0x20025c88
 800a3e0:	20025b84 	.word	0x20025b84
 800a3e4:	e000ed04 	.word	0xe000ed04

0800a3e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d016      	beq.n	800a428 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a3fa:	4b13      	ldr	r3, [pc, #76]	; (800a448 <vTaskDelay+0x60>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d009      	beq.n	800a416 <vTaskDelay+0x2e>
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	e7fe      	b.n	800a414 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a416:	f000 f879 	bl	800a50c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a41a:	2100      	movs	r1, #0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fdef 	bl	800b000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a422:	f000 f881 	bl	800a528 <xTaskResumeAll>
 800a426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d107      	bne.n	800a43e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a42e:	4b07      	ldr	r3, [pc, #28]	; (800a44c <vTaskDelay+0x64>)
 800a430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20025ca8 	.word	0x20025ca8
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	; 0x28
 800a454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a45e:	463a      	mov	r2, r7
 800a460:	1d39      	adds	r1, r7, #4
 800a462:	f107 0308 	add.w	r3, r7, #8
 800a466:	4618      	mov	r0, r3
 800a468:	f7f6 fc0e 	bl	8000c88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	9202      	str	r2, [sp, #8]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	2300      	movs	r3, #0
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	460a      	mov	r2, r1
 800a47e:	491d      	ldr	r1, [pc, #116]	; (800a4f4 <vTaskStartScheduler+0xa4>)
 800a480:	481d      	ldr	r0, [pc, #116]	; (800a4f8 <vTaskStartScheduler+0xa8>)
 800a482:	f7ff fe2b 	bl	800a0dc <xTaskCreateStatic>
 800a486:	4602      	mov	r2, r0
 800a488:	4b1c      	ldr	r3, [pc, #112]	; (800a4fc <vTaskStartScheduler+0xac>)
 800a48a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a48c:	4b1b      	ldr	r3, [pc, #108]	; (800a4fc <vTaskStartScheduler+0xac>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a494:	2301      	movs	r3, #1
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e001      	b.n	800a49e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d115      	bne.n	800a4d0 <vTaskStartScheduler+0x80>
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4b6:	4b12      	ldr	r3, [pc, #72]	; (800a500 <vTaskStartScheduler+0xb0>)
 800a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4be:	4b11      	ldr	r3, [pc, #68]	; (800a504 <vTaskStartScheduler+0xb4>)
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a4c4:	4b10      	ldr	r3, [pc, #64]	; (800a508 <vTaskStartScheduler+0xb8>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4ca:	f000 fe89 	bl	800b1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4ce:	e00d      	b.n	800a4ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d6:	d109      	bne.n	800a4ec <vTaskStartScheduler+0x9c>
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	60fb      	str	r3, [r7, #12]
 800a4ea:	e7fe      	b.n	800a4ea <vTaskStartScheduler+0x9a>
}
 800a4ec:	bf00      	nop
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	08024a34 	.word	0x08024a34
 800a4f8:	0800aa9d 	.word	0x0800aa9d
 800a4fc:	20025ca4 	.word	0x20025ca4
 800a500:	20025ca0 	.word	0x20025ca0
 800a504:	20025c8c 	.word	0x20025c8c
 800a508:	20025c84 	.word	0x20025c84

0800a50c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a510:	4b04      	ldr	r3, [pc, #16]	; (800a524 <vTaskSuspendAll+0x18>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3301      	adds	r3, #1
 800a516:	4a03      	ldr	r2, [pc, #12]	; (800a524 <vTaskSuspendAll+0x18>)
 800a518:	6013      	str	r3, [r2, #0]
}
 800a51a:	bf00      	nop
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	20025ca8 	.word	0x20025ca8

0800a528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a536:	4b41      	ldr	r3, [pc, #260]	; (800a63c <xTaskResumeAll+0x114>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d109      	bne.n	800a552 <xTaskResumeAll+0x2a>
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	603b      	str	r3, [r7, #0]
 800a550:	e7fe      	b.n	800a550 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a552:	f000 fee3 	bl	800b31c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a556:	4b39      	ldr	r3, [pc, #228]	; (800a63c <xTaskResumeAll+0x114>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	4a37      	ldr	r2, [pc, #220]	; (800a63c <xTaskResumeAll+0x114>)
 800a55e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a560:	4b36      	ldr	r3, [pc, #216]	; (800a63c <xTaskResumeAll+0x114>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d161      	bne.n	800a62c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a568:	4b35      	ldr	r3, [pc, #212]	; (800a640 <xTaskResumeAll+0x118>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d05d      	beq.n	800a62c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a570:	e02e      	b.n	800a5d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a572:	4b34      	ldr	r3, [pc, #208]	; (800a644 <xTaskResumeAll+0x11c>)
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3318      	adds	r3, #24
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe ff99 	bl	80094b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3304      	adds	r3, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe ff94 	bl	80094b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a592:	2201      	movs	r2, #1
 800a594:	409a      	lsls	r2, r3
 800a596:	4b2c      	ldr	r3, [pc, #176]	; (800a648 <xTaskResumeAll+0x120>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	4a2a      	ldr	r2, [pc, #168]	; (800a648 <xTaskResumeAll+0x120>)
 800a59e:	6013      	str	r3, [r2, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4a27      	ldr	r2, [pc, #156]	; (800a64c <xTaskResumeAll+0x124>)
 800a5ae:	441a      	add	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f7fe ff20 	bl	80093fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c0:	4b23      	ldr	r3, [pc, #140]	; (800a650 <xTaskResumeAll+0x128>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d302      	bcc.n	800a5d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a5ca:	4b22      	ldr	r3, [pc, #136]	; (800a654 <xTaskResumeAll+0x12c>)
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5d0:	4b1c      	ldr	r3, [pc, #112]	; (800a644 <xTaskResumeAll+0x11c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1cc      	bne.n	800a572 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a5de:	f000 fb0f 	bl	800ac00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a5e2:	4b1d      	ldr	r3, [pc, #116]	; (800a658 <xTaskResumeAll+0x130>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d010      	beq.n	800a610 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a5ee:	f000 f837 	bl	800a660 <xTaskIncrementTick>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a5f8:	4b16      	ldr	r3, [pc, #88]	; (800a654 <xTaskResumeAll+0x12c>)
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	3b01      	subs	r3, #1
 800a602:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1f1      	bne.n	800a5ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a60a:	4b13      	ldr	r3, [pc, #76]	; (800a658 <xTaskResumeAll+0x130>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a610:	4b10      	ldr	r3, [pc, #64]	; (800a654 <xTaskResumeAll+0x12c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d009      	beq.n	800a62c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a618:	2301      	movs	r3, #1
 800a61a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a61c:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <xTaskResumeAll+0x134>)
 800a61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a62c:	f000 fea4 	bl	800b378 <vPortExitCritical>

	return xAlreadyYielded;
 800a630:	68bb      	ldr	r3, [r7, #8]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20025ca8 	.word	0x20025ca8
 800a640:	20025c80 	.word	0x20025c80
 800a644:	20025c40 	.word	0x20025c40
 800a648:	20025c88 	.word	0x20025c88
 800a64c:	20025b84 	.word	0x20025b84
 800a650:	20025b80 	.word	0x20025b80
 800a654:	20025c94 	.word	0x20025c94
 800a658:	20025c90 	.word	0x20025c90
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a666:	2300      	movs	r3, #0
 800a668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a66a:	4b50      	ldr	r3, [pc, #320]	; (800a7ac <xTaskIncrementTick+0x14c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f040 808c 	bne.w	800a78c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a674:	4b4e      	ldr	r3, [pc, #312]	; (800a7b0 <xTaskIncrementTick+0x150>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3301      	adds	r3, #1
 800a67a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a67c:	4a4c      	ldr	r2, [pc, #304]	; (800a7b0 <xTaskIncrementTick+0x150>)
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d11f      	bne.n	800a6c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a688:	4b4a      	ldr	r3, [pc, #296]	; (800a7b4 <xTaskIncrementTick+0x154>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d009      	beq.n	800a6a6 <xTaskIncrementTick+0x46>
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	e7fe      	b.n	800a6a4 <xTaskIncrementTick+0x44>
 800a6a6:	4b43      	ldr	r3, [pc, #268]	; (800a7b4 <xTaskIncrementTick+0x154>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	4b42      	ldr	r3, [pc, #264]	; (800a7b8 <xTaskIncrementTick+0x158>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a40      	ldr	r2, [pc, #256]	; (800a7b4 <xTaskIncrementTick+0x154>)
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	4a40      	ldr	r2, [pc, #256]	; (800a7b8 <xTaskIncrementTick+0x158>)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	4b40      	ldr	r3, [pc, #256]	; (800a7bc <xTaskIncrementTick+0x15c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	4a3e      	ldr	r2, [pc, #248]	; (800a7bc <xTaskIncrementTick+0x15c>)
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	f000 fa9c 	bl	800ac00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a6c8:	4b3d      	ldr	r3, [pc, #244]	; (800a7c0 <xTaskIncrementTick+0x160>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d34d      	bcc.n	800a76e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6d2:	4b38      	ldr	r3, [pc, #224]	; (800a7b4 <xTaskIncrementTick+0x154>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <xTaskIncrementTick+0x80>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e000      	b.n	800a6e2 <xTaskIncrementTick+0x82>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d004      	beq.n	800a6f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6e6:	4b36      	ldr	r3, [pc, #216]	; (800a7c0 <xTaskIncrementTick+0x160>)
 800a6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ec:	601a      	str	r2, [r3, #0]
					break;
 800a6ee:	e03e      	b.n	800a76e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a6f0:	4b30      	ldr	r3, [pc, #192]	; (800a7b4 <xTaskIncrementTick+0x154>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	429a      	cmp	r2, r3
 800a706:	d203      	bcs.n	800a710 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a708:	4a2d      	ldr	r2, [pc, #180]	; (800a7c0 <xTaskIncrementTick+0x160>)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6013      	str	r3, [r2, #0]
						break;
 800a70e:	e02e      	b.n	800a76e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	3304      	adds	r3, #4
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe fece 	bl	80094b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d004      	beq.n	800a72c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	3318      	adds	r3, #24
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fec5 	bl	80094b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	2201      	movs	r2, #1
 800a732:	409a      	lsls	r2, r3
 800a734:	4b23      	ldr	r3, [pc, #140]	; (800a7c4 <xTaskIncrementTick+0x164>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4313      	orrs	r3, r2
 800a73a:	4a22      	ldr	r2, [pc, #136]	; (800a7c4 <xTaskIncrementTick+0x164>)
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a742:	4613      	mov	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4a1f      	ldr	r2, [pc, #124]	; (800a7c8 <xTaskIncrementTick+0x168>)
 800a74c:	441a      	add	r2, r3
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	3304      	adds	r3, #4
 800a752:	4619      	mov	r1, r3
 800a754:	4610      	mov	r0, r2
 800a756:	f7fe fe51 	bl	80093fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <xTaskIncrementTick+0x16c>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	429a      	cmp	r2, r3
 800a766:	d3b4      	bcc.n	800a6d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a768:	2301      	movs	r3, #1
 800a76a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a76c:	e7b1      	b.n	800a6d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a76e:	4b17      	ldr	r3, [pc, #92]	; (800a7cc <xTaskIncrementTick+0x16c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a774:	4914      	ldr	r1, [pc, #80]	; (800a7c8 <xTaskIncrementTick+0x168>)
 800a776:	4613      	mov	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d907      	bls.n	800a796 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a786:	2301      	movs	r3, #1
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	e004      	b.n	800a796 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a78c:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <xTaskIncrementTick+0x170>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	4a0f      	ldr	r2, [pc, #60]	; (800a7d0 <xTaskIncrementTick+0x170>)
 800a794:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a796:	4b0f      	ldr	r3, [pc, #60]	; (800a7d4 <xTaskIncrementTick+0x174>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a7a2:	697b      	ldr	r3, [r7, #20]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20025ca8 	.word	0x20025ca8
 800a7b0:	20025c84 	.word	0x20025c84
 800a7b4:	20025c38 	.word	0x20025c38
 800a7b8:	20025c3c 	.word	0x20025c3c
 800a7bc:	20025c98 	.word	0x20025c98
 800a7c0:	20025ca0 	.word	0x20025ca0
 800a7c4:	20025c88 	.word	0x20025c88
 800a7c8:	20025b84 	.word	0x20025b84
 800a7cc:	20025b80 	.word	0x20025b80
 800a7d0:	20025c90 	.word	0x20025c90
 800a7d4:	20025c94 	.word	0x20025c94

0800a7d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a7de:	4b26      	ldr	r3, [pc, #152]	; (800a878 <vTaskSwitchContext+0xa0>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a7e6:	4b25      	ldr	r3, [pc, #148]	; (800a87c <vTaskSwitchContext+0xa4>)
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a7ec:	e03e      	b.n	800a86c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a7ee:	4b23      	ldr	r3, [pc, #140]	; (800a87c <vTaskSwitchContext+0xa4>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a7f4:	4b22      	ldr	r3, [pc, #136]	; (800a880 <vTaskSwitchContext+0xa8>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	fab3 f383 	clz	r3, r3
 800a800:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a802:	7afb      	ldrb	r3, [r7, #11]
 800a804:	f1c3 031f 	rsb	r3, r3, #31
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	491e      	ldr	r1, [pc, #120]	; (800a884 <vTaskSwitchContext+0xac>)
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	4613      	mov	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	440b      	add	r3, r1
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	607b      	str	r3, [r7, #4]
 800a830:	e7fe      	b.n	800a830 <vTaskSwitchContext+0x58>
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4a11      	ldr	r2, [pc, #68]	; (800a884 <vTaskSwitchContext+0xac>)
 800a83e:	4413      	add	r3, r2
 800a840:	613b      	str	r3, [r7, #16]
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	605a      	str	r2, [r3, #4]
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	3308      	adds	r3, #8
 800a854:	429a      	cmp	r2, r3
 800a856:	d104      	bne.n	800a862 <vTaskSwitchContext+0x8a>
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	605a      	str	r2, [r3, #4]
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	4a07      	ldr	r2, [pc, #28]	; (800a888 <vTaskSwitchContext+0xb0>)
 800a86a:	6013      	str	r3, [r2, #0]
}
 800a86c:	bf00      	nop
 800a86e:	371c      	adds	r7, #28
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	20025ca8 	.word	0x20025ca8
 800a87c:	20025c94 	.word	0x20025c94
 800a880:	20025c88 	.word	0x20025c88
 800a884:	20025b84 	.word	0x20025b84
 800a888:	20025b80 	.word	0x20025b80

0800a88c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d109      	bne.n	800a8b0 <vTaskPlaceOnEventList+0x24>
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	e7fe      	b.n	800a8ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8b0:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <vTaskPlaceOnEventList+0x44>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3318      	adds	r3, #24
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7fe fdc3 	bl	8009444 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a8be:	2101      	movs	r1, #1
 800a8c0:	6838      	ldr	r0, [r7, #0]
 800a8c2:	f000 fb9d 	bl	800b000 <prvAddCurrentTaskToDelayedList>
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20025b80 	.word	0x20025b80

0800a8d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d109      	bne.n	800a8fe <xTaskRemoveFromEventList+0x2a>
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	e7fe      	b.n	800a8fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	3318      	adds	r3, #24
 800a902:	4618      	mov	r0, r3
 800a904:	f7fe fdd7 	bl	80094b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a908:	4b1d      	ldr	r3, [pc, #116]	; (800a980 <xTaskRemoveFromEventList+0xac>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d11c      	bne.n	800a94a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	3304      	adds	r3, #4
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe fdce 	bl	80094b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91e:	2201      	movs	r2, #1
 800a920:	409a      	lsls	r2, r3
 800a922:	4b18      	ldr	r3, [pc, #96]	; (800a984 <xTaskRemoveFromEventList+0xb0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4313      	orrs	r3, r2
 800a928:	4a16      	ldr	r2, [pc, #88]	; (800a984 <xTaskRemoveFromEventList+0xb0>)
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4a13      	ldr	r2, [pc, #76]	; (800a988 <xTaskRemoveFromEventList+0xb4>)
 800a93a:	441a      	add	r2, r3
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	3304      	adds	r3, #4
 800a940:	4619      	mov	r1, r3
 800a942:	4610      	mov	r0, r2
 800a944:	f7fe fd5a 	bl	80093fc <vListInsertEnd>
 800a948:	e005      	b.n	800a956 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	3318      	adds	r3, #24
 800a94e:	4619      	mov	r1, r3
 800a950:	480e      	ldr	r0, [pc, #56]	; (800a98c <xTaskRemoveFromEventList+0xb8>)
 800a952:	f7fe fd53 	bl	80093fc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95a:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <xTaskRemoveFromEventList+0xbc>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	429a      	cmp	r2, r3
 800a962:	d905      	bls.n	800a970 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a964:	2301      	movs	r3, #1
 800a966:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a968:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <xTaskRemoveFromEventList+0xc0>)
 800a96a:	2201      	movs	r2, #1
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	e001      	b.n	800a974 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a970:	2300      	movs	r3, #0
 800a972:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a974:	697b      	ldr	r3, [r7, #20]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20025ca8 	.word	0x20025ca8
 800a984:	20025c88 	.word	0x20025c88
 800a988:	20025b84 	.word	0x20025b84
 800a98c:	20025c40 	.word	0x20025c40
 800a990:	20025b80 	.word	0x20025b80
 800a994:	20025c94 	.word	0x20025c94

0800a998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a9a0:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <vTaskInternalSetTimeOutState+0x24>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <vTaskInternalSetTimeOutState+0x28>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	605a      	str	r2, [r3, #4]
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	20025c98 	.word	0x20025c98
 800a9c0:	20025c84 	.word	0x20025c84

0800a9c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d109      	bne.n	800a9e8 <xTaskCheckForTimeOut+0x24>
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	613b      	str	r3, [r7, #16]
 800a9e6:	e7fe      	b.n	800a9e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d109      	bne.n	800aa02 <xTaskCheckForTimeOut+0x3e>
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	e7fe      	b.n	800aa00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800aa02:	f000 fc8b 	bl	800b31c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa06:	4b1d      	ldr	r3, [pc, #116]	; (800aa7c <xTaskCheckForTimeOut+0xb8>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d102      	bne.n	800aa26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa20:	2300      	movs	r3, #0
 800aa22:	61fb      	str	r3, [r7, #28]
 800aa24:	e023      	b.n	800aa6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <xTaskCheckForTimeOut+0xbc>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d007      	beq.n	800aa42 <xTaskCheckForTimeOut+0x7e>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d302      	bcc.n	800aa42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	61fb      	str	r3, [r7, #28]
 800aa40:	e015      	b.n	800aa6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d20b      	bcs.n	800aa64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	1ad2      	subs	r2, r2, r3
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff ff9d 	bl	800a998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	61fb      	str	r3, [r7, #28]
 800aa62:	e004      	b.n	800aa6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2200      	movs	r2, #0
 800aa68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa6e:	f000 fc83 	bl	800b378 <vPortExitCritical>

	return xReturn;
 800aa72:	69fb      	ldr	r3, [r7, #28]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20025c84 	.word	0x20025c84
 800aa80:	20025c98 	.word	0x20025c98

0800aa84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa88:	4b03      	ldr	r3, [pc, #12]	; (800aa98 <vTaskMissedYield+0x14>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]
}
 800aa8e:	bf00      	nop
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	20025c94 	.word	0x20025c94

0800aa9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aaa4:	f000 f852 	bl	800ab4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aaa8:	4b06      	ldr	r3, [pc, #24]	; (800aac4 <prvIdleTask+0x28>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d9f9      	bls.n	800aaa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aab0:	4b05      	ldr	r3, [pc, #20]	; (800aac8 <prvIdleTask+0x2c>)
 800aab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aac0:	e7f0      	b.n	800aaa4 <prvIdleTask+0x8>
 800aac2:	bf00      	nop
 800aac4:	20025b84 	.word	0x20025b84
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aad2:	2300      	movs	r3, #0
 800aad4:	607b      	str	r3, [r7, #4]
 800aad6:	e00c      	b.n	800aaf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4a12      	ldr	r2, [pc, #72]	; (800ab2c <prvInitialiseTaskLists+0x60>)
 800aae4:	4413      	add	r3, r2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe fc5b 	bl	80093a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	607b      	str	r3, [r7, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2b06      	cmp	r3, #6
 800aaf6:	d9ef      	bls.n	800aad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aaf8:	480d      	ldr	r0, [pc, #52]	; (800ab30 <prvInitialiseTaskLists+0x64>)
 800aafa:	f7fe fc52 	bl	80093a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aafe:	480d      	ldr	r0, [pc, #52]	; (800ab34 <prvInitialiseTaskLists+0x68>)
 800ab00:	f7fe fc4f 	bl	80093a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab04:	480c      	ldr	r0, [pc, #48]	; (800ab38 <prvInitialiseTaskLists+0x6c>)
 800ab06:	f7fe fc4c 	bl	80093a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab0a:	480c      	ldr	r0, [pc, #48]	; (800ab3c <prvInitialiseTaskLists+0x70>)
 800ab0c:	f7fe fc49 	bl	80093a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab10:	480b      	ldr	r0, [pc, #44]	; (800ab40 <prvInitialiseTaskLists+0x74>)
 800ab12:	f7fe fc46 	bl	80093a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab16:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <prvInitialiseTaskLists+0x78>)
 800ab18:	4a05      	ldr	r2, [pc, #20]	; (800ab30 <prvInitialiseTaskLists+0x64>)
 800ab1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab1c:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <prvInitialiseTaskLists+0x7c>)
 800ab1e:	4a05      	ldr	r2, [pc, #20]	; (800ab34 <prvInitialiseTaskLists+0x68>)
 800ab20:	601a      	str	r2, [r3, #0]
}
 800ab22:	bf00      	nop
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20025b84 	.word	0x20025b84
 800ab30:	20025c10 	.word	0x20025c10
 800ab34:	20025c24 	.word	0x20025c24
 800ab38:	20025c40 	.word	0x20025c40
 800ab3c:	20025c54 	.word	0x20025c54
 800ab40:	20025c6c 	.word	0x20025c6c
 800ab44:	20025c38 	.word	0x20025c38
 800ab48:	20025c3c 	.word	0x20025c3c

0800ab4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab52:	e019      	b.n	800ab88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab54:	f000 fbe2 	bl	800b31c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ab58:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <prvCheckTasksWaitingTermination+0x4c>)
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fe fca6 	bl	80094b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <prvCheckTasksWaitingTermination+0x50>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	4a0a      	ldr	r2, [pc, #40]	; (800ab9c <prvCheckTasksWaitingTermination+0x50>)
 800ab72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab74:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <prvCheckTasksWaitingTermination+0x54>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	4a09      	ldr	r2, [pc, #36]	; (800aba0 <prvCheckTasksWaitingTermination+0x54>)
 800ab7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab7e:	f000 fbfb 	bl	800b378 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f80e 	bl	800aba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <prvCheckTasksWaitingTermination+0x54>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e1      	bne.n	800ab54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab90:	bf00      	nop
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	20025c54 	.word	0x20025c54
 800ab9c:	20025c80 	.word	0x20025c80
 800aba0:	20025c68 	.word	0x20025c68

0800aba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d108      	bne.n	800abc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fd8a 	bl	800b6d4 <vPortFree>
				vPortFree( pxTCB );
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fd87 	bl	800b6d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abc6:	e017      	b.n	800abf8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d103      	bne.n	800abda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fd7e 	bl	800b6d4 <vPortFree>
	}
 800abd8:	e00e      	b.n	800abf8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d009      	beq.n	800abf8 <prvDeleteTCB+0x54>
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	60fb      	str	r3, [r7, #12]
 800abf6:	e7fe      	b.n	800abf6 <prvDeleteTCB+0x52>
	}
 800abf8:	bf00      	nop
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac06:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <prvResetNextTaskUnblockTime+0x44>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <prvResetNextTaskUnblockTime+0x14>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e000      	b.n	800ac16 <prvResetNextTaskUnblockTime+0x16>
 800ac14:	2300      	movs	r3, #0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac1a:	4b0b      	ldr	r3, [pc, #44]	; (800ac48 <prvResetNextTaskUnblockTime+0x48>)
 800ac1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac22:	e008      	b.n	800ac36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ac24:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <prvResetNextTaskUnblockTime+0x44>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4a05      	ldr	r2, [pc, #20]	; (800ac48 <prvResetNextTaskUnblockTime+0x48>)
 800ac34:	6013      	str	r3, [r2, #0]
}
 800ac36:	bf00      	nop
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20025c38 	.word	0x20025c38
 800ac48:	20025ca0 	.word	0x20025ca0

0800ac4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac52:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <xTaskGetSchedulerState+0x34>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	e008      	b.n	800ac72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac60:	4b08      	ldr	r3, [pc, #32]	; (800ac84 <xTaskGetSchedulerState+0x38>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	607b      	str	r3, [r7, #4]
 800ac6c:	e001      	b.n	800ac72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac72:	687b      	ldr	r3, [r7, #4]
	}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	20025c8c 	.word	0x20025c8c
 800ac84:	20025ca8 	.word	0x20025ca8

0800ac88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d06e      	beq.n	800ad7c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca2:	4b39      	ldr	r3, [pc, #228]	; (800ad88 <xTaskPriorityInherit+0x100>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d25e      	bcs.n	800ad6a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	db06      	blt.n	800acc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb4:	4b34      	ldr	r3, [pc, #208]	; (800ad88 <xTaskPriorityInherit+0x100>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acba:	f1c3 0207 	rsb	r2, r3, #7
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	6959      	ldr	r1, [r3, #20]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acca:	4613      	mov	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4a2e      	ldr	r2, [pc, #184]	; (800ad8c <xTaskPriorityInherit+0x104>)
 800acd4:	4413      	add	r3, r2
 800acd6:	4299      	cmp	r1, r3
 800acd8:	d101      	bne.n	800acde <xTaskPriorityInherit+0x56>
 800acda:	2301      	movs	r3, #1
 800acdc:	e000      	b.n	800ace0 <xTaskPriorityInherit+0x58>
 800acde:	2300      	movs	r3, #0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d03a      	beq.n	800ad5a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fe fbe4 	bl	80094b6 <uxListRemove>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d115      	bne.n	800ad20 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf8:	4924      	ldr	r1, [pc, #144]	; (800ad8c <xTaskPriorityInherit+0x104>)
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	440b      	add	r3, r1
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <xTaskPriorityInherit+0x98>
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0e:	2201      	movs	r2, #1
 800ad10:	fa02 f303 	lsl.w	r3, r2, r3
 800ad14:	43da      	mvns	r2, r3
 800ad16:	4b1e      	ldr	r3, [pc, #120]	; (800ad90 <xTaskPriorityInherit+0x108>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	4a1c      	ldr	r2, [pc, #112]	; (800ad90 <xTaskPriorityInherit+0x108>)
 800ad1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad20:	4b19      	ldr	r3, [pc, #100]	; (800ad88 <xTaskPriorityInherit+0x100>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	2201      	movs	r2, #1
 800ad30:	409a      	lsls	r2, r3
 800ad32:	4b17      	ldr	r3, [pc, #92]	; (800ad90 <xTaskPriorityInherit+0x108>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	4a15      	ldr	r2, [pc, #84]	; (800ad90 <xTaskPriorityInherit+0x108>)
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4a10      	ldr	r2, [pc, #64]	; (800ad8c <xTaskPriorityInherit+0x104>)
 800ad4a:	441a      	add	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	4619      	mov	r1, r3
 800ad52:	4610      	mov	r0, r2
 800ad54:	f7fe fb52 	bl	80093fc <vListInsertEnd>
 800ad58:	e004      	b.n	800ad64 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad5a:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <xTaskPriorityInherit+0x100>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ad64:	2301      	movs	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
 800ad68:	e008      	b.n	800ad7c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad6e:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <xTaskPriorityInherit+0x100>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d201      	bcs.n	800ad7c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
	}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20025b80 	.word	0x20025b80
 800ad8c:	20025b84 	.word	0x20025b84
 800ad90:	20025c88 	.word	0x20025c88

0800ad94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d06c      	beq.n	800ae84 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800adaa:	4b39      	ldr	r3, [pc, #228]	; (800ae90 <xTaskPriorityDisinherit+0xfc>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d009      	beq.n	800adc8 <xTaskPriorityDisinherit+0x34>
 800adb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	e7fe      	b.n	800adc6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d109      	bne.n	800ade4 <xTaskPriorityDisinherit+0x50>
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	60bb      	str	r3, [r7, #8]
 800ade2:	e7fe      	b.n	800ade2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ade8:	1e5a      	subs	r2, r3, #1
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d044      	beq.n	800ae84 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d140      	bne.n	800ae84 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	3304      	adds	r3, #4
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fe fb55 	bl	80094b6 <uxListRemove>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d115      	bne.n	800ae3e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae16:	491f      	ldr	r1, [pc, #124]	; (800ae94 <xTaskPriorityDisinherit+0x100>)
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10a      	bne.n	800ae3e <xTaskPriorityDisinherit+0xaa>
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae32:	43da      	mvns	r2, r3
 800ae34:	4b18      	ldr	r3, [pc, #96]	; (800ae98 <xTaskPriorityDisinherit+0x104>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4013      	ands	r3, r2
 800ae3a:	4a17      	ldr	r2, [pc, #92]	; (800ae98 <xTaskPriorityDisinherit+0x104>)
 800ae3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	f1c3 0207 	rsb	r2, r3, #7
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	2201      	movs	r2, #1
 800ae58:	409a      	lsls	r2, r3
 800ae5a:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <xTaskPriorityDisinherit+0x104>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	4a0d      	ldr	r2, [pc, #52]	; (800ae98 <xTaskPriorityDisinherit+0x104>)
 800ae62:	6013      	str	r3, [r2, #0]
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae68:	4613      	mov	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4a08      	ldr	r2, [pc, #32]	; (800ae94 <xTaskPriorityDisinherit+0x100>)
 800ae72:	441a      	add	r2, r3
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	f7fe fabe 	bl	80093fc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae80:	2301      	movs	r3, #1
 800ae82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae84:	697b      	ldr	r3, [r7, #20]
	}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20025b80 	.word	0x20025b80
 800ae94:	20025b84 	.word	0x20025b84
 800ae98:	20025c88 	.word	0x20025c88

0800ae9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 8086 	beq.w	800afc2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d109      	bne.n	800aed2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	60fb      	str	r3, [r7, #12]
 800aed0:	e7fe      	b.n	800aed0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d902      	bls.n	800aee2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	61fb      	str	r3, [r7, #28]
 800aee0:	e002      	b.n	800aee8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	69fa      	ldr	r2, [r7, #28]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d067      	beq.n	800afc2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d162      	bne.n	800afc2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aefc:	4b33      	ldr	r3, [pc, #204]	; (800afcc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	429a      	cmp	r2, r3
 800af04:	d109      	bne.n	800af1a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	60bb      	str	r3, [r7, #8]
 800af18:	e7fe      	b.n	800af18 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	69fa      	ldr	r2, [r7, #28]
 800af24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	db04      	blt.n	800af38 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	f1c3 0207 	rsb	r2, r3, #7
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	6959      	ldr	r1, [r3, #20]
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	4613      	mov	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4a22      	ldr	r2, [pc, #136]	; (800afd0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800af48:	4413      	add	r3, r2
 800af4a:	4299      	cmp	r1, r3
 800af4c:	d101      	bne.n	800af52 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800af4e:	2301      	movs	r3, #1
 800af50:	e000      	b.n	800af54 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800af52:	2300      	movs	r3, #0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d034      	beq.n	800afc2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	3304      	adds	r3, #4
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe faaa 	bl	80094b6 <uxListRemove>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d115      	bne.n	800af94 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6c:	4918      	ldr	r1, [pc, #96]	; (800afd0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800af6e:	4613      	mov	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	440b      	add	r3, r1
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	2201      	movs	r2, #1
 800af84:	fa02 f303 	lsl.w	r3, r2, r3
 800af88:	43da      	mvns	r2, r3
 800af8a:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4013      	ands	r3, r2
 800af90:	4a10      	ldr	r2, [pc, #64]	; (800afd4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800af92:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	2201      	movs	r2, #1
 800af9a:	409a      	lsls	r2, r3
 800af9c:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	4a0c      	ldr	r2, [pc, #48]	; (800afd4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afaa:	4613      	mov	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4a07      	ldr	r2, [pc, #28]	; (800afd0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800afb4:	441a      	add	r2, r3
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	3304      	adds	r3, #4
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7fe fa1d 	bl	80093fc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afc2:	bf00      	nop
 800afc4:	3720      	adds	r7, #32
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20025b80 	.word	0x20025b80
 800afd0:	20025b84 	.word	0x20025b84
 800afd4:	20025c88 	.word	0x20025c88

0800afd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800afdc:	4b07      	ldr	r3, [pc, #28]	; (800affc <pvTaskIncrementMutexHeldCount+0x24>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d004      	beq.n	800afee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800afe4:	4b05      	ldr	r3, [pc, #20]	; (800affc <pvTaskIncrementMutexHeldCount+0x24>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afea:	3201      	adds	r2, #1
 800afec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800afee:	4b03      	ldr	r3, [pc, #12]	; (800affc <pvTaskIncrementMutexHeldCount+0x24>)
 800aff0:	681b      	ldr	r3, [r3, #0]
	}
 800aff2:	4618      	mov	r0, r3
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20025b80 	.word	0x20025b80

0800b000 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b00a:	4b29      	ldr	r3, [pc, #164]	; (800b0b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b010:	4b28      	ldr	r3, [pc, #160]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3304      	adds	r3, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fa4d 	bl	80094b6 <uxListRemove>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10b      	bne.n	800b03a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b022:	4b24      	ldr	r3, [pc, #144]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b028:	2201      	movs	r2, #1
 800b02a:	fa02 f303 	lsl.w	r3, r2, r3
 800b02e:	43da      	mvns	r2, r3
 800b030:	4b21      	ldr	r3, [pc, #132]	; (800b0b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4013      	ands	r3, r2
 800b036:	4a20      	ldr	r2, [pc, #128]	; (800b0b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b038:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b040:	d10a      	bne.n	800b058 <prvAddCurrentTaskToDelayedList+0x58>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d007      	beq.n	800b058 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b048:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3304      	adds	r3, #4
 800b04e:	4619      	mov	r1, r3
 800b050:	481a      	ldr	r0, [pc, #104]	; (800b0bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b052:	f7fe f9d3 	bl	80093fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b056:	e026      	b.n	800b0a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4413      	add	r3, r2
 800b05e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b060:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d209      	bcs.n	800b084 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b070:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3304      	adds	r3, #4
 800b07a:	4619      	mov	r1, r3
 800b07c:	4610      	mov	r0, r2
 800b07e:	f7fe f9e1 	bl	8009444 <vListInsert>
}
 800b082:	e010      	b.n	800b0a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b084:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3304      	adds	r3, #4
 800b08e:	4619      	mov	r1, r3
 800b090:	4610      	mov	r0, r2
 800b092:	f7fe f9d7 	bl	8009444 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d202      	bcs.n	800b0a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b0a0:	4a09      	ldr	r2, [pc, #36]	; (800b0c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	6013      	str	r3, [r2, #0]
}
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20025c84 	.word	0x20025c84
 800b0b4:	20025b80 	.word	0x20025b80
 800b0b8:	20025c88 	.word	0x20025c88
 800b0bc:	20025c6c 	.word	0x20025c6c
 800b0c0:	20025c3c 	.word	0x20025c3c
 800b0c4:	20025c38 	.word	0x20025c38
 800b0c8:	20025ca0 	.word	0x20025ca0

0800b0cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	3b04      	subs	r3, #4
 800b0dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3b04      	subs	r3, #4
 800b0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	f023 0201 	bic.w	r2, r3, #1
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3b04      	subs	r3, #4
 800b0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0fc:	4a0c      	ldr	r2, [pc, #48]	; (800b130 <pxPortInitialiseStack+0x64>)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3b14      	subs	r3, #20
 800b106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3b04      	subs	r3, #4
 800b112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f06f 0202 	mvn.w	r2, #2
 800b11a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3b20      	subs	r3, #32
 800b120:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b122:	68fb      	ldr	r3, [r7, #12]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	0800b135 	.word	0x0800b135

0800b134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b13e:	4b11      	ldr	r3, [pc, #68]	; (800b184 <prvTaskExitError+0x50>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d009      	beq.n	800b15c <prvTaskExitError+0x28>
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	e7fe      	b.n	800b15a <prvTaskExitError+0x26>
 800b15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b16e:	bf00      	nop
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0fc      	beq.n	800b170 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b176:	bf00      	nop
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	20000010 	.word	0x20000010
	...

0800b190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <pxCurrentTCBConst2>)
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	6808      	ldr	r0, [r1, #0]
 800b196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	f380 8809 	msr	PSP, r0
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8811 	msr	BASEPRI, r0
 800b1aa:	4770      	bx	lr
 800b1ac:	f3af 8000 	nop.w

0800b1b0 <pxCurrentTCBConst2>:
 800b1b0:	20025b80 	.word	0x20025b80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop

0800b1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1b8:	4808      	ldr	r0, [pc, #32]	; (800b1dc <prvPortStartFirstTask+0x24>)
 800b1ba:	6800      	ldr	r0, [r0, #0]
 800b1bc:	6800      	ldr	r0, [r0, #0]
 800b1be:	f380 8808 	msr	MSP, r0
 800b1c2:	f04f 0000 	mov.w	r0, #0
 800b1c6:	f380 8814 	msr	CONTROL, r0
 800b1ca:	b662      	cpsie	i
 800b1cc:	b661      	cpsie	f
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	df00      	svc	0
 800b1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1da:	bf00      	nop
 800b1dc:	e000ed08 	.word	0xe000ed08

0800b1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1e6:	4b44      	ldr	r3, [pc, #272]	; (800b2f8 <xPortStartScheduler+0x118>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a44      	ldr	r2, [pc, #272]	; (800b2fc <xPortStartScheduler+0x11c>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d109      	bne.n	800b204 <xPortStartScheduler+0x24>
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	e7fe      	b.n	800b202 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b204:	4b3c      	ldr	r3, [pc, #240]	; (800b2f8 <xPortStartScheduler+0x118>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a3d      	ldr	r2, [pc, #244]	; (800b300 <xPortStartScheduler+0x120>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d109      	bne.n	800b222 <xPortStartScheduler+0x42>
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	e7fe      	b.n	800b220 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b222:	4b38      	ldr	r3, [pc, #224]	; (800b304 <xPortStartScheduler+0x124>)
 800b224:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	22ff      	movs	r2, #255	; 0xff
 800b232:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b23c:	78fb      	ldrb	r3, [r7, #3]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b244:	b2da      	uxtb	r2, r3
 800b246:	4b30      	ldr	r3, [pc, #192]	; (800b308 <xPortStartScheduler+0x128>)
 800b248:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b24a:	4b30      	ldr	r3, [pc, #192]	; (800b30c <xPortStartScheduler+0x12c>)
 800b24c:	2207      	movs	r2, #7
 800b24e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b250:	e009      	b.n	800b266 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b252:	4b2e      	ldr	r3, [pc, #184]	; (800b30c <xPortStartScheduler+0x12c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3b01      	subs	r3, #1
 800b258:	4a2c      	ldr	r2, [pc, #176]	; (800b30c <xPortStartScheduler+0x12c>)
 800b25a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b25c:	78fb      	ldrb	r3, [r7, #3]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	b2db      	uxtb	r3, r3
 800b264:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b266:	78fb      	ldrb	r3, [r7, #3]
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b26e:	2b80      	cmp	r3, #128	; 0x80
 800b270:	d0ef      	beq.n	800b252 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b272:	4b26      	ldr	r3, [pc, #152]	; (800b30c <xPortStartScheduler+0x12c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f1c3 0307 	rsb	r3, r3, #7
 800b27a:	2b04      	cmp	r3, #4
 800b27c:	d009      	beq.n	800b292 <xPortStartScheduler+0xb2>
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	60bb      	str	r3, [r7, #8]
 800b290:	e7fe      	b.n	800b290 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b292:	4b1e      	ldr	r3, [pc, #120]	; (800b30c <xPortStartScheduler+0x12c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	021b      	lsls	r3, r3, #8
 800b298:	4a1c      	ldr	r2, [pc, #112]	; (800b30c <xPortStartScheduler+0x12c>)
 800b29a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b29c:	4b1b      	ldr	r3, [pc, #108]	; (800b30c <xPortStartScheduler+0x12c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2a4:	4a19      	ldr	r2, [pc, #100]	; (800b30c <xPortStartScheduler+0x12c>)
 800b2a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2b0:	4b17      	ldr	r3, [pc, #92]	; (800b310 <xPortStartScheduler+0x130>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a16      	ldr	r2, [pc, #88]	; (800b310 <xPortStartScheduler+0x130>)
 800b2b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2bc:	4b14      	ldr	r3, [pc, #80]	; (800b310 <xPortStartScheduler+0x130>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a13      	ldr	r2, [pc, #76]	; (800b310 <xPortStartScheduler+0x130>)
 800b2c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2c8:	f000 f8d6 	bl	800b478 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2cc:	4b11      	ldr	r3, [pc, #68]	; (800b314 <xPortStartScheduler+0x134>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2d2:	f000 f8f5 	bl	800b4c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2d6:	4b10      	ldr	r3, [pc, #64]	; (800b318 <xPortStartScheduler+0x138>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a0f      	ldr	r2, [pc, #60]	; (800b318 <xPortStartScheduler+0x138>)
 800b2dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2e2:	f7ff ff69 	bl	800b1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2e6:	f7ff fa77 	bl	800a7d8 <vTaskSwitchContext>
	prvTaskExitError();
 800b2ea:	f7ff ff23 	bl	800b134 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	e000ed00 	.word	0xe000ed00
 800b2fc:	410fc271 	.word	0x410fc271
 800b300:	410fc270 	.word	0x410fc270
 800b304:	e000e400 	.word	0xe000e400
 800b308:	20025cac 	.word	0x20025cac
 800b30c:	20025cb0 	.word	0x20025cb0
 800b310:	e000ed20 	.word	0xe000ed20
 800b314:	20000010 	.word	0x20000010
 800b318:	e000ef34 	.word	0xe000ef34

0800b31c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b334:	4b0e      	ldr	r3, [pc, #56]	; (800b370 <vPortEnterCritical+0x54>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3301      	adds	r3, #1
 800b33a:	4a0d      	ldr	r2, [pc, #52]	; (800b370 <vPortEnterCritical+0x54>)
 800b33c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b33e:	4b0c      	ldr	r3, [pc, #48]	; (800b370 <vPortEnterCritical+0x54>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d10e      	bne.n	800b364 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b346:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <vPortEnterCritical+0x58>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d009      	beq.n	800b364 <vPortEnterCritical+0x48>
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	603b      	str	r3, [r7, #0]
 800b362:	e7fe      	b.n	800b362 <vPortEnterCritical+0x46>
	}
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	20000010 	.word	0x20000010
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b37e:	4b11      	ldr	r3, [pc, #68]	; (800b3c4 <vPortExitCritical+0x4c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d109      	bne.n	800b39a <vPortExitCritical+0x22>
 800b386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	607b      	str	r3, [r7, #4]
 800b398:	e7fe      	b.n	800b398 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <vPortExitCritical+0x4c>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	4a08      	ldr	r2, [pc, #32]	; (800b3c4 <vPortExitCritical+0x4c>)
 800b3a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3a4:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <vPortExitCritical+0x4c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d104      	bne.n	800b3b6 <vPortExitCritical+0x3e>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20000010 	.word	0x20000010
	...

0800b3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3d0:	f3ef 8009 	mrs	r0, PSP
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	4b15      	ldr	r3, [pc, #84]	; (800b430 <pxCurrentTCBConst>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f01e 0f10 	tst.w	lr, #16
 800b3e0:	bf08      	it	eq
 800b3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	6010      	str	r0, [r2, #0]
 800b3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3f4:	f380 8811 	msr	BASEPRI, r0
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f7ff f9ea 	bl	800a7d8 <vTaskSwitchContext>
 800b404:	f04f 0000 	mov.w	r0, #0
 800b408:	f380 8811 	msr	BASEPRI, r0
 800b40c:	bc09      	pop	{r0, r3}
 800b40e:	6819      	ldr	r1, [r3, #0]
 800b410:	6808      	ldr	r0, [r1, #0]
 800b412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b416:	f01e 0f10 	tst.w	lr, #16
 800b41a:	bf08      	it	eq
 800b41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b420:	f380 8809 	msr	PSP, r0
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst>:
 800b430:	20025b80 	.word	0x20025b80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b450:	f7ff f906 	bl	800a660 <xTaskIncrementTick>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b45a:	4b06      	ldr	r3, [pc, #24]	; (800b474 <SysTick_Handler+0x3c>)
 800b45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	2300      	movs	r3, #0
 800b464:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	e000ed04 	.word	0xe000ed04

0800b478 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b478:	b480      	push	{r7}
 800b47a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b47c:	4b0b      	ldr	r3, [pc, #44]	; (800b4ac <vPortSetupTimerInterrupt+0x34>)
 800b47e:	2200      	movs	r2, #0
 800b480:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b482:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <vPortSetupTimerInterrupt+0x38>)
 800b484:	2200      	movs	r2, #0
 800b486:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b488:	4b0a      	ldr	r3, [pc, #40]	; (800b4b4 <vPortSetupTimerInterrupt+0x3c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a0a      	ldr	r2, [pc, #40]	; (800b4b8 <vPortSetupTimerInterrupt+0x40>)
 800b48e:	fba2 2303 	umull	r2, r3, r2, r3
 800b492:	099b      	lsrs	r3, r3, #6
 800b494:	4a09      	ldr	r2, [pc, #36]	; (800b4bc <vPortSetupTimerInterrupt+0x44>)
 800b496:	3b01      	subs	r3, #1
 800b498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b49a:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <vPortSetupTimerInterrupt+0x34>)
 800b49c:	2207      	movs	r2, #7
 800b49e:	601a      	str	r2, [r3, #0]
}
 800b4a0:	bf00      	nop
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	e000e010 	.word	0xe000e010
 800b4b0:	e000e018 	.word	0xe000e018
 800b4b4:	20000004 	.word	0x20000004
 800b4b8:	10624dd3 	.word	0x10624dd3
 800b4bc:	e000e014 	.word	0xe000e014

0800b4c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4d0 <vPortEnableVFP+0x10>
 800b4c4:	6801      	ldr	r1, [r0, #0]
 800b4c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4ca:	6001      	str	r1, [r0, #0]
 800b4cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4ce:	bf00      	nop
 800b4d0:	e000ed88 	.word	0xe000ed88

0800b4d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4da:	f3ef 8305 	mrs	r3, IPSR
 800b4de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b0f      	cmp	r3, #15
 800b4e4:	d913      	bls.n	800b50e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4e6:	4a16      	ldr	r2, [pc, #88]	; (800b540 <vPortValidateInterruptPriority+0x6c>)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4f0:	4b14      	ldr	r3, [pc, #80]	; (800b544 <vPortValidateInterruptPriority+0x70>)
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	7afa      	ldrb	r2, [r7, #11]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d209      	bcs.n	800b50e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	607b      	str	r3, [r7, #4]
 800b50c:	e7fe      	b.n	800b50c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b50e:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <vPortValidateInterruptPriority+0x74>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b516:	4b0d      	ldr	r3, [pc, #52]	; (800b54c <vPortValidateInterruptPriority+0x78>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d909      	bls.n	800b532 <vPortValidateInterruptPriority+0x5e>
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	e7fe      	b.n	800b530 <vPortValidateInterruptPriority+0x5c>
	}
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	e000e3f0 	.word	0xe000e3f0
 800b544:	20025cac 	.word	0x20025cac
 800b548:	e000ed0c 	.word	0xe000ed0c
 800b54c:	20025cb0 	.word	0x20025cb0

0800b550 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b08a      	sub	sp, #40	; 0x28
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b558:	2300      	movs	r3, #0
 800b55a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b55c:	f7fe ffd6 	bl	800a50c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b560:	4b57      	ldr	r3, [pc, #348]	; (800b6c0 <pvPortMalloc+0x170>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b568:	f000 f90c 	bl	800b784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b56c:	4b55      	ldr	r3, [pc, #340]	; (800b6c4 <pvPortMalloc+0x174>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4013      	ands	r3, r2
 800b574:	2b00      	cmp	r3, #0
 800b576:	f040 808c 	bne.w	800b692 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01c      	beq.n	800b5ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b580:	2208      	movs	r2, #8
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4413      	add	r3, r2
 800b586:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f003 0307 	and.w	r3, r3, #7
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d013      	beq.n	800b5ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f023 0307 	bic.w	r3, r3, #7
 800b598:	3308      	adds	r3, #8
 800b59a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f003 0307 	and.w	r3, r3, #7
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d009      	beq.n	800b5ba <pvPortMalloc+0x6a>
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	617b      	str	r3, [r7, #20]
 800b5b8:	e7fe      	b.n	800b5b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d068      	beq.n	800b692 <pvPortMalloc+0x142>
 800b5c0:	4b41      	ldr	r3, [pc, #260]	; (800b6c8 <pvPortMalloc+0x178>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d863      	bhi.n	800b692 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5ca:	4b40      	ldr	r3, [pc, #256]	; (800b6cc <pvPortMalloc+0x17c>)
 800b5cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5ce:	4b3f      	ldr	r3, [pc, #252]	; (800b6cc <pvPortMalloc+0x17c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5d4:	e004      	b.n	800b5e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d903      	bls.n	800b5f2 <pvPortMalloc+0xa2>
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1f1      	bne.n	800b5d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5f2:	4b33      	ldr	r3, [pc, #204]	; (800b6c0 <pvPortMalloc+0x170>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d04a      	beq.n	800b692 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2208      	movs	r2, #8
 800b602:	4413      	add	r3, r2
 800b604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	1ad2      	subs	r2, r2, r3
 800b616:	2308      	movs	r3, #8
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d91e      	bls.n	800b65c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4413      	add	r3, r2
 800b624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	f003 0307 	and.w	r3, r3, #7
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d009      	beq.n	800b644 <pvPortMalloc+0xf4>
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	613b      	str	r3, [r7, #16]
 800b642:	e7fe      	b.n	800b642 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	1ad2      	subs	r2, r2, r3
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b656:	69b8      	ldr	r0, [r7, #24]
 800b658:	f000 f8f6 	bl	800b848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b65c:	4b1a      	ldr	r3, [pc, #104]	; (800b6c8 <pvPortMalloc+0x178>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	4a18      	ldr	r2, [pc, #96]	; (800b6c8 <pvPortMalloc+0x178>)
 800b668:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b66a:	4b17      	ldr	r3, [pc, #92]	; (800b6c8 <pvPortMalloc+0x178>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	4b18      	ldr	r3, [pc, #96]	; (800b6d0 <pvPortMalloc+0x180>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	429a      	cmp	r2, r3
 800b674:	d203      	bcs.n	800b67e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b676:	4b14      	ldr	r3, [pc, #80]	; (800b6c8 <pvPortMalloc+0x178>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a15      	ldr	r2, [pc, #84]	; (800b6d0 <pvPortMalloc+0x180>)
 800b67c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	4b10      	ldr	r3, [pc, #64]	; (800b6c4 <pvPortMalloc+0x174>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	431a      	orrs	r2, r3
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b692:	f7fe ff49 	bl	800a528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	f003 0307 	and.w	r3, r3, #7
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d009      	beq.n	800b6b4 <pvPortMalloc+0x164>
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	60fb      	str	r3, [r7, #12]
 800b6b2:	e7fe      	b.n	800b6b2 <pvPortMalloc+0x162>
	return pvReturn;
 800b6b4:	69fb      	ldr	r3, [r7, #28]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3728      	adds	r7, #40	; 0x28
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	200298bc 	.word	0x200298bc
 800b6c4:	200298c8 	.word	0x200298c8
 800b6c8:	200298c0 	.word	0x200298c0
 800b6cc:	200298b4 	.word	0x200298b4
 800b6d0:	200298c4 	.word	0x200298c4

0800b6d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d046      	beq.n	800b774 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	425b      	negs	r3, r3
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	4b20      	ldr	r3, [pc, #128]	; (800b77c <vPortFree+0xa8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d109      	bne.n	800b716 <vPortFree+0x42>
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	e7fe      	b.n	800b714 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d009      	beq.n	800b732 <vPortFree+0x5e>
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60bb      	str	r3, [r7, #8]
 800b730:	e7fe      	b.n	800b730 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	4b11      	ldr	r3, [pc, #68]	; (800b77c <vPortFree+0xa8>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4013      	ands	r3, r2
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d019      	beq.n	800b774 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d115      	bne.n	800b774 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	4b0b      	ldr	r3, [pc, #44]	; (800b77c <vPortFree+0xa8>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	43db      	mvns	r3, r3
 800b752:	401a      	ands	r2, r3
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b758:	f7fe fed8 	bl	800a50c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	4b07      	ldr	r3, [pc, #28]	; (800b780 <vPortFree+0xac>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4413      	add	r3, r2
 800b766:	4a06      	ldr	r2, [pc, #24]	; (800b780 <vPortFree+0xac>)
 800b768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b76a:	6938      	ldr	r0, [r7, #16]
 800b76c:	f000 f86c 	bl	800b848 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b770:	f7fe feda 	bl	800a528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b774:	bf00      	nop
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	200298c8 	.word	0x200298c8
 800b780:	200298c0 	.word	0x200298c0

0800b784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b78a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b78e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b790:	4b27      	ldr	r3, [pc, #156]	; (800b830 <prvHeapInit+0xac>)
 800b792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f003 0307 	and.w	r3, r3, #7
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00c      	beq.n	800b7b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3307      	adds	r3, #7
 800b7a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f023 0307 	bic.w	r3, r3, #7
 800b7aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	4a1f      	ldr	r2, [pc, #124]	; (800b830 <prvHeapInit+0xac>)
 800b7b4:	4413      	add	r3, r2
 800b7b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7bc:	4a1d      	ldr	r2, [pc, #116]	; (800b834 <prvHeapInit+0xb0>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7c2:	4b1c      	ldr	r3, [pc, #112]	; (800b834 <prvHeapInit+0xb0>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	1a9b      	subs	r3, r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f023 0307 	bic.w	r3, r3, #7
 800b7de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4a15      	ldr	r2, [pc, #84]	; (800b838 <prvHeapInit+0xb4>)
 800b7e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b7e6:	4b14      	ldr	r3, [pc, #80]	; (800b838 <prvHeapInit+0xb4>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b7ee:	4b12      	ldr	r3, [pc, #72]	; (800b838 <prvHeapInit+0xb4>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b804:	4b0c      	ldr	r3, [pc, #48]	; (800b838 <prvHeapInit+0xb4>)
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	4a0a      	ldr	r2, [pc, #40]	; (800b83c <prvHeapInit+0xb8>)
 800b812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	4a09      	ldr	r2, [pc, #36]	; (800b840 <prvHeapInit+0xbc>)
 800b81a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b81c:	4b09      	ldr	r3, [pc, #36]	; (800b844 <prvHeapInit+0xc0>)
 800b81e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b822:	601a      	str	r2, [r3, #0]
}
 800b824:	bf00      	nop
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	20025cb4 	.word	0x20025cb4
 800b834:	200298b4 	.word	0x200298b4
 800b838:	200298bc 	.word	0x200298bc
 800b83c:	200298c4 	.word	0x200298c4
 800b840:	200298c0 	.word	0x200298c0
 800b844:	200298c8 	.word	0x200298c8

0800b848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b850:	4b28      	ldr	r3, [pc, #160]	; (800b8f4 <prvInsertBlockIntoFreeList+0xac>)
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	e002      	b.n	800b85c <prvInsertBlockIntoFreeList+0x14>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	60fb      	str	r3, [r7, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	429a      	cmp	r2, r3
 800b864:	d8f7      	bhi.n	800b856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	4413      	add	r3, r2
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	429a      	cmp	r2, r3
 800b876:	d108      	bne.n	800b88a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	441a      	add	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	441a      	add	r2, r3
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d118      	bne.n	800b8d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	4b15      	ldr	r3, [pc, #84]	; (800b8f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d00d      	beq.n	800b8c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	441a      	add	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	e008      	b.n	800b8d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8c6:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	e003      	b.n	800b8d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d002      	beq.n	800b8e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8e6:	bf00      	nop
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	200298b4 	.word	0x200298b4
 800b8f8:	200298bc 	.word	0x200298bc

0800b8fc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800b900:	f006 fbae 	bl	8012060 <touchgfx_init>
}
 800b904:	bf00      	nop
 800b906:	bd80      	pop	{r7, pc}

0800b908 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800b90c:	f006 fbd2 	bl	80120b4 <touchgfx_taskEntry>
}
 800b910:	bf00      	nop
 800b912:	bd80      	pop	{r7, pc}

0800b914 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
    {
 800b91c:	4a04      	ldr	r2, [pc, #16]	; (800b930 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
    }
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	08025200 	.word	0x08025200

0800b934 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
    }
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff ffe9 	bl	800b914 <_ZN8touchgfx12FontProviderD1Ev>
 800b942:	2104      	movs	r1, #4
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f017 fdef 	bl	8023528 <_ZdlPvj>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800b960:	887b      	ldrh	r3, [r7, #2]
 800b962:	2b0b      	cmp	r3, #11
 800b964:	d856      	bhi.n	800ba14 <_ZN23ApplicationFontProvider7getFontEt+0xc0>
 800b966:	a201      	add	r2, pc, #4	; (adr r2, 800b96c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800b968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96c:	0800b99d 	.word	0x0800b99d
 800b970:	0800b9a7 	.word	0x0800b9a7
 800b974:	0800b9b1 	.word	0x0800b9b1
 800b978:	0800b9bb 	.word	0x0800b9bb
 800b97c:	0800b9c5 	.word	0x0800b9c5
 800b980:	0800b9cf 	.word	0x0800b9cf
 800b984:	0800b9d9 	.word	0x0800b9d9
 800b988:	0800b9e3 	.word	0x0800b9e3
 800b98c:	0800b9ed 	.word	0x0800b9ed
 800b990:	0800b9f7 	.word	0x0800b9f7
 800b994:	0800ba01 	.word	0x0800ba01
 800b998:	0800ba0b 	.word	0x0800ba0b
    {
    case Typography::DEFAULT:
        // verdana_13_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800b99c:	f004 fc7a 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	e037      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::LARGE:
        // verdana_36_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800b9a6:	f004 fc75 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	e032      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::SMALL:
        // verdana_25_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800b9b0:	f004 fc70 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	e02d      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::TITLE:
        // ariblk_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800b9ba:	f004 fc6b 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	e028      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::TYPOGRAPHY_00:
        // verdanab_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800b9c4:	f004 fc66 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	e023      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::TYPOGRAPHY_01:
        // verdanab_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800b9ce:	f004 fc61 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	e01e      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::TYPOGRAPHY_02:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800b9d8:	f004 fc5c 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	e019      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::TYPOGRAPHY_03:
        // verdanab_26_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 800b9e2:	f004 fc57 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	69db      	ldr	r3, [r3, #28]
 800b9ea:	e014      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::ARIALNORMAL:
        // arial_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[8]);
 800b9ec:	f004 fc52 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	e00f      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::TYPOGRAPHY_04:
        // verdana_11_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[9]);
 800b9f6:	f004 fc4d 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fe:	e00a      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::TYPOGRAPHY_05:
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[10]);
 800ba00:	f004 fc48 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800ba04:	4603      	mov	r3, r0
 800ba06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba08:	e005      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    case Typography::TYPOGRAPHY_06:
        // verdanab_15_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[11]);
 800ba0a:	f004 fc43 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba12:	e000      	b.n	800ba16 <_ZN23ApplicationFontProvider7getFontEt+0xc2>
    default:
        return 0;
 800ba14:	2300      	movs	r3, #0
    }
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop

0800ba20 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_05 = 10; // verdana_14_4bpp
    static const touchgfx::FontId TYPOGRAPHY_06 = 11; // verdanab_15_4bpp
    static const uint16_t NUMBER_OF_FONTS = 12;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	4a05      	ldr	r2, [pc, #20]	; (800ba40 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff ff6f 	bl	800b914 <_ZN8touchgfx12FontProviderD1Ev>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	080251ec 	.word	0x080251ec

0800ba44 <_ZN23ApplicationFontProviderD0Ev>:
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7ff ffe7 	bl	800ba20 <_ZN23ApplicationFontProviderD1Ev>
 800ba52:	2104      	movs	r1, #4
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f017 fd67 	bl	8023528 <_ZdlPvj>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	4a04      	ldr	r2, [pc, #16]	; (800ba80 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	601a      	str	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	08027a3c 	.word	0x08027a3c

0800ba84 <_ZN8touchgfx4FontD0Ev>:
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff ffe9 	bl	800ba64 <_ZN8touchgfx4FontD1Ev>
 800ba92:	2110      	movs	r1, #16
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f017 fd47 	bl	8023528 <_ZdlPvj>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800baa4:	b590      	push	{r4, r7, lr}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3308      	adds	r3, #8
 800babe:	681c      	ldr	r4, [r3, #0]
 800bac0:	f107 030f 	add.w	r3, r7, #15
 800bac4:	f107 0210 	add.w	r2, r7, #16
 800bac8:	8879      	ldrh	r1, [r7, #2]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	47a0      	blx	r4
 800bace:	6178      	str	r0, [r7, #20]
        return glyph;
 800bad0:	697b      	ldr	r3, [r7, #20]
    }
 800bad2:	4618      	mov	r0, r3
 800bad4:	371c      	adds	r7, #28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd90      	pop	{r4, r7, pc}

0800bada <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	895b      	ldrh	r3, [r3, #10]
    }
 800bae6:	4618      	mov	r0, r3
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800baf2:	b480      	push	{r7}
 800baf4:	b083      	sub	sp, #12
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	899b      	ldrh	r3, [r3, #12]
    }
 800bafe:	4618      	mov	r0, r3
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	889b      	ldrh	r3, [r3, #4]
    }
 800bb16:	4618      	mov	r0, r3
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800bb22:	b480      	push	{r7}
 800bb24:	b083      	sub	sp, #12
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	889a      	ldrh	r2, [r3, #4]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	799b      	ldrb	r3, [r3, #6]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	4413      	add	r3, r2
 800bb36:	b29b      	uxth	r3, r3
    }
 800bb38:	4618      	mov	r0, r3
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	79db      	ldrb	r3, [r3, #7]
 800bb50:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800bb54:	b2db      	uxtb	r3, r3
    }
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	79db      	ldrb	r3, [r3, #7]
 800bb6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bb72:	b2db      	uxtb	r3, r3
    }
 800bb74:	4618      	mov	r0, r3
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	4a05      	ldr	r2, [pc, #20]	; (800bba0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff ff67 	bl	800ba64 <_ZN8touchgfx4FontD1Ev>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	08027af4 	.word	0x08027af4

0800bba4 <_ZN8touchgfx9ConstFontD0Ev>:
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff ffe7 	bl	800bb80 <_ZN8touchgfx9ConstFontD1Ev>
 800bbb2:	2118      	movs	r1, #24
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f017 fcb7 	bl	8023528 <_ZdlPvj>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	4a05      	ldr	r2, [pc, #20]	; (800bbe4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff ffd3 	bl	800bb80 <_ZN8touchgfx9ConstFontD1Ev>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	08025244 	.word	0x08025244

0800bbe8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff ffe7 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bbf6:	2124      	movs	r1, #36	; 0x24
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f017 fc95 	bl	8023528 <_ZdlPvj>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f82d 	bl	800bc70 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800bc16:	4b08      	ldr	r3, [pc, #32]	; (800bc38 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	4b08      	ldr	r3, [pc, #32]	; (800bc3c <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800bc1c:	6819      	ldr	r1, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	440b      	add	r3, r1
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	681b      	ldr	r3, [r3, #0]
    }
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	2002b100 	.word	0x2002b100
 800bc3c:	2002b0f8 	.word	0x2002b0f8

0800bc40 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f811 	bl	800bc70 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800bc4e:	4b07      	ldr	r3, [pc, #28]	; (800bc6c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	005b      	lsls	r3, r3, #1
 800bc58:	4413      	add	r3, r2
 800bc5a:	785b      	ldrb	r3, [r3, #1]
 800bc5c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bc60:	b2db      	uxtb	r3, r3
    }
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2002b0f8 	.word	0x2002b0f8

0800bc70 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800bc78:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d105      	bne.n	800bc8c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800bc80:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800bc82:	4a0c      	ldr	r2, [pc, #48]	; (800bcb4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800bc84:	21de      	movs	r1, #222	; 0xde
 800bc86:	480c      	ldr	r0, [pc, #48]	; (800bcb8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800bc88:	f017 fc7a 	bl	8023580 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	881a      	ldrh	r2, [r3, #0]
 800bc90:	4b0a      	ldr	r3, [pc, #40]	; (800bcbc <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d305      	bcc.n	800bca4 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800bc98:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800bc9a:	4a06      	ldr	r2, [pc, #24]	; (800bcb4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800bc9c:	21df      	movs	r1, #223	; 0xdf
 800bc9e:	4806      	ldr	r0, [pc, #24]	; (800bcb8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800bca0:	f017 fc6e 	bl	8023580 <__assert_func>
    }
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	2002b0f8 	.word	0x2002b0f8
 800bcb0:	08024a3c 	.word	0x08024a3c
 800bcb4:	0802520c 	.word	0x0802520c
 800bcb8:	08024a80 	.word	0x08024a80
 800bcbc:	2002b0fc 	.word	0x2002b0fc
 800bcc0:	08024ac4 	.word	0x08024ac4

0800bcc4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	7b5b      	ldrb	r3, [r3, #13]
 800bcd0:	021b      	lsls	r3, r3, #8
 800bcd2:	b21b      	sxth	r3, r3
 800bcd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcd8:	b21a      	sxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	7adb      	ldrb	r3, [r3, #11]
 800bcde:	b21b      	sxth	r3, r3
 800bce0:	4313      	orrs	r3, r2
 800bce2:	b21b      	sxth	r3, r3
 800bce4:	b29b      	uxth	r3, r3
    }
 800bce6:	4618      	mov	r0, r3
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800bcf2:	b480      	push	{r7}
 800bcf4:	b083      	sub	sp, #12
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a1b      	ldr	r3, [r3, #32]
    }
 800bcfe:	4618      	mov	r0, r3
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
	...

0800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b08c      	sub	sp, #48	; 0x30
 800bd10:	af08      	add	r7, sp, #32
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4611      	mov	r1, r2
 800bd18:	461a      	mov	r2, r3
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	80fb      	strh	r3, [r7, #6]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	88b9      	ldrh	r1, [r7, #4]
 800bd26:	88fa      	ldrh	r2, [r7, #6]
 800bd28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bd2a:	9306      	str	r3, [sp, #24]
 800bd2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bd2e:	9305      	str	r3, [sp, #20]
 800bd30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd34:	9304      	str	r3, [sp, #16]
 800bd36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd3a:	9303      	str	r3, [sp, #12]
 800bd3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd40:	9302      	str	r3, [sp, #8]
 800bd42:	7f3b      	ldrb	r3, [r7, #28]
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	7e3b      	ldrb	r3, [r7, #24]
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	68b9      	ldr	r1, [r7, #8]
 800bd4e:	f00a fb37 	bl	80163c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800bd52:	4a08      	ldr	r2, [pc, #32]	; (800bd74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd5c:	619a      	str	r2, [r3, #24]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd62:	61da      	str	r2, [r3, #28]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd68:	621a      	str	r2, [r3, #32]
{
}
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	08025244 	.word	0x08025244

0800bd78 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	889b      	ldrh	r3, [r3, #4]
 800bd8c:	0adb      	lsrs	r3, r3, #11
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	4413      	add	r3, r2
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4413      	add	r3, r2
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b086      	sub	sp, #24
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	607a      	str	r2, [r7, #4]
 800bdb6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	7b1b      	ldrb	r3, [r3, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e023      	b.n	800be12 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff ff7a 	bl	800bcc4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800bdd4:	8abb      	ldrh	r3, [r7, #20]
 800bdd6:	82fb      	strh	r3, [r7, #22]
 800bdd8:	8afa      	ldrh	r2, [r7, #22]
 800bdda:	8abb      	ldrh	r3, [r7, #20]
 800bddc:	6879      	ldr	r1, [r7, #4]
 800bdde:	7b09      	ldrb	r1, [r1, #12]
 800bde0:	440b      	add	r3, r1
 800bde2:	429a      	cmp	r2, r3
 800bde4:	da14      	bge.n	800be10 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	69da      	ldr	r2, [r3, #28]
 800bdea:	8afb      	ldrh	r3, [r7, #22]
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	897a      	ldrh	r2, [r7, #10]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d107      	bne.n	800be08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	69da      	ldr	r2, [r3, #28]
 800bdfc:	8afb      	ldrh	r3, [r7, #22]
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4413      	add	r3, r2
 800be02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800be06:	e004      	b.n	800be12 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800be08:	8afb      	ldrh	r3, [r7, #22]
 800be0a:	3301      	adds	r3, #1
 800be0c:	82fb      	strh	r3, [r7, #22]
 800be0e:	e7e3      	b.n	800bdd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
	...

0800be1c <__tcf_0>:
extern const touchgfx::KerningNode kerning_arial_10_4bpp[];
touchgfx::GeneratedFont& getFont_arial_10_4bpp();

touchgfx::GeneratedFont& getFont_arial_10_4bpp()
{
    static touchgfx::GeneratedFont arial_10_4bpp(glyphs_arial_10_4bpp, 24, 10, 0, 4, 1, 0, 1, unicodes_arial_10_4bpp, kerning_arial_10_4bpp, 63, 0, 0);
 800be1c:	b580      	push	{r7, lr}
 800be1e:	af00      	add	r7, sp, #0
 800be20:	4801      	ldr	r0, [pc, #4]	; (800be28 <__tcf_0+0xc>)
 800be22:	f7ff fecf 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800be26:	bd80      	pop	{r7, pc}
 800be28:	200298cc 	.word	0x200298cc

0800be2c <_Z21getFont_arial_10_4bppv>:
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08a      	sub	sp, #40	; 0x28
 800be30:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont arial_10_4bpp(glyphs_arial_10_4bpp, 24, 10, 0, 4, 1, 0, 1, unicodes_arial_10_4bpp, kerning_arial_10_4bpp, 63, 0, 0);
 800be32:	4b15      	ldr	r3, [pc, #84]	; (800be88 <_Z21getFont_arial_10_4bppv+0x5c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d11f      	bne.n	800be7e <_Z21getFont_arial_10_4bppv+0x52>
 800be3e:	2300      	movs	r3, #0
 800be40:	9309      	str	r3, [sp, #36]	; 0x24
 800be42:	2300      	movs	r3, #0
 800be44:	9308      	str	r3, [sp, #32]
 800be46:	233f      	movs	r3, #63	; 0x3f
 800be48:	9307      	str	r3, [sp, #28]
 800be4a:	4b10      	ldr	r3, [pc, #64]	; (800be8c <_Z21getFont_arial_10_4bppv+0x60>)
 800be4c:	9306      	str	r3, [sp, #24]
 800be4e:	4b10      	ldr	r3, [pc, #64]	; (800be90 <_Z21getFont_arial_10_4bppv+0x64>)
 800be50:	9305      	str	r3, [sp, #20]
 800be52:	2301      	movs	r3, #1
 800be54:	9304      	str	r3, [sp, #16]
 800be56:	2300      	movs	r3, #0
 800be58:	9303      	str	r3, [sp, #12]
 800be5a:	2301      	movs	r3, #1
 800be5c:	9302      	str	r3, [sp, #8]
 800be5e:	2304      	movs	r3, #4
 800be60:	9301      	str	r3, [sp, #4]
 800be62:	2300      	movs	r3, #0
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	230a      	movs	r3, #10
 800be68:	2218      	movs	r2, #24
 800be6a:	490a      	ldr	r1, [pc, #40]	; (800be94 <_Z21getFont_arial_10_4bppv+0x68>)
 800be6c:	480a      	ldr	r0, [pc, #40]	; (800be98 <_Z21getFont_arial_10_4bppv+0x6c>)
 800be6e:	f7ff ff4d 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800be72:	4b05      	ldr	r3, [pc, #20]	; (800be88 <_Z21getFont_arial_10_4bppv+0x5c>)
 800be74:	2201      	movs	r2, #1
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	4808      	ldr	r0, [pc, #32]	; (800be9c <_Z21getFont_arial_10_4bppv+0x70>)
 800be7a:	f017 fb9f 	bl	80235bc <atexit>
    return arial_10_4bpp;
 800be7e:	4b06      	ldr	r3, [pc, #24]	; (800be98 <_Z21getFont_arial_10_4bppv+0x6c>)
}
 800be80:	4618      	mov	r0, r3
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	200298f0 	.word	0x200298f0
 800be8c:	0802c194 	.word	0x0802c194
 800be90:	08025290 	.word	0x08025290
 800be94:	0802c1d0 	.word	0x0802c1d0
 800be98:	200298cc 	.word	0x200298cc
 800be9c:	0800be1d 	.word	0x0800be1d

0800bea0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_ariblk_20_4bpp[];
touchgfx::GeneratedFont& getFont_ariblk_20_4bpp();

touchgfx::GeneratedFont& getFont_ariblk_20_4bpp()
{
    static touchgfx::GeneratedFont ariblk_20_4bpp(glyphs_ariblk_20_4bpp, 11, 20, 0, 4, 1, 0, 0, unicodes_ariblk_20_4bpp, kerning_ariblk_20_4bpp, 63, 0, 0);
 800bea0:	b580      	push	{r7, lr}
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	4801      	ldr	r0, [pc, #4]	; (800beac <__tcf_0+0xc>)
 800bea6:	f7ff fe8d 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	200298f4 	.word	0x200298f4

0800beb0 <_Z22getFont_ariblk_20_4bppv>:
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b08a      	sub	sp, #40	; 0x28
 800beb4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont ariblk_20_4bpp(glyphs_ariblk_20_4bpp, 11, 20, 0, 4, 1, 0, 0, unicodes_ariblk_20_4bpp, kerning_ariblk_20_4bpp, 63, 0, 0);
 800beb6:	4b15      	ldr	r3, [pc, #84]	; (800bf0c <_Z22getFont_ariblk_20_4bppv+0x5c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d11f      	bne.n	800bf02 <_Z22getFont_ariblk_20_4bppv+0x52>
 800bec2:	2300      	movs	r3, #0
 800bec4:	9309      	str	r3, [sp, #36]	; 0x24
 800bec6:	2300      	movs	r3, #0
 800bec8:	9308      	str	r3, [sp, #32]
 800beca:	233f      	movs	r3, #63	; 0x3f
 800becc:	9307      	str	r3, [sp, #28]
 800bece:	4b10      	ldr	r3, [pc, #64]	; (800bf10 <_Z22getFont_ariblk_20_4bppv+0x60>)
 800bed0:	9306      	str	r3, [sp, #24]
 800bed2:	4b10      	ldr	r3, [pc, #64]	; (800bf14 <_Z22getFont_ariblk_20_4bppv+0x64>)
 800bed4:	9305      	str	r3, [sp, #20]
 800bed6:	2300      	movs	r3, #0
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	2300      	movs	r3, #0
 800bedc:	9303      	str	r3, [sp, #12]
 800bede:	2301      	movs	r3, #1
 800bee0:	9302      	str	r3, [sp, #8]
 800bee2:	2304      	movs	r3, #4
 800bee4:	9301      	str	r3, [sp, #4]
 800bee6:	2300      	movs	r3, #0
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	2314      	movs	r3, #20
 800beec:	220b      	movs	r2, #11
 800beee:	490a      	ldr	r1, [pc, #40]	; (800bf18 <_Z22getFont_ariblk_20_4bppv+0x68>)
 800bef0:	480a      	ldr	r0, [pc, #40]	; (800bf1c <_Z22getFont_ariblk_20_4bppv+0x6c>)
 800bef2:	f7ff ff0b 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bef6:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <_Z22getFont_ariblk_20_4bppv+0x5c>)
 800bef8:	2201      	movs	r2, #1
 800befa:	601a      	str	r2, [r3, #0]
 800befc:	4808      	ldr	r0, [pc, #32]	; (800bf20 <_Z22getFont_ariblk_20_4bppv+0x70>)
 800befe:	f017 fb5d 	bl	80235bc <atexit>
    return ariblk_20_4bpp;
 800bf02:	4b06      	ldr	r3, [pc, #24]	; (800bf1c <_Z22getFont_ariblk_20_4bppv+0x6c>)
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20029918 	.word	0x20029918
 800bf10:	0802c198 	.word	0x0802c198
 800bf14:	08025294 	.word	0x08025294
 800bf18:	0802c320 	.word	0x0802c320
 800bf1c:	200298f4 	.word	0x200298f4
 800bf20:	0800bea1 	.word	0x0800bea1

0800bf24 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_11_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_11_4bpp();

touchgfx::GeneratedFont& getFont_verdana_11_4bpp()
{
    static touchgfx::GeneratedFont verdana_11_4bpp(glyphs_verdana_11_4bpp, 29, 11, 2, 4, 1, 0, 1, unicodes_verdana_11_4bpp, kerning_verdana_11_4bpp, 63, 0, 0);
 800bf24:	b580      	push	{r7, lr}
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	4801      	ldr	r0, [pc, #4]	; (800bf30 <__tcf_0+0xc>)
 800bf2a:	f7ff fe4b 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	2002991c 	.word	0x2002991c

0800bf34 <_Z23getFont_verdana_11_4bppv>:
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08a      	sub	sp, #40	; 0x28
 800bf38:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_11_4bpp(glyphs_verdana_11_4bpp, 29, 11, 2, 4, 1, 0, 1, unicodes_verdana_11_4bpp, kerning_verdana_11_4bpp, 63, 0, 0);
 800bf3a:	4b15      	ldr	r3, [pc, #84]	; (800bf90 <_Z23getFont_verdana_11_4bppv+0x5c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d11f      	bne.n	800bf86 <_Z23getFont_verdana_11_4bppv+0x52>
 800bf46:	2300      	movs	r3, #0
 800bf48:	9309      	str	r3, [sp, #36]	; 0x24
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	9308      	str	r3, [sp, #32]
 800bf4e:	233f      	movs	r3, #63	; 0x3f
 800bf50:	9307      	str	r3, [sp, #28]
 800bf52:	4b10      	ldr	r3, [pc, #64]	; (800bf94 <_Z23getFont_verdana_11_4bppv+0x60>)
 800bf54:	9306      	str	r3, [sp, #24]
 800bf56:	4b10      	ldr	r3, [pc, #64]	; (800bf98 <_Z23getFont_verdana_11_4bppv+0x64>)
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	9304      	str	r3, [sp, #16]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9303      	str	r3, [sp, #12]
 800bf62:	2301      	movs	r3, #1
 800bf64:	9302      	str	r3, [sp, #8]
 800bf66:	2304      	movs	r3, #4
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	230b      	movs	r3, #11
 800bf70:	221d      	movs	r2, #29
 800bf72:	490a      	ldr	r1, [pc, #40]	; (800bf9c <_Z23getFont_verdana_11_4bppv+0x68>)
 800bf74:	480a      	ldr	r0, [pc, #40]	; (800bfa0 <_Z23getFont_verdana_11_4bppv+0x6c>)
 800bf76:	f7ff fec9 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <_Z23getFont_verdana_11_4bppv+0x5c>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	4808      	ldr	r0, [pc, #32]	; (800bfa4 <_Z23getFont_verdana_11_4bppv+0x70>)
 800bf82:	f017 fb1b 	bl	80235bc <atexit>
    return verdana_11_4bpp;
 800bf86:	4b06      	ldr	r3, [pc, #24]	; (800bfa0 <_Z23getFont_verdana_11_4bppv+0x6c>)
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	20029940 	.word	0x20029940
 800bf94:	0802c19c 	.word	0x0802c19c
 800bf98:	08025298 	.word	0x08025298
 800bf9c:	0802c3bc 	.word	0x0802c3bc
 800bfa0:	2002991c 	.word	0x2002991c
 800bfa4:	0800bf25 	.word	0x0800bf25

0800bfa8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_13_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_13_4bpp();

touchgfx::GeneratedFont& getFont_verdana_13_4bpp()
{
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 37, 13, 3, 4, 1, 0, 1, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0);
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	4801      	ldr	r0, [pc, #4]	; (800bfb4 <__tcf_0+0xc>)
 800bfae:	f7ff fe09 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20029944 	.word	0x20029944

0800bfb8 <_Z23getFont_verdana_13_4bppv>:
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08a      	sub	sp, #40	; 0x28
 800bfbc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 37, 13, 3, 4, 1, 0, 1, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0);
 800bfbe:	4b15      	ldr	r3, [pc, #84]	; (800c014 <_Z23getFont_verdana_13_4bppv+0x5c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d11f      	bne.n	800c00a <_Z23getFont_verdana_13_4bppv+0x52>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9309      	str	r3, [sp, #36]	; 0x24
 800bfce:	2300      	movs	r3, #0
 800bfd0:	9308      	str	r3, [sp, #32]
 800bfd2:	233f      	movs	r3, #63	; 0x3f
 800bfd4:	9307      	str	r3, [sp, #28]
 800bfd6:	4b10      	ldr	r3, [pc, #64]	; (800c018 <_Z23getFont_verdana_13_4bppv+0x60>)
 800bfd8:	9306      	str	r3, [sp, #24]
 800bfda:	4b10      	ldr	r3, [pc, #64]	; (800c01c <_Z23getFont_verdana_13_4bppv+0x64>)
 800bfdc:	9305      	str	r3, [sp, #20]
 800bfde:	2301      	movs	r3, #1
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	9303      	str	r3, [sp, #12]
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	9302      	str	r3, [sp, #8]
 800bfea:	2304      	movs	r3, #4
 800bfec:	9301      	str	r3, [sp, #4]
 800bfee:	2303      	movs	r3, #3
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	230d      	movs	r3, #13
 800bff4:	2225      	movs	r2, #37	; 0x25
 800bff6:	490a      	ldr	r1, [pc, #40]	; (800c020 <_Z23getFont_verdana_13_4bppv+0x68>)
 800bff8:	480a      	ldr	r0, [pc, #40]	; (800c024 <_Z23getFont_verdana_13_4bppv+0x6c>)
 800bffa:	f7ff fe87 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <_Z23getFont_verdana_13_4bppv+0x5c>)
 800c000:	2201      	movs	r2, #1
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	4808      	ldr	r0, [pc, #32]	; (800c028 <_Z23getFont_verdana_13_4bppv+0x70>)
 800c006:	f017 fad9 	bl	80235bc <atexit>
    return verdana_13_4bpp;
 800c00a:	4b06      	ldr	r3, [pc, #24]	; (800c024 <_Z23getFont_verdana_13_4bppv+0x6c>)
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20029968 	.word	0x20029968
 800c018:	0802c1a4 	.word	0x0802c1a4
 800c01c:	0802529c 	.word	0x0802529c
 800c020:	0802c554 	.word	0x0802c554
 800c024:	20029944 	.word	0x20029944
 800c028:	0800bfa9 	.word	0x0800bfa9

0800c02c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_14_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 16, 14, 3, 4, 1, 0, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0);
 800c02c:	b580      	push	{r7, lr}
 800c02e:	af00      	add	r7, sp, #0
 800c030:	4801      	ldr	r0, [pc, #4]	; (800c038 <__tcf_0+0xc>)
 800c032:	f7ff fdc7 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c036:	bd80      	pop	{r7, pc}
 800c038:	2002996c 	.word	0x2002996c

0800c03c <_Z23getFont_verdana_14_4bppv>:
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08a      	sub	sp, #40	; 0x28
 800c040:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 16, 14, 3, 4, 1, 0, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0);
 800c042:	4b15      	ldr	r3, [pc, #84]	; (800c098 <_Z23getFont_verdana_14_4bppv+0x5c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d11f      	bne.n	800c08e <_Z23getFont_verdana_14_4bppv+0x52>
 800c04e:	2300      	movs	r3, #0
 800c050:	9309      	str	r3, [sp, #36]	; 0x24
 800c052:	2300      	movs	r3, #0
 800c054:	9308      	str	r3, [sp, #32]
 800c056:	233f      	movs	r3, #63	; 0x3f
 800c058:	9307      	str	r3, [sp, #28]
 800c05a:	4b10      	ldr	r3, [pc, #64]	; (800c09c <_Z23getFont_verdana_14_4bppv+0x60>)
 800c05c:	9306      	str	r3, [sp, #24]
 800c05e:	4b10      	ldr	r3, [pc, #64]	; (800c0a0 <_Z23getFont_verdana_14_4bppv+0x64>)
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	2300      	movs	r3, #0
 800c064:	9304      	str	r3, [sp, #16]
 800c066:	2300      	movs	r3, #0
 800c068:	9303      	str	r3, [sp, #12]
 800c06a:	2301      	movs	r3, #1
 800c06c:	9302      	str	r3, [sp, #8]
 800c06e:	2304      	movs	r3, #4
 800c070:	9301      	str	r3, [sp, #4]
 800c072:	2303      	movs	r3, #3
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	230e      	movs	r3, #14
 800c078:	2210      	movs	r2, #16
 800c07a:	490a      	ldr	r1, [pc, #40]	; (800c0a4 <_Z23getFont_verdana_14_4bppv+0x68>)
 800c07c:	480a      	ldr	r0, [pc, #40]	; (800c0a8 <_Z23getFont_verdana_14_4bppv+0x6c>)
 800c07e:	f7ff fe45 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c082:	4b05      	ldr	r3, [pc, #20]	; (800c098 <_Z23getFont_verdana_14_4bppv+0x5c>)
 800c084:	2201      	movs	r2, #1
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	4808      	ldr	r0, [pc, #32]	; (800c0ac <_Z23getFont_verdana_14_4bppv+0x70>)
 800c08a:	f017 fa97 	bl	80235bc <atexit>
    return verdana_14_4bpp;
 800c08e:	4b06      	ldr	r3, [pc, #24]	; (800c0a8 <_Z23getFont_verdana_14_4bppv+0x6c>)
}
 800c090:	4618      	mov	r0, r3
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20029990 	.word	0x20029990
 800c09c:	0802c1b0 	.word	0x0802c1b0
 800c0a0:	080252a0 	.word	0x080252a0
 800c0a4:	0802c75c 	.word	0x0802c75c
 800c0a8:	2002996c 	.word	0x2002996c
 800c0ac:	0800c02d 	.word	0x0800c02d

0800c0b0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 14, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	4801      	ldr	r0, [pc, #4]	; (800c0bc <__tcf_0+0xc>)
 800c0b6:	f7ff fd85 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	20029994 	.word	0x20029994

0800c0c0 <_Z23getFont_verdana_20_4bppv>:
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b08a      	sub	sp, #40	; 0x28
 800c0c4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 14, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800c0c6:	4b15      	ldr	r3, [pc, #84]	; (800c11c <_Z23getFont_verdana_20_4bppv+0x5c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d11f      	bne.n	800c112 <_Z23getFont_verdana_20_4bppv+0x52>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9308      	str	r3, [sp, #32]
 800c0da:	233f      	movs	r3, #63	; 0x3f
 800c0dc:	9307      	str	r3, [sp, #28]
 800c0de:	4b10      	ldr	r3, [pc, #64]	; (800c120 <_Z23getFont_verdana_20_4bppv+0x60>)
 800c0e0:	9306      	str	r3, [sp, #24]
 800c0e2:	4b10      	ldr	r3, [pc, #64]	; (800c124 <_Z23getFont_verdana_20_4bppv+0x64>)
 800c0e4:	9305      	str	r3, [sp, #20]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	9304      	str	r3, [sp, #16]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	9303      	str	r3, [sp, #12]
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	9302      	str	r3, [sp, #8]
 800c0f2:	2304      	movs	r3, #4
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	2304      	movs	r3, #4
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	2314      	movs	r3, #20
 800c0fc:	220e      	movs	r2, #14
 800c0fe:	490a      	ldr	r1, [pc, #40]	; (800c128 <_Z23getFont_verdana_20_4bppv+0x68>)
 800c100:	480a      	ldr	r0, [pc, #40]	; (800c12c <_Z23getFont_verdana_20_4bppv+0x6c>)
 800c102:	f7ff fe03 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c106:	4b05      	ldr	r3, [pc, #20]	; (800c11c <_Z23getFont_verdana_20_4bppv+0x5c>)
 800c108:	2201      	movs	r2, #1
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	4808      	ldr	r0, [pc, #32]	; (800c130 <_Z23getFont_verdana_20_4bppv+0x70>)
 800c10e:	f017 fa55 	bl	80235bc <atexit>
    return verdana_20_4bpp;
 800c112:	4b06      	ldr	r3, [pc, #24]	; (800c12c <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800c114:	4618      	mov	r0, r3
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	200299b8 	.word	0x200299b8
 800c120:	0802c1b4 	.word	0x0802c1b4
 800c124:	080252a4 	.word	0x080252a4
 800c128:	0802c83c 	.word	0x0802c83c
 800c12c:	20029994 	.word	0x20029994
 800c130:	0800c0b1 	.word	0x0800c0b1

0800c134 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_25_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_25_4bpp();

touchgfx::GeneratedFont& getFont_verdana_25_4bpp()
{
    static touchgfx::GeneratedFont verdana_25_4bpp(glyphs_verdana_25_4bpp, 12, 25, 0, 4, 1, 0, 0, unicodes_verdana_25_4bpp, kerning_verdana_25_4bpp, 63, 0, 0);
 800c134:	b580      	push	{r7, lr}
 800c136:	af00      	add	r7, sp, #0
 800c138:	4801      	ldr	r0, [pc, #4]	; (800c140 <__tcf_0+0xc>)
 800c13a:	f7ff fd43 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	200299bc 	.word	0x200299bc

0800c144 <_Z23getFont_verdana_25_4bppv>:
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b08a      	sub	sp, #40	; 0x28
 800c148:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_25_4bpp(glyphs_verdana_25_4bpp, 12, 25, 0, 4, 1, 0, 0, unicodes_verdana_25_4bpp, kerning_verdana_25_4bpp, 63, 0, 0);
 800c14a:	4b15      	ldr	r3, [pc, #84]	; (800c1a0 <_Z23getFont_verdana_25_4bppv+0x5c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d11f      	bne.n	800c196 <_Z23getFont_verdana_25_4bppv+0x52>
 800c156:	2300      	movs	r3, #0
 800c158:	9309      	str	r3, [sp, #36]	; 0x24
 800c15a:	2300      	movs	r3, #0
 800c15c:	9308      	str	r3, [sp, #32]
 800c15e:	233f      	movs	r3, #63	; 0x3f
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	4b10      	ldr	r3, [pc, #64]	; (800c1a4 <_Z23getFont_verdana_25_4bppv+0x60>)
 800c164:	9306      	str	r3, [sp, #24]
 800c166:	4b10      	ldr	r3, [pc, #64]	; (800c1a8 <_Z23getFont_verdana_25_4bppv+0x64>)
 800c168:	9305      	str	r3, [sp, #20]
 800c16a:	2300      	movs	r3, #0
 800c16c:	9304      	str	r3, [sp, #16]
 800c16e:	2300      	movs	r3, #0
 800c170:	9303      	str	r3, [sp, #12]
 800c172:	2301      	movs	r3, #1
 800c174:	9302      	str	r3, [sp, #8]
 800c176:	2304      	movs	r3, #4
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	2300      	movs	r3, #0
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	2319      	movs	r3, #25
 800c180:	220c      	movs	r2, #12
 800c182:	490a      	ldr	r1, [pc, #40]	; (800c1ac <_Z23getFont_verdana_25_4bppv+0x68>)
 800c184:	480a      	ldr	r0, [pc, #40]	; (800c1b0 <_Z23getFont_verdana_25_4bppv+0x6c>)
 800c186:	f7ff fdc1 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c18a:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <_Z23getFont_verdana_25_4bppv+0x5c>)
 800c18c:	2201      	movs	r2, #1
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	4808      	ldr	r0, [pc, #32]	; (800c1b4 <_Z23getFont_verdana_25_4bppv+0x70>)
 800c192:	f017 fa13 	bl	80235bc <atexit>
    return verdana_25_4bpp;
 800c196:	4b06      	ldr	r3, [pc, #24]	; (800c1b0 <_Z23getFont_verdana_25_4bppv+0x6c>)
}
 800c198:	4618      	mov	r0, r3
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	200299e0 	.word	0x200299e0
 800c1a4:	0802c1b8 	.word	0x0802c1b8
 800c1a8:	080252a8 	.word	0x080252a8
 800c1ac:	0802c900 	.word	0x0802c900
 800c1b0:	200299bc 	.word	0x200299bc
 800c1b4:	0800c135 	.word	0x0800c135

0800c1b8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_36_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_36_4bpp();

touchgfx::GeneratedFont& getFont_verdana_36_4bpp()
{
    static touchgfx::GeneratedFont verdana_36_4bpp(glyphs_verdana_36_4bpp, 11, 36, 0, 4, 1, 0, 0, unicodes_verdana_36_4bpp, kerning_verdana_36_4bpp, 63, 0, 0);
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <__tcf_0+0xc>)
 800c1be:	f7ff fd01 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	200299e4 	.word	0x200299e4

0800c1c8 <_Z23getFont_verdana_36_4bppv>:
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08a      	sub	sp, #40	; 0x28
 800c1cc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_36_4bpp(glyphs_verdana_36_4bpp, 11, 36, 0, 4, 1, 0, 0, unicodes_verdana_36_4bpp, kerning_verdana_36_4bpp, 63, 0, 0);
 800c1ce:	4b15      	ldr	r3, [pc, #84]	; (800c224 <_Z23getFont_verdana_36_4bppv+0x5c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d11f      	bne.n	800c21a <_Z23getFont_verdana_36_4bppv+0x52>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1de:	2300      	movs	r3, #0
 800c1e0:	9308      	str	r3, [sp, #32]
 800c1e2:	233f      	movs	r3, #63	; 0x3f
 800c1e4:	9307      	str	r3, [sp, #28]
 800c1e6:	4b10      	ldr	r3, [pc, #64]	; (800c228 <_Z23getFont_verdana_36_4bppv+0x60>)
 800c1e8:	9306      	str	r3, [sp, #24]
 800c1ea:	4b10      	ldr	r3, [pc, #64]	; (800c22c <_Z23getFont_verdana_36_4bppv+0x64>)
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9303      	str	r3, [sp, #12]
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	9302      	str	r3, [sp, #8]
 800c1fa:	2304      	movs	r3, #4
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	2300      	movs	r3, #0
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	2324      	movs	r3, #36	; 0x24
 800c204:	220b      	movs	r2, #11
 800c206:	490a      	ldr	r1, [pc, #40]	; (800c230 <_Z23getFont_verdana_36_4bppv+0x68>)
 800c208:	480a      	ldr	r0, [pc, #40]	; (800c234 <_Z23getFont_verdana_36_4bppv+0x6c>)
 800c20a:	f7ff fd7f 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <_Z23getFont_verdana_36_4bppv+0x5c>)
 800c210:	2201      	movs	r2, #1
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	4808      	ldr	r0, [pc, #32]	; (800c238 <_Z23getFont_verdana_36_4bppv+0x70>)
 800c216:	f017 f9d1 	bl	80235bc <atexit>
    return verdana_36_4bpp;
 800c21a:	4b06      	ldr	r3, [pc, #24]	; (800c234 <_Z23getFont_verdana_36_4bppv+0x6c>)
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	20029a08 	.word	0x20029a08
 800c228:	0802c1bc 	.word	0x0802c1bc
 800c22c:	080252ac 	.word	0x080252ac
 800c230:	0802c9a8 	.word	0x0802c9a8
 800c234:	200299e4 	.word	0x200299e4
 800c238:	0800c1b9 	.word	0x0800c1b9

0800c23c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdanab_14_4bpp[];
touchgfx::GeneratedFont& getFont_verdanab_14_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_14_4bpp()
{
    static touchgfx::GeneratedFont verdanab_14_4bpp(glyphs_verdanab_14_4bpp, 15, 14, 3, 4, 1, 0, 1, unicodes_verdanab_14_4bpp, kerning_verdanab_14_4bpp, 63, 0, 0);
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
 800c240:	4801      	ldr	r0, [pc, #4]	; (800c248 <__tcf_0+0xc>)
 800c242:	f7ff fcbf 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20029a0c 	.word	0x20029a0c

0800c24c <_Z24getFont_verdanab_14_4bppv>:
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08a      	sub	sp, #40	; 0x28
 800c250:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdanab_14_4bpp(glyphs_verdanab_14_4bpp, 15, 14, 3, 4, 1, 0, 1, unicodes_verdanab_14_4bpp, kerning_verdanab_14_4bpp, 63, 0, 0);
 800c252:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <_Z24getFont_verdanab_14_4bppv+0x5c>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d11f      	bne.n	800c29e <_Z24getFont_verdanab_14_4bppv+0x52>
 800c25e:	2300      	movs	r3, #0
 800c260:	9309      	str	r3, [sp, #36]	; 0x24
 800c262:	2300      	movs	r3, #0
 800c264:	9308      	str	r3, [sp, #32]
 800c266:	233f      	movs	r3, #63	; 0x3f
 800c268:	9307      	str	r3, [sp, #28]
 800c26a:	4b10      	ldr	r3, [pc, #64]	; (800c2ac <_Z24getFont_verdanab_14_4bppv+0x60>)
 800c26c:	9306      	str	r3, [sp, #24]
 800c26e:	4b10      	ldr	r3, [pc, #64]	; (800c2b0 <_Z24getFont_verdanab_14_4bppv+0x64>)
 800c270:	9305      	str	r3, [sp, #20]
 800c272:	2301      	movs	r3, #1
 800c274:	9304      	str	r3, [sp, #16]
 800c276:	2300      	movs	r3, #0
 800c278:	9303      	str	r3, [sp, #12]
 800c27a:	2301      	movs	r3, #1
 800c27c:	9302      	str	r3, [sp, #8]
 800c27e:	2304      	movs	r3, #4
 800c280:	9301      	str	r3, [sp, #4]
 800c282:	2303      	movs	r3, #3
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	230e      	movs	r3, #14
 800c288:	220f      	movs	r2, #15
 800c28a:	490a      	ldr	r1, [pc, #40]	; (800c2b4 <_Z24getFont_verdanab_14_4bppv+0x68>)
 800c28c:	480a      	ldr	r0, [pc, #40]	; (800c2b8 <_Z24getFont_verdanab_14_4bppv+0x6c>)
 800c28e:	f7ff fd3d 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c292:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <_Z24getFont_verdanab_14_4bppv+0x5c>)
 800c294:	2201      	movs	r2, #1
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	4808      	ldr	r0, [pc, #32]	; (800c2bc <_Z24getFont_verdanab_14_4bppv+0x70>)
 800c29a:	f017 f98f 	bl	80235bc <atexit>
    return verdanab_14_4bpp;
 800c29e:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <_Z24getFont_verdanab_14_4bppv+0x6c>)
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20029a30 	.word	0x20029a30
 800c2ac:	0802c1c0 	.word	0x0802c1c0
 800c2b0:	080252b0 	.word	0x080252b0
 800c2b4:	0802ca44 	.word	0x0802ca44
 800c2b8:	20029a0c 	.word	0x20029a0c
 800c2bc:	0800c23d 	.word	0x0800c23d

0800c2c0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdanab_15_4bpp[];
touchgfx::GeneratedFont& getFont_verdanab_15_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_15_4bpp()
{
    static touchgfx::GeneratedFont verdanab_15_4bpp(glyphs_verdanab_15_4bpp, 11, 15, 3, 4, 1, 0, 0, unicodes_verdanab_15_4bpp, kerning_verdanab_15_4bpp, 63, 0, 0);
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	4801      	ldr	r0, [pc, #4]	; (800c2cc <__tcf_0+0xc>)
 800c2c6:	f7ff fc7d 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20029a34 	.word	0x20029a34

0800c2d0 <_Z24getFont_verdanab_15_4bppv>:
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08a      	sub	sp, #40	; 0x28
 800c2d4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdanab_15_4bpp(glyphs_verdanab_15_4bpp, 11, 15, 3, 4, 1, 0, 0, unicodes_verdanab_15_4bpp, kerning_verdanab_15_4bpp, 63, 0, 0);
 800c2d6:	4b15      	ldr	r3, [pc, #84]	; (800c32c <_Z24getFont_verdanab_15_4bppv+0x5c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d11f      	bne.n	800c322 <_Z24getFont_verdanab_15_4bppv+0x52>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	9308      	str	r3, [sp, #32]
 800c2ea:	233f      	movs	r3, #63	; 0x3f
 800c2ec:	9307      	str	r3, [sp, #28]
 800c2ee:	4b10      	ldr	r3, [pc, #64]	; (800c330 <_Z24getFont_verdanab_15_4bppv+0x60>)
 800c2f0:	9306      	str	r3, [sp, #24]
 800c2f2:	4b10      	ldr	r3, [pc, #64]	; (800c334 <_Z24getFont_verdanab_15_4bppv+0x64>)
 800c2f4:	9305      	str	r3, [sp, #20]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	9304      	str	r3, [sp, #16]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	9303      	str	r3, [sp, #12]
 800c2fe:	2301      	movs	r3, #1
 800c300:	9302      	str	r3, [sp, #8]
 800c302:	2304      	movs	r3, #4
 800c304:	9301      	str	r3, [sp, #4]
 800c306:	2303      	movs	r3, #3
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	230f      	movs	r3, #15
 800c30c:	220b      	movs	r2, #11
 800c30e:	490a      	ldr	r1, [pc, #40]	; (800c338 <_Z24getFont_verdanab_15_4bppv+0x68>)
 800c310:	480a      	ldr	r0, [pc, #40]	; (800c33c <_Z24getFont_verdanab_15_4bppv+0x6c>)
 800c312:	f7ff fcfb 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c316:	4b05      	ldr	r3, [pc, #20]	; (800c32c <_Z24getFont_verdanab_15_4bppv+0x5c>)
 800c318:	2201      	movs	r2, #1
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	4808      	ldr	r0, [pc, #32]	; (800c340 <_Z24getFont_verdanab_15_4bppv+0x70>)
 800c31e:	f017 f94d 	bl	80235bc <atexit>
    return verdanab_15_4bpp;
 800c322:	4b06      	ldr	r3, [pc, #24]	; (800c33c <_Z24getFont_verdanab_15_4bppv+0x6c>)
}
 800c324:	4618      	mov	r0, r3
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20029a58 	.word	0x20029a58
 800c330:	0802c1c4 	.word	0x0802c1c4
 800c334:	080252b4 	.word	0x080252b4
 800c338:	0802cb18 	.word	0x0802cb18
 800c33c:	20029a34 	.word	0x20029a34
 800c340:	0800c2c1 	.word	0x0800c2c1

0800c344 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdanab_18_4bpp[];
touchgfx::GeneratedFont& getFont_verdanab_18_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_18_4bpp()
{
    static touchgfx::GeneratedFont verdanab_18_4bpp(glyphs_verdanab_18_4bpp, 17, 18, 4, 4, 1, 1, 0, unicodes_verdanab_18_4bpp, kerning_verdanab_18_4bpp, 63, 0, 0);
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
 800c348:	4801      	ldr	r0, [pc, #4]	; (800c350 <__tcf_0+0xc>)
 800c34a:	f7ff fc3b 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	20029a5c 	.word	0x20029a5c

0800c354 <_Z24getFont_verdanab_18_4bppv>:
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08a      	sub	sp, #40	; 0x28
 800c358:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdanab_18_4bpp(glyphs_verdanab_18_4bpp, 17, 18, 4, 4, 1, 1, 0, unicodes_verdanab_18_4bpp, kerning_verdanab_18_4bpp, 63, 0, 0);
 800c35a:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <_Z24getFont_verdanab_18_4bppv+0x5c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	d11f      	bne.n	800c3a6 <_Z24getFont_verdanab_18_4bppv+0x52>
 800c366:	2300      	movs	r3, #0
 800c368:	9309      	str	r3, [sp, #36]	; 0x24
 800c36a:	2300      	movs	r3, #0
 800c36c:	9308      	str	r3, [sp, #32]
 800c36e:	233f      	movs	r3, #63	; 0x3f
 800c370:	9307      	str	r3, [sp, #28]
 800c372:	4b10      	ldr	r3, [pc, #64]	; (800c3b4 <_Z24getFont_verdanab_18_4bppv+0x60>)
 800c374:	9306      	str	r3, [sp, #24]
 800c376:	4b10      	ldr	r3, [pc, #64]	; (800c3b8 <_Z24getFont_verdanab_18_4bppv+0x64>)
 800c378:	9305      	str	r3, [sp, #20]
 800c37a:	2300      	movs	r3, #0
 800c37c:	9304      	str	r3, [sp, #16]
 800c37e:	2301      	movs	r3, #1
 800c380:	9303      	str	r3, [sp, #12]
 800c382:	2301      	movs	r3, #1
 800c384:	9302      	str	r3, [sp, #8]
 800c386:	2304      	movs	r3, #4
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	2304      	movs	r3, #4
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	2312      	movs	r3, #18
 800c390:	2211      	movs	r2, #17
 800c392:	490a      	ldr	r1, [pc, #40]	; (800c3bc <_Z24getFont_verdanab_18_4bppv+0x68>)
 800c394:	480a      	ldr	r0, [pc, #40]	; (800c3c0 <_Z24getFont_verdanab_18_4bppv+0x6c>)
 800c396:	f7ff fcb9 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c39a:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <_Z24getFont_verdanab_18_4bppv+0x5c>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	601a      	str	r2, [r3, #0]
 800c3a0:	4808      	ldr	r0, [pc, #32]	; (800c3c4 <_Z24getFont_verdanab_18_4bppv+0x70>)
 800c3a2:	f017 f90b 	bl	80235bc <atexit>
    return verdanab_18_4bpp;
 800c3a6:	4b06      	ldr	r3, [pc, #24]	; (800c3c0 <_Z24getFont_verdanab_18_4bppv+0x6c>)
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20029a80 	.word	0x20029a80
 800c3b4:	0802c1c8 	.word	0x0802c1c8
 800c3b8:	080252b8 	.word	0x080252b8
 800c3bc:	0802cbb4 	.word	0x0802cbb4
 800c3c0:	20029a5c 	.word	0x20029a5c
 800c3c4:	0800c345 	.word	0x0800c345

0800c3c8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdanab_26_4bpp[];
touchgfx::GeneratedFont& getFont_verdanab_26_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_26_4bpp()
{
    static touchgfx::GeneratedFont verdanab_26_4bpp(glyphs_verdanab_26_4bpp, 5, 26, 0, 4, 1, 0, 0, unicodes_verdanab_26_4bpp, kerning_verdanab_26_4bpp, 63, 0, 0);
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	4801      	ldr	r0, [pc, #4]	; (800c3d4 <__tcf_0+0xc>)
 800c3ce:	f7ff fbf9 	bl	800bbc4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20029a84 	.word	0x20029a84

0800c3d8 <_Z24getFont_verdanab_26_4bppv>:
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdanab_26_4bpp(glyphs_verdanab_26_4bpp, 5, 26, 0, 4, 1, 0, 0, unicodes_verdanab_26_4bpp, kerning_verdanab_26_4bpp, 63, 0, 0);
 800c3de:	4b15      	ldr	r3, [pc, #84]	; (800c434 <_Z24getFont_verdanab_26_4bppv+0x5c>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d11f      	bne.n	800c42a <_Z24getFont_verdanab_26_4bppv+0x52>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	9308      	str	r3, [sp, #32]
 800c3f2:	233f      	movs	r3, #63	; 0x3f
 800c3f4:	9307      	str	r3, [sp, #28]
 800c3f6:	4b10      	ldr	r3, [pc, #64]	; (800c438 <_Z24getFont_verdanab_26_4bppv+0x60>)
 800c3f8:	9306      	str	r3, [sp, #24]
 800c3fa:	4b10      	ldr	r3, [pc, #64]	; (800c43c <_Z24getFont_verdanab_26_4bppv+0x64>)
 800c3fc:	9305      	str	r3, [sp, #20]
 800c3fe:	2300      	movs	r3, #0
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	2300      	movs	r3, #0
 800c404:	9303      	str	r3, [sp, #12]
 800c406:	2301      	movs	r3, #1
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	2304      	movs	r3, #4
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	2300      	movs	r3, #0
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	231a      	movs	r3, #26
 800c414:	2205      	movs	r2, #5
 800c416:	490a      	ldr	r1, [pc, #40]	; (800c440 <_Z24getFont_verdanab_26_4bppv+0x68>)
 800c418:	480a      	ldr	r0, [pc, #40]	; (800c444 <_Z24getFont_verdanab_26_4bppv+0x6c>)
 800c41a:	f7ff fc77 	bl	800bd0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c41e:	4b05      	ldr	r3, [pc, #20]	; (800c434 <_Z24getFont_verdanab_26_4bppv+0x5c>)
 800c420:	2201      	movs	r2, #1
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	4808      	ldr	r0, [pc, #32]	; (800c448 <_Z24getFont_verdanab_26_4bppv+0x70>)
 800c426:	f017 f8c9 	bl	80235bc <atexit>
    return verdanab_26_4bpp;
 800c42a:	4b06      	ldr	r3, [pc, #24]	; (800c444 <_Z24getFont_verdanab_26_4bppv+0x6c>)
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20029aa8 	.word	0x20029aa8
 800c438:	0802c1cc 	.word	0x0802c1cc
 800c43c:	080252bc 	.word	0x080252bc
 800c440:	0802cca4 	.word	0x0802cca4
 800c444:	20029a84 	.word	0x20029a84
 800c448:	0800c3c9 	.word	0x0800c3c9

0800c44c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	4618      	mov	r0, r3
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
    {
    }
 800c46e:	bf00      	nop
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	6039      	str	r1, [r7, #0]
    {
    }
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
    {
    }
 800c49a:	bf00      	nop
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c4a6:	b480      	push	{r7}
 800c4a8:	b083      	sub	sp, #12
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c4b2:	bf00      	nop
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr

0800c4be <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c4be:	b480      	push	{r7}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
    {
    }
 800c4c6:	bf00      	nop
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800c4d2:	b480      	push	{r7}
 800c4d4:	b083      	sub	sp, #12
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
    {
    }
 800c4da:	bf00      	nop
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
	...

0800c4e8 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
    {
 800c4f0:	4a04      	ldr	r2, [pc, #16]	; (800c504 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	601a      	str	r2, [r3, #0]
    }
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	08025408 	.word	0x08025408

0800c508 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
    }
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff ffe9 	bl	800c4e8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c516:	2104      	movs	r1, #4
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f017 f805 	bl	8023528 <_ZdlPvj>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800c530:	4a07      	ldr	r2, [pc, #28]	; (800c550 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	605a      	str	r2, [r3, #4]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	721a      	strb	r2, [r3, #8]
    {
    }
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4618      	mov	r0, r3
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	080253e8 	.word	0x080253e8

0800c554 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
    {
 800c55c:	4a04      	ldr	r2, [pc, #16]	; (800c570 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	601a      	str	r2, [r3, #0]
    }
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	080253e8 	.word	0x080253e8

0800c574 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
    }
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ffe9 	bl	800c554 <_ZN8touchgfx10TransitionD1Ev>
 800c582:	210c      	movs	r1, #12
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f016 ffcf 	bl	8023528 <_ZdlPvj>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	bf00      	nop
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	605a      	str	r2, [r3, #4]
    }
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
    {
 800c60c:	4a04      	ldr	r2, [pc, #16]	; (800c620 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	601a      	str	r2, [r3, #0]
    }
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr
 800c620:	080253d0 	.word	0x080253d0

0800c624 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
    }
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff ffe9 	bl	800c604 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c632:	2104      	movs	r1, #4
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f016 ff77 	bl	8023528 <_ZdlPvj>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4618      	mov	r0, r3
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	4608      	mov	r0, r1
 800c64e:	4611      	mov	r1, r2
 800c650:	461a      	mov	r2, r3
 800c652:	4603      	mov	r3, r0
 800c654:	817b      	strh	r3, [r7, #10]
 800c656:	460b      	mov	r3, r1
 800c658:	813b      	strh	r3, [r7, #8]
 800c65a:	4613      	mov	r3, r2
 800c65c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3334      	adds	r3, #52	; 0x34
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c66a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	4798      	blx	r3
        setWidth(width);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3338      	adds	r3, #56	; 0x38
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c67e:	4611      	mov	r1, r2
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	4798      	blx	r3
        setHeight(height);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	333c      	adds	r3, #60	; 0x3c
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c690:	4611      	mov	r1, r2
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	4798      	blx	r3
    }
 800c696:	bf00      	nop
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
	...

0800c6d4 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c6d4:	b480      	push	{r7}
 800c6d6:	af00      	add	r7, sp, #0
    {
        return instance;
 800c6d8:	4b03      	ldr	r3, [pc, #12]	; (800c6e8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c6da:	681b      	ldr	r3, [r3, #0]
    }
 800c6dc:	4618      	mov	r0, r3
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	2002b088 	.word	0x2002b088

0800c6ec <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c6f0:	4b0b      	ldr	r3, [pc, #44]	; (800c720 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d008      	beq.n	800c70e <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c6fc:	4b08      	ldr	r3, [pc, #32]	; (800c720 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c706:	4b06      	ldr	r3, [pc, #24]	; (800c720 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c70c:	e002      	b.n	800c714 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800c70e:	4b04      	ldr	r3, [pc, #16]	; (800c720 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	689b      	ldr	r3, [r3, #8]
        }
    }
 800c714:	4618      	mov	r0, r3
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	2002b088 	.word	0x2002b088

0800c724 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	4a05      	ldr	r2, [pc, #20]	; (800c744 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4618      	mov	r0, r3
 800c736:	f7ff fed7 	bl	800c4e8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	08027954 	.word	0x08027954

0800c748 <_ZN8touchgfx11ApplicationD0Ev>:
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff ffe7 	bl	800c724 <_ZN8touchgfx11ApplicationD1Ev>
 800c756:	f44f 7198 	mov.w	r1, #304	; 0x130
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f016 fee4 	bl	8023528 <_ZdlPvj>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
	...

0800c76c <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4618      	mov	r0, r3
 800c778:	f009 f95e 	bl	8015a38 <_ZN8touchgfx11ApplicationC1Ev>
 800c77c:	4a09      	ldr	r2, [pc, #36]	; (800c7a4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a04      	ldr	r2, [pc, #16]	; (800c7a8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c796:	6013      	str	r3, [r2, #0]
    }
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	08025394 	.word	0x08025394
 800c7a8:	2002b0f4 	.word	0x2002b0f4

0800c7ac <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	4a05      	ldr	r2, [pc, #20]	; (800c7cc <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff ffb1 	bl	800c724 <_ZN8touchgfx11ApplicationD1Ev>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	08025394 	.word	0x08025394

0800c7d0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f7ff ffe7 	bl	800c7ac <_ZN8touchgfx14MVPApplicationD1Ev>
 800c7de:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f016 fea0 	bl	8023528 <_ZdlPvj>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f804 	bl	800c808 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c800:	bf00      	nop
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00f      	beq.n	800c83a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	330c      	adds	r3, #12
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4610      	mov	r0, r2
 800c82e:	4798      	blx	r3
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c836:	2301      	movs	r3, #1
 800c838:	e000      	b.n	800c83c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c83a:	2300      	movs	r3, #0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00e      	beq.n	800c85e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	3308      	adds	r3, #8
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4610      	mov	r0, r2
 800c854:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800c85e:	bf00      	nop
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	60f8      	str	r0, [r7, #12]
 800c86e:	60b9      	str	r1, [r7, #8]
 800c870:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800c872:	f009 f8c1 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 800c876:	4603      	mov	r3, r0
 800c878:	4618      	mov	r0, r3
 800c87a:	f009 f8c3 	bl	8015a04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d008      	beq.n	800c898 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	330c      	adds	r3, #12
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
    }
    if (*currentTrans)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d007      	beq.n	800c8b0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4798      	blx	r3
    }
    if (*currentScreen)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d008      	beq.n	800c8ca <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3314      	adds	r3, #20
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	4798      	blx	r3
    }
    if (*currentPresenter)
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d008      	beq.n	800c8e4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3304      	adds	r3, #4
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	4798      	blx	r3
    }
    if (*currentScreen)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d007      	beq.n	800c8fc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	4798      	blx	r3
    }
    if (*currentPresenter)
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d008      	beq.n	800c916 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3308      	adds	r3, #8
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4610      	mov	r0, r2
 800c914:	4798      	blx	r3
    }
}
 800c916:	bf00      	nop
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	60f8      	str	r0, [r7, #12]
 800c926:	60b9      	str	r1, [r7, #8]
 800c928:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	330c      	adds	r3, #12
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	4798      	blx	r3
    newPresenter->activate();
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68b8      	ldr	r0, [r7, #8]
 800c93e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f00a f908 	bl	8016b58 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	3310      	adds	r3, #16
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	4798      	blx	r3

    Application::getInstance()->draw();
 800c954:	f009 f850 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 800c958:	4602      	mov	r2, r0
 800c95a:	6813      	ldr	r3, [r2, #0]
 800c95c:	3328      	adds	r3, #40	; 0x28
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4610      	mov	r0, r2
 800c962:	4798      	blx	r3
}
 800c964:	bf00      	nop
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	683a      	ldr	r2, [r7, #0]
 800c97a:	601a      	str	r2, [r3, #0]
    }
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	4a08      	ldr	r2, [pc, #32]	; (800c9b4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 fde7 	bl	800d570 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7ff ff01 	bl	800c7ac <_ZN8touchgfx14MVPApplicationD1Ev>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	08025340 	.word	0x08025340

0800c9b8 <_ZN23FrontendApplicationBaseD0Ev>:
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff ffe1 	bl	800c988 <_ZN23FrontendApplicationBaseD1Ev>
 800c9c6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f016 fdac 	bl	8023528 <_ZdlPvj>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
	...

0800c9dc <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7ff fd9e 	bl	800c528 <_ZN8touchgfx10TransitionC1Ev>
 800c9ec:	4a03      	ldr	r2, [pc, #12]	; (800c9fc <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	601a      	str	r2, [r3, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	08025320 	.word	0x08025320

0800ca00 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	4a05      	ldr	r2, [pc, #20]	; (800ca20 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7ff fd9f 	bl	800c554 <_ZN8touchgfx10TransitionD1Ev>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	08025320 	.word	0x08025320

0800ca24 <_ZN8touchgfx12NoTransitionD0Ev>:
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7ff ffe7 	bl	800ca00 <_ZN8touchgfx12NoTransitionD1Ev>
 800ca32:	210c      	movs	r1, #12
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f016 fd77 	bl	8023528 <_ZdlPvj>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	721a      	strb	r2, [r3, #8]
    }
 800ca52:	bf00      	nop
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <_ZN13ModelListener4bindEP5Model>:
    
    virtual ~ModelListener() {}

    virtual void UpdateValue(uint16_t value){}

    void bind(Model* m)
 800ca5e:	b480      	push	{r7}
 800ca60:	b083      	sub	sp, #12
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	605a      	str	r2, [r3, #4]
    }
 800ca6e:	bf00      	nop
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
	...

0800ca7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screenwelcomeanimation_screen/ScreenWelcomeAnimationView.hpp>
#include <gui/screenwelcomeanimation_screen/ScreenWelcomeAnimationPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff fe6e 	bl	800c76c <_ZN8touchgfx14MVPApplicationC1Ev>
 800ca90:	4a13      	ldr	r2, [pc, #76]	; (800cae0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 f92b 	bl	800ccf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800cab2:	f7ff fe0f 	bl	800c6d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800cab6:	4602      	mov	r2, r0
 800cab8:	6813      	ldr	r3, [r2, #0]
 800caba:	3308      	adds	r3, #8
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2101      	movs	r1, #1
 800cac0:	4610      	mov	r0, r2
 800cac2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800cac4:	2000      	movs	r0, #0
 800cac6:	f003 fb6d 	bl	80101a4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800caca:	f7ff fe0f 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 800cace:	4603      	mov	r3, r0
 800cad0:	4618      	mov	r0, r3
 800cad2:	f00f fcc4 	bl	801c45e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	08025340 	.word	0x08025340

0800cae4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4618      	mov	r0, r3
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	683a      	ldr	r2, [r7, #0]
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7ff ffe9 	bl	800cae4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	605a      	str	r2, [r3, #4]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	3308      	adds	r3, #8
 800cb20:	3208      	adds	r2, #8
 800cb22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb26:	e883 0003 	stmia.w	r3, {r0, r1}
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 */

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 800cb34:	b590      	push	{r4, r7, lr}
 800cb36:	b089      	sub	sp, #36	; 0x24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800cb42:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x50>)
 800cb44:	61bb      	str	r3, [r7, #24]
 800cb46:	2300      	movs	r3, #0
 800cb48:	61fb      	str	r3, [r7, #28]
 800cb4a:	f107 0008 	add.w	r0, r7, #8
 800cb4e:	f107 0318 	add.w	r3, r7, #24
 800cb52:	cb0c      	ldmia	r3, {r2, r3}
 800cb54:	6879      	ldr	r1, [r7, #4]
 800cb56:	f000 f8eb 	bl	800cd30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cb5a:	f107 0308 	add.w	r3, r7, #8
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4620      	mov	r0, r4
 800cb62:	f7ff ffcb 	bl	800cafc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cb66:	f107 0308 	add.w	r3, r7, #8
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 fd00 	bl	800d570 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800cb7c:	bf00      	nop
 800cb7e:	3724      	adds	r7, #36	; 0x24
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd90      	pop	{r4, r7, pc}
 800cb84:	0800cb89 	.word	0x0800cb89

0800cb88 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af02      	add	r7, sp, #8
 800cb8e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	4b04      	ldr	r3, [pc, #16]	; (800cbb8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x30>)
 800cba8:	4804      	ldr	r0, [pc, #16]	; (800cbbc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x34>)
 800cbaa:	f000 f8e1 	bl	800cd70 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cbae:	bf00      	nop
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	2002b0e8 	.word	0x2002b0e8
 800cbbc:	2002b0e4 	.word	0x2002b0e4

0800cbc0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEast()
{
 800cbc0:	b590      	push	{r4, r7, lr}
 800cbc2:	b089      	sub	sp, #36	; 0x24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800cbce:	4b10      	ldr	r3, [pc, #64]	; (800cc10 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x50>)
 800cbd0:	61bb      	str	r3, [r7, #24]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	61fb      	str	r3, [r7, #28]
 800cbd6:	f107 0008 	add.w	r0, r7, #8
 800cbda:	f107 0318 	add.w	r3, r7, #24
 800cbde:	cb0c      	ldmia	r3, {r2, r3}
 800cbe0:	6879      	ldr	r1, [r7, #4]
 800cbe2:	f000 f8a5 	bl	800cd30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cbe6:	f107 0308 	add.w	r3, r7, #8
 800cbea:	4619      	mov	r1, r3
 800cbec:	4620      	mov	r0, r4
 800cbee:	f7ff ff85 	bl	800cafc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fcba 	bl	800d570 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800cc08:	bf00      	nop
 800cc0a:	3724      	adds	r7, #36	; 0x24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd90      	pop	{r4, r7, pc}
 800cc10:	0800cc15 	.word	0x0800cc15

0800cc14 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af02      	add	r7, sp, #8
 800cc1a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800cc28:	461a      	mov	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x30>)
 800cc34:	4804      	ldr	r0, [pc, #16]	; (800cc48 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x34>)
 800cc36:	f000 f955 	bl	800cee4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cc3a:	bf00      	nop
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	2002b0e8 	.word	0x2002b0e8
 800cc48:	2002b0e4 	.word	0x2002b0e4

0800cc4c <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
{
 800cc4c:	b590      	push	{r4, r7, lr}
 800cc4e:	b089      	sub	sp, #36	; 0x24
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionEastImpl);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800cc5a:	4b10      	ldr	r3, [pc, #64]	; (800cc9c <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv+0x50>)
 800cc5c:	61bb      	str	r3, [r7, #24]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	61fb      	str	r3, [r7, #28]
 800cc62:	f107 0008 	add.w	r0, r7, #8
 800cc66:	f107 0318 	add.w	r3, r7, #24
 800cc6a:	cb0c      	ldmia	r3, {r2, r3}
 800cc6c:	6879      	ldr	r1, [r7, #4]
 800cc6e:	f000 f85f 	bl	800cd30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cc72:	f107 0308 	add.w	r3, r7, #8
 800cc76:	4619      	mov	r1, r3
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f7ff ff3f 	bl	800cafc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cc7e:	f107 0308 	add.w	r3, r7, #8
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 fc74 	bl	800d570 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800cc94:	bf00      	nop
 800cc96:	3724      	adds	r7, #36	; 0x24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd90      	pop	{r4, r7, pc}
 800cc9c:	0800cca1 	.word	0x0800cca1

0800cca0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	4b04      	ldr	r3, [pc, #16]	; (800ccd0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x30>)
 800ccc0:	4804      	ldr	r0, [pc, #16]	; (800ccd4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x34>)
 800ccc2:	f000 f9cb 	bl	800d05c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	2002b0e8 	.word	0x2002b0e8
 800ccd4:	2002b0e4 	.word	0x2002b0e4

0800ccd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	4a04      	ldr	r2, [pc, #16]	; (800ccf4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4618      	mov	r0, r3
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	080253d0 	.word	0x080253d0

0800ccf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff ffe8 	bl	800ccd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cd08:	4a08      	ldr	r2, [pc, #32]	; (800cd2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	601a      	str	r2, [r3, #0]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	605a      	str	r2, [r3, #4]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	609a      	str	r2, [r3, #8]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	60da      	str	r2, [r3, #12]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0802537c 	.word	0x0802537c

0800cd30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff ffc8 	bl	800ccd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cd48:	4a08      	ldr	r2, [pc, #32]	; (800cd6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	3308      	adds	r3, #8
 800cd58:	463a      	mov	r2, r7
 800cd5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd5e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	0802537c 	.word	0x0802537c

0800cd70 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cd70:	b590      	push	{r4, r7, lr}
 800cd72:	b089      	sub	sp, #36	; 0x24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	689a      	ldr	r2, [r3, #8]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3320      	adds	r3, #32
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	4798      	blx	r3
 800cd90:	4603      	mov	r3, r0
 800cd92:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 800cd96:	d205      	bcs.n	800cda4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800cd98:	4b4d      	ldr	r3, [pc, #308]	; (800ced0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800cd9a:	4a4e      	ldr	r2, [pc, #312]	; (800ced4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800cd9c:	21c2      	movs	r1, #194	; 0xc2
 800cd9e:	484e      	ldr	r0, [pc, #312]	; (800ced8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800cda0:	f016 fbee 	bl	8023580 <__assert_func>
 800cda4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	685a      	ldr	r2, [r3, #4]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3320      	adds	r3, #32
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4798      	blx	r3
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b0f      	cmp	r3, #15
 800cdbc:	d805      	bhi.n	800cdca <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800cdbe:	4b47      	ldr	r3, [pc, #284]	; (800cedc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800cdc0:	4a44      	ldr	r2, [pc, #272]	; (800ced4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800cdc2:	21c3      	movs	r1, #195	; 0xc3
 800cdc4:	4844      	ldr	r0, [pc, #272]	; (800ced8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800cdc6:	f016 fbdb 	bl	8023580 <__assert_func>
 800cdca:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68da      	ldr	r2, [r3, #12]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3320      	adds	r3, #32
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4610      	mov	r0, r2
 800cddc:	4798      	blx	r3
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b0b      	cmp	r3, #11
 800cde2:	d805      	bhi.n	800cdf0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800cde4:	4b3e      	ldr	r3, [pc, #248]	; (800cee0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800cde6:	4a3b      	ldr	r2, [pc, #236]	; (800ced4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800cde8:	21c4      	movs	r1, #196	; 0xc4
 800cdea:	483b      	ldr	r0, [pc, #236]	; (800ced8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800cdec:	f016 fbc8 	bl	8023580 <__assert_func>
 800cdf0:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	68b9      	ldr	r1, [r7, #8]
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f7ff fd35 	bl	800c866 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	2100      	movs	r1, #0
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 f9e6 	bl	800d1d4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	200c      	movs	r0, #12
 800ce0e:	f7ff fb1d 	bl	800c44c <_ZnwjPv>
 800ce12:	4604      	mov	r4, r0
 800ce14:	2c00      	cmp	r4, #0
 800ce16:	d004      	beq.n	800ce22 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f7ff fddf 	bl	800c9dc <_ZN8touchgfx12NoTransitionC1Ev>
 800ce1e:	4623      	mov	r3, r4
 800ce20:	e000      	b.n	800ce24 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800ce22:	4623      	mov	r3, r4
 800ce24:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 f9e4 	bl	800d1fa <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800ce32:	4603      	mov	r3, r0
 800ce34:	4619      	mov	r1, r3
 800ce36:	f44f 7017 	mov.w	r0, #604	; 0x25c
 800ce3a:	f7ff fb07 	bl	800c44c <_ZnwjPv>
 800ce3e:	4604      	mov	r4, r0
 800ce40:	2c00      	cmp	r4, #0
 800ce42:	d004      	beq.n	800ce4e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800ce44:	4620      	mov	r0, r4
 800ce46:	f003 fe69 	bl	8010b1c <_ZN11Screen2ViewC1Ev>
 800ce4a:	4623      	mov	r3, r4
 800ce4c:	e000      	b.n	800ce50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800ce4e:	4623      	mov	r3, r4
 800ce50:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	2100      	movs	r1, #0
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 f9e1 	bl	800d220 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	4619      	mov	r1, r3
 800ce62:	2010      	movs	r0, #16
 800ce64:	f7ff faf2 	bl	800c44c <_ZnwjPv>
 800ce68:	4604      	mov	r4, r0
 800ce6a:	2c00      	cmp	r4, #0
 800ce6c:	d005      	beq.n	800ce7a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800ce6e:	69b9      	ldr	r1, [r7, #24]
 800ce70:	4620      	mov	r0, r4
 800ce72:	f003 fdfb 	bl	8010a6c <_ZN16Screen2PresenterC1ER11Screen2View>
 800ce76:	4623      	mov	r3, r4
 800ce78:	e000      	b.n	800ce7c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800ce7a:	4623      	mov	r3, r4
 800ce7c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	69fa      	ldr	r2, [r7, #28]
 800ce82:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	697a      	ldr	r2, [r7, #20]
 800ce88:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	69ba      	ldr	r2, [r7, #24]
 800ce8e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d002      	beq.n	800ce9c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	e000      	b.n	800ce9e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea2:	f7ff fd63 	bl	800c96c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7ff fdd6 	bl	800ca5e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	6979      	ldr	r1, [r7, #20]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 f9c5 	bl	800d246 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800cebc:	69fa      	ldr	r2, [r7, #28]
 800cebe:	6979      	ldr	r1, [r7, #20]
 800cec0:	69b8      	ldr	r0, [r7, #24]
 800cec2:	f7ff fd2c 	bl	800c91e <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800cec6:	697b      	ldr	r3, [r7, #20]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3724      	adds	r7, #36	; 0x24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}
 800ced0:	08024b18 	.word	0x08024b18
 800ced4:	08025428 	.word	0x08025428
 800ced8:	08024ba8 	.word	0x08024ba8
 800cedc:	08024bec 	.word	0x08024bec
 800cee0:	08024c90 	.word	0x08024c90

0800cee4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cee4:	b590      	push	{r4, r7, lr}
 800cee6:	b089      	sub	sp, #36	; 0x24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	689a      	ldr	r2, [r3, #8]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	3320      	adds	r3, #32
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4610      	mov	r0, r2
 800cf02:	4798      	blx	r3
 800cf04:	4603      	mov	r3, r0
 800cf06:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 800cf0a:	d205      	bcs.n	800cf18 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800cf0c:	4b4e      	ldr	r3, [pc, #312]	; (800d048 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800cf0e:	4a4f      	ldr	r2, [pc, #316]	; (800d04c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800cf10:	21c2      	movs	r1, #194	; 0xc2
 800cf12:	484f      	ldr	r0, [pc, #316]	; (800d050 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800cf14:	f016 fb34 	bl	8023580 <__assert_func>
 800cf18:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	3320      	adds	r3, #32
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4610      	mov	r0, r2
 800cf2a:	4798      	blx	r3
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b0f      	cmp	r3, #15
 800cf30:	d805      	bhi.n	800cf3e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800cf32:	4b48      	ldr	r3, [pc, #288]	; (800d054 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800cf34:	4a45      	ldr	r2, [pc, #276]	; (800d04c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800cf36:	21c3      	movs	r1, #195	; 0xc3
 800cf38:	4845      	ldr	r0, [pc, #276]	; (800d050 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800cf3a:	f016 fb21 	bl	8023580 <__assert_func>
 800cf3e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	68da      	ldr	r2, [r3, #12]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	3320      	adds	r3, #32
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4610      	mov	r0, r2
 800cf50:	4798      	blx	r3
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b53      	cmp	r3, #83	; 0x53
 800cf56:	d805      	bhi.n	800cf64 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800cf58:	4b3f      	ldr	r3, [pc, #252]	; (800d058 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800cf5a:	4a3c      	ldr	r2, [pc, #240]	; (800d04c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800cf5c:	21c4      	movs	r1, #196	; 0xc4
 800cf5e:	483c      	ldr	r0, [pc, #240]	; (800d050 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800cf60:	f016 fb0e 	bl	8023580 <__assert_func>
 800cf64:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	68b9      	ldr	r1, [r7, #8]
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7ff fc7b 	bl	800c866 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	2100      	movs	r1, #0
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 f973 	bl	800d262 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	4619      	mov	r1, r3
 800cf80:	2054      	movs	r0, #84	; 0x54
 800cf82:	f7ff fa63 	bl	800c44c <_ZnwjPv>
 800cf86:	4604      	mov	r4, r0
 800cf88:	2c00      	cmp	r4, #0
 800cf8a:	d005      	beq.n	800cf98 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800cf8c:	2114      	movs	r1, #20
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f000 f99c 	bl	800d2cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800cf94:	4623      	mov	r3, r4
 800cf96:	e000      	b.n	800cf9a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800cf98:	4623      	mov	r3, r4
 800cf9a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f000 f929 	bl	800d1fa <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	4619      	mov	r1, r3
 800cfac:	f44f 7017 	mov.w	r0, #604	; 0x25c
 800cfb0:	f7ff fa4c 	bl	800c44c <_ZnwjPv>
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	2c00      	cmp	r4, #0
 800cfb8:	d004      	beq.n	800cfc4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f003 fdae 	bl	8010b1c <_ZN11Screen2ViewC1Ev>
 800cfc0:	4623      	mov	r3, r4
 800cfc2:	e000      	b.n	800cfc6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800cfc4:	4623      	mov	r3, r4
 800cfc6:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 f926 	bl	800d220 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	2010      	movs	r0, #16
 800cfda:	f7ff fa37 	bl	800c44c <_ZnwjPv>
 800cfde:	4604      	mov	r4, r0
 800cfe0:	2c00      	cmp	r4, #0
 800cfe2:	d005      	beq.n	800cff0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800cfe4:	69b9      	ldr	r1, [r7, #24]
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f003 fd40 	bl	8010a6c <_ZN16Screen2PresenterC1ER11Screen2View>
 800cfec:	4623      	mov	r3, r4
 800cfee:	e000      	b.n	800cff2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800cff0:	4623      	mov	r3, r4
 800cff2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	69fa      	ldr	r2, [r7, #28]
 800cff8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	69ba      	ldr	r2, [r7, #24]
 800d004:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	3304      	adds	r3, #4
 800d010:	e000      	b.n	800d014 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800d012:	2300      	movs	r3, #0
 800d014:	4619      	mov	r1, r3
 800d016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d018:	f7ff fca8 	bl	800c96c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	3304      	adds	r3, #4
 800d020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d022:	4618      	mov	r0, r3
 800d024:	f7ff fd1b 	bl	800ca5e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	6979      	ldr	r1, [r7, #20]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f000 f90a 	bl	800d246 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800d032:	69fa      	ldr	r2, [r7, #28]
 800d034:	6979      	ldr	r1, [r7, #20]
 800d036:	69b8      	ldr	r0, [r7, #24]
 800d038:	f7ff fc71 	bl	800c91e <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800d03c:	697b      	ldr	r3, [r7, #20]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3724      	adds	r7, #36	; 0x24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd90      	pop	{r4, r7, pc}
 800d046:	bf00      	nop
 800d048:	08024b18 	.word	0x08024b18
 800d04c:	0802552c 	.word	0x0802552c
 800d050:	08024ba8 	.word	0x08024ba8
 800d054:	08024bec 	.word	0x08024bec
 800d058:	08024c90 	.word	0x08024c90

0800d05c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d05c:	b590      	push	{r4, r7, lr}
 800d05e:	b089      	sub	sp, #36	; 0x24
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
 800d068:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	689a      	ldr	r2, [r3, #8]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3320      	adds	r3, #32
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4610      	mov	r0, r2
 800d07a:	4798      	blx	r3
 800d07c:	4603      	mov	r3, r0
 800d07e:	f5b3 6fc9 	cmp.w	r3, #1608	; 0x648
 800d082:	d205      	bcs.n	800d090 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d084:	4b4e      	ldr	r3, [pc, #312]	; (800d1c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800d086:	4a4f      	ldr	r2, [pc, #316]	; (800d1c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800d088:	21c2      	movs	r1, #194	; 0xc2
 800d08a:	484f      	ldr	r0, [pc, #316]	; (800d1c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800d08c:	f016 fa78 	bl	8023580 <__assert_func>
 800d090:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3320      	adds	r3, #32
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	4798      	blx	r3
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b0f      	cmp	r3, #15
 800d0a8:	d805      	bhi.n	800d0b6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d0aa:	4b48      	ldr	r3, [pc, #288]	; (800d1cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800d0ac:	4a45      	ldr	r2, [pc, #276]	; (800d1c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800d0ae:	21c3      	movs	r1, #195	; 0xc3
 800d0b0:	4845      	ldr	r0, [pc, #276]	; (800d1c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800d0b2:	f016 fa65 	bl	8023580 <__assert_func>
 800d0b6:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	68da      	ldr	r2, [r3, #12]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3320      	adds	r3, #32
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4610      	mov	r0, r2
 800d0c8:	4798      	blx	r3
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b53      	cmp	r3, #83	; 0x53
 800d0ce:	d805      	bhi.n	800d0dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d0d0:	4b3f      	ldr	r3, [pc, #252]	; (800d1d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800d0d2:	4a3c      	ldr	r2, [pc, #240]	; (800d1c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800d0d4:	21c4      	movs	r1, #196	; 0xc4
 800d0d6:	483c      	ldr	r0, [pc, #240]	; (800d1c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800d0d8:	f016 fa52 	bl	8023580 <__assert_func>
 800d0dc:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	68b9      	ldr	r1, [r7, #8]
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7ff fbbf 	bl	800c866 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 f8b7 	bl	800d262 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	2054      	movs	r0, #84	; 0x54
 800d0fa:	f7ff f9a7 	bl	800c44c <_ZnwjPv>
 800d0fe:	4604      	mov	r4, r0
 800d100:	2c00      	cmp	r4, #0
 800d102:	d005      	beq.n	800d110 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800d104:	2114      	movs	r1, #20
 800d106:	4620      	mov	r0, r4
 800d108:	f000 f8e0 	bl	800d2cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800d10c:	4623      	mov	r3, r4
 800d10e:	e000      	b.n	800d112 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800d110:	4623      	mov	r3, r4
 800d112:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	2100      	movs	r1, #0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 f96a 	bl	800d3f4 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800d120:	4603      	mov	r3, r0
 800d122:	4619      	mov	r1, r3
 800d124:	f44f 60c9 	mov.w	r0, #1608	; 0x648
 800d128:	f7ff f990 	bl	800c44c <_ZnwjPv>
 800d12c:	4604      	mov	r4, r0
 800d12e:	2c00      	cmp	r4, #0
 800d130:	d004      	beq.n	800d13c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800d132:	4620      	mov	r0, r4
 800d134:	f003 fab4 	bl	80106a0 <_ZN11Screen1ViewC1Ev>
 800d138:	4623      	mov	r3, r4
 800d13a:	e000      	b.n	800d13e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800d13c:	4623      	mov	r3, r4
 800d13e:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	2100      	movs	r1, #0
 800d146:	4618      	mov	r0, r3
 800d148:	f000 f967 	bl	800d41a <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800d14c:	4603      	mov	r3, r0
 800d14e:	4619      	mov	r1, r3
 800d150:	2010      	movs	r0, #16
 800d152:	f7ff f97b 	bl	800c44c <_ZnwjPv>
 800d156:	4604      	mov	r4, r0
 800d158:	2c00      	cmp	r4, #0
 800d15a:	d005      	beq.n	800d168 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800d15c:	69b9      	ldr	r1, [r7, #24]
 800d15e:	4620      	mov	r0, r4
 800d160:	f003 fa2e 	bl	80105c0 <_ZN16Screen1PresenterC1ER11Screen1View>
 800d164:	4623      	mov	r3, r4
 800d166:	e000      	b.n	800d16a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800d168:	4623      	mov	r3, r4
 800d16a:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	69fa      	ldr	r2, [r7, #28]
 800d170:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	69ba      	ldr	r2, [r7, #24]
 800d17c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	3304      	adds	r3, #4
 800d188:	e000      	b.n	800d18c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800d18a:	2300      	movs	r3, #0
 800d18c:	4619      	mov	r1, r3
 800d18e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d190:	f7ff fbec 	bl	800c96c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	3304      	adds	r3, #4
 800d198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7ff fc5f 	bl	800ca5e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	6979      	ldr	r1, [r7, #20]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f000 f94b 	bl	800d440 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800d1aa:	69fa      	ldr	r2, [r7, #28]
 800d1ac:	6979      	ldr	r1, [r7, #20]
 800d1ae:	69b8      	ldr	r0, [r7, #24]
 800d1b0:	f7ff fbb5 	bl	800c91e <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800d1b4:	697b      	ldr	r3, [r7, #20]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3724      	adds	r7, #36	; 0x24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd90      	pop	{r4, r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	08024b18 	.word	0x08024b18
 800d1c4:	0802564c 	.word	0x0802564c
 800d1c8:	08024ba8 	.word	0x08024ba8
 800d1cc:	08024bec 	.word	0x08024bec
 800d1d0:	08024c90 	.word	0x08024c90

0800d1d4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3324      	adds	r3, #36	; 0x24
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	887a      	ldrh	r2, [r7, #2]
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	4798      	blx	r3
 800d1f0:	4603      	mov	r3, r0
    }
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b082      	sub	sp, #8
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3324      	adds	r3, #36	; 0x24
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	887a      	ldrh	r2, [r7, #2]
 800d210:	4611      	mov	r1, r2
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	4798      	blx	r3
 800d216:	4603      	mov	r3, r0
    }
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	460b      	mov	r3, r1
 800d22a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	3324      	adds	r3, #36	; 0x24
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	887a      	ldrh	r2, [r7, #2]
 800d236:	4611      	mov	r1, r2
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	4798      	blx	r3
 800d23c:	4603      	mov	r3, r0
    }
 800d23e:	4618      	mov	r0, r3
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800d246:	b480      	push	{r7}
 800d248:	b083      	sub	sp, #12
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
 800d24e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800d262:	b580      	push	{r7, lr}
 800d264:	b082      	sub	sp, #8
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	460b      	mov	r3, r1
 800d26c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3324      	adds	r3, #36	; 0x24
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	887a      	ldrh	r2, [r7, #2]
 800d278:	4611      	mov	r1, r2
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	4798      	blx	r3
 800d27e:	4603      	mov	r3, r0
    }
 800d280:	4618      	mov	r0, r3
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	4a05      	ldr	r2, [pc, #20]	; (800d2a8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	601a      	str	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 f949 	bl	800d530 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	080252f0 	.word	0x080252f0

0800d2ac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7ff ffe7 	bl	800d288 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800d2ba:	2110      	movs	r1, #16
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f016 f933 	bl	8023528 <_ZdlPvj>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800d2cc:	b590      	push	{r4, r7, lr}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	af02      	add	r7, sp, #8
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7ff f924 	bl	800c528 <_ZN8touchgfx10TransitionC1Ev>
 800d2e0:	4a3f      	ldr	r2, [pc, #252]	; (800d3e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	330c      	adds	r3, #12
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f006 ff84 	bl	80141f8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f103 020c 	add.w	r2, r3, #12
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	639a      	str	r2, [r3, #56]	; 0x38
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800d300:	4a38      	ldr	r2, [pc, #224]	; (800d3e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800d302:	f107 0308 	add.w	r3, r7, #8
 800d306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d30a:	e883 0003 	stmia.w	r3, {r0, r1}
 800d30e:	f107 0308 	add.w	r3, r7, #8
 800d312:	cb0c      	ldmia	r3, {r2, r3}
 800d314:	6879      	ldr	r1, [r7, #4]
 800d316:	4620      	mov	r0, r4
 800d318:	f000 f8ea 	bl	800d4f0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2202      	movs	r2, #2
 800d320:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	78fa      	ldrb	r2, [r7, #3]
 800d328:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800d33c:	4b2a      	ldr	r3, [pc, #168]	; (800d3e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d047      	beq.n	800d3d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f103 000c 	add.w	r0, r3, #12
 800d34a:	4b28      	ldr	r3, [pc, #160]	; (800d3ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800d34c:	881b      	ldrh	r3, [r3, #0]
 800d34e:	b21a      	sxth	r2, r3
 800d350:	4b27      	ldr	r3, [pc, #156]	; (800d3f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	b21b      	sxth	r3, r3
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	4613      	mov	r3, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	2100      	movs	r1, #0
 800d35e:	f7ff f971 	bl	800c644 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	330c      	adds	r3, #12
 800d366:	4618      	mov	r0, r3
 800d368:	f006 fec3 	bl	80140f2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d372:	2b03      	cmp	r3, #3
 800d374:	d82a      	bhi.n	800d3cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800d376:	a201      	add	r2, pc, #4	; (adr r2, 800d37c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800d378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37c:	0800d3ad 	.word	0x0800d3ad
 800d380:	0800d3bb 	.word	0x0800d3bb
 800d384:	0800d38d 	.word	0x0800d38d
 800d388:	0800d39f 	.word	0x0800d39f
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800d38c:	4b17      	ldr	r3, [pc, #92]	; (800d3ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	425b      	negs	r3, r3
 800d392:	b29b      	uxth	r3, r3
 800d394:	b21a      	sxth	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d39c:	e01a      	b.n	800d3d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800d39e:	4b13      	ldr	r3, [pc, #76]	; (800d3ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	b21a      	sxth	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d3aa:	e013      	b.n	800d3d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800d3ac:	4b10      	ldr	r3, [pc, #64]	; (800d3f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	b21a      	sxth	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d3b8:	e00c      	b.n	800d3d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800d3ba:	4b0d      	ldr	r3, [pc, #52]	; (800d3f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	425b      	negs	r3, r3
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	b21a      	sxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800d3ca:	e003      	b.n	800d3d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800d3d2:	bf00      	nop
            }
        }
    }
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd90      	pop	{r4, r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	080252c8 	.word	0x080252c8
 800d3e4:	08024d34 	.word	0x08024d34
 800d3e8:	2002b087 	.word	0x2002b087
 800d3ec:	2002b07c 	.word	0x2002b07c
 800d3f0:	2002b07e 	.word	0x2002b07e

0800d3f4 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	3324      	adds	r3, #36	; 0x24
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	887a      	ldrh	r2, [r7, #2]
 800d40a:	4611      	mov	r1, r2
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	4798      	blx	r3
 800d410:	4603      	mov	r3, r0
    }
 800d412:	4618      	mov	r0, r3
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b082      	sub	sp, #8
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	460b      	mov	r3, r1
 800d424:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	3324      	adds	r3, #36	; 0x24
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	887a      	ldrh	r2, [r7, #2]
 800d430:	4611      	mov	r1, r2
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	4798      	blx	r3
 800d436:	4603      	mov	r3, r0
    }
 800d438:	4618      	mov	r0, r3
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	683a      	ldr	r2, [r7, #0]
 800d44e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d02a      	beq.n	800d4c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d476:	2b03      	cmp	r3, #3
 800d478:	d820      	bhi.n	800d4bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800d47a:	a201      	add	r2, pc, #4	; (adr r2, 800d480 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800d47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d480:	0800d4a7 	.word	0x0800d4a7
 800d484:	0800d4a7 	.word	0x0800d4a7
 800d488:	0800d491 	.word	0x0800d491
 800d48c:	0800d491 	.word	0x0800d491
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	3354      	adds	r3, #84	; 0x54
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800d49e:	2200      	movs	r2, #0
 800d4a0:	6838      	ldr	r0, [r7, #0]
 800d4a2:	4798      	blx	r3
            break;
 800d4a4:	e010      	b.n	800d4c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3354      	adds	r3, #84	; 0x54
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	6838      	ldr	r0, [r7, #0]
 800d4b8:	4798      	blx	r3
            break;
 800d4ba:	e005      	b.n	800d4c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	721a      	strb	r2, [r3, #8]
            break;
 800d4c2:	bf00      	nop
 800d4c4:	e000      	b.n	800d4c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800d4c6:	bf00      	nop
        }
    }
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop

0800d4d0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	4a04      	ldr	r2, [pc, #16]	; (800d4ec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	08025308 	.word	0x08025308

0800d4f0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4639      	mov	r1, r7
 800d4fc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff ffe4 	bl	800d4d0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800d508:	4a08      	ldr	r2, [pc, #32]	; (800d52c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	3308      	adds	r3, #8
 800d518:	463a      	mov	r2, r7
 800d51a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d51e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	4618      	mov	r0, r3
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	080252f0 	.word	0x080252f0

0800d530 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
    }
 800d538:	4a04      	ldr	r2, [pc, #16]	; (800d54c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	08025308 	.word	0x08025308

0800d550 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
    }
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff ffe9 	bl	800d530 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800d55e:	2104      	movs	r1, #4
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f015 ffe1 	bl	8023528 <_ZdlPvj>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4618      	mov	r0, r3
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	4a05      	ldr	r2, [pc, #20]	; (800d590 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4618      	mov	r0, r3
 800d582:	f7ff f83f 	bl	800c604 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	0802537c 	.word	0x0802537c

0800d594 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff ffe7 	bl	800d570 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d5a2:	2110      	movs	r1, #16
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f015 ffbf 	bl	8023528 <_ZdlPvj>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
    }
 800d5bc:	4a0a      	ldr	r2, [pc, #40]	; (800d5e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	333c      	adds	r3, #60	; 0x3c
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7ff fe5e 	bl	800d288 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	330c      	adds	r3, #12
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f006 fd8d 	bl	80140f0 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fe ffbb 	bl	800c554 <_ZN8touchgfx10TransitionD1Ev>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	080252c8 	.word	0x080252c8

0800d5ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
    }
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7ff ffdd 	bl	800d5b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800d5fa:	2154      	movs	r1, #84	; 0x54
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f015 ff93 	bl	8023528 <_ZdlPvj>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4618      	mov	r0, r3
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800d614:	4b59      	ldr	r3, [pc, #356]	; (800d77c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	f083 0301 	eor.w	r3, r3, #1
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2201      	movs	r2, #1
 800d626:	721a      	strb	r2, [r3, #8]
            return;
 800d628:	e0a5      	b.n	800d776 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe ffb1 	bl	800c594 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d638:	3301      	adds	r3, #1
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d64e:	429a      	cmp	r2, r3
 800d650:	d82f      	bhi.n	800d6b2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d658:	b298      	uxth	r0, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d666:	b29b      	uxth	r3, r3
 800d668:	2100      	movs	r1, #0
 800d66a:	f009 fa8c 	bl	8016b86 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800d66e:	4603      	mov	r3, r0
 800d670:	461a      	mov	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800d67e:	b29b      	uxth	r3, r3
 800d680:	f003 0301 	and.w	r3, r3, #1
 800d684:	b29b      	uxth	r3, r3
 800d686:	2b00      	cmp	r3, #0
 800d688:	d01b      	beq.n	800d6c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800d690:	b29b      	uxth	r3, r3
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800d698:	2a00      	cmp	r2, #0
 800d69a:	dd01      	ble.n	800d6a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800d69c:	2201      	movs	r2, #1
 800d69e:	e001      	b.n	800d6a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800d6a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6a4:	4413      	add	r3, r2
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	b21a      	sxth	r2, r3
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800d6b0:	e007      	b.n	800d6c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800d6c0:	e059      	b.n	800d776 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d845      	bhi.n	800d758 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800d6cc:	a201      	add	r2, pc, #4	; (adr r2, 800d6d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800d6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d2:	bf00      	nop
 800d6d4:	0800d71f 	.word	0x0800d71f
 800d6d8:	0800d71f 	.word	0x0800d71f
 800d6dc:	0800d6e5 	.word	0x0800d6e5
 800d6e0:	0800d6e5 	.word	0x0800d6e5
            calculatedValue -= snapshot.getX();
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	330c      	adds	r3, #12
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fe ffd8 	bl	800c69e <_ZNK8touchgfx8Drawable4getXEv>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	b28b      	uxth	r3, r1
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	b21a      	sxth	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f103 000c 	add.w	r0, r3, #12
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800d714:	2200      	movs	r2, #0
 800d716:	4619      	mov	r1, r3
 800d718:	f008 fdc8 	bl	80162ac <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800d71c:	e020      	b.n	800d760 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	330c      	adds	r3, #12
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe ffc8 	bl	800c6b8 <_ZNK8touchgfx8Drawable4getYEv>
 800d728:	4603      	mov	r3, r0
 800d72a:	4619      	mov	r1, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800d732:	b29a      	uxth	r2, r3
 800d734:	b28b      	uxth	r3, r1
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	b29b      	uxth	r3, r3
 800d73a:	b21a      	sxth	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f103 000c 	add.w	r0, r3, #12
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800d74e:	461a      	mov	r2, r3
 800d750:	2100      	movs	r1, #0
 800d752:	f008 fdab 	bl	80162ac <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800d756:	e003      	b.n	800d760 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	721a      	strb	r2, [r3, #8]
            break;
 800d75e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6858      	ldr	r0, [r3, #4]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	3378      	adds	r3, #120	; 0x78
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	323c      	adds	r2, #60	; 0x3c
 800d772:	4611      	mov	r1, r2
 800d774:	4798      	blx	r3
    }
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	2002b087 	.word	0x2002b087

0800d780 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800d788:	4b0b      	ldr	r3, [pc, #44]	; (800d7b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00e      	beq.n	800d7ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00a      	beq.n	800d7ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6858      	ldr	r0, [r3, #4]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3364      	adds	r3, #100	; 0x64
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	320c      	adds	r2, #12
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	4798      	blx	r3
    }
 800d7ae:	bf00      	nop
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	2002b087 	.word	0x2002b087

0800d7bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800d7c4:	4b1a      	ldr	r3, [pc, #104]	; (800d830 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d02d      	beq.n	800d828 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe fef4 	bl	800c5bc <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800d7d4:	4a17      	ldr	r2, [pc, #92]	; (800d834 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800d7d6:	f107 0318 	add.w	r3, r7, #24
 800d7da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7de:	e883 0003 	stmia.w	r3, {r0, r1}
 800d7e2:	f107 0008 	add.w	r0, r7, #8
 800d7e6:	f107 0318 	add.w	r3, r7, #24
 800d7ea:	cb0c      	ldmia	r3, {r2, r3}
 800d7ec:	6879      	ldr	r1, [r7, #4]
 800d7ee:	f7ff fe7f 	bl	800d4f0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	685a      	ldr	r2, [r3, #4]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3378      	adds	r3, #120	; 0x78
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f107 0108 	add.w	r1, r7, #8
 800d804:	4610      	mov	r0, r2
 800d806:	4798      	blx	r3
            screenContainer->add(snapshot);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6858      	ldr	r0, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3360      	adds	r3, #96	; 0x60
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	320c      	adds	r2, #12
 800d81a:	4611      	mov	r1, r2
 800d81c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800d81e:	f107 0308 	add.w	r3, r7, #8
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff fd30 	bl	800d288 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800d828:	bf00      	nop
 800d82a:	3720      	adds	r7, #32
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	2002b087 	.word	0x2002b087
 800d834:	08024d3c 	.word	0x08024d3c

0800d838 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
        switch (direction)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d83b      	bhi.n	800d8c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800d84c:	a201      	add	r2, pc, #4	; (adr r2, 800d854 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800d84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d852:	bf00      	nop
 800d854:	0800d895 	.word	0x0800d895
 800d858:	0800d8af 	.word	0x0800d8af
 800d85c:	0800d865 	.word	0x0800d865
 800d860:	0800d87b 	.word	0x0800d87b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	3354      	adds	r3, #84	; 0x54
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a18      	ldr	r2, [pc, #96]	; (800d8d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800d86e:	8812      	ldrh	r2, [r2, #0]
 800d870:	b211      	sxth	r1, r2
 800d872:	2200      	movs	r2, #0
 800d874:	6838      	ldr	r0, [r7, #0]
 800d876:	4798      	blx	r3
            break;
 800d878:	e025      	b.n	800d8c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	3354      	adds	r3, #84	; 0x54
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a13      	ldr	r2, [pc, #76]	; (800d8d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800d884:	8812      	ldrh	r2, [r2, #0]
 800d886:	4252      	negs	r2, r2
 800d888:	b292      	uxth	r2, r2
 800d88a:	b211      	sxth	r1, r2
 800d88c:	2200      	movs	r2, #0
 800d88e:	6838      	ldr	r0, [r7, #0]
 800d890:	4798      	blx	r3
            break;
 800d892:	e018      	b.n	800d8c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	3354      	adds	r3, #84	; 0x54
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a0d      	ldr	r2, [pc, #52]	; (800d8d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800d89e:	8812      	ldrh	r2, [r2, #0]
 800d8a0:	4252      	negs	r2, r2
 800d8a2:	b292      	uxth	r2, r2
 800d8a4:	b212      	sxth	r2, r2
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	6838      	ldr	r0, [r7, #0]
 800d8aa:	4798      	blx	r3
            break;
 800d8ac:	e00b      	b.n	800d8c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	3354      	adds	r3, #84	; 0x54
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a07      	ldr	r2, [pc, #28]	; (800d8d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800d8b8:	8812      	ldrh	r2, [r2, #0]
 800d8ba:	b212      	sxth	r2, r2
 800d8bc:	2100      	movs	r1, #0
 800d8be:	6838      	ldr	r0, [r7, #0]
 800d8c0:	4798      	blx	r3
            break;
 800d8c2:	e000      	b.n	800d8c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800d8c4:	bf00      	nop
    }
 800d8c6:	bf00      	nop
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	2002b07c 	.word	0x2002b07c
 800d8d4:	2002b07e 	.word	0x2002b07e

0800d8d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	68d2      	ldr	r2, [r2, #12]
 800d8ea:	1052      	asrs	r2, r2, #1
 800d8ec:	1898      	adds	r0, r3, r2
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	f003 0301 	and.w	r3, r3, #1
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	e00a      	b.n	800d916 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	68d2      	ldr	r2, [r2, #12]
 800d908:	1052      	asrs	r2, r2, #1
 800d90a:	4413      	add	r3, r2
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	6892      	ldr	r2, [r2, #8]
 800d912:	4413      	add	r3, r2
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	4798      	blx	r3
    }
 800d91a:	bf00      	nop
 800d91c:	3708      	adds	r7, #8
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800d922:	b480      	push	{r7}
 800d924:	b083      	sub	sp, #12
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d010      	beq.n	800d954 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d107      	bne.n	800d94a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	d101      	bne.n	800d94a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800d946:	2301      	movs	r3, #1
 800d948:	e000      	b.n	800d94c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800d94a:	2300      	movs	r3, #0
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d001      	beq.n	800d954 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800d950:	2301      	movs	r3, #1
 800d952:	e000      	b.n	800d956 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800d954:	2300      	movs	r3, #0
    }
 800d956:	4618      	mov	r0, r3
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800d962:	b580      	push	{r7, lr}
 800d964:	b082      	sub	sp, #8
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	68d2      	ldr	r2, [r2, #12]
 800d972:	1052      	asrs	r2, r2, #1
 800d974:	1899      	adds	r1, r3, r2
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	f003 0301 	and.w	r3, r3, #1
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d102      	bne.n	800d988 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	e00a      	b.n	800d99e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	68d2      	ldr	r2, [r2, #12]
 800d990:	1052      	asrs	r2, r2, #1
 800d992:	4413      	add	r3, r2
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	6892      	ldr	r2, [r2, #8]
 800d99a:	4413      	add	r3, r2
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4608      	mov	r0, r1
 800d9a0:	4798      	blx	r3
    }
 800d9a2:	bf00      	nop
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800d9aa:	b480      	push	{r7}
 800d9ac:	b083      	sub	sp, #12
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d010      	beq.n	800d9dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d107      	bne.n	800d9d2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	f003 0301 	and.w	r3, r3, #1
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e000      	b.n	800d9d4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d001      	beq.n	800d9dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e000      	b.n	800d9de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800d9dc:	2300      	movs	r3, #0
    }
 800d9de:	4618      	mov	r0, r3
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800d9ea:	b480      	push	{r7}
 800d9ec:	b083      	sub	sp, #12
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	601a      	str	r2, [r3, #0]
    }
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2200      	movs	r2, #0
 800da14:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	80da      	strh	r2, [r3, #6]
    }
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800da36:	b480      	push	{r7}
 800da38:	b085      	sub	sp, #20
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	4608      	mov	r0, r1
 800da40:	4611      	mov	r1, r2
 800da42:	461a      	mov	r2, r3
 800da44:	4603      	mov	r3, r0
 800da46:	817b      	strh	r3, [r7, #10]
 800da48:	460b      	mov	r3, r1
 800da4a:	813b      	strh	r3, [r7, #8]
 800da4c:	4613      	mov	r3, r2
 800da4e:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	897a      	ldrh	r2, [r7, #10]
 800da54:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	893a      	ldrh	r2, [r7, #8]
 800da5a:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	88fa      	ldrh	r2, [r7, #6]
 800da60:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	8b3a      	ldrh	r2, [r7, #24]
 800da66:	80da      	strh	r2, [r3, #6]
    }
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	4618      	mov	r0, r3
 800da6c:	3714      	adds	r7, #20
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800da76:	b480      	push	{r7}
 800da78:	b083      	sub	sp, #12
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	460b      	mov	r3, r1
 800da80:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	887a      	ldrh	r2, [r7, #2]
 800da86:	801a      	strh	r2, [r3, #0]
    {
    }
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
	...

0800da98 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af02      	add	r7, sp, #8
 800da9e:	6078      	str	r0, [r7, #4]
        visible(true)
 800daa0:	4a13      	ldr	r2, [pc, #76]	; (800daf0 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	1d18      	adds	r0, r3, #4
 800daaa:	2300      	movs	r3, #0
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	2300      	movs	r3, #0
 800dab0:	2200      	movs	r2, #0
 800dab2:	2100      	movs	r1, #0
 800dab4:	f7ff ffbf 	bl	800da36 <_ZN8touchgfx4RectC1Essss>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	330c      	adds	r3, #12
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7ff ffa3 	bl	800da08 <_ZN8touchgfx4RectC1Ev>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	615a      	str	r2, [r3, #20]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	619a      	str	r2, [r3, #24]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	61da      	str	r2, [r3, #28]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4618      	mov	r0, r3
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	08027a8c 	.word	0x08027a8c

0800daf4 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	4a04      	ldr	r2, [pc, #16]	; (800db10 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	601a      	str	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	08027a8c 	.word	0x08027a8c

0800db14 <_ZN8touchgfx8DrawableD0Ev>:
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff ffe9 	bl	800daf4 <_ZN8touchgfx8DrawableD1Ev>
 800db22:	2128      	movs	r1, #40	; 0x28
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f015 fcff 	bl	8023528 <_ZdlPvj>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4618      	mov	r0, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	887a      	ldrh	r2, [r7, #2]
 800db44:	809a      	strh	r2, [r3, #4]
    }
 800db46:	bf00      	nop
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800db52:	b480      	push	{r7}
 800db54:	b083      	sub	sp, #12
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	460b      	mov	r3, r1
 800db5c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	887a      	ldrh	r2, [r7, #2]
 800db62:	80da      	strh	r2, [r3, #6]
    }
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	807b      	strh	r3, [r7, #2]
 800db7c:	4613      	mov	r3, r2
 800db7e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	332c      	adds	r3, #44	; 0x2c
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800db8c:	4611      	mov	r1, r2
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	4798      	blx	r3
        setY(y);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3330      	adds	r3, #48	; 0x30
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800db9e:	4611      	mov	r1, r2
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	4798      	blx	r3
    }
 800dba4:	bf00      	nop
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	887a      	ldrh	r2, [r7, #2]
 800dbbc:	811a      	strh	r2, [r3, #8]
    }
 800dbbe:	bf00      	nop
 800dbc0:	370c      	adds	r7, #12
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr

0800dbca <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800dbca:	b480      	push	{r7}
 800dbcc:	b083      	sub	sp, #12
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	887a      	ldrh	r2, [r7, #2]
 800dbda:	815a      	strh	r2, [r3, #10]
    }
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
 800dc06:	bf00      	nop
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr

0800dc12 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800dc12:	b480      	push	{r7}
 800dc14:	b083      	sub	sp, #12
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	6039      	str	r1, [r7, #0]
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
 800dc32:	bf00      	nop
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800dc3e:	b480      	push	{r7}
 800dc40:	b083      	sub	sp, #12
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	bf00      	nop
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800dc52:	b480      	push	{r7}
 800dc54:	b083      	sub	sp, #12
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	78fa      	ldrb	r2, [r7, #3]
 800dc62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800dc66:	bf00      	nop
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800dc80:	4618      	mov	r0, r3
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr

0800dca6 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b082      	sub	sp, #8
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	460b      	mov	r3, r1
 800dcb0:	807b      	strh	r3, [r7, #2]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	3354      	adds	r3, #84	; 0x54
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	8879      	ldrh	r1, [r7, #2]
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800dcc6:	b292      	uxth	r2, r2
 800dcc8:	1a8a      	subs	r2, r1, r2
 800dcca:	b292      	uxth	r2, r2
 800dccc:	b210      	sxth	r0, r2
 800dcce:	8839      	ldrh	r1, [r7, #0]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800dcd6:	b292      	uxth	r2, r2
 800dcd8:	1a8a      	subs	r2, r1, r2
 800dcda:	b292      	uxth	r2, r2
 800dcdc:	b212      	sxth	r2, r2
 800dcde:	4601      	mov	r1, r0
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	4798      	blx	r3
    }
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcfa:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd02:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd0a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f7ff ffe1 	bl	800dcec <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	601a      	str	r2, [r3, #0]
    }
 800dd38:	bf00      	nop
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7ff fea4 	bl	800da98 <_ZN8touchgfx8DrawableC1Ev>
 800dd50:	4a05      	ldr	r2, [pc, #20]	; (800dd68 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	0802678c 	.word	0x0802678c

0800dd6c <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	4a05      	ldr	r2, [pc, #20]	; (800dd8c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	601a      	str	r2, [r3, #0]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7ff feb9 	bl	800daf4 <_ZN8touchgfx8DrawableD1Ev>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	0802678c 	.word	0x0802678c

0800dd90 <_ZN8touchgfx9ContainerD0Ev>:
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff ffe7 	bl	800dd6c <_ZN8touchgfx9ContainerD1Ev>
 800dd9e:	212c      	movs	r1, #44	; 0x2c
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f015 fbc1 	bl	8023528 <_ZdlPvj>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	4a06      	ldr	r2, [pc, #24]	; (800ddd4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7ff ffd2 	bl	800dd6c <_ZN8touchgfx9ContainerD1Ev>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	08027b84 	.word	0x08027b84

0800ddd8 <_ZN8touchgfx6ScreenD0Ev>:
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff ffe5 	bl	800ddb0 <_ZN8touchgfx6ScreenD1Ev>
 800dde6:	213c      	movs	r1, #60	; 0x3c
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f015 fb9d 	bl	8023528 <_ZdlPvj>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	bf00      	nop
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	bf00      	nop
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
    {
    }
 800de3c:	bf00      	nop
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
    {
    }
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	3304      	adds	r3, #4
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	4618      	mov	r0, r3
 800de72:	f004 fe43 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800de76:	bf00      	nop
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
	...

0800de80 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7ff fe04 	bl	800da98 <_ZN8touchgfx8DrawableC1Ev>
 800de90:	4a03      	ldr	r2, [pc, #12]	; (800dea0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	601a      	str	r2, [r3, #0]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4618      	mov	r0, r3
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	08025918 	.word	0x08025918

0800dea4 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	4a05      	ldr	r2, [pc, #20]	; (800dec4 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7ff fe1d 	bl	800daf4 <_ZN8touchgfx8DrawableD1Ev>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4618      	mov	r0, r3
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	08025918 	.word	0x08025918

0800dec8 <_ZN8touchgfx6WidgetD0Ev>:
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7ff ffe7 	bl	800dea4 <_ZN8touchgfx6WidgetD1Ev>
 800ded6:	2128      	movs	r1, #40	; 0x28
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f015 fb25 	bl	8023528 <_ZdlPvj>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	607b      	str	r3, [r7, #4]
 800def2:	460b      	mov	r3, r1
 800def4:	817b      	strh	r3, [r7, #10]
 800def6:	4613      	mov	r3, r2
 800def8:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff feb8 	bl	800dc72 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d008      	beq.n	800df1a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff febe 	bl	800dc8c <_ZNK8touchgfx8Drawable11isTouchableEv>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d001      	beq.n	800df1a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800df16:	2301      	movs	r3, #1
 800df18:	e000      	b.n	800df1c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800df1a:	2300      	movs	r3, #0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	601a      	str	r2, [r3, #0]
        }
    }
 800df26:	bf00      	nop
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
	...

0800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7ff ff9f 	bl	800de80 <_ZN8touchgfx6WidgetC1Ev>
 800df42:	4a0b      	ldr	r2, [pc, #44]	; (800df70 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	601a      	str	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	3326      	adds	r3, #38	; 0x26
 800df4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df50:	4618      	mov	r0, r3
 800df52:	f7ff fd90 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	22ff      	movs	r2, #255	; 0xff
 800df5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800df5e:	6839      	ldr	r1, [r7, #0]
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f006 fbed 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	08027768 	.word	0x08027768

0800df74 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback< const Slider&, int >& callback)
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 800df86:	bf00      	nop
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr

0800df92 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800df92:	b480      	push	{r7}
 800df94:	b083      	sub	sp, #12
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	460b      	mov	r3, r1
 800df9c:	807b      	strh	r3, [r7, #2]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	887a      	ldrh	r2, [r7, #2]
 800dfa2:	801a      	strh	r2, [r3, #0]
    }
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
        assertValid();
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7fd fe57 	bl	800bc70 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800dfc2:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	4610      	mov	r0, r2
 800dfce:	f002 f93f 	bl	8010250 <_ZNK8touchgfx5Texts7getTextEt>
 800dfd2:	4603      	mov	r3, r0
    }
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	2002b104 	.word	0x2002b104

0800dfe0 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7ff ff48 	bl	800de80 <_ZN8touchgfx6WidgetC1Ev>
 800dff0:	4a13      	ldr	r2, [pc, #76]	; (800e040 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	601a      	str	r2, [r3, #0]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	3326      	adds	r3, #38	; 0x26
 800dffa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dffe:	4618      	mov	r0, r3
 800e000:	f7ff ffc7 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	3328      	adds	r3, #40	; 0x28
 800e008:	2100      	movs	r1, #0
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff fced 	bl	800d9ea <_ZN8touchgfx9colortypeC1Em>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	859a      	strh	r2, [r3, #44]	; 0x2c
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	22ff      	movs	r2, #255	; 0xff
 800e01a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4618      	mov	r0, r3
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	08027500 	.word	0x08027500

0800e044 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af02      	add	r7, sp, #8
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800e04e:	2300      	movs	r3, #0
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	2300      	movs	r3, #0
 800e054:	2200      	movs	r2, #0
 800e056:	2100      	movs	r1, #0
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7ff fcec 	bl	800da36 <_ZN8touchgfx4RectC1Essss>
    }
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800e066:	b480      	push	{r7}
 800e068:	b083      	sub	sp, #12
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	683a      	ldr	r2, [r7, #0]
 800e074:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800e076:	bf00      	nop
 800e078:	370c      	adds	r7, #12
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <_ZN8touchgfx8TextArea8setAlphaEh>:
     *
     *        Sets the alpha value of the text.
     *
     * @param alpha The alpha value. 255 = completely solid. 0 = invisible.
     */
    void setAlpha(uint8_t alpha)
 800e082:	b480      	push	{r7}
 800e084:	b083      	sub	sp, #12
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	460b      	mov	r3, r1
 800e08c:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	78fa      	ldrb	r2, [r7, #3]
 800e092:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800e0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a4:	b085      	sub	sp, #20
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800e0ae:	687e      	ldr	r6, [r7, #4]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3330      	adds	r3, #48	; 0x30
 800e0b6:	681c      	ldr	r4, [r3, #0]
 800e0b8:	887d      	ldrh	r5, [r7, #2]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f845 	bl	800e14a <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	81bb      	strh	r3, [r7, #12]
 800e0c4:	f107 030c 	add.w	r3, r7, #12
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fd fd9d 	bl	800bc08 <_ZNK8touchgfx9TypedText7getFontEv>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	6813      	ldr	r3, [r2, #0]
 800e0d2:	332c      	adds	r3, #44	; 0x2c
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	4798      	blx	r3
 800e0da:	4603      	mov	r3, r0
 800e0dc:	1aeb      	subs	r3, r5, r3
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	b21b      	sxth	r3, r3
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	47a0      	blx	r4
    }
 800e0e8:	bf00      	nop
 800e0ea:	3714      	adds	r7, #20
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0f0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	807b      	strh	r3, [r7, #2]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	332c      	adds	r3, #44	; 0x2c
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800e10e:	4610      	mov	r0, r2
 800e110:	4798      	blx	r3
        setBaselineY(baselineY);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	3360      	adds	r3, #96	; 0x60
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e11e:	4611      	mov	r1, r2
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	4798      	blx	r3
    }
 800e124:	bf00      	nop
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	460b      	mov	r3, r1
 800e136:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	887a      	ldrh	r2, [r7, #2]
 800e13c:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800e13e:	bf00      	nop
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800e14a:	b480      	push	{r7}
 800e14c:	b083      	sub	sp, #12
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800e156:	4618      	mov	r0, r3
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
	...

0800e164 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	4a05      	ldr	r2, [pc, #20]	; (800e184 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fe95 	bl	800dea4 <_ZN8touchgfx6WidgetD1Ev>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	08027500 	.word	0x08027500

0800e188 <_ZN8touchgfx8TextAreaD0Ev>:
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff ffe7 	bl	800e164 <_ZN8touchgfx8TextAreaD1Ev>
 800e196:	2134      	movs	r1, #52	; 0x34
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f015 f9c5 	bl	8023528 <_ZdlPvj>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
        : TextArea()
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7ff ff14 	bl	800dfe0 <_ZN8touchgfx8TextAreaC1Ev>
 800e1b8:	4a03      	ldr	r2, [pc, #12]	; (800e1c8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	601a      	str	r2, [r3, #0]
    {
    }
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	08025884 	.word	0x08025884

0800e1cc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	4a05      	ldr	r2, [pc, #20]	; (800e1ec <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff ffc1 	bl	800e164 <_ZN8touchgfx8TextAreaD1Ev>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	08025884 	.word	0x08025884

0800e1f0 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff ffe7 	bl	800e1cc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800e1fe:	2134      	movs	r1, #52	; 0x34
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f015 f991 	bl	8023528 <_ZdlPvj>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4618      	mov	r0, r3
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff ffc4 	bl	800e1a8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800e220:	4a05      	ldr	r2, [pc, #20]	; (800e238 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	601a      	str	r2, [r3, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4618      	mov	r0, r3
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	080276ec 	.word	0x080276ec

0800e23c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800e24c:	bf00      	nop
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4618      	mov	r0, r3
 800e264:	f7ff fe0c 	bl	800de80 <_ZN8touchgfx6WidgetC1Ev>
 800e268:	4a09      	ldr	r2, [pc, #36]	; (800e290 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2200      	movs	r2, #0
 800e272:	629a      	str	r2, [r3, #40]	; 0x28
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2101      	movs	r1, #1
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff fce6 	bl	800dc52 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	4618      	mov	r0, r3
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	08027424 	.word	0x08027424

0800e294 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800e2a4:	bf00      	nop
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	4a05      	ldr	r2, [pc, #20]	; (800e2d0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7ff fdef 	bl	800dea4 <_ZN8touchgfx6WidgetD1Ev>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3708      	adds	r7, #8
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	08027424 	.word	0x08027424

0800e2d4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7ff ffe7 	bl	800e2b0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800e2e2:	2130      	movs	r1, #48	; 0x30
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f015 f91f 	bl	8023528 <_ZdlPvj>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <_ZN8touchgfx11RadioButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    RadioButton() : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff ffaa 	bl	800e258 <_ZN8touchgfx14AbstractButtonC1Ev>
 800e304:	4a19      	ldr	r2, [pc, #100]	; (800e36c <_ZN8touchgfx11RadioButtonC1Ev+0x78>)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	601a      	str	r2, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	332e      	adds	r3, #46	; 0x2e
 800e30e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e312:	4618      	mov	r0, r3
 800e314:	f7ff fbaf 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	3330      	adds	r3, #48	; 0x30
 800e31c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff fba8 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	3332      	adds	r3, #50	; 0x32
 800e32a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff fba1 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	3334      	adds	r3, #52	; 0x34
 800e338:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7ff fb9a 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	22ff      	movs	r2, #255	; 0xff
 800e346:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	63da      	str	r2, [r3, #60]	; 0x3c
    { }
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	080277d4 	.word	0x080277d4

0800e370 <_ZN8touchgfx11RadioButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~RadioButton() { }
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	4a05      	ldr	r2, [pc, #20]	; (800e390 <_ZN8touchgfx11RadioButtonD1Ev+0x20>)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	4618      	mov	r0, r3
 800e382:	f7ff ff95 	bl	800e2b0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4618      	mov	r0, r3
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	080277d4 	.word	0x080277d4

0800e394 <_ZN8touchgfx11RadioButtonD0Ev>:
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7ff ffe7 	bl	800e370 <_ZN8touchgfx11RadioButtonD1Ev>
 800e3a2:	2140      	movs	r1, #64	; 0x40
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f015 f8bf 	bl	8023528 <_ZdlPvj>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <_ZN8touchgfx11RadioButton19setDeselectedActionERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setDeselectedAction(GenericCallback< const AbstractButton& >& callback)
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
    {
        deselectedAction = &callback;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>:
     *
     *        States whether or not it is possible to de-select the RadioButton by clicking it.
     *
     * @param state true if it should be possible to de-select by click.
     */
    void setDeselectionEnabled(bool state)
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	70fb      	strb	r3, [r7, #3]
    {
        deselectionEnabled = state;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	78fa      	ldrb	r2, [r7, #3]
 800e3e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <_ZNK8touchgfx11RadioButton21getDeselectionEnabledEv>:
     *
     *        Gets the current deselectionEnabled state.
     *
     * @return The current deselectionEnabled state.
     */
    bool getDeselectionEnabled() const
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
    {
        return deselectionEnabled;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    }
 800e3fe:	4618      	mov	r0, r3
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <_ZNK8touchgfx11RadioButton11getSelectedEv>:
     *
     *        Gets the current selected state.
     *
     * @return The current selected state.
     */
    bool getSelected() const
 800e40a:	b480      	push	{r7}
 800e40c:	b083      	sub	sp, #12
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
    {
        return selected;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    }
 800e418:	4618      	mov	r0, r3
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	4a05      	ldr	r2, [pc, #20]	; (800e444 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	601a      	str	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4618      	mov	r0, r3
 800e436:	f7ff fcbb 	bl	800ddb0 <_ZN8touchgfx6ScreenD1Ev>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4618      	mov	r0, r3
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	08025838 	.word	0x08025838

0800e448 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff ffe7 	bl	800e424 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800e456:	2140      	movs	r1, #64	; 0x40
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f015 f865 	bl	8023528 <_ZdlPvj>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	4618      	mov	r0, r3
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	4a40      	ldr	r2, [pc, #256]	; (800e574 <_ZN15Screen1ViewBaseD1Ev+0x10c>)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 800e47c:	4618      	mov	r0, r3
 800e47e:	f001 f845 	bl	800f50c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800e488:	4618      	mov	r0, r3
 800e48a:	f001 f83f 	bl	800f50c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800e494:	4618      	mov	r0, r3
 800e496:	f001 f85b 	bl	800f550 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f000 fe31 	bl	800f108 <_ZN8touchgfx16RadioButtonGroupILt1EED1Ev>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7ff ff5f 	bl	800e370 <_ZN8touchgfx11RadioButtonD1Ev>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7ff fe53 	bl	800e164 <_ZN8touchgfx8TextAreaD1Ev>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f004 fc57 	bl	8012d78 <_ZN8touchgfx6SliderD1Ev>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f001 f85f 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7ff fe41 	bl	800e164 <_ZN8touchgfx8TextAreaD1Ev>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f001 f875 	bl	800f5d8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f001 f86f 	bl	800f5d8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e500:	4618      	mov	r0, r3
 800e502:	f004 fc39 	bl	8012d78 <_ZN8touchgfx6SliderD1Ev>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7ff fc2d 	bl	800dd6c <_ZN8touchgfx9ContainerD1Ev>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800e518:	4618      	mov	r0, r3
 800e51a:	f001 f83b 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff fe1d 	bl	800e164 <_ZN8touchgfx8TextAreaD1Ev>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e530:	4618      	mov	r0, r3
 800e532:	f001 f851 	bl	800f5d8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800e53c:	4618      	mov	r0, r3
 800e53e:	f001 f84b 	bl	800f5d8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3398      	adds	r3, #152	; 0x98
 800e546:	4618      	mov	r0, r3
 800e548:	f004 fc16 	bl	8012d78 <_ZN8touchgfx6SliderD1Ev>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	336c      	adds	r3, #108	; 0x6c
 800e550:	4618      	mov	r0, r3
 800e552:	f7ff fc0b 	bl	800dd6c <_ZN8touchgfx9ContainerD1Ev>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3340      	adds	r3, #64	; 0x40
 800e55a:	4618      	mov	r0, r3
 800e55c:	f001 f81a 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4618      	mov	r0, r3
 800e564:	f7ff ff5e 	bl	800e424 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	08025774 	.word	0x08025774

0800e578 <_ZN15Screen1ViewBaseD0Ev>:
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff ff71 	bl	800e468 <_ZN15Screen1ViewBaseD1Ev>
 800e586:	f44f 61c9 	mov.w	r1, #1608	; 0x648
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f014 ffcc 	bl	8023528 <_ZdlPvj>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	4618      	mov	r0, r3
 800e594:	3708      	adds	r7, #8
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <_ZN15Screen1ViewBase17Update_LuminosityEi>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void Update_Luminosity(int value)
 800e59a:	b480      	push	{r7}
 800e59c:	b083      	sub	sp, #12
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
 800e5a2:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen1
    }
 800e5a4:	bf00      	nop
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <_ZN15Screen1ViewBase11Update_FreqEi>:

    virtual void Update_Freq(int value)
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen1
    }
 800e5ba:	bf00      	nop
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr

0800e5c6 <_ZN15Screen1ViewBase11Update_DutyEi>:

    virtual void Update_Duty(int value)
 800e5c6:	b480      	push	{r7}
 800e5c8:	b083      	sub	sp, #12
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen1
    }
 800e5d0:	bf00      	nop
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <_ZN15Screen1ViewBase22Update_Mode_Reading_ONEv>:

    virtual void Update_Mode_Reading_ON()
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800e5e4:	bf00      	nop
 800e5e6:	370c      	adds	r7, #12
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <_ZN15Screen1ViewBase23Update_Mode_Reading_OFFEv>:

    virtual void Update_Mode_Reading_OFF()
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800e5f8:	bf00      	nop
 800e5fa:	370c      	adds	r7, #12
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <_ZN15Screen1ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800e60c:	f007 f9f4 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 800e610:	4603      	mov	r3, r0
    }
 800e612:	4618      	mov	r0, r3
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
	...

0800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800e61c:	b590      	push	{r4, r7, lr}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	4603      	mov	r3, r0
 800e624:	71fb      	strb	r3, [r7, #7]
 800e626:	460b      	mov	r3, r1
 800e628:	71bb      	strb	r3, [r7, #6]
 800e62a:	4613      	mov	r3, r2
 800e62c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800e62e:	f7fe f851 	bl	800c6d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d105      	bne.n	800e644 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800e638:	4b0a      	ldr	r3, [pc, #40]	; (800e664 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800e63a:	4a0b      	ldr	r2, [pc, #44]	; (800e668 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800e63c:	2138      	movs	r1, #56	; 0x38
 800e63e:	480b      	ldr	r0, [pc, #44]	; (800e66c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800e640:	f014 ff9e 	bl	8023580 <__assert_func>
 800e644:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800e646:	f7fe f851 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 800e64a:	6803      	ldr	r3, [r0, #0]
 800e64c:	332c      	adds	r3, #44	; 0x2c
 800e64e:	681c      	ldr	r4, [r3, #0]
 800e650:	797b      	ldrb	r3, [r7, #5]
 800e652:	79ba      	ldrb	r2, [r7, #6]
 800e654:	79f9      	ldrb	r1, [r7, #7]
 800e656:	47a0      	blx	r4
 800e658:	4603      	mov	r3, r0
    }
 800e65a:	4618      	mov	r0, r3
 800e65c:	370c      	adds	r7, #12
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd90      	pop	{r4, r7, pc}
 800e662:	bf00      	nop
 800e664:	08024e20 	.word	0x08024e20
 800e668:	08025978 	.word	0x08025978
 800e66c:	08024e64 	.word	0x08024e64

0800e670 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800e670:	b590      	push	{r4, r7, lr}
 800e672:	b0a9      	sub	sp, #164	; 0xa4
 800e674:	af02      	add	r7, sp, #8
 800e676:	6078      	str	r0, [r7, #4]
    sliderValueChangedCallback(this, &Screen1ViewBase::sliderValueChangedCallbackHandler),
    radioButtonSelectedCallback(this, &Screen1ViewBase::radioButtonSelectedCallbackHandler),
    radioButtonDeselectedCallback(this, &Screen1ViewBase::radioButtonDeselectedCallbackHandler)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 fd6c 	bl	800f158 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800e680:	4ad9      	ldr	r2, [pc, #868]	; (800e9e8 <_ZN15Screen1ViewBaseC1Ev+0x378>)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	601a      	str	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e68c:	f107 0308 	add.w	r3, r7, #8
 800e690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e694:	4618      	mov	r0, r3
 800e696:	f7ff f9ee 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e69a:	f107 0308 	add.w	r3, r7, #8
 800e69e:	4619      	mov	r1, r3
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7ff fc45 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	336c      	adds	r3, #108	; 0x6c
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fb48 	bl	800dd40 <_ZN8touchgfx9ContainerC1Ev>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	3398      	adds	r3, #152	; 0x98
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f004 fda1 	bl	80131fc <_ZN8touchgfx6SliderC1Ev>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7ff fda5 	bl	800e210 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff fd9f 	bl	800e210 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff fc81 	bl	800dfe0 <_ZN8touchgfx8TextAreaC1Ev>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f503 740e 	add.w	r4, r3, #568	; 0x238
 800e6e4:	f107 030c 	add.w	r3, r7, #12
 800e6e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7ff f9c2 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e6f2:	f107 030c 	add.w	r3, r7, #12
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f7ff fc19 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800e704:	4618      	mov	r0, r3
 800e706:	f7ff fb1b 	bl	800dd40 <_ZN8touchgfx9ContainerC1Ev>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e710:	4618      	mov	r0, r3
 800e712:	f004 fd73 	bl	80131fc <_ZN8touchgfx6SliderC1Ev>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7ff fd77 	bl	800e210 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e728:	4618      	mov	r0, r3
 800e72a:	f7ff fd71 	bl	800e210 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff fc53 	bl	800dfe0 <_ZN8touchgfx8TextAreaC1Ev>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f503 6486 	add.w	r4, r3, #1072	; 0x430
 800e740:	f107 0310 	add.w	r3, r7, #16
 800e744:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff f994 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e74e:	f107 0310 	add.w	r3, r7, #16
 800e752:	4619      	mov	r1, r3
 800e754:	4620      	mov	r0, r4
 800e756:	f7ff fbeb 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800e760:	4618      	mov	r0, r3
 800e762:	f004 fd4b 	bl	80131fc <_ZN8touchgfx6SliderC1Ev>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7ff fc37 	bl	800dfe0 <_ZN8touchgfx8TextAreaC1Ev>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800e778:	4618      	mov	r0, r3
 800e77a:	f7ff fdbb 	bl	800e2f4 <_ZN8touchgfx11RadioButtonC1Ev>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 800e784:	4618      	mov	r0, r3
 800e786:	f000 fcfd 	bl	800f184 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f503 60c3 	add.w	r0, r3, #1560	; 0x618
 800e790:	4b96      	ldr	r3, [pc, #600]	; (800e9ec <_ZN15Screen1ViewBaseC1Ev+0x37c>)
 800e792:	617b      	str	r3, [r7, #20]
 800e794:	2300      	movs	r3, #0
 800e796:	61bb      	str	r3, [r7, #24]
 800e798:	f107 0314 	add.w	r3, r7, #20
 800e79c:	cb0c      	ldmia	r3, {r2, r3}
 800e79e:	6879      	ldr	r1, [r7, #4]
 800e7a0:	f000 fd3e 	bl	800f220 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f503 60c5 	add.w	r0, r3, #1576	; 0x628
 800e7aa:	4b91      	ldr	r3, [pc, #580]	; (800e9f0 <_ZN15Screen1ViewBaseC1Ev+0x380>)
 800e7ac:	61fb      	str	r3, [r7, #28]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	623b      	str	r3, [r7, #32]
 800e7b2:	f107 031c 	add.w	r3, r7, #28
 800e7b6:	cb0c      	ldmia	r3, {r2, r3}
 800e7b8:	6879      	ldr	r1, [r7, #4]
 800e7ba:	f000 fd61 	bl	800f280 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f503 60c7 	add.w	r0, r3, #1592	; 0x638
 800e7c4:	4b8b      	ldr	r3, [pc, #556]	; (800e9f4 <_ZN15Screen1ViewBaseC1Ev+0x384>)
 800e7c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7d0:	cb0c      	ldmia	r3, {r2, r3}
 800e7d2:	6879      	ldr	r1, [r7, #4]
 800e7d4:	f000 fd54 	bl	800f280 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    image1.setXY(0, 0);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	3340      	adds	r3, #64	; 0x40
 800e7dc:	2200      	movs	r2, #0
 800e7de:	2100      	movs	r1, #0
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff f9c5 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BG_IMAGE_ID));
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e7ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7f0:	2103      	movs	r1, #3
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff f93f 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e7f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	4620      	mov	r0, r4
 800e800:	f005 ff9e 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    container1.setPosition(137, 83, 82, 148);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800e80a:	2394      	movs	r3, #148	; 0x94
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	2352      	movs	r3, #82	; 0x52
 800e810:	2253      	movs	r2, #83	; 0x53
 800e812:	2189      	movs	r1, #137	; 0x89
 800e814:	f7fd ff16 	bl	800c644 <_ZN8touchgfx8Drawable11setPositionEssss>

    slider_strength.setXY(0, 4);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3398      	adds	r3, #152	; 0x98
 800e81c:	2204      	movs	r2, #4
 800e81e:	2100      	movs	r1, #0
 800e820:	4618      	mov	r0, r3
 800e822:	f7ff f9a5 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    slider_strength.setBitmaps(touchgfx::Bitmap(BITMAP_CUSTOM_SLIDER_SPEED_BG_ID), touchgfx::Bitmap(BITMAP_SLIDER_SPEED_FRONT_ID), touchgfx::Bitmap(BITMAP_CUSTOM_SLIDER_SPEED_BUTTON_ID));
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800e82c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e830:	210a      	movs	r1, #10
 800e832:	4618      	mov	r0, r3
 800e834:	f7ff f91f 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e83c:	2137      	movs	r1, #55	; 0x37
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff f919 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e848:	210b      	movs	r1, #11
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff f913 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800e850:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e854:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e858:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800e85c:	4620      	mov	r0, r4
 800e85e:	f004 fd21 	bl	80132a4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider_strength.setupVerticalSlider(2, 3, 5, 0, 142);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800e868:	238e      	movs	r3, #142	; 0x8e
 800e86a:	9301      	str	r3, [sp, #4]
 800e86c:	2300      	movs	r3, #0
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	2305      	movs	r3, #5
 800e872:	2203      	movs	r2, #3
 800e874:	2102      	movs	r1, #2
 800e876:	f004 fbf3 	bl	8013060 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    slider_strength.setValueRange(0, 50);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	3398      	adds	r3, #152	; 0x98
 800e87e:	2232      	movs	r2, #50	; 0x32
 800e880:	2100      	movs	r1, #0
 800e882:	4618      	mov	r0, r3
 800e884:	f004 faed 	bl	8012e62 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider_strength.setValue(0);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3398      	adds	r3, #152	; 0x98
 800e88c:	2100      	movs	r1, #0
 800e88e:	4618      	mov	r0, r3
 800e890:	f004 fa73 	bl	8012d7a <_ZN8touchgfx6Slider8setValueEi>
    slider_strength.setNewValueCallback(sliderValueChangedCallback);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	f7ff fb66 	bl	800df74 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    container1.add(slider_strength);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	3398      	adds	r3, #152	; 0x98
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	f004 f921 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textArea_strength_low.setXY(29, 77);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800e8c0:	224d      	movs	r2, #77	; 0x4d
 800e8c2:	211d      	movs	r1, #29
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7ff f953 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea_strength_low.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800e8d0:	22ff      	movs	r2, #255	; 0xff
 800e8d2:	21ff      	movs	r1, #255	; 0xff
 800e8d4:	20ff      	movs	r0, #255	; 0xff
 800e8d6:	f7ff fea1 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f7ff fbc1 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea_strength_low.setLinespacing(0);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff fc1d 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea_strength_lowBuffer, TEXTAREA_STRENGTH_LOW_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f503 64c0 	add.w	r4, r3, #1536	; 0x600
 800e8f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e8fc:	2109      	movs	r1, #9
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7ff fb47 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800e904:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e908:	4618      	mov	r0, r3
 800e90a:	f7ff fb53 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 800e90e:	4603      	mov	r3, r0
 800e910:	4a39      	ldr	r2, [pc, #228]	; (800e9f8 <_ZN15Screen1ViewBaseC1Ev+0x388>)
 800e912:	2103      	movs	r1, #3
 800e914:	4620      	mov	r0, r4
 800e916:	f009 f8a7 	bl	8017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea_strength_low.setWildcard(textArea_strength_lowBuffer);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800e926:	4619      	mov	r1, r3
 800e928:	4610      	mov	r0, r2
 800e92a:	f7ff fc87 	bl	800e23c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea_strength_low.resizeToCurrentText();
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800e934:	4618      	mov	r0, r3
 800e936:	f005 fd5b 	bl	80143f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea_strength_low.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800e940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e944:	2102      	movs	r1, #2
 800e946:	4618      	mov	r0, r3
 800e948:	f7ff fb23 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800e94c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800e950:	4620      	mov	r0, r4
 800e952:	f005 fd77 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    container1.add(textArea_strength_low);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800e962:	4619      	mov	r1, r3
 800e964:	4610      	mov	r0, r2
 800e966:	f004 f8c9 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textArea_strength_height.setXY(6, 67);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e970:	2243      	movs	r2, #67	; 0x43
 800e972:	2106      	movs	r1, #6
 800e974:	4618      	mov	r0, r3
 800e976:	f7ff f8fb 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea_strength_height.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 800e980:	22ff      	movs	r2, #255	; 0xff
 800e982:	21ff      	movs	r1, #255	; 0xff
 800e984:	20ff      	movs	r0, #255	; 0xff
 800e986:	f7ff fe49 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e98a:	4603      	mov	r3, r0
 800e98c:	4619      	mov	r1, r3
 800e98e:	4620      	mov	r0, r4
 800e990:	f7ff fb69 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea_strength_height.setLinespacing(0);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e99a:	2100      	movs	r1, #0
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7ff fbc5 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea_strength_heightBuffer, TEXTAREA_STRENGTH_HEIGHT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID12).getText());
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f203 6406 	addw	r4, r3, #1542	; 0x606
 800e9a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e9ac:	2108      	movs	r1, #8
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7ff faef 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800e9b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7ff fafb 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	4a0d      	ldr	r2, [pc, #52]	; (800e9f8 <_ZN15Screen1ViewBaseC1Ev+0x388>)
 800e9c2:	2103      	movs	r1, #3
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	f009 f84f 	bl	8017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea_strength_height.setWildcard(textArea_strength_heightBuffer);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f503 72e6 	add.w	r2, r3, #460	; 0x1cc
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f203 6306 	addw	r3, r3, #1542	; 0x606
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4610      	mov	r0, r2
 800e9da:	f7ff fc2f 	bl	800e23c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea_strength_height.resizeToCurrentText();
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	e009      	b.n	800e9fc <_ZN15Screen1ViewBaseC1Ev+0x38c>
 800e9e8:	08025774 	.word	0x08025774
 800e9ec:	0800f00d 	.word	0x0800f00d
 800e9f0:	0800f071 	.word	0x0800f071
 800e9f4:	0800f09b 	.word	0x0800f09b
 800e9f8:	08024ea4 	.word	0x08024ea4
 800e9fc:	f005 fcf8 	bl	80143f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea_strength_height.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 800ea06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ea0a:	2101      	movs	r1, #1
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff fac0 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800ea12:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 800ea16:	4620      	mov	r0, r4
 800ea18:	f005 fd14 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    container1.add(textArea_strength_height);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	f004 f866 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textArea3.setXY(6, 45);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ea36:	222d      	movs	r2, #45	; 0x2d
 800ea38:	2106      	movs	r1, #6
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7ff f898 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f503 7401 	add.w	r4, r3, #516	; 0x204
 800ea46:	22ff      	movs	r2, #255	; 0xff
 800ea48:	21ff      	movs	r1, #255	; 0xff
 800ea4a:	20ff      	movs	r0, #255	; 0xff
 800ea4c:	f7ff fde6 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ea50:	4603      	mov	r3, r0
 800ea52:	4619      	mov	r1, r3
 800ea54:	4620      	mov	r0, r4
 800ea56:	f7ff fb06 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea3.setLinespacing(0);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ea60:	2100      	movs	r1, #0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff fb62 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea3.setAlpha(219);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ea6e:	21db      	movs	r1, #219	; 0xdb
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7ff fb06 	bl	800e082 <_ZN8touchgfx8TextArea8setAlphaEh>
    textArea3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f503 7401 	add.w	r4, r3, #516	; 0x204
 800ea7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ea80:	2100      	movs	r1, #0
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff fa85 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800ea88:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f005 fcd9 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    container1.add(textArea3);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	f004 f82b 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    image2.setXY(6, 24);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800eaac:	2218      	movs	r2, #24
 800eaae:	2106      	movs	r1, #6
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7ff f85d 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_PLAY_IC_ID));
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f503 740e 	add.w	r4, r3, #568	; 0x238
 800eabc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eac0:	2123      	movs	r1, #35	; 0x23
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe ffd7 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800eac8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eacc:	4619      	mov	r1, r3
 800eace:	4620      	mov	r0, r4
 800ead0:	f005 fe36 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    container1.add(image2);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800eae0:	4619      	mov	r1, r3
 800eae2:	4610      	mov	r0, r2
 800eae4:	f004 f80a 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    container1_1.setPosition(30, 83, 81, 148);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f503 7019 	add.w	r0, r3, #612	; 0x264
 800eaee:	2394      	movs	r3, #148	; 0x94
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	2351      	movs	r3, #81	; 0x51
 800eaf4:	2253      	movs	r2, #83	; 0x53
 800eaf6:	211e      	movs	r1, #30
 800eaf8:	f7fd fda4 	bl	800c644 <_ZN8touchgfx8Drawable11setPositionEssss>

    slider_speed.setXY(0, 3);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800eb02:	2203      	movs	r2, #3
 800eb04:	2100      	movs	r1, #0
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7ff f832 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    slider_speed.setBitmaps(touchgfx::Bitmap(BITMAP_CUSTOM_SLIDER_SPEED_BG_ID), touchgfx::Bitmap(BITMAP_CUSTOM_SLIDER_SPEED_FRONT_ID), touchgfx::Bitmap(BITMAP_CUSTOM_SLIDER_SPEED_BUTTON_ID));
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f503 7424 	add.w	r4, r3, #656	; 0x290
 800eb12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800eb16:	210a      	movs	r1, #10
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fe ffac 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800eb1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eb22:	210c      	movs	r1, #12
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fe ffa6 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800eb2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800eb2e:	210b      	movs	r1, #11
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fe ffa0 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800eb36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800eb3a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800eb3e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800eb42:	4620      	mov	r0, r4
 800eb44:	f004 fbae 	bl	80132a4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider_speed.setupVerticalSlider(0, 3, 5, 0, 143);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800eb4e:	238f      	movs	r3, #143	; 0x8f
 800eb50:	9301      	str	r3, [sp, #4]
 800eb52:	2300      	movs	r3, #0
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	2305      	movs	r3, #5
 800eb58:	2203      	movs	r2, #3
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	f004 fa80 	bl	8013060 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    slider_speed.setValueRange(0, 50);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800eb66:	2232      	movs	r2, #50	; 0x32
 800eb68:	2100      	movs	r1, #0
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f004 f979 	bl	8012e62 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider_speed.setValue(0);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800eb76:	2100      	movs	r1, #0
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f004 f8fe 	bl	8012d7a <_ZN8touchgfx6Slider8setValueEi>
    slider_speed.setNewValueCallback(sliderValueChangedCallback);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f503 7224 	add.w	r2, r3, #656	; 0x290
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	4610      	mov	r0, r2
 800eb8e:	f7ff f9f1 	bl	800df74 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    container1_1.add(slider_speed);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f503 7219 	add.w	r2, r3, #612	; 0x264
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4610      	mov	r0, r2
 800eba2:	f003 ffab 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textArea_speed_low.setXY(29, 77);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800ebac:	224d      	movs	r2, #77	; 0x4d
 800ebae:	211d      	movs	r1, #29
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fe ffdd 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea_speed_low.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f503 7463 	add.w	r4, r3, #908	; 0x38c
 800ebbc:	22ff      	movs	r2, #255	; 0xff
 800ebbe:	21ff      	movs	r1, #255	; 0xff
 800ebc0:	20ff      	movs	r0, #255	; 0xff
 800ebc2:	f7ff fd2b 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	4619      	mov	r1, r3
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f7ff fa4b 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea_speed_low.setLinespacing(0);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7ff faa7 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea_speed_lowBuffer, TEXTAREA_SPEED_LOW_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 800ebe4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ebe8:	2107      	movs	r1, #7
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7ff f9d1 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800ebf0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7ff f9dd 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	4ae0      	ldr	r2, [pc, #896]	; (800ef80 <_ZN15Screen1ViewBaseC1Ev+0x910>)
 800ebfe:	2103      	movs	r1, #3
 800ec00:	4620      	mov	r0, r4
 800ec02:	f008 ff31 	bl	8017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea_speed_low.setWildcard(textArea_speed_lowBuffer);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f503 7263 	add.w	r2, r3, #908	; 0x38c
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 800ec12:	4619      	mov	r1, r3
 800ec14:	4610      	mov	r0, r2
 800ec16:	f7ff fb11 	bl	800e23c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea_speed_low.resizeToCurrentText();
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800ec20:	4618      	mov	r0, r3
 800ec22:	f005 fbe5 	bl	80143f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea_speed_low.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f503 7463 	add.w	r4, r3, #908	; 0x38c
 800ec2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ec30:	2103      	movs	r1, #3
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff f9ad 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800ec38:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f005 fc01 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    container1_1.add(textArea_speed_low);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f503 7219 	add.w	r2, r3, #612	; 0x264
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800ec4e:	4619      	mov	r1, r3
 800ec50:	4610      	mov	r0, r2
 800ec52:	f003 ff53 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textArea_speed_height.setXY(6, 67);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ec5c:	2243      	movs	r2, #67	; 0x43
 800ec5e:	2106      	movs	r1, #6
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe ff85 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea_speed_height.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f503 7471 	add.w	r4, r3, #964	; 0x3c4
 800ec6c:	22ff      	movs	r2, #255	; 0xff
 800ec6e:	21ff      	movs	r1, #255	; 0xff
 800ec70:	20ff      	movs	r0, #255	; 0xff
 800ec72:	f7ff fcd3 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ec76:	4603      	mov	r3, r0
 800ec78:	4619      	mov	r1, r3
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f7ff f9f3 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea_speed_height.setLinespacing(0);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ec86:	2100      	movs	r1, #0
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7ff fa4f 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea_speed_heightBuffer, TEXTAREA_SPEED_HEIGHT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f203 6412 	addw	r4, r3, #1554	; 0x612
 800ec94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ec98:	2106      	movs	r1, #6
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7ff f979 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800eca0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff f985 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	4ab4      	ldr	r2, [pc, #720]	; (800ef80 <_ZN15Screen1ViewBaseC1Ev+0x910>)
 800ecae:	2103      	movs	r1, #3
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	f008 fed9 	bl	8017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea_speed_height.setWildcard(textArea_speed_heightBuffer);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f503 7271 	add.w	r2, r3, #964	; 0x3c4
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f203 6312 	addw	r3, r3, #1554	; 0x612
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	4610      	mov	r0, r2
 800ecc6:	f7ff fab9 	bl	800e23c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea_speed_height.resizeToCurrentText();
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f005 fb8d 	bl	80143f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea_speed_height.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f503 7471 	add.w	r4, r3, #964	; 0x3c4
 800ecdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ece0:	2104      	movs	r1, #4
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7ff f955 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800ece8:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 800ecec:	4620      	mov	r0, r4
 800ecee:	f005 fba9 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    container1_1.add(textArea_speed_height);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f503 7219 	add.w	r2, r3, #612	; 0x264
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4610      	mov	r0, r2
 800ed02:	f003 fefb 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textArea3_1.setXY(6, 45);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800ed0c:	222d      	movs	r2, #45	; 0x2d
 800ed0e:	2106      	movs	r1, #6
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fe ff2d 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea3_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 800ed1c:	22ff      	movs	r2, #255	; 0xff
 800ed1e:	21ff      	movs	r1, #255	; 0xff
 800ed20:	20ff      	movs	r0, #255	; 0xff
 800ed22:	f7ff fc7b 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ed26:	4603      	mov	r3, r0
 800ed28:	4619      	mov	r1, r3
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f7ff f99b 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea3_1.setLinespacing(0);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800ed36:	2100      	movs	r1, #0
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7ff f9f7 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea3_1.setAlpha(219);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800ed44:	21db      	movs	r1, #219	; 0xdb
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7ff f99b 	bl	800e082 <_ZN8touchgfx8TextArea8setAlphaEh>
    textArea3_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 800ed52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ed56:	2105      	movs	r1, #5
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7ff f91a 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800ed5e:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 800ed62:	4620      	mov	r0, r4
 800ed64:	f005 fb6e 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    container1_1.add(textArea3_1);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f503 7219 	add.w	r2, r3, #612	; 0x264
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800ed74:	4619      	mov	r1, r3
 800ed76:	4610      	mov	r0, r2
 800ed78:	f003 fec0 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    image2_1.setXY(6, 24);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800ed82:	2218      	movs	r2, #24
 800ed84:	2106      	movs	r1, #6
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fe fef2 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_PLAY_IC_ID));
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f503 6486 	add.w	r4, r3, #1072	; 0x430
 800ed92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ed96:	2123      	movs	r1, #35	; 0x23
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fe fe6c 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800ed9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800eda2:	4619      	mov	r1, r3
 800eda4:	4620      	mov	r0, r4
 800eda6:	f005 fccb 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    container1_1.add(image2_1);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f503 7219 	add.w	r2, r3, #612	; 0x264
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800edb6:	4619      	mov	r1, r3
 800edb8:	4610      	mov	r0, r2
 800edba:	f003 fe9f 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>

    slider_luminosity.setXY(29, 261);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800edc4:	f240 1205 	movw	r2, #261	; 0x105
 800edc8:	211d      	movs	r1, #29
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe fed0 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    slider_luminosity.setBitmaps(touchgfx::Bitmap(BITMAP_CUSTOM_SLIDER_LUX_BG_ID), touchgfx::Bitmap(BITMAP_CUSTOM_SLIDER_LUX_FRONT_ID), touchgfx::Bitmap(BITMAP_CUSTOM_SLIDER_LUX_BUTTON_ID));
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 800edd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800edda:	2107      	movs	r1, #7
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fe fe4a 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800ede2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ede6:	2109      	movs	r1, #9
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fe fe44 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800edee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800edf2:	2108      	movs	r1, #8
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fe fe3e 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800edfa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800edfe:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800ee02:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800ee06:	4620      	mov	r0, r4
 800ee08:	f004 fa4c 	bl	80132a4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider_luminosity.setupHorizontalSlider(3, 0, 0, 0, 151);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f203 405c 	addw	r0, r3, #1116	; 0x45c
 800ee12:	2397      	movs	r3, #151	; 0x97
 800ee14:	9301      	str	r3, [sp, #4]
 800ee16:	2300      	movs	r3, #0
 800ee18:	9300      	str	r3, [sp, #0]
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	2103      	movs	r1, #3
 800ee20:	f004 f8ba 	bl	8012f98 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider_luminosity.setValueRange(0, 100);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800ee2a:	2264      	movs	r2, #100	; 0x64
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f004 f817 	bl	8012e62 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider_luminosity.setValue(0);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f003 ff9c 	bl	8012d7a <_ZN8touchgfx6Slider8setValueEi>
    slider_luminosity.setNewValueCallback(sliderValueChangedCallback);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4610      	mov	r0, r2
 800ee52:	f7ff f88f 	bl	800df74 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    textArea4.setXY(29, 34);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800ee5c:	2222      	movs	r2, #34	; 0x22
 800ee5e:	211d      	movs	r1, #29
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fe fe85 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 800ee6c:	22ff      	movs	r2, #255	; 0xff
 800ee6e:	21ff      	movs	r1, #255	; 0xff
 800ee70:	20ff      	movs	r0, #255	; 0xff
 800ee72:	f7ff fbd3 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ee76:	4603      	mov	r3, r0
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f7ff f8f3 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea4.setLinespacing(0);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800ee86:	2100      	movs	r1, #0
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7ff f94f 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 800ee94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ee98:	210a      	movs	r1, #10
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff f879 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800eea0:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 800eea4:	4620      	mov	r0, r4
 800eea6:	f005 facd 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    radioButton1.setXY(154, 28);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800eeb0:	221c      	movs	r2, #28
 800eeb2:	219a      	movs	r1, #154	; 0x9a
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fe fe5b 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    radioButton1.setBitmaps(touchgfx::Bitmap(BITMAP_TOGGLE_OFF_ID), touchgfx::Bitmap(BITMAP_TOGGLE_OFF_ID), touchgfx::Bitmap(BITMAP_TOGGLE_ON_ID), touchgfx::Bitmap(BITMAP_TOGGLE_ON_ID));
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f203 548c 	addw	r4, r3, #1420	; 0x58c
 800eec0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800eec4:	213d      	movs	r1, #61	; 0x3d
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fe fdd5 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800eecc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800eed0:	213d      	movs	r1, #61	; 0x3d
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fe fdcf 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800eed8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800eedc:	213e      	movs	r1, #62	; 0x3e
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fe fdc9 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800eee4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800eee8:	213e      	movs	r1, #62	; 0x3e
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fe fdc3 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800eef0:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800eef4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800eef8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800eefc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	4603      	mov	r3, r0
 800ef04:	4620      	mov	r0, r4
 800ef06:	f005 fc89 	bl	801481c <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    radioButton1.setSelected(false);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800ef10:	2100      	movs	r1, #0
 800ef12:	4618      	mov	r0, r3
 800ef14:	f005 fd44 	bl	80149a0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButton1.setDeselectionEnabled(true);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800ef1e:	2101      	movs	r1, #1
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff fa55 	bl	800e3d0 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>

    add(image1);
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	3340      	adds	r3, #64	; 0x40
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4610      	mov	r0, r2
 800ef30:	f7fe ff96 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(container1);
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	336c      	adds	r3, #108	; 0x6c
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	f7fe ff8f 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(container1_1);
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	f7fe ff87 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(slider_luminosity);
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	4610      	mov	r0, r2
 800ef5e:	f7fe ff7f 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea4);
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	f7fe ff77 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(radioButton1);
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	e001      	b.n	800ef84 <_ZN15Screen1ViewBaseC1Ev+0x914>
 800ef80:	08024ea4 	.word	0x08024ea4
 800ef84:	f7fe ff6c 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    radioButtonGroup1.add(radioButton1);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f203 52cc 	addw	r2, r3, #1484	; 0x5cc
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f000 f992 	bl	800f2c0 <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE>
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f203 52cc 	addw	r2, r3, #1484	; 0x5cc
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800efa8:	4619      	mov	r1, r3
 800efaa:	4610      	mov	r0, r2
 800efac:	f000 f9ba 	bl	800f324 <_ZN8touchgfx16RadioButtonGroupILt1EE29setRadioButtonSelectedHandlerERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>
    radioButtonGroup1.setRadioButtonDeselectedHandler(radioButtonDeselectedCallback);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f203 52cc 	addw	r2, r3, #1484	; 0x5cc
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 800efbc:	4619      	mov	r1, r3
 800efbe:	4610      	mov	r0, r2
 800efc0:	f000 f9be 	bl	800f340 <_ZN8touchgfx16RadioButtonGroupILt1EE31setRadioButtonDeselectedHandlerERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>
}
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4618      	mov	r0, r3
 800efc8:	379c      	adds	r7, #156	; 0x9c
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd90      	pop	{r4, r7, pc}
 800efce:	bf00      	nop

0800efd0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]

}
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <_ZN15Screen1ViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void Screen1ViewBase::handleKeyEvent(uint8_t key)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	70fb      	strb	r3, [r7, #3]
    if(0 == key)
 800eff0:	78fb      	ldrb	r3, [r7, #3]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d106      	bne.n	800f004 <_ZN15Screen1ViewBase14handleKeyEventEh+0x20>
    {
        //Interaction5
        //When hardware button 0 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7ff fb04 	bl	800e604 <_ZN15Screen1ViewBase11applicationEv>
 800effc:	4603      	mov	r3, r0
 800effe:	4618      	mov	r0, r3
 800f000:	f7fd fdde 	bl	800cbc0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
    }
}
 800f004:	bf00      	nop
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
    if (&src == &slider_strength)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	3398      	adds	r3, #152	; 0x98
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d107      	bne.n	800f032 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Interaction2
        //When slider_strength value changed call virtual function
        //Call Update_Duty
        Update_Duty(value);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	3334      	adds	r3, #52	; 0x34
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	4798      	blx	r3
        //Interaction3
        //When slider_luminosity value changed call virtual function
        //Call Update_Luminosity
        Update_Luminosity(value);
    }
}
 800f030:	e01a      	b.n	800f068 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5c>
    else if (&src == &slider_speed)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800f038:	68ba      	ldr	r2, [r7, #8]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d107      	bne.n	800f04e <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x42>
        Update_Freq(value);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3330      	adds	r3, #48	; 0x30
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	6879      	ldr	r1, [r7, #4]
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	4798      	blx	r3
}
 800f04c:	e00c      	b.n	800f068 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5c>
    else if (&src == &slider_luminosity)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	429a      	cmp	r2, r3
 800f058:	d106      	bne.n	800f068 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x5c>
        Update_Luminosity(value);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	332c      	adds	r3, #44	; 0x2c
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	6879      	ldr	r1, [r7, #4]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	4798      	blx	r3
}
 800f068:	bf00      	nop
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <_ZN15Screen1ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
    if (&src == &radioButton1)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800f080:	683a      	ldr	r2, [r7, #0]
 800f082:	429a      	cmp	r2, r3
 800f084:	d105      	bne.n	800f092 <_ZN15Screen1ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction6
        //When radioButton1 selected call virtual function
        //Call Update_Mode_Reading_ON
        Update_Mode_Reading_ON();
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3338      	adds	r3, #56	; 0x38
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	4798      	blx	r3
    }
}
 800f092:	bf00      	nop
 800f094:	3708      	adds	r7, #8
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <_ZN15Screen1ViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::radioButtonDeselectedCallbackHandler(const touchgfx::AbstractButton& src)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b082      	sub	sp, #8
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
 800f0a2:	6039      	str	r1, [r7, #0]
    if (&src == &radioButton1)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d105      	bne.n	800f0bc <_ZN15Screen1ViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction7
        //When radioButton1 deselected call virtual function
        //Call Update_Mode_Reading_OFF
        Update_Mode_Reading_OFF();
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	333c      	adds	r3, #60	; 0x3c
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	4798      	blx	r3
    }
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	4a05      	ldr	r2, [pc, #20]	; (800f0e4 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	601a      	str	r2, [r3, #0]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f000 f941 	bl	800f35c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	08025820 	.word	0x08025820

0800f0e8 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED0Ev>:
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7ff ffe7 	bl	800f0c4 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev>
 800f0f6:	2110      	movs	r1, #16
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f014 fa15 	bl	8023528 <_ZdlPvj>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4618      	mov	r0, r3
 800f102:	3708      	adds	r7, #8
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <_ZN8touchgfx16RadioButtonGroupILt1EED1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~RadioButtonGroup()
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
    {
    }
 800f110:	4a08      	ldr	r2, [pc, #32]	; (800f134 <_ZN8touchgfx16RadioButtonGroupILt1EED1Ev+0x2c>)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	331c      	adds	r3, #28
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff ffd2 	bl	800f0c4 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	330c      	adds	r3, #12
 800f124:	4618      	mov	r0, r3
 800f126:	f7ff ffcd 	bl	800f0c4 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4618      	mov	r0, r3
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	080257ec 	.word	0x080257ec

0800f138 <_ZN8touchgfx16RadioButtonGroupILt1EED0Ev>:
    virtual ~RadioButtonGroup()
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
    }
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7ff ffe1 	bl	800f108 <_ZN8touchgfx16RadioButtonGroupILt1EED1Ev>
 800f146:	2134      	movs	r1, #52	; 0x34
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f014 f9ed 	bl	8023528 <_ZdlPvj>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4618      	mov	r0, r3
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	f007 fb7e 	bl	8016864 <_ZN8touchgfx6ScreenC1Ev>
 800f168:	4a05      	ldr	r2, [pc, #20]	; (800f180 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	601a      	str	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4618      	mov	r0, r3
 800f178:	3708      	adds	r7, #8
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	08025838 	.word	0x08025838

0800f184 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev>:
    RadioButtonGroup() :
 800f184:	b590      	push	{r4, r7, lr}
 800f186:	b087      	sub	sp, #28
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
        radioButtonDeselectedCallback(0)
 800f18c:	4a19      	ldr	r2, [pc, #100]	; (800f1f4 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev+0x70>)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	601a      	str	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2200      	movs	r2, #0
 800f196:	811a      	strh	r2, [r3, #8]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f103 040c 	add.w	r4, r3, #12
 800f19e:	4a16      	ldr	r2, [pc, #88]	; (800f1f8 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev+0x74>)
 800f1a0:	f107 0308 	add.w	r3, r7, #8
 800f1a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1a8:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1ac:	f107 0308 	add.w	r3, r7, #8
 800f1b0:	cb0c      	ldmia	r3, {r2, r3}
 800f1b2:	6879      	ldr	r1, [r7, #4]
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f000 f969 	bl	800f48c <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f103 041c 	add.w	r4, r3, #28
 800f1c0:	4a0e      	ldr	r2, [pc, #56]	; (800f1fc <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev+0x78>)
 800f1c2:	f107 0310 	add.w	r3, r7, #16
 800f1c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1ca:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1ce:	f107 0310 	add.w	r3, r7, #16
 800f1d2:	cb0c      	ldmia	r3, {r2, r3}
 800f1d4:	6879      	ldr	r1, [r7, #4]
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f000 f958 	bl	800f48c <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	62da      	str	r2, [r3, #44]	; 0x2c
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	371c      	adds	r7, #28
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd90      	pop	{r4, r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	080257ec 	.word	0x080257ec
 800f1f8:	08024ea8 	.word	0x08024ea8
 800f1fc:	08024eb0 	.word	0x08024eb0

0800f200 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	4a04      	ldr	r2, [pc, #16]	; (800f21c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4618      	mov	r0, r3
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	08025900 	.word	0x08025900

0800f220 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	4639      	mov	r1, r7
 800f22c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	4618      	mov	r0, r3
 800f234:	f7ff ffe4 	bl	800f200 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 800f238:	4a08      	ldr	r2, [pc, #32]	; (800f25c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	3308      	adds	r3, #8
 800f248:	463a      	mov	r2, r7
 800f24a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f24e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	4618      	mov	r0, r3
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	080257d4 	.word	0x080257d4

0800f260 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	4a04      	ldr	r2, [pc, #16]	; (800f27c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr
 800f27c:	0802586c 	.word	0x0802586c

0800f280 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	4639      	mov	r1, r7
 800f28c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff ffe4 	bl	800f260 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800f298:	4a08      	ldr	r2, [pc, #32]	; (800f2bc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	463a      	mov	r2, r7
 800f2aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2ae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	080257bc 	.word	0x080257bc

0800f2c0 <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE>:
     *        Add the RadioButton to the RadioButtonGroup. Only add as many RadioButtons as the
     *        stated CAPACITY. Checked by an assert.
     *
     * @param [in] radioButton the RadioButton that is to be added.
     */
    virtual void add(RadioButton& radioButton)
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
    {
        assert(size < CAPACITY && "RadioButtonGroup capacity exceeded!");
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	891b      	ldrh	r3, [r3, #8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d005      	beq.n	800f2de <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE+0x1e>
 800f2d2:	4b11      	ldr	r3, [pc, #68]	; (800f318 <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE+0x58>)
 800f2d4:	4a11      	ldr	r2, [pc, #68]	; (800f31c <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE+0x5c>)
 800f2d6:	2154      	movs	r1, #84	; 0x54
 800f2d8:	4811      	ldr	r0, [pc, #68]	; (800f320 <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE+0x60>)
 800f2da:	f014 f951 	bl	8023580 <__assert_func>
        radioButton.setAction(radioButtonClicked);
 800f2de:	683a      	ldr	r2, [r7, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	330c      	adds	r3, #12
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	f7fe ffd4 	bl	800e294 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
        radioButton.setDeselectedAction(radioButtonUnselected);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	331c      	adds	r3, #28
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	6838      	ldr	r0, [r7, #0]
 800f2f4:	f7ff f85e 	bl	800e3b4 <_ZN8touchgfx11RadioButton19setDeselectedActionERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>
        radioButtons[size++] = &radioButton;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	891b      	ldrh	r3, [r3, #8]
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	b291      	uxth	r1, r2
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	8111      	strh	r1, [r2, #8]
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	683a      	ldr	r2, [r7, #0]
 800f30c:	605a      	str	r2, [r3, #4]
    }
 800f30e:	bf00      	nop
 800f310:	3708      	adds	r7, #8
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	08024eb8 	.word	0x08024eb8
 800f31c:	080259d4 	.word	0x080259d4
 800f320:	08024ef4 	.word	0x08024ef4

0800f324 <_ZN8touchgfx16RadioButtonGroupILt1EE29setRadioButtonSelectedHandlerERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the RadioButton that was selected.
     *
     * @see GenericCallback
     */
    void setRadioButtonSelectedHandler(GenericCallback< const AbstractButton& >& callback)
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
    {
        radioButtonSelectedCallback = &callback;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	683a      	ldr	r2, [r7, #0]
 800f332:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800f334:	bf00      	nop
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <_ZN8touchgfx16RadioButtonGroupILt1EE31setRadioButtonDeselectedHandlerERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the RadioButton that was selected.
     *
     * @see GenericCallback
     */
    void setRadioButtonDeselectedHandler(GenericCallback< const AbstractButton& >& callback)
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
    {
        radioButtonDeselectedCallback = &callback;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	683a      	ldr	r2, [r7, #0]
 800f34e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f350:	bf00      	nop
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
    }
 800f364:	4a04      	ldr	r2, [pc, #16]	; (800f378 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	601a      	str	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4618      	mov	r0, r3
 800f36e:	370c      	adds	r7, #12
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	0802586c 	.word	0x0802586c

0800f37c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
    }
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7ff ffe9 	bl	800f35c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f38a:	2104      	movs	r1, #4
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f014 f8cb 	bl	8023528 <_ZdlPvj>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE>:
     *        Handles the event that a RadioButton has been selected. deselects all other
     *        RadioButtons.
     *
     * @param radioButton the RadioButton that has been selected.
     */
    virtual void radioButtonClickedHandler(const AbstractButton& radioButton)
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
    {
        // Deselect other radio buttons
        for (uint16_t i = 0; i < size; i++)
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	81fb      	strh	r3, [r7, #14]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	891b      	ldrh	r3, [r3, #8]
 800f3ae:	89fa      	ldrh	r2, [r7, #14]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d21f      	bcs.n	800f3f4 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x58>
        {
            if (radioButtons[i] != &radioButton)
 800f3b4:	89fb      	ldrh	r3, [r7, #14]
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	4413      	add	r3, r2
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	683a      	ldr	r2, [r7, #0]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d013      	beq.n	800f3ec <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x50>
            {
                if (radioButtons[i]->getSelected())
 800f3c4:	89fb      	ldrh	r3, [r7, #14]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	009b      	lsls	r3, r3, #2
 800f3ca:	4413      	add	r3, r2
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7ff f81b 	bl	800e40a <_ZNK8touchgfx11RadioButton11getSelectedEv>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d008      	beq.n	800f3ec <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x50>
                {
                    radioButtons[i]->setSelected(false);
 800f3da:	89fb      	ldrh	r3, [r7, #14]
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	4413      	add	r3, r2
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f005 fada 	bl	80149a0 <_ZN8touchgfx11RadioButton11setSelectedEb>
        for (uint16_t i = 0; i < size; i++)
 800f3ec:	89fb      	ldrh	r3, [r7, #14]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	81fb      	strh	r3, [r7, #14]
 800f3f2:	e7da      	b.n	800f3aa <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0xe>
                }
            }
        }

        if (radioButtonSelectedCallback && radioButtonSelectedCallback->isValid())
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d00d      	beq.n	800f418 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7c>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	330c      	adds	r3, #12
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4610      	mov	r0, r2
 800f40c:	4798      	blx	r3
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d001      	beq.n	800f418 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7c>
 800f414:	2301      	movs	r3, #1
 800f416:	e000      	b.n	800f41a <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7e>
 800f418:	2300      	movs	r3, #0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d009      	beq.n	800f432 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x96>
        {
            radioButtonSelectedCallback->execute(radioButton);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	3308      	adds	r3, #8
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6839      	ldr	r1, [r7, #0]
 800f42e:	4610      	mov	r0, r2
 800f430:	4798      	blx	r3
        }
    }
 800f432:	bf00      	nop
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE>:
     *
     *        Handles the event that a RadioButton has been deselected.
     *
     * @param radioButton the RadioButton that has been deselected.
     */
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b082      	sub	sp, #8
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	6039      	str	r1, [r7, #0]
    {
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00d      	beq.n	800f468 <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x2e>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	330c      	adds	r3, #12
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4610      	mov	r0, r2
 800f45c:	4798      	blx	r3
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x2e>
 800f464:	2301      	movs	r3, #1
 800f466:	e000      	b.n	800f46a <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x30>
 800f468:	2300      	movs	r3, #0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d009      	beq.n	800f482 <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x48>
        {
            radioButtonDeselectedCallback->execute(radioButton);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	3308      	adds	r3, #8
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	6839      	ldr	r1, [r7, #0]
 800f47e:	4610      	mov	r0, r2
 800f480:	4798      	blx	r3
        }
    }
 800f482:	bf00      	nop
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
	...

0800f48c <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	4639      	mov	r1, r7
 800f498:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff fede 	bl	800f260 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800f4a4:	4a08      	ldr	r2, [pc, #32]	; (800f4c8 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E+0x3c>)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	3308      	adds	r3, #8
 800f4b4:	463a      	mov	r2, r7
 800f4b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	08025820 	.word	0x08025820

0800f4cc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
    }
 800f4d4:	4a04      	ldr	r2, [pc, #16]	; (800f4e8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	601a      	str	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr
 800f4e8:	08025900 	.word	0x08025900

0800f4ec <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
    }
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f7ff ffe9 	bl	800f4cc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800f4fa:	2104      	movs	r1, #4
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f014 f813 	bl	8023528 <_ZdlPvj>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	4a05      	ldr	r2, [pc, #20]	; (800f52c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	601a      	str	r2, [r3, #0]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7ff ff1d 	bl	800f35c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4618      	mov	r0, r3
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	080257bc 	.word	0x080257bc

0800f530 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7ff ffe7 	bl	800f50c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f53e:	2110      	movs	r1, #16
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f013 fff1 	bl	8023528 <_ZdlPvj>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4618      	mov	r0, r3
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	4a05      	ldr	r2, [pc, #20]	; (800f570 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev+0x20>)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	601a      	str	r2, [r3, #0]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff ffb3 	bl	800f4cc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4618      	mov	r0, r3
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	080257d4 	.word	0x080257d4

0800f574 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED0Ev>:
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7ff ffe7 	bl	800f550 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>
 800f582:	2110      	movs	r1, #16
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f013 ffcf 	bl	8023528 <_ZdlPvj>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4618      	mov	r0, r3
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	4a05      	ldr	r2, [pc, #20]	; (800f5b4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	601a      	str	r2, [r3, #0]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fe fc7d 	bl	800dea4 <_ZN8touchgfx6WidgetD1Ev>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3708      	adds	r7, #8
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	08027768 	.word	0x08027768

0800f5b8 <_ZN8touchgfx5ImageD0Ev>:
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff ffe7 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800f5c6:	212c      	movs	r1, #44	; 0x2c
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f013 ffad 	bl	8023528 <_ZdlPvj>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	4a05      	ldr	r2, [pc, #20]	; (800f5f8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	601a      	str	r2, [r3, #0]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fe fdef 	bl	800e1cc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	080276ec 	.word	0x080276ec

0800f5fc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7ff ffe7 	bl	800f5d8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f60a:	2138      	movs	r1, #56	; 0x38
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f013 ff8b 	bl	8023528 <_ZdlPvj>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	68d2      	ldr	r2, [r2, #12]
 800f62e:	1052      	asrs	r2, r2, #1
 800f630:	1898      	adds	r0, r3, r2
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d102      	bne.n	800f644 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	e00a      	b.n	800f65a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	68d2      	ldr	r2, [r2, #12]
 800f64c:	1052      	asrs	r2, r2, #1
 800f64e:	4413      	add	r3, r2
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	6892      	ldr	r2, [r2, #8]
 800f656:	4413      	add	r3, r2
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	4798      	blx	r3
    }
 800f65e:	bf00      	nop
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f666:	b480      	push	{r7}
 800f668:	b083      	sub	sp, #12
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d010      	beq.n	800f698 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d107      	bne.n	800f68e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	f003 0301 	and.w	r3, r3, #1
 800f686:	2b00      	cmp	r3, #0
 800f688:	d101      	bne.n	800f68e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e000      	b.n	800f690 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f68e:	2300      	movs	r3, #0
 800f690:	2b01      	cmp	r3, #1
 800f692:	d001      	beq.n	800f698 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f694:	2301      	movs	r3, #1
 800f696:	e000      	b.n	800f69a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f698:	2300      	movs	r3, #0
    }
 800f69a:	4618      	mov	r0, r3
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b084      	sub	sp, #16
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	60f8      	str	r0, [r7, #12]
 800f6ae:	60b9      	str	r1, [r7, #8]
 800f6b0:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	68d2      	ldr	r2, [r2, #12]
 800f6ba:	1052      	asrs	r2, r2, #1
 800f6bc:	1898      	adds	r0, r3, r2
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	f003 0301 	and.w	r3, r3, #1
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d102      	bne.n	800f6d0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	e00a      	b.n	800f6e6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	68d2      	ldr	r2, [r2, #12]
 800f6d8:	1052      	asrs	r2, r2, #1
 800f6da:	4413      	add	r3, r2
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	6892      	ldr	r2, [r2, #8]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	68b9      	ldr	r1, [r7, #8]
 800f6ea:	4798      	blx	r3
    }
 800f6ec:	bf00      	nop
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d010      	beq.n	800f726 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d107      	bne.n	800f71c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	f003 0301 	and.w	r3, r3, #1
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800f718:	2301      	movs	r3, #1
 800f71a:	e000      	b.n	800f71e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 800f71c:	2300      	movs	r3, #0
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d001      	beq.n	800f726 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800f722:	2301      	movs	r3, #1
 800f724:	e000      	b.n	800f728 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 800f726:	2300      	movs	r3, #0
    }
 800f728:	4618      	mov	r0, r3
 800f72a:	370c      	adds	r7, #12
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <_ZNK8touchgfx16RadioButtonGroupILt1EE14getRadioButtonEt>:
    virtual RadioButton* getRadioButton(uint16_t index) const
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	460b      	mov	r3, r1
 800f73e:	807b      	strh	r3, [r7, #2]
        return (size > index) ? radioButtons[index] : 0;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	891b      	ldrh	r3, [r3, #8]
 800f744:	887a      	ldrh	r2, [r7, #2]
 800f746:	429a      	cmp	r2, r3
 800f748:	d205      	bcs.n	800f756 <_ZNK8touchgfx16RadioButtonGroupILt1EE14getRadioButtonEt+0x22>
 800f74a:	887b      	ldrh	r3, [r7, #2]
 800f74c:	687a      	ldr	r2, [r7, #4]
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	4413      	add	r3, r2
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	e000      	b.n	800f758 <_ZNK8touchgfx16RadioButtonGroupILt1EE14getRadioButtonEt+0x24>
 800f756:	2300      	movs	r3, #0
    }
 800f758:	4618      	mov	r0, r3
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv>:
    virtual int32_t getSelectedRadioButtonIndex() const
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
        for (uint16_t i = 0; i < size; i++)
 800f76c:	2300      	movs	r3, #0
 800f76e:	81fb      	strh	r3, [r7, #14]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	891b      	ldrh	r3, [r3, #8]
 800f774:	89fa      	ldrh	r2, [r7, #14]
 800f776:	429a      	cmp	r2, r3
 800f778:	d210      	bcs.n	800f79c <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv+0x38>
            if (radioButtons[i]->getSelected())
 800f77a:	89fb      	ldrh	r3, [r7, #14]
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	4413      	add	r3, r2
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	4618      	mov	r0, r3
 800f786:	f7fe fe40 	bl	800e40a <_ZNK8touchgfx11RadioButton11getSelectedEv>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d001      	beq.n	800f794 <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv+0x30>
                return i;
 800f790:	89fb      	ldrh	r3, [r7, #14]
 800f792:	e005      	b.n	800f7a0 <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv+0x3c>
        for (uint16_t i = 0; i < size; i++)
 800f794:	89fb      	ldrh	r3, [r7, #14]
 800f796:	3301      	adds	r3, #1
 800f798:	81fb      	strh	r3, [r7, #14]
 800f79a:	e7e9      	b.n	800f770 <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv+0xc>
        return -1;
 800f79c:	f04f 33ff 	mov.w	r3, #4294967295
    }
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <_ZNK8touchgfx16RadioButtonGroupILt1EE22getSelectedRadioButtonEv>:
    virtual RadioButton* getSelectedRadioButton() const
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
        int32_t index = getSelectedRadioButtonIndex();
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	3310      	adds	r3, #16
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	4798      	blx	r3
 800f7bc:	60f8      	str	r0, [r7, #12]
        return (index < 0) ? 0 : getRadioButton(index);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	db0a      	blt.n	800f7da <_ZNK8touchgfx16RadioButtonGroupILt1EE22getSelectedRadioButtonEv+0x32>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	330c      	adds	r3, #12
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	b292      	uxth	r2, r2
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	4798      	blx	r3
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	e000      	b.n	800f7dc <_ZNK8touchgfx16RadioButtonGroupILt1EE22getSelectedRadioButtonEv+0x34>
 800f7da:	2300      	movs	r3, #0
    }
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <_ZN8touchgfx16RadioButtonGroupILt1EE11setSelectedERNS_11RadioButtonE>:
    virtual void setSelected(RadioButton& radioButton)
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
        radioButton.setSelected(true);
 800f7ee:	2101      	movs	r1, #1
 800f7f0:	6838      	ldr	r0, [r7, #0]
 800f7f2:	f005 f8d5 	bl	80149a0 <_ZN8touchgfx11RadioButton11setSelectedEb>
        radioButtonClickedHandler(radioButton);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3324      	adds	r3, #36	; 0x24
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	4611      	mov	r1, r2
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	4798      	blx	r3
    }
 800f806:	bf00      	nop
 800f808:	3708      	adds	r7, #8
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <_ZN8touchgfx16RadioButtonGroupILt1EE21setDeselectionEnabledEb>:
    virtual void setDeselectionEnabled(bool deselectionEnabled)
 800f80e:	b580      	push	{r7, lr}
 800f810:	b084      	sub	sp, #16
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	460b      	mov	r3, r1
 800f818:	70fb      	strb	r3, [r7, #3]
        for (uint16_t i = 0; i < size; i++)
 800f81a:	2300      	movs	r3, #0
 800f81c:	81fb      	strh	r3, [r7, #14]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	891b      	ldrh	r3, [r3, #8]
 800f822:	89fa      	ldrh	r2, [r7, #14]
 800f824:	429a      	cmp	r2, r3
 800f826:	d20d      	bcs.n	800f844 <_ZN8touchgfx16RadioButtonGroupILt1EE21setDeselectionEnabledEb+0x36>
            radioButtons[i]->setDeselectionEnabled(deselectionEnabled);
 800f828:	89fb      	ldrh	r3, [r7, #14]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	4413      	add	r3, r2
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	78fa      	ldrb	r2, [r7, #3]
 800f834:	4611      	mov	r1, r2
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe fdca 	bl	800e3d0 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>
        for (uint16_t i = 0; i < size; i++)
 800f83c:	89fb      	ldrh	r3, [r7, #14]
 800f83e:	3301      	adds	r3, #1
 800f840:	81fb      	strh	r3, [r7, #14]
 800f842:	e7ec      	b.n	800f81e <_ZN8touchgfx16RadioButtonGroupILt1EE21setDeselectionEnabledEb+0x10>
    }
 800f844:	bf00      	nop
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <_ZNK8touchgfx16RadioButtonGroupILt1EE21getDeselectionEnabledEv>:
    virtual bool getDeselectionEnabled() const
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
        return (size > 0) ? radioButtons[0]->getDeselectionEnabled() : false;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	891b      	ldrh	r3, [r3, #8]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d009      	beq.n	800f870 <_ZNK8touchgfx16RadioButtonGroupILt1EE21getDeselectionEnabledEv+0x24>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	4618      	mov	r0, r3
 800f862:	f7fe fdc5 	bl	800e3f0 <_ZNK8touchgfx11RadioButton21getDeselectionEnabledEv>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <_ZNK8touchgfx16RadioButtonGroupILt1EE21getDeselectionEnabledEv+0x24>
 800f86c:	2301      	movs	r3, #1
 800f86e:	e000      	b.n	800f872 <_ZNK8touchgfx16RadioButtonGroupILt1EE21getDeselectionEnabledEv+0x26>
 800f870:	2300      	movs	r3, #0
    }
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}

0800f87a <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800f87a:	b580      	push	{r7, lr}
 800f87c:	b082      	sub	sp, #8
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
 800f882:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	68d2      	ldr	r2, [r2, #12]
 800f88c:	1052      	asrs	r2, r2, #1
 800f88e:	1898      	adds	r0, r3, r2
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	f003 0301 	and.w	r3, r3, #1
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d102      	bne.n	800f8a2 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7executeES5_+0x28>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	e00a      	b.n	800f8b8 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7executeES5_+0x3e>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	68d2      	ldr	r2, [r2, #12]
 800f8aa:	1052      	asrs	r2, r2, #1
 800f8ac:	4413      	add	r3, r2
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	6892      	ldr	r2, [r2, #8]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	6839      	ldr	r1, [r7, #0]
 800f8ba:	4798      	blx	r3
    }
 800f8bc:	bf00      	nop
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d010      	beq.n	800f8f6 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d107      	bne.n	800f8ec <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	f003 0301 	and.w	r3, r3, #1
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d101      	bne.n	800f8ec <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	e000      	b.n	800f8ee <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d001      	beq.n	800f8f6 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e000      	b.n	800f8f8 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f8f6:	2300      	movs	r3, #0
    }
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	370c      	adds	r7, #12
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr

0800f904 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fe fab6 	bl	800de80 <_ZN8touchgfx6WidgetC1Ev>
 800f914:	4a0a      	ldr	r2, [pc, #40]	; (800f940 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	601a      	str	r2, [r3, #0]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	22ff      	movs	r2, #255	; 0xff
 800f91e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	3328      	adds	r3, #40	; 0x28
 800f926:	2100      	movs	r1, #0
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fe f85e 	bl	800d9ea <_ZN8touchgfx9colortypeC1Em>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2200      	movs	r2, #0
 800f932:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4618      	mov	r0, r3
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}
 800f940:	0802757c 	.word	0x0802757c

0800f944 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	4a05      	ldr	r2, [pc, #20]	; (800f964 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	601a      	str	r2, [r3, #0]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4618      	mov	r0, r3
 800f956:	f7fe faa5 	bl	800dea4 <_ZN8touchgfx6WidgetD1Ev>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4618      	mov	r0, r3
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	0802757c 	.word	0x0802757c

0800f968 <_ZN8touchgfx3BoxD0Ev>:
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7ff ffe7 	bl	800f944 <_ZN8touchgfx3BoxD1Ev>
 800f976:	2130      	movs	r1, #48	; 0x30
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f013 fdd5 	bl	8023528 <_ZdlPvj>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	683a      	ldr	r2, [r7, #0]
 800f996:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fe fc52 	bl	800e258 <_ZN8touchgfx14AbstractButtonC1Ev>
 800f9b4:	4a0c      	ldr	r2, [pc, #48]	; (800f9e8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	601a      	str	r2, [r3, #0]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	332e      	adds	r3, #46	; 0x2e
 800f9be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fe f857 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3330      	adds	r3, #48	; 0x30
 800f9cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fe f850 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	22ff      	movs	r2, #255	; 0xff
 800f9da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	08027648 	.word	0x08027648

0800f9ec <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	4a05      	ldr	r2, [pc, #20]	; (800fa0c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fe fc57 	bl	800e2b0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	08027648 	.word	0x08027648

0800fa10 <_ZN8touchgfx6ButtonD0Ev>:
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f7ff ffe7 	bl	800f9ec <_ZN8touchgfx6ButtonD1Ev>
 800fa1e:	2134      	movs	r1, #52	; 0x34
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f013 fd81 	bl	8023528 <_ZdlPvj>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	4a05      	ldr	r2, [pc, #20]	; (800fa50 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fe f9b5 	bl	800ddb0 <_ZN8touchgfx6ScreenD1Ev>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	08025a98 	.word	0x08025a98

0800fa54 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7ff ffe7 	bl	800fa30 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 800fa62:	2140      	movs	r1, #64	; 0x40
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f013 fd5f 	bl	8023528 <_ZdlPvj>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	4a27      	ldr	r2, [pc, #156]	; (800fb1c <_ZN15Screen2ViewBaseD1Ev+0xa8>)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f000 fae9 	bl	8010060 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7fe fb65 	bl	800e164 <_ZN8touchgfx8TextAreaD1Ev>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7ff fd77 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800faac:	4618      	mov	r0, r3
 800faae:	f7ff fd71 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800fab8:	4618      	mov	r0, r3
 800faba:	f7ff fd6b 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7ff fd65 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7ff ff37 	bl	800f944 <_ZN8touchgfx3BoxD1Ev>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fe fb41 	bl	800e164 <_ZN8touchgfx8TextAreaD1Ev>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	33d0      	adds	r3, #208	; 0xd0
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fe fb3c 	bl	800e164 <_ZN8touchgfx8TextAreaD1Ev>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	339c      	adds	r3, #156	; 0x9c
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7ff ff7b 	bl	800f9ec <_ZN8touchgfx6ButtonD1Ev>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	3370      	adds	r3, #112	; 0x70
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7ff fd4a 	bl	800f594 <_ZN8touchgfx5ImageD1Ev>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3340      	adds	r3, #64	; 0x40
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7ff ff1d 	bl	800f944 <_ZN8touchgfx3BoxD1Ev>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff ff8f 	bl	800fa30 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	08025a4c 	.word	0x08025a4c

0800fb20 <_ZN15Screen2ViewBaseD0Ev>:
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7ff ffa3 	bl	800fa74 <_ZN15Screen2ViewBaseD1Ev>
 800fb2e:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f013 fcf8 	bl	8023528 <_ZdlPvj>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3708      	adds	r7, #8
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b082      	sub	sp, #8
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800fb4a:	f005 ff55 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 800fb4e:	4603      	mov	r3, r0
    }
 800fb50:	4618      	mov	r0, r3
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 800fb58:	b590      	push	{r4, r7, lr}
 800fb5a:	b097      	sub	sp, #92	; 0x5c
 800fb5c:	af02      	add	r7, sp, #8
 800fb5e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f000 fa46 	bl	800fff4 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 800fb68:	4ae2      	ldr	r2, [pc, #904]	; (800fef4 <_ZN15Screen2ViewBaseC1Ev+0x39c>)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	3340      	adds	r3, #64	; 0x40
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff fec6 	bl	800f904 <_ZN8touchgfx3BoxC1Ev>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800fb7e:	f107 030c 	add.w	r3, r7, #12
 800fb82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7fd ff75 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fb8c:	f107 030c 	add.w	r3, r7, #12
 800fb90:	4619      	mov	r1, r3
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7fe f9cc 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	339c      	adds	r3, #156	; 0x9c
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff ff01 	bl	800f9a4 <_ZN8touchgfx6ButtonC1Ev>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	33d0      	adds	r3, #208	; 0xd0
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fe fa1a 	bl	800dfe0 <_ZN8touchgfx8TextAreaC1Ev>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe fa14 	bl	800dfe0 <_ZN8touchgfx8TextAreaC1Ev>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7ff fea0 	bl	800f904 <_ZN8touchgfx3BoxC1Ev>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800fbca:	f107 0310 	add.w	r3, r7, #16
 800fbce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fd ff4f 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fbd8:	f107 0310 	add.w	r3, r7, #16
 800fbdc:	4619      	mov	r1, r3
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f7fe f9a6 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800fbea:	f107 0314 	add.w	r3, r7, #20
 800fbee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fd ff3f 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fbf8:	f107 0314 	add.w	r3, r7, #20
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f7fe f996 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 800fc0a:	f107 0318 	add.w	r3, r7, #24
 800fc0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fd ff2f 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fc18:	f107 0318 	add.w	r3, r7, #24
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f7fe f986 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f503 74f6 	add.w	r4, r3, #492	; 0x1ec
 800fc2a:	f107 031c 	add.w	r3, r7, #28
 800fc2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fd ff1f 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fc38:	f107 031c 	add.w	r3, r7, #28
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f7fe f976 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7fe f9c8 	bl	800dfe0 <_ZN8touchgfx8TextAreaC1Ev>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 800fc56:	4ba8      	ldr	r3, [pc, #672]	; (800fef8 <_ZN15Screen2ViewBaseC1Ev+0x3a0>)
 800fc58:	623b      	str	r3, [r7, #32]
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	627b      	str	r3, [r7, #36]	; 0x24
 800fc5e:	f107 0320 	add.w	r3, r7, #32
 800fc62:	cb0c      	ldmia	r3, {r2, r3}
 800fc64:	6879      	ldr	r1, [r7, #4]
 800fc66:	f000 f9db 	bl	8010020 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box2.setPosition(0, 0, 240, 320);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800fc70:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800fc74:	9300      	str	r3, [sp, #0]
 800fc76:	23f0      	movs	r3, #240	; 0xf0
 800fc78:	2200      	movs	r2, #0
 800fc7a:	2100      	movs	r1, #0
 800fc7c:	f7fc fce2 	bl	800c644 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFrom24BitRGB(244, 244, 244));
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800fc86:	22f4      	movs	r2, #244	; 0xf4
 800fc88:	21f4      	movs	r1, #244	; 0xf4
 800fc8a:	20f4      	movs	r0, #244	; 0xf4
 800fc8c:	f7fe fcc6 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fc90:	4603      	mov	r3, r0
 800fc92:	4619      	mov	r1, r3
 800fc94:	4620      	mov	r0, r4
 800fc96:	f7ff fe77 	bl	800f988 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 56);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	3370      	adds	r3, #112	; 0x70
 800fc9e:	2238      	movs	r2, #56	; 0x38
 800fca0:	2100      	movs	r1, #0
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fd ff64 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TOP_FIGURE_1_ID));
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800fcae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcb2:	213f      	movs	r1, #63	; 0x3f
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fd fede 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fcba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f004 fd3d 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    button1.setXY(15, 139);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	339c      	adds	r3, #156	; 0x9c
 800fcca:	228b      	movs	r2, #139	; 0x8b
 800fccc:	210f      	movs	r1, #15
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fd ff4e 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_LAMP_CONTROL_1_ID), touchgfx::Bitmap(BITMAP_LAMP_CONTROL_1_ID));
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800fcda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fcde:	211e      	movs	r1, #30
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fd fec8 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fcea:	211e      	movs	r1, #30
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7fd fec2 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fcf2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fcf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f004 fbdb 	bl	80144b8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800fd0e:	4619      	mov	r1, r3
 800fd10:	4610      	mov	r0, r2
 800fd12:	f7fe fabf 	bl	800e294 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(15, 211);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	33d0      	adds	r3, #208	; 0xd0
 800fd1a:	22d3      	movs	r2, #211	; 0xd3
 800fd1c:	210f      	movs	r1, #15
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fd ff26 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	2000      	movs	r0, #0
 800fd30:	f7fe fc74 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fd34:	4603      	mov	r3, r0
 800fd36:	4619      	mov	r1, r3
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f7fe f994 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	33d0      	adds	r3, #208	; 0xd0
 800fd42:	2100      	movs	r1, #0
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fe f9f1 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 800fd50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fd54:	2121      	movs	r1, #33	; 0x21
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fe f91b 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800fd5c:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f004 fb70 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea2.setXY(15, 257);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fd6a:	f240 1201 	movw	r2, #257	; 0x101
 800fd6e:	210f      	movs	r1, #15
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fd fefd 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	2100      	movs	r1, #0
 800fd80:	2000      	movs	r0, #0
 800fd82:	f7fe fc4b 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fd86:	4603      	mov	r3, r0
 800fd88:	4619      	mov	r1, r3
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	f7fe f96b 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fd96:	2100      	movs	r1, #0
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fe f9c7 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800fda4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fda8:	210b      	movs	r1, #11
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fe f8f1 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800fdb0:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f004 fb46 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    box1.setPosition(0, 0, 240, 56);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f503 709c 	add.w	r0, r3, #312	; 0x138
 800fdbe:	2338      	movs	r3, #56	; 0x38
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	23f0      	movs	r3, #240	; 0xf0
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	f7fc fc3c 	bl	800c644 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(122, 160, 151));
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800fdd2:	2297      	movs	r2, #151	; 0x97
 800fdd4:	21a0      	movs	r1, #160	; 0xa0
 800fdd6:	207a      	movs	r0, #122	; 0x7a
 800fdd8:	f7fe fc20 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fddc:	4603      	mov	r3, r0
 800fdde:	4619      	mov	r1, r3
 800fde0:	4620      	mov	r0, r4
 800fde2:	f7ff fdd1 	bl	800f988 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image2.setXY(35, 21);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800fdec:	2215      	movs	r2, #21
 800fdee:	2123      	movs	r1, #35	; 0x23
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fd febd 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_SMALL_LOGO_X2_ID));
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800fdfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fe00:	2139      	movs	r1, #57	; 0x39
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fd fe37 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fe08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f004 fc96 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image3.setXY(93, 108);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800fe1a:	226c      	movs	r2, #108	; 0x6c
 800fe1c:	215d      	movs	r1, #93	; 0x5d
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fd fea6 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    image3.setBitmap(touchgfx::Bitmap(BITMAP_LARGE_ON_ID));
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800fe2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fe2e:	211f      	movs	r1, #31
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fd fe20 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fe36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f004 fc7f 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image4.setXY(15, 279);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800fe48:	f240 1217 	movw	r2, #279	; 0x117
 800fe4c:	210f      	movs	r1, #15
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fd fe8e 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    image4.setBitmap(touchgfx::Bitmap(BITMAP_APPSTORE_LABEL_ID));
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 800fe5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fe5e:	2100      	movs	r1, #0
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fd fe08 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fe66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f004 fc67 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image5.setXY(124, 279);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fe78:	f240 1217 	movw	r2, #279	; 0x117
 800fe7c:	217c      	movs	r1, #124	; 0x7c
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fd fe76 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    image5.setBitmap(touchgfx::Bitmap(BITMAP_GOOGLE_PLAY_LABEL_ID));
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f503 74f6 	add.w	r4, r3, #492	; 0x1ec
 800fe8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fe8e:	2111      	movs	r1, #17
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fd fdf0 	bl	800da76 <_ZN8touchgfx6BitmapC1Et>
 800fe96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f004 fc4f 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1_1.setXY(90, 79);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fea8:	224f      	movs	r2, #79	; 0x4f
 800feaa:	215a      	movs	r1, #90	; 0x5a
 800feac:	4618      	mov	r0, r3
 800feae:	f7fd fe5f 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f503 7406 	add.w	r4, r3, #536	; 0x218
 800feb8:	22ff      	movs	r2, #255	; 0xff
 800feba:	21ff      	movs	r1, #255	; 0xff
 800febc:	20ff      	movs	r0, #255	; 0xff
 800febe:	f7fe fbad 	bl	800e61c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fec2:	4603      	mov	r3, r0
 800fec4:	4619      	mov	r1, r3
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7fe f8cd 	bl	800e066 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1_1.setLinespacing(0);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fed2:	2100      	movs	r1, #0
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fe f929 	bl	800e12c <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID59));
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f503 7406 	add.w	r4, r3, #536	; 0x218
 800fee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fee4:	2131      	movs	r1, #49	; 0x31
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fe f853 	bl	800df92 <_ZN8touchgfx9TypedTextC1Et>
 800feec:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800fef0:	4620      	mov	r0, r4
 800fef2:	e003      	b.n	800fefc <_ZN15Screen2ViewBaseC1Ev+0x3a4>
 800fef4:	08025a4c 	.word	0x08025a4c
 800fef8:	0800ffc9 	.word	0x0800ffc9
 800fefc:	f004 faa2 	bl	8014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(box2);
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	3340      	adds	r3, #64	; 0x40
 800ff06:	4619      	mov	r1, r3
 800ff08:	4610      	mov	r0, r2
 800ff0a:	f7fd ffa9 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3370      	adds	r3, #112	; 0x70
 800ff14:	4619      	mov	r1, r3
 800ff16:	4610      	mov	r0, r2
 800ff18:	f7fd ffa2 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	339c      	adds	r3, #156	; 0x9c
 800ff22:	4619      	mov	r1, r3
 800ff24:	4610      	mov	r0, r2
 800ff26:	f7fd ff9b 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	33d0      	adds	r3, #208	; 0xd0
 800ff30:	4619      	mov	r1, r3
 800ff32:	4610      	mov	r0, r2
 800ff34:	f7fd ff94 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800ff40:	4619      	mov	r1, r3
 800ff42:	4610      	mov	r0, r2
 800ff44:	f7fd ff8c 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ff50:	4619      	mov	r1, r3
 800ff52:	4610      	mov	r0, r2
 800ff54:	f7fd ff84 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ff60:	4619      	mov	r1, r3
 800ff62:	4610      	mov	r0, r2
 800ff64:	f7fd ff7c 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image3);
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800ff70:	4619      	mov	r1, r3
 800ff72:	4610      	mov	r0, r2
 800ff74:	f7fd ff74 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image4);
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800ff80:	4619      	mov	r1, r3
 800ff82:	4610      	mov	r0, r2
 800ff84:	f7fd ff6c 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image5);
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff90:	4619      	mov	r1, r3
 800ff92:	4610      	mov	r0, r2
 800ff94:	f7fd ff64 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_1);
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	4610      	mov	r0, r2
 800ffa4:	f7fd ff5c 	bl	800de60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3754      	adds	r7, #84	; 0x54
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd90      	pop	{r4, r7, pc}
 800ffb2:	bf00      	nop

0800ffb4 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]

}
 800ffbc:	bf00      	nop
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	339c      	adds	r3, #156	; 0x9c
 800ffd6:	683a      	ldr	r2, [r7, #0]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d106      	bne.n	800ffea <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenSlideTransitionEast();
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7ff fdb0 	bl	800fb42 <_ZN15Screen2ViewBase11applicationEv>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7fc fe31 	bl	800cc4c <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>
    }
}
 800ffea:	bf00      	nop
 800ffec:	3708      	adds	r7, #8
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
	...

0800fff4 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View() : presenter(0)
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4618      	mov	r0, r3
 8010000:	f006 fc30 	bl	8016864 <_ZN8touchgfx6ScreenC1Ev>
 8010004:	4a05      	ldr	r2, [pc, #20]	; (801001c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	601a      	str	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4618      	mov	r0, r3
 8010014:	3708      	adds	r7, #8
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	08025a98 	.word	0x08025a98

08010020 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	4639      	mov	r1, r7
 801002c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	4618      	mov	r0, r3
 8010034:	f7ff f914 	bl	800f260 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010038:	4a08      	ldr	r2, [pc, #32]	; (801005c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	68ba      	ldr	r2, [r7, #8]
 8010042:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3308      	adds	r3, #8
 8010048:	463a      	mov	r2, r7
 801004a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801004e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	4618      	mov	r0, r3
 8010056:	3710      	adds	r7, #16
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	08025a80 	.word	0x08025a80

08010060 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	4a05      	ldr	r2, [pc, #20]	; (8010080 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	601a      	str	r2, [r3, #0]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff f973 	bl	800f35c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4618      	mov	r0, r3
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	08025a80 	.word	0x08025a80

08010084 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7ff ffe7 	bl	8010060 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010092:	2110      	movs	r1, #16
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f013 fa47 	bl	8023528 <_ZdlPvj>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4618      	mov	r0, r3
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	68d2      	ldr	r2, [r2, #12]
 80100b6:	1052      	asrs	r2, r2, #1
 80100b8:	1898      	adds	r0, r3, r2
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	f003 0301 	and.w	r3, r3, #1
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d102      	bne.n	80100cc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	e00a      	b.n	80100e2 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	68d2      	ldr	r2, [r2, #12]
 80100d4:	1052      	asrs	r2, r2, #1
 80100d6:	4413      	add	r3, r2
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	687a      	ldr	r2, [r7, #4]
 80100dc:	6892      	ldr	r2, [r2, #8]
 80100de:	4413      	add	r3, r2
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	6839      	ldr	r1, [r7, #0]
 80100e4:	4798      	blx	r3
    }
 80100e6:	bf00      	nop
 80100e8:	3708      	adds	r7, #8
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}

080100ee <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80100ee:	b480      	push	{r7}
 80100f0:	b083      	sub	sp, #12
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d010      	beq.n	8010120 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d107      	bne.n	8010116 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	68db      	ldr	r3, [r3, #12]
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	2b00      	cmp	r3, #0
 8010110:	d101      	bne.n	8010116 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010112:	2301      	movs	r3, #1
 8010114:	e000      	b.n	8010118 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010116:	2300      	movs	r3, #0
 8010118:	2b01      	cmp	r3, #1
 801011a:	d001      	beq.n	8010120 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801011c:	2301      	movs	r3, #1
 801011e:	e000      	b.n	8010122 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8010120:	2300      	movs	r3, #0
    }
 8010122:	4618      	mov	r0, r3
 8010124:	370c      	adds	r7, #12
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr

0801012e <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 801012e:	b480      	push	{r7}
 8010130:	b083      	sub	sp, #12
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 801013c:	4618      	mov	r0, r3
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010148:	b480      	push	{r7}
 801014a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801014c:	4b02      	ldr	r3, [pc, #8]	; (8010158 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801014e:	4618      	mov	r0, r3
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr
 8010158:	08025ac4 	.word	0x08025ac4

0801015c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801015c:	b480      	push	{r7}
 801015e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010160:	2340      	movs	r3, #64	; 0x40
}
 8010162:	4618      	mov	r0, r3
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801016c:	b480      	push	{r7}
 801016e:	b085      	sub	sp, #20
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	4613      	mov	r3, r2
 8010178:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801017a:	4a07      	ldr	r2, [pc, #28]	; (8010198 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010180:	4a06      	ldr	r2, [pc, #24]	; (801019c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010186:	4a06      	ldr	r2, [pc, #24]	; (80101a0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010188:	88fb      	ldrh	r3, [r7, #6]
 801018a:	8013      	strh	r3, [r2, #0]
    }
 801018c:	bf00      	nop
 801018e:	3714      	adds	r7, #20
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr
 8010198:	2002b0f8 	.word	0x2002b0f8
 801019c:	2002b100 	.word	0x2002b100
 80101a0:	2002b0fc 	.word	0x2002b0fc

080101a4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80101a4:	b590      	push	{r4, r7, lr}
 80101a6:	b085      	sub	sp, #20
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	4603      	mov	r3, r0
 80101ac:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80101b2:	88fb      	ldrh	r3, [r7, #6]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d127      	bne.n	8010208 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80101b8:	88fb      	ldrh	r3, [r7, #6]
 80101ba:	4a1e      	ldr	r2, [pc, #120]	; (8010234 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80101bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d016      	beq.n	80101f2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80101c4:	88fb      	ldrh	r3, [r7, #6]
 80101c6:	4a1b      	ldr	r2, [pc, #108]	; (8010234 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80101c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101cc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	4413      	add	r3, r2
 80101d6:	4a18      	ldr	r2, [pc, #96]	; (8010238 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80101d8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	4413      	add	r3, r2
 80101e2:	4a16      	ldr	r2, [pc, #88]	; (801023c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80101e4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	689b      	ldr	r3, [r3, #8]
 80101ea:	68ba      	ldr	r2, [r7, #8]
 80101ec:	4413      	add	r3, r2
 80101ee:	60fb      	str	r3, [r7, #12]
 80101f0:	e00a      	b.n	8010208 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80101f2:	4b11      	ldr	r3, [pc, #68]	; (8010238 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80101f4:	4a12      	ldr	r2, [pc, #72]	; (8010240 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80101f6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80101f8:	4a12      	ldr	r2, [pc, #72]	; (8010244 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80101fa:	4b10      	ldr	r3, [pc, #64]	; (801023c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80101fc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80101fe:	88fb      	ldrh	r3, [r7, #6]
 8010200:	4a11      	ldr	r2, [pc, #68]	; (8010248 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010206:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00d      	beq.n	801022a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801020e:	4a0f      	ldr	r2, [pc, #60]	; (801024c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010210:	88fb      	ldrh	r3, [r7, #6]
 8010212:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010214:	f000 f83e 	bl	8010294 <_ZN17TypedTextDatabase8getFontsEv>
 8010218:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801021a:	f000 f833 	bl	8010284 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801021e:	4603      	mov	r3, r0
 8010220:	461a      	mov	r2, r3
 8010222:	4621      	mov	r1, r4
 8010224:	68f8      	ldr	r0, [r7, #12]
 8010226:	f7ff ffa1 	bl	801016c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801022a:	bf00      	nop
 801022c:	3714      	adds	r7, #20
 801022e:	46bd      	mov	sp, r7
 8010230:	bd90      	pop	{r4, r7, pc}
 8010232:	bf00      	nop
 8010234:	20029abc 	.word	0x20029abc
 8010238:	20029ac4 	.word	0x20029ac4
 801023c:	20029ac8 	.word	0x20029ac8
 8010240:	08126d04 	.word	0x08126d04
 8010244:	08126c3c 	.word	0x08126c3c
 8010248:	081272d0 	.word	0x081272d0
 801024c:	20029ac0 	.word	0x20029ac0

08010250 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	460b      	mov	r3, r1
 801025a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 801025c:	4b07      	ldr	r3, [pc, #28]	; (801027c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	4b07      	ldr	r3, [pc, #28]	; (8010280 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8010262:	6819      	ldr	r1, [r3, #0]
 8010264:	887b      	ldrh	r3, [r7, #2]
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	440b      	add	r3, r1
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	005b      	lsls	r3, r3, #1
 801026e:	4413      	add	r3, r2
}
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	20029ac4 	.word	0x20029ac4
 8010280:	20029ac8 	.word	0x20029ac8

08010284 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010284:	b480      	push	{r7}
 8010286:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8010288:	2332      	movs	r3, #50	; 0x32
}
 801028a:	4618      	mov	r0, r3
 801028c:	46bd      	mov	sp, r7
 801028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010292:	4770      	bx	lr

08010294 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010294:	b480      	push	{r7}
 8010296:	af00      	add	r7, sp, #0
    return _fonts;
 8010298:	4b02      	ldr	r3, [pc, #8]	; (80102a4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801029a:	4618      	mov	r0, r3
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	20029acc 	.word	0x20029acc

080102a8 <_Z41__static_initialization_and_destruction_0ii>:
    case 11:
        _fonts[11] = &(getFont_verdanab_15_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	d140      	bne.n	801033a <_Z41__static_initialization_and_destruction_0ii+0x92>
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102be:	4293      	cmp	r3, r2
 80102c0:	d13b      	bne.n	801033a <_Z41__static_initialization_and_destruction_0ii+0x92>
    &(getFont_verdana_13_4bpp()),
 80102c2:	f7fb fe79 	bl	800bfb8 <_Z23getFont_verdana_13_4bppv>
 80102c6:	4602      	mov	r2, r0
};
 80102c8:	4b1e      	ldr	r3, [pc, #120]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80102ca:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_36_4bpp()),
 80102cc:	f7fb ff7c 	bl	800c1c8 <_Z23getFont_verdana_36_4bppv>
 80102d0:	4602      	mov	r2, r0
};
 80102d2:	4b1c      	ldr	r3, [pc, #112]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80102d4:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_25_4bpp()),
 80102d6:	f7fb ff35 	bl	800c144 <_Z23getFont_verdana_25_4bppv>
 80102da:	4602      	mov	r2, r0
};
 80102dc:	4b19      	ldr	r3, [pc, #100]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80102de:	609a      	str	r2, [r3, #8]
    &(getFont_ariblk_20_4bpp()),
 80102e0:	f7fb fde6 	bl	800beb0 <_Z22getFont_ariblk_20_4bppv>
 80102e4:	4602      	mov	r2, r0
};
 80102e6:	4b17      	ldr	r3, [pc, #92]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80102e8:	60da      	str	r2, [r3, #12]
    &(getFont_verdanab_18_4bpp()),
 80102ea:	f7fc f833 	bl	800c354 <_Z24getFont_verdanab_18_4bppv>
 80102ee:	4602      	mov	r2, r0
};
 80102f0:	4b14      	ldr	r3, [pc, #80]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80102f2:	611a      	str	r2, [r3, #16]
    &(getFont_verdanab_14_4bpp()),
 80102f4:	f7fb ffaa 	bl	800c24c <_Z24getFont_verdanab_14_4bppv>
 80102f8:	4602      	mov	r2, r0
};
 80102fa:	4b12      	ldr	r3, [pc, #72]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80102fc:	615a      	str	r2, [r3, #20]
    &(getFont_verdana_20_4bpp()),
 80102fe:	f7fb fedf 	bl	800c0c0 <_Z23getFont_verdana_20_4bppv>
 8010302:	4602      	mov	r2, r0
};
 8010304:	4b0f      	ldr	r3, [pc, #60]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8010306:	619a      	str	r2, [r3, #24]
    &(getFont_verdanab_26_4bpp()),
 8010308:	f7fc f866 	bl	800c3d8 <_Z24getFont_verdanab_26_4bppv>
 801030c:	4602      	mov	r2, r0
};
 801030e:	4b0d      	ldr	r3, [pc, #52]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8010310:	61da      	str	r2, [r3, #28]
    &(getFont_arial_10_4bpp()),
 8010312:	f7fb fd8b 	bl	800be2c <_Z21getFont_arial_10_4bppv>
 8010316:	4602      	mov	r2, r0
};
 8010318:	4b0a      	ldr	r3, [pc, #40]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801031a:	621a      	str	r2, [r3, #32]
    &(getFont_verdana_11_4bpp()),
 801031c:	f7fb fe0a 	bl	800bf34 <_Z23getFont_verdana_11_4bppv>
 8010320:	4602      	mov	r2, r0
};
 8010322:	4b08      	ldr	r3, [pc, #32]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8010324:	625a      	str	r2, [r3, #36]	; 0x24
    &(getFont_verdana_14_4bpp()),
 8010326:	f7fb fe89 	bl	800c03c <_Z23getFont_verdana_14_4bppv>
 801032a:	4602      	mov	r2, r0
};
 801032c:	4b05      	ldr	r3, [pc, #20]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801032e:	629a      	str	r2, [r3, #40]	; 0x28
    &(getFont_verdanab_15_4bpp())
 8010330:	f7fb ffce 	bl	800c2d0 <_Z24getFont_verdanab_15_4bppv>
 8010334:	4602      	mov	r2, r0
};
 8010336:	4b03      	ldr	r3, [pc, #12]	; (8010344 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8010338:	62da      	str	r2, [r3, #44]	; 0x2c
}  // namespace TypedTextDatabase
 801033a:	bf00      	nop
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	20029acc 	.word	0x20029acc

08010348 <_GLOBAL__sub_I__fonts>:
 8010348:	b580      	push	{r7, lr}
 801034a:	af00      	add	r7, sp, #0
 801034c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010350:	2001      	movs	r0, #1
 8010352:	f7ff ffa9 	bl	80102a8 <_Z41__static_initialization_and_destruction_0ii>
 8010356:	bd80      	pop	{r7, pc}

08010358 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	4a05      	ldr	r2, [pc, #20]	; (8010378 <_ZN19FrontendApplicationD1Ev+0x20>)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	601a      	str	r2, [r3, #0]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4618      	mov	r0, r3
 801036a:	f7fc fb0d 	bl	800c988 <_ZN23FrontendApplicationBaseD1Ev>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	08025fcc 	.word	0x08025fcc

0801037c <_ZN19FrontendApplicationD0Ev>:
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f7ff ffe7 	bl	8010358 <_ZN19FrontendApplicationD1Ev>
 801038a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f013 f8ca 	bl	8023528 <_ZdlPvj>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4618      	mov	r0, r3
 8010398:	3708      	adds	r7, #8
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801039e:	b580      	push	{r7, lr}
 80103a0:	b082      	sub	sp, #8
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80103ac:	4618      	mov	r0, r3
 80103ae:	f000 f82d 	bl	801040c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f005 f9f3 	bl	80157a0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80103ba:	bf00      	nop
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
	...

080103c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	68b9      	ldr	r1, [r7, #8]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fc fb50 	bl	800ca7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80103dc:	4a03      	ldr	r2, [pc, #12]	; (80103ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	601a      	str	r2, [r3, #0]
{

}
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	4618      	mov	r0, r3
 80103e6:	3710      	adds	r7, #16
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	08025fcc 	.word	0x08025fcc

080103f0 <_ZN5ModelC1Ev>:
#include <gui/model/ModelListener.hpp>
#include "main.h"

extern uint16_t value_update;

Model::Model() : modelListener(0)
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	601a      	str	r2, [r3, #0]
{
}
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4618      	mov	r0, r3
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <_ZN5Model4tickEv>:

void Model::tick()
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
	UpdateValue();
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f000 f805 	bl	8010424 <_ZN5Model11UpdateValueEv>
}
 801041a:	bf00      	nop
 801041c:	3708      	adds	r7, #8
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
	...

08010424 <_ZN5Model11UpdateValueEv>:

void Model::UpdateValue (){
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
	//value_update ++;
	modelListener->UpdateValue(value_update);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6818      	ldr	r0, [r3, #0]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3308      	adds	r3, #8
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4a04      	ldr	r2, [pc, #16]	; (801044c <_ZN5Model11UpdateValueEv+0x28>)
 801043c:	8812      	ldrh	r2, [r2, #0]
 801043e:	4611      	mov	r1, r2
 8010440:	4798      	blx	r3
}
 8010442:	bf00      	nop
 8010444:	3708      	adds	r7, #8
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	20025b78 	.word	0x20025b78

08010450 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
    {
    }
 8010458:	bf00      	nop
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr

08010464 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
    {
    }
 801046c:	bf00      	nop
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
    {
 8010480:	4a04      	ldr	r2, [pc, #16]	; (8010494 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	601a      	str	r2, [r3, #0]
    }
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	4618      	mov	r0, r3
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr
 8010494:	0802604c 	.word	0x0802604c

08010498 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
    }
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f7ff ffe9 	bl	8010478 <_ZN8touchgfx9PresenterD1Ev>
 80104a6:	2104      	movs	r1, #4
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f013 f83d 	bl	8023528 <_ZdlPvj>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4618      	mov	r0, r3
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
    {
 80104c0:	4a04      	ldr	r2, [pc, #16]	; (80104d4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	601a      	str	r2, [r3, #0]
    }
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4618      	mov	r0, r3
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr
 80104d4:	0802604c 	.word	0x0802604c

080104d8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	4a06      	ldr	r2, [pc, #24]	; (80104fc <_ZN13ModelListenerC1Ev+0x24>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2200      	movs	r2, #0
 80104ea:	605a      	str	r2, [r3, #4]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	4618      	mov	r0, r3
 80104f0:	370c      	adds	r7, #12
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	08026038 	.word	0x08026038

08010500 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	4a04      	ldr	r2, [pc, #16]	; (801051c <_ZN13ModelListenerD1Ev+0x1c>)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	370c      	adds	r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr
 801051c:	08026038 	.word	0x08026038

08010520 <_ZN13ModelListenerD0Ev>:
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f7ff ffe9 	bl	8010500 <_ZN13ModelListenerD1Ev>
 801052e:	2108      	movs	r1, #8
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f012 fff9 	bl	8023528 <_ZdlPvj>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	4618      	mov	r0, r3
 801053a:	3708      	adds	r7, #8
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <_ZN13ModelListener11UpdateValueEt>:
    virtual void UpdateValue(uint16_t value){}
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	460b      	mov	r3, r1
 801054a:	807b      	strh	r3, [r7, #2]
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	4a09      	ldr	r2, [pc, #36]	; (8010588 <_ZN16Screen1PresenterD1Ev+0x30>)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	601a      	str	r2, [r3, #0]
 8010566:	4a09      	ldr	r2, [pc, #36]	; (801058c <_ZN16Screen1PresenterD1Ev+0x34>)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	605a      	str	r2, [r3, #4]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	3304      	adds	r3, #4
 8010570:	4618      	mov	r0, r3
 8010572:	f7ff ffc5 	bl	8010500 <_ZN13ModelListenerD1Ev>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4618      	mov	r0, r3
 801057a:	f7ff ff7d 	bl	8010478 <_ZN8touchgfx9PresenterD1Ev>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	08026008 	.word	0x08026008
 801058c:	08026024 	.word	0x08026024

08010590 <_ZThn4_N16Screen1PresenterD1Ev>:
 8010590:	f1a0 0004 	sub.w	r0, r0, #4
 8010594:	e7e0      	b.n	8010558 <_ZN16Screen1PresenterD1Ev>
 8010596:	bf00      	nop

08010598 <_ZN16Screen1PresenterD0Ev>:
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7ff ffd9 	bl	8010558 <_ZN16Screen1PresenterD1Ev>
 80105a6:	2110      	movs	r1, #16
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f012 ffbd 	bl	8023528 <_ZdlPvj>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <_ZThn4_N16Screen1PresenterD0Ev>:
 80105b8:	f1a0 0004 	sub.w	r0, r0, #4
 80105bc:	e7ec      	b.n	8010598 <_ZN16Screen1PresenterD0Ev>
	...

080105c0 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
    : view(v)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7ff ff73 	bl	80104b8 <_ZN8touchgfx9PresenterC1Ev>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	3304      	adds	r3, #4
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7ff ff7e 	bl	80104d8 <_ZN13ModelListenerC1Ev>
 80105dc:	4a06      	ldr	r2, [pc, #24]	; (80105f8 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	601a      	str	r2, [r3, #0]
 80105e2:	4a06      	ldr	r2, [pc, #24]	; (80105fc <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	605a      	str	r2, [r3, #4]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	60da      	str	r2, [r3, #12]
{

}
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4618      	mov	r0, r3
 80105f2:	3708      	adds	r7, #8
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	08026008 	.word	0x08026008
 80105fc:	08026024 	.word	0x08026024

08010600 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]

}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]

}
 801061c:	bf00      	nop
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr

08010628 <_ZN16Screen1Presenter11UpdateValueEt>:

void Screen1Presenter::UpdateValue(uint16_t value){
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	460b      	mov	r3, r1
 8010632:	807b      	strh	r3, [r7, #2]
	view.UpdateValue(value);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	68da      	ldr	r2, [r3, #12]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3340      	adds	r3, #64	; 0x40
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	8879      	ldrh	r1, [r7, #2]
 8010644:	4610      	mov	r0, r2
 8010646:	4798      	blx	r3
}
 8010648:	bf00      	nop
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <_ZThn4_N16Screen1Presenter11UpdateValueEt>:

    virtual void UpdateValue(uint16_t value);
 8010650:	f1a0 0004 	sub.w	r0, r0, #4
 8010654:	f7ff bfe8 	b.w	8010628 <_ZN16Screen1Presenter11UpdateValueEt>

08010658 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	4a05      	ldr	r2, [pc, #20]	; (8010678 <_ZN11Screen1ViewD1Ev+0x20>)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	f7fd fefd 	bl	800e468 <_ZN15Screen1ViewBaseD1Ev>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	08026064 	.word	0x08026064

0801067c <_ZN11Screen1ViewD0Ev>:
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f7ff ffe7 	bl	8010658 <_ZN11Screen1ViewD1Ev>
 801068a:	f44f 61c9 	mov.w	r1, #1608	; 0x648
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f012 ff4a 	bl	8023528 <_ZdlPvj>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	4618      	mov	r0, r3
 8010698:	3708      	adds	r7, #8
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
	...

080106a0 <_ZN11Screen1ViewC1Ev>:
#include "lexilight.h"
#include "uart_task.h"
}


Screen1View::Screen1View()
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7fd ffe0 	bl	800e670 <_ZN15Screen1ViewBaseC1Ev>
 80106b0:	4a03      	ldr	r2, [pc, #12]	; (80106c0 <_ZN11Screen1ViewC1Ev+0x20>)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	601a      	str	r2, [r3, #0]
{

}
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4618      	mov	r0, r3
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	08026064 	.word	0x08026064

080106c4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80106c4:	b590      	push	{r4, r7, lr}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fe fc7e 	bl	800efd0 <_ZN15Screen1ViewBase11setupScreenEv>
    slider_speed.setValue(Lexi_Get_Slider_Speed());
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f503 7424 	add.w	r4, r3, #656	; 0x290
 80106da:	f7f0 fd5d 	bl	8001198 <Lexi_Get_Slider_Speed>
 80106de:	4603      	mov	r3, r0
 80106e0:	4619      	mov	r1, r3
 80106e2:	4620      	mov	r0, r4
 80106e4:	f002 fb49 	bl	8012d7a <_ZN8touchgfx6Slider8setValueEi>
    slider_strength.setValue(Lexi_Get_Slider_Strength());
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80106ee:	f7f0 fd5f 	bl	80011b0 <Lexi_Get_Slider_Strength>
 80106f2:	4603      	mov	r3, r0
 80106f4:	4619      	mov	r1, r3
 80106f6:	4620      	mov	r0, r4
 80106f8:	f002 fb3f 	bl	8012d7a <_ZN8touchgfx6Slider8setValueEi>
    if (Lexi_Get_Led_State() == 2){
 80106fc:	f7f0 fc82 	bl	8001004 <Lexi_Get_Led_State>
 8010700:	4603      	mov	r3, r0
 8010702:	2b02      	cmp	r3, #2
 8010704:	bf0c      	ite	eq
 8010706:	2301      	moveq	r3, #1
 8010708:	2300      	movne	r3, #0
 801070a:	b2db      	uxtb	r3, r3
 801070c:	2b00      	cmp	r3, #0
 801070e:	d00e      	beq.n	801072e <_ZN11Screen1View11setupScreenEv+0x6a>
    	radioButton1.setSelected(true);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8010716:	2101      	movs	r1, #1
 8010718:	4618      	mov	r0, r3
 801071a:	f004 f941 	bl	80149a0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    	radioButton1.setDeselectionEnabled(false);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8010724:	2100      	movs	r1, #0
 8010726:	4618      	mov	r0, r3
 8010728:	f7fd fe52 	bl	800e3d0 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>
 801072c:	e00d      	b.n	801074a <_ZN11Screen1View11setupScreenEv+0x86>
    }
    else {
    	radioButton1.setSelected(false);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8010734:	2100      	movs	r1, #0
 8010736:	4618      	mov	r0, r3
 8010738:	f004 f932 	bl	80149a0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    	radioButton1.setDeselectionEnabled(true);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8010742:	2101      	movs	r1, #1
 8010744:	4618      	mov	r0, r3
 8010746:	f7fd fe43 	bl	800e3d0 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>
    }
    slider_luminosity.setValue(Lexi_Get_Slider_Luminosity());
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8010750:	f7f0 fd3a 	bl	80011c8 <Lexi_Get_Slider_Luminosity>
 8010754:	4603      	mov	r3, r0
 8010756:	4619      	mov	r1, r3
 8010758:	4620      	mov	r0, r4
 801075a:	f002 fb0e 	bl	8012d7a <_ZN8touchgfx6Slider8setValueEi>
}
 801075e:	bf00      	nop
 8010760:	370c      	adds	r7, #12
 8010762:	46bd      	mov	sp, r7
 8010764:	bd90      	pop	{r4, r7, pc}

08010766 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8010766:	b580      	push	{r7, lr}
 8010768:	b082      	sub	sp, #8
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4618      	mov	r0, r3
 8010772:	f7fd fb55 	bl	800de20 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010776:	bf00      	nop
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <_ZN11Screen1View11UpdateValueEt>:

void Screen1View::UpdateValue(uint16_t value){
 801077e:	b580      	push	{r7, lr}
 8010780:	b082      	sub	sp, #8
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	460b      	mov	r3, r1
 8010788:	807b      	strh	r3, [r7, #2]
	if (value == 1){
 801078a:	887b      	ldrh	r3, [r7, #2]
 801078c:	2b01      	cmp	r3, #1
 801078e:	d107      	bne.n	80107a0 <_ZN11Screen1View11UpdateValueEt+0x22>
		application().gotoScreen2ScreenSlideTransitionEast();
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4618      	mov	r0, r3
 8010794:	f7fd ff36 	bl	800e604 <_ZN15Screen1ViewBase11applicationEv>
 8010798:	4603      	mov	r3, r0
 801079a:	4618      	mov	r0, r3
 801079c:	f7fc fa10 	bl	800cbc0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
	}
	//memset(&textArea2Buffer,0,TEXTAREA2_SIZE);
    //Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%d", value);
	//textArea2.invalidate();
}
 80107a0:	bf00      	nop
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <_ZN11Screen1View22Update_Mode_Reading_ONEv>:

void Screen1View::Update_Mode_Reading_ON(){
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
	Lexi_Set_State_LEXI();
 80107b0:	f7f0 fc6a 	bl	8001088 <Lexi_Set_State_LEXI>
	UART_Send_LedReading();
 80107b4:	f7f2 febc 	bl	8003530 <UART_Send_LedReading>
}
 80107b8:	bf00      	nop
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <_ZN11Screen1View23Update_Mode_Reading_OFFEv>:
void Screen1View::Update_Mode_Reading_OFF(){
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
	Lexi_Set_State_STANDARD();
 80107c8:	f7f0 fc52 	bl	8001070 <Lexi_Set_State_STANDARD>
	UART_Send_LedNormal();
 80107cc:	f7f2 fed4 	bl	8003578 <UART_Send_LedNormal>
}
 80107d0:	bf00      	nop
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <_ZN11Screen1View17Update_LuminosityEi>:
void Screen1View::Update_Luminosity(int value){
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
	if ((value >= 0) && (value <= 100)){
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	db13      	blt.n	8010810 <_ZN11Screen1View17Update_LuminosityEi+0x38>
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	2b64      	cmp	r3, #100	; 0x64
 80107ec:	dc10      	bgt.n	8010810 <_ZN11Screen1View17Update_LuminosityEi+0x38>
		Update_Mode_Light_No_BLE();
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	3344      	adds	r3, #68	; 0x44
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	4798      	blx	r3
		Lexi_Set_Slider_Luminosity(value);
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7f0 fc97 	bl	8001130 <Lexi_Set_Slider_Luminosity>
		UART_Send_Lum();
 8010802:	f7f2 fe0b 	bl	800341c <UART_Send_Lum>
		if (value == 0){
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d101      	bne.n	8010810 <_ZN11Screen1View17Update_LuminosityEi+0x38>
			UART_Send_LedOff();
 801080c:	f7f2 fed6 	bl	80035bc <UART_Send_LedOff>
		}
	}
}
 8010810:	bf00      	nop
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <_ZN11Screen1View11Update_DutyEi>:

void Screen1View::Update_Duty(int value){
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
    memset(&textArea_strength_heightBuffer,0,TEXTAREA_STRENGTH_HEIGHT_SIZE);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f203 6306 	addw	r3, r3, #1542	; 0x606
 8010828:	2203      	movs	r2, #3
 801082a:	2100      	movs	r1, #0
 801082c:	4618      	mov	r0, r3
 801082e:	f012 ff30 	bl	8023692 <memset>
    Unicode::snprintf(textArea_strength_heightBuffer, TEXTAREA_STRENGTH_HEIGHT_SIZE, "%d", (value - (value%10))/10 );
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f203 6006 	addw	r0, r3, #1542	; 0x606
 8010838:	6839      	ldr	r1, [r7, #0]
 801083a:	4b27      	ldr	r3, [pc, #156]	; (80108d8 <_ZN11Screen1View11Update_DutyEi+0xc0>)
 801083c:	fb83 2301 	smull	r2, r3, r3, r1
 8010840:	109a      	asrs	r2, r3, #2
 8010842:	17cb      	asrs	r3, r1, #31
 8010844:	1ad2      	subs	r2, r2, r3
 8010846:	4613      	mov	r3, r2
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	4413      	add	r3, r2
 801084c:	005b      	lsls	r3, r3, #1
 801084e:	1aca      	subs	r2, r1, r3
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	1a9b      	subs	r3, r3, r2
 8010854:	4a20      	ldr	r2, [pc, #128]	; (80108d8 <_ZN11Screen1View11Update_DutyEi+0xc0>)
 8010856:	fb82 1203 	smull	r1, r2, r2, r3
 801085a:	1092      	asrs	r2, r2, #2
 801085c:	17db      	asrs	r3, r3, #31
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	4a1e      	ldr	r2, [pc, #120]	; (80108dc <_ZN11Screen1View11Update_DutyEi+0xc4>)
 8010862:	2103      	movs	r1, #3
 8010864:	f007 f900 	bl	8017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea_strength_height.invalidate();
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801086e:	4618      	mov	r0, r3
 8010870:	f005 fcec 	bl	801624c <_ZNK8touchgfx8Drawable10invalidateEv>

    memset(&textArea_strength_lowBuffer,0,TEXTAREA_STRENGTH_LOW_SIZE);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 801087a:	2203      	movs	r2, #3
 801087c:	2100      	movs	r1, #0
 801087e:	4618      	mov	r0, r3
 8010880:	f012 ff07 	bl	8023692 <memset>
    Unicode::snprintf(textArea_strength_lowBuffer, TEXTAREA_STRENGTH_LOW_SIZE, "%d", (value%10));
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f503 60c0 	add.w	r0, r3, #1536	; 0x600
 801088a:	683a      	ldr	r2, [r7, #0]
 801088c:	4b12      	ldr	r3, [pc, #72]	; (80108d8 <_ZN11Screen1View11Update_DutyEi+0xc0>)
 801088e:	fb83 1302 	smull	r1, r3, r3, r2
 8010892:	1099      	asrs	r1, r3, #2
 8010894:	17d3      	asrs	r3, r2, #31
 8010896:	1ac9      	subs	r1, r1, r3
 8010898:	460b      	mov	r3, r1
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	440b      	add	r3, r1
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	1ad1      	subs	r1, r2, r3
 80108a2:	460b      	mov	r3, r1
 80108a4:	4a0d      	ldr	r2, [pc, #52]	; (80108dc <_ZN11Screen1View11Update_DutyEi+0xc4>)
 80108a6:	2103      	movs	r1, #3
 80108a8:	f007 f8de 	bl	8017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea_strength_low.invalidate();
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80108b2:	4618      	mov	r0, r3
 80108b4:	f005 fcca 	bl	801624c <_ZNK8touchgfx8Drawable10invalidateEv>
	if ((value >= 0) && (value <= 50)){
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	db08      	blt.n	80108d0 <_ZN11Screen1View11Update_DutyEi+0xb8>
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	2b32      	cmp	r3, #50	; 0x32
 80108c2:	dc05      	bgt.n	80108d0 <_ZN11Screen1View11Update_DutyEi+0xb8>
		Lexi_Set_Slider_Strength(value);
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7f0 fc0e 	bl	80010e8 <Lexi_Set_Slider_Strength>
		UART_Send_Strength();
 80108cc:	f7f2 fd74 	bl	80033b8 <UART_Send_Strength>
	}
}
 80108d0:	bf00      	nop
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	66666667 	.word	0x66666667
 80108dc:	08025024 	.word	0x08025024

080108e0 <_ZN11Screen1View11Update_FreqEi>:

void Screen1View::Update_Freq(int value){
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
    memset(&textArea_speed_heightBuffer,0,TEXTAREA_SPEED_HEIGHT_SIZE);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f203 6312 	addw	r3, r3, #1554	; 0x612
 80108f0:	2203      	movs	r2, #3
 80108f2:	2100      	movs	r1, #0
 80108f4:	4618      	mov	r0, r3
 80108f6:	f012 fecc 	bl	8023692 <memset>
    Unicode::snprintf(textArea_speed_heightBuffer, TEXTAREA_SPEED_HEIGHT_SIZE, "%d", (value - (value%10))/10 );
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f203 6012 	addw	r0, r3, #1554	; 0x612
 8010900:	6839      	ldr	r1, [r7, #0]
 8010902:	4b27      	ldr	r3, [pc, #156]	; (80109a0 <_ZN11Screen1View11Update_FreqEi+0xc0>)
 8010904:	fb83 2301 	smull	r2, r3, r3, r1
 8010908:	109a      	asrs	r2, r3, #2
 801090a:	17cb      	asrs	r3, r1, #31
 801090c:	1ad2      	subs	r2, r2, r3
 801090e:	4613      	mov	r3, r2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	4413      	add	r3, r2
 8010914:	005b      	lsls	r3, r3, #1
 8010916:	1aca      	subs	r2, r1, r3
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	1a9b      	subs	r3, r3, r2
 801091c:	4a20      	ldr	r2, [pc, #128]	; (80109a0 <_ZN11Screen1View11Update_FreqEi+0xc0>)
 801091e:	fb82 1203 	smull	r1, r2, r2, r3
 8010922:	1092      	asrs	r2, r2, #2
 8010924:	17db      	asrs	r3, r3, #31
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	4a1e      	ldr	r2, [pc, #120]	; (80109a4 <_ZN11Screen1View11Update_FreqEi+0xc4>)
 801092a:	2103      	movs	r1, #3
 801092c:	f007 f89c 	bl	8017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea_speed_height.invalidate();
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010936:	4618      	mov	r0, r3
 8010938:	f005 fc88 	bl	801624c <_ZNK8touchgfx8Drawable10invalidateEv>

    memset(&textArea_speed_lowBuffer,0,TEXTAREA_SPEED_LOW_SIZE);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8010942:	2203      	movs	r2, #3
 8010944:	2100      	movs	r1, #0
 8010946:	4618      	mov	r0, r3
 8010948:	f012 fea3 	bl	8023692 <memset>
    Unicode::snprintf(textArea_speed_lowBuffer, TEXTAREA_SPEED_LOW_SIZE, "%d", (value%10));
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8010952:	683a      	ldr	r2, [r7, #0]
 8010954:	4b12      	ldr	r3, [pc, #72]	; (80109a0 <_ZN11Screen1View11Update_FreqEi+0xc0>)
 8010956:	fb83 1302 	smull	r1, r3, r3, r2
 801095a:	1099      	asrs	r1, r3, #2
 801095c:	17d3      	asrs	r3, r2, #31
 801095e:	1ac9      	subs	r1, r1, r3
 8010960:	460b      	mov	r3, r1
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	440b      	add	r3, r1
 8010966:	005b      	lsls	r3, r3, #1
 8010968:	1ad1      	subs	r1, r2, r3
 801096a:	460b      	mov	r3, r1
 801096c:	4a0d      	ldr	r2, [pc, #52]	; (80109a4 <_ZN11Screen1View11Update_FreqEi+0xc4>)
 801096e:	2103      	movs	r1, #3
 8010970:	f007 f87a 	bl	8017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea_speed_low.invalidate();
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 801097a:	4618      	mov	r0, r3
 801097c:	f005 fc66 	bl	801624c <_ZNK8touchgfx8Drawable10invalidateEv>
	if ((value >= 0) && (value <= 50)){
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	db08      	blt.n	8010998 <_ZN11Screen1View11Update_FreqEi+0xb8>
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	2b32      	cmp	r3, #50	; 0x32
 801098a:	dc05      	bgt.n	8010998 <_ZN11Screen1View11Update_FreqEi+0xb8>
		Lexi_Set_Slider_Speed(value);
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	4618      	mov	r0, r3
 8010990:	f7f0 fb86 	bl	80010a0 <Lexi_Set_Slider_Speed>
		UART_Send_Speed();
 8010994:	f7f2 fcde 	bl	8003354 <UART_Send_Speed>
	}
}
 8010998:	bf00      	nop
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	66666667 	.word	0x66666667
 80109a4:	08025024 	.word	0x08025024

080109a8 <_ZN11Screen1View24Update_Mode_Light_No_BLEEv>:

void Screen1View::Update_Mode_Light_No_BLE(){
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
	if (radioButton1.getSelected()){
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fd fd27 	bl	800e40a <_ZNK8touchgfx11RadioButton11getSelectedEv>
 80109bc:	4603      	mov	r3, r0
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d002      	beq.n	80109c8 <_ZN11Screen1View24Update_Mode_Light_No_BLEEv+0x20>
		Lexi_Set_State_LEXI();
 80109c2:	f7f0 fb61 	bl	8001088 <Lexi_Set_State_LEXI>
	}
	else{
		Lexi_Set_State_STANDARD();
	}
}
 80109c6:	e001      	b.n	80109cc <_ZN11Screen1View24Update_Mode_Light_No_BLEEv+0x24>
		Lexi_Set_State_STANDARD();
 80109c8:	f7f0 fb52 	bl	8001070 <Lexi_Set_State_STANDARD>
}
 80109cc:	bf00      	nop
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <_ZN11Screen1View16Update_Mode_LexiEv>:

void Screen1View::Update_Mode_Lexi(){
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
	Lexi_Set_State_LEXI();
 80109dc:	f7f0 fb54 	bl	8001088 <Lexi_Set_State_LEXI>
	UART_Send_LedReading();
 80109e0:	f7f2 fda6 	bl	8003530 <UART_Send_LedReading>
}
 80109e4:	bf00      	nop
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <_ZN11Screen1View20Update_Mode_StandardEv>:
void Screen1View::Update_Mode_Standard(){
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
	Lexi_Set_State_STANDARD();
 80109f4:	f7f0 fb3c 	bl	8001070 <Lexi_Set_State_STANDARD>
	UART_Send_LedNormal();
 80109f8:	f7f2 fdbe 	bl	8003578 <UART_Send_LedNormal>
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	4a09      	ldr	r2, [pc, #36]	; (8010a34 <_ZN16Screen2PresenterD1Ev+0x30>)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	601a      	str	r2, [r3, #0]
 8010a12:	4a09      	ldr	r2, [pc, #36]	; (8010a38 <_ZN16Screen2PresenterD1Ev+0x34>)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	605a      	str	r2, [r3, #4]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	3304      	adds	r3, #4
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7ff fd6f 	bl	8010500 <_ZN13ModelListenerD1Ev>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7ff fd27 	bl	8010478 <_ZN8touchgfx9PresenterD1Ev>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	080260bc 	.word	0x080260bc
 8010a38:	080260d4 	.word	0x080260d4

08010a3c <_ZThn4_N16Screen2PresenterD1Ev>:
 8010a3c:	f1a0 0004 	sub.w	r0, r0, #4
 8010a40:	e7e0      	b.n	8010a04 <_ZN16Screen2PresenterD1Ev>
 8010a42:	bf00      	nop

08010a44 <_ZN16Screen2PresenterD0Ev>:
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7ff ffd9 	bl	8010a04 <_ZN16Screen2PresenterD1Ev>
 8010a52:	2110      	movs	r1, #16
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f012 fd67 	bl	8023528 <_ZdlPvj>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <_ZThn4_N16Screen2PresenterD0Ev>:
 8010a64:	f1a0 0004 	sub.w	r0, r0, #4
 8010a68:	e7ec      	b.n	8010a44 <_ZN16Screen2PresenterD0Ev>
	...

08010a6c <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
    : view(v)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7ff fd1d 	bl	80104b8 <_ZN8touchgfx9PresenterC1Ev>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	3304      	adds	r3, #4
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7ff fd28 	bl	80104d8 <_ZN13ModelListenerC1Ev>
 8010a88:	4a06      	ldr	r2, [pc, #24]	; (8010aa4 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	601a      	str	r2, [r3, #0]
 8010a8e:	4a06      	ldr	r2, [pc, #24]	; (8010aa8 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	605a      	str	r2, [r3, #4]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	683a      	ldr	r2, [r7, #0]
 8010a98:	60da      	str	r2, [r3, #12]
{

}
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	080260bc 	.word	0x080260bc
 8010aa8:	080260d4 	.word	0x080260d4

08010aac <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]

}
 8010ab4:	bf00      	nop
 8010ab6:	370c      	adds	r7, #12
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr

08010ac0 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]

}
 8010ac8:	bf00      	nop
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	4a05      	ldr	r2, [pc, #20]	; (8010af4 <_ZN11Screen2ViewD1Ev+0x20>)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7fe ffc5 	bl	800fa74 <_ZN15Screen2ViewBaseD1Ev>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	080260e8 	.word	0x080260e8

08010af8 <_ZN11Screen2ViewD0Ev>:
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7ff ffe7 	bl	8010ad4 <_ZN11Screen2ViewD1Ev>
 8010b06:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f012 fd0c 	bl	8023528 <_ZdlPvj>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4618      	mov	r0, r3
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
	...

08010b1c <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7ff f816 	bl	800fb58 <_ZN15Screen2ViewBaseC1Ev>
 8010b2c:	4a03      	ldr	r2, [pc, #12]	; (8010b3c <_ZN11Screen2ViewC1Ev+0x20>)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	601a      	str	r2, [r3, #0]
{

}
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4618      	mov	r0, r3
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}
 8010b3c:	080260e8 	.word	0x080260e8

08010b40 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7ff fa32 	bl	800ffb4 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7fd f95c 	bl	800de20 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010b68:	bf00      	nop
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8010b70:	b480      	push	{r7}
 8010b72:	b083      	sub	sp, #12
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
    {
 8010b78:	4a04      	ldr	r2, [pc, #16]	; (8010b8c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	601a      	str	r2, [r3, #0]
    }
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4618      	mov	r0, r3
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	08026134 	.word	0x08026134

08010b90 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
    }
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7ff ffe9 	bl	8010b70 <_ZN8touchgfx15TouchControllerD1Ev>
 8010b9e:	2104      	movs	r1, #4
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f012 fcc1 	bl	8023528 <_ZdlPvj>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3708      	adds	r7, #8
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <_ZN20STM32TouchController4initEv>:
extern "C" {
#include "touch_screen_ft6236.h"
}

void STM32TouchController::init()
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b083      	sub	sp, #12
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8010bb8:	bf00      	nop
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr

08010bc4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b086      	sub	sp, #24
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     */
	TS_StateTypeDef state;
	BSP_TS_GetState(&state);
 8010bd0:	f107 0310 	add.w	r3, r7, #16
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7f2 f8ff 	bl	8002dd8 <BSP_TS_GetState>
	if (state.TouchDetected)
 8010bda:	8a3b      	ldrh	r3, [r7, #16]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d009      	beq.n	8010bf4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
	{
		x = state.X;
 8010be0:	8a7b      	ldrh	r3, [r7, #18]
 8010be2:	461a      	mov	r2, r3
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	601a      	str	r2, [r3, #0]
		y = state.Y;
 8010be8:	8abb      	ldrh	r3, [r7, #20]
 8010bea:	461a      	mov	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	601a      	str	r2, [r3, #0]
		return true;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	e000      	b.n	8010bf6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
	}
	return false;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3718      	adds	r7, #24
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
	...

08010c00 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	4a05      	ldr	r2, [pc, #20]	; (8010c20 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	601a      	str	r2, [r3, #0]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7ff ffad 	bl	8010b70 <_ZN8touchgfx15TouchControllerD1Ev>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	0802611c 	.word	0x0802611c

08010c24 <_ZN20STM32TouchControllerD0Ev>:
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f7ff ffe7 	bl	8010c00 <_ZN20STM32TouchControllerD1Ev>
 8010c32:	2104      	movs	r1, #4
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f012 fc77 	bl	8023528 <_ZdlPvj>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3708      	adds	r7, #8
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b083      	sub	sp, #12
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	71fb      	strb	r3, [r7, #7]

}
 8010c4e:	bf00      	nop
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010c5a:	b480      	push	{r7}
 8010c5c:	b083      	sub	sp, #12
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	4603      	mov	r3, r0
 8010c62:	71fb      	strb	r3, [r7, #7]

}
 8010c64:	bf00      	nop
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	71fb      	strb	r3, [r7, #7]

}
 8010c7a:	bf00      	nop
 8010c7c:	370c      	adds	r7, #12
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
	...

08010c88 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
    {
 8010c90:	4a04      	ldr	r2, [pc, #16]	; (8010ca4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	601a      	str	r2, [r3, #0]
    }
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	08026ebc 	.word	0x08026ebc

08010ca8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
    }
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f7ff ffe9 	bl	8010c88 <_ZN8touchgfx3HALD1Ev>
 8010cb6:	2178      	movs	r1, #120	; 0x78
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f012 fc35 	bl	8023528 <_ZdlPvj>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	78fa      	ldrb	r2, [r7, #3]
 8010cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8010ce4:	bf00      	nop
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	685a      	ldr	r2, [r3, #4]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4610      	mov	r0, r2
 8010d06:	4798      	blx	r3
 8010d08:	4603      	mov	r3, r0
    }
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b082      	sub	sp, #8
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f003 f88c 	bl	8013e38 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	3390      	adds	r3, #144	; 0x90
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	4798      	blx	r3
    }
 8010d2c:	bf00      	nop
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
    {
        return false;
 8010d3e:	2300      	movs	r3, #0
    }
 8010d40:	4618      	mov	r0, r3
 8010d42:	370c      	adds	r7, #12
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8010d4c:	b590      	push	{r4, r7, lr}
 8010d4e:	b08b      	sub	sp, #44	; 0x2c
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	4611      	mov	r1, r2
 8010d58:	461a      	mov	r2, r3
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	80fb      	strh	r3, [r7, #6]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8010d62:	f7fb fcc3 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8010d66:	4602      	mov	r2, r0
 8010d68:	6813      	ldr	r3, [r2, #0]
 8010d6a:	3328      	adds	r3, #40	; 0x28
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4610      	mov	r0, r2
 8010d70:	4798      	blx	r3
 8010d72:	4603      	mov	r3, r0
 8010d74:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8010d76:	8b7b      	ldrh	r3, [r7, #26]
 8010d78:	4a3d      	ldr	r2, [pc, #244]	; (8010e70 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8010d7a:	8812      	ldrh	r2, [r2, #0]
 8010d7c:	fb02 f303 	mul.w	r3, r2, r3
 8010d80:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8010d86:	2300      	movs	r3, #0
 8010d88:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8010d8e:	797b      	ldrb	r3, [r7, #5]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d005      	beq.n	8010da0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8010d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	4413      	add	r3, r2
 8010d9a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9e:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8010da0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d005      	beq.n	8010db4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8010da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	4413      	add	r3, r2
 8010dae:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8010db4:	88fb      	ldrh	r3, [r7, #6]
 8010db6:	3b01      	subs	r3, #1
 8010db8:	2b1f      	cmp	r3, #31
 8010dba:	d84d      	bhi.n	8010e58 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8010dbc:	a201      	add	r2, pc, #4	; (adr r2, 8010dc4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8010dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dc2:	bf00      	nop
 8010dc4:	08010e45 	.word	0x08010e45
 8010dc8:	08010e45 	.word	0x08010e45
 8010dcc:	08010e59 	.word	0x08010e59
 8010dd0:	08010e45 	.word	0x08010e45
 8010dd4:	08010e59 	.word	0x08010e59
 8010dd8:	08010e59 	.word	0x08010e59
 8010ddc:	08010e59 	.word	0x08010e59
 8010de0:	08010e45 	.word	0x08010e45
 8010de4:	08010e59 	.word	0x08010e59
 8010de8:	08010e59 	.word	0x08010e59
 8010dec:	08010e59 	.word	0x08010e59
 8010df0:	08010e59 	.word	0x08010e59
 8010df4:	08010e59 	.word	0x08010e59
 8010df8:	08010e59 	.word	0x08010e59
 8010dfc:	08010e59 	.word	0x08010e59
 8010e00:	08010e45 	.word	0x08010e45
 8010e04:	08010e59 	.word	0x08010e59
 8010e08:	08010e59 	.word	0x08010e59
 8010e0c:	08010e59 	.word	0x08010e59
 8010e10:	08010e59 	.word	0x08010e59
 8010e14:	08010e59 	.word	0x08010e59
 8010e18:	08010e59 	.word	0x08010e59
 8010e1c:	08010e59 	.word	0x08010e59
 8010e20:	08010e45 	.word	0x08010e45
 8010e24:	08010e59 	.word	0x08010e59
 8010e28:	08010e59 	.word	0x08010e59
 8010e2c:	08010e59 	.word	0x08010e59
 8010e30:	08010e59 	.word	0x08010e59
 8010e34:	08010e59 	.word	0x08010e59
 8010e38:	08010e59 	.word	0x08010e59
 8010e3c:	08010e59 	.word	0x08010e59
 8010e40:	08010e45 	.word	0x08010e45
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	3374      	adds	r3, #116	; 0x74
 8010e4a:	681c      	ldr	r4, [r3, #0]
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	6a3a      	ldr	r2, [r7, #32]
 8010e50:	68b9      	ldr	r1, [r7, #8]
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	47a0      	blx	r4
            break;
 8010e56:	e006      	b.n	8010e66 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8010e58:	4b06      	ldr	r3, [pc, #24]	; (8010e74 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8010e5a:	4a07      	ldr	r2, [pc, #28]	; (8010e78 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8010e5c:	f240 3125 	movw	r1, #805	; 0x325
 8010e60:	4806      	ldr	r0, [pc, #24]	; (8010e7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8010e62:	f012 fb8d 	bl	8023580 <__assert_func>
            break;
        }
    }
 8010e66:	bf00      	nop
 8010e68:	372c      	adds	r7, #44	; 0x2c
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd90      	pop	{r4, r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	2002b084 	.word	0x2002b084
 8010e74:	080250b8 	.word	0x080250b8
 8010e78:	08026248 	.word	0x08026248
 8010e7c:	080250d8 	.word	0x080250d8

08010e80 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
 8010e8c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d106      	bne.n	8010ea2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8010e94:	4b11      	ldr	r3, [pc, #68]	; (8010edc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8010e96:	4a12      	ldr	r2, [pc, #72]	; (8010ee0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8010e98:	f240 3137 	movw	r1, #823	; 0x337
 8010e9c:	4811      	ldr	r0, [pc, #68]	; (8010ee4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8010e9e:	f012 fb6f 	bl	8023580 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	68ba      	ldr	r2, [r7, #8]
 8010ea6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	683a      	ldr	r2, [r7, #0]
 8010eb2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	bf14      	ite	ne
 8010eba:	2301      	movne	r3, #1
 8010ebc:	2300      	moveq	r3, #0
 8010ebe:	b2da      	uxtb	r2, r3
 8010ec0:	4b09      	ldr	r3, [pc, #36]	; (8010ee8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8010ec2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	bf14      	ite	ne
 8010eca:	2301      	movne	r3, #1
 8010ecc:	2300      	moveq	r3, #0
 8010ece:	b2da      	uxtb	r2, r3
 8010ed0:	4b06      	ldr	r3, [pc, #24]	; (8010eec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8010ed2:	701a      	strb	r2, [r3, #0]
    }
 8010ed4:	bf00      	nop
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	0802511c 	.word	0x0802511c
 8010ee0:	080261f8 	.word	0x080261f8
 8010ee4:	080250d8 	.word	0x080250d8
 8010ee8:	2002b086 	.word	0x2002b086
 8010eec:	2002b087 	.word	0x2002b087

08010ef0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	460b      	mov	r3, r1
 8010efa:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d004      	beq.n	8010f0e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f08:	887a      	ldrh	r2, [r7, #2]
 8010f0a:	4610      	mov	r0, r2
 8010f0c:	4798      	blx	r3
        }
    }
 8010f0e:	bf00      	nop
 8010f10:	3708      	adds	r7, #8
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}

08010f16 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8010f16:	b580      	push	{r7, lr}
 8010f18:	b082      	sub	sp, #8
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	685a      	ldr	r2, [r3, #4]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3318      	adds	r3, #24
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4610      	mov	r0, r2
 8010f2e:	4798      	blx	r3
 8010f30:	4603      	mov	r3, r0
    }
 8010f32:	4618      	mov	r0, r3
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
	...

08010f3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d017      	beq.n	8010f84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8010f54:	4b1a      	ldr	r3, [pc, #104]	; (8010fc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d12a      	bne.n	8010fb2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8010f5c:	4b19      	ldr	r3, [pc, #100]	; (8010fc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010f5e:	881a      	ldrh	r2, [r3, #0]
 8010f60:	4b19      	ldr	r3, [pc, #100]	; (8010fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010f62:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8010f64:	4b19      	ldr	r3, [pc, #100]	; (8010fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010f66:	881a      	ldrh	r2, [r3, #0]
 8010f68:	4b19      	ldr	r3, [pc, #100]	; (8010fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8010f6a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8010f6c:	4b16      	ldr	r3, [pc, #88]	; (8010fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010f6e:	881a      	ldrh	r2, [r3, #0]
 8010f70:	4b16      	ldr	r3, [pc, #88]	; (8010fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010f72:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8010f74:	4b16      	ldr	r3, [pc, #88]	; (8010fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8010f76:	881a      	ldrh	r2, [r3, #0]
 8010f78:	4b12      	ldr	r3, [pc, #72]	; (8010fc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010f7a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8010f7c:	4b10      	ldr	r3, [pc, #64]	; (8010fc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8010f7e:	2201      	movs	r2, #1
 8010f80:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8010f82:	e016      	b.n	8010fb2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8010f84:	4b0e      	ldr	r3, [pc, #56]	; (8010fc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d012      	beq.n	8010fb2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8010f8c:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010f8e:	881a      	ldrh	r2, [r3, #0]
 8010f90:	4b0d      	ldr	r3, [pc, #52]	; (8010fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010f92:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8010f94:	4b0b      	ldr	r3, [pc, #44]	; (8010fc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010f96:	881a      	ldrh	r2, [r3, #0]
 8010f98:	4b0d      	ldr	r3, [pc, #52]	; (8010fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8010f9a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8010f9c:	4b0c      	ldr	r3, [pc, #48]	; (8010fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8010f9e:	881a      	ldrh	r2, [r3, #0]
 8010fa0:	4b0a      	ldr	r3, [pc, #40]	; (8010fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010fa2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8010fa4:	4b08      	ldr	r3, [pc, #32]	; (8010fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010fa6:	881a      	ldrh	r2, [r3, #0]
 8010fa8:	4b06      	ldr	r3, [pc, #24]	; (8010fc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010faa:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8010fac:	4b04      	ldr	r3, [pc, #16]	; (8010fc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	701a      	strb	r2, [r3, #0]
    }
 8010fb2:	bf00      	nop
 8010fb4:	370c      	adds	r7, #12
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	2002b080 	.word	0x2002b080
 8010fc4:	2002b07c 	.word	0x2002b07c
 8010fc8:	2002b082 	.word	0x2002b082
 8010fcc:	2002b07e 	.word	0x2002b07e
 8010fd0:	2002b084 	.word	0x2002b084

08010fd4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f002 f9ac 	bl	801333c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8010fe4:	bf00      	nop
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	4a05      	ldr	r2, [pc, #20]	; (801100c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	601a      	str	r2, [r3, #0]
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ff fe43 	bl	8010c88 <_ZN8touchgfx3HALD1Ev>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	08026420 	.word	0x08026420

08011010 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f7ff ffe7 	bl	8010fec <_ZN20TouchGFXGeneratedHALD1Ev>
 801101e:	2178      	movs	r1, #120	; 0x78
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f012 fa81 	bl	8023528 <_ZdlPvj>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4618      	mov	r0, r3
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	4618      	mov	r0, r3
 801103c:	f7ff ffca 	bl	8010fd4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011040:	bf00      	nop
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f4xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4618      	mov	r0, r3
 8011054:	f001 fb0a 	bl	801266c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8011058:	bf00      	nop
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4618      	mov	r0, r3
 801106c:	f001 fb8c 	bl	8012788 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011070:	4603      	mov	r3, r0
}
 8011072:	4618      	mov	r0, r3
 8011074:	3708      	adds	r7, #8
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b082      	sub	sp, #8
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
 8011082:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6839      	ldr	r1, [r7, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f001 fb8b 	bl	80127a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801108e:	bf00      	nop
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011096:	b580      	push	{r7, lr}
 8011098:	b082      	sub	sp, #8
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6839      	ldr	r1, [r7, #0]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f001 fb93 	bl	80127d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80110aa:	bf00      	nop
 80110ac:	3708      	adds	r7, #8
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b082      	sub	sp, #8
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4618      	mov	r0, r3
 80110be:	f001 fb09 	bl	80126d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80110c2:	bf00      	nop
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}

080110ca <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b082      	sub	sp, #8
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f001 fb0d 	bl	80126f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80110da:	bf00      	nop
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b082      	sub	sp, #8
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	4618      	mov	r0, r3
 80110ee:	f001 fb0f 	bl	8012710 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80110f2:	bf00      	nop
 80110f4:	3708      	adds	r7, #8
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b082      	sub	sp, #8
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	4618      	mov	r0, r3
 8011106:	f001 fb11 	bl	801272c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801110a:	bf00      	nop
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
	...

08011114 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	4a05      	ldr	r2, [pc, #20]	; (8011134 <_ZN11TouchGFXHALD1Ev+0x20>)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	601a      	str	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4618      	mov	r0, r3
 8011126:	f7ff ff61 	bl	8010fec <_ZN20TouchGFXGeneratedHALD1Ev>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	3708      	adds	r7, #8
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	0802614c 	.word	0x0802614c

08011138 <_ZN11TouchGFXHALD0Ev>:
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff ffe7 	bl	8011114 <_ZN11TouchGFXHALD1Ev>
 8011146:	2178      	movs	r1, #120	; 0x78
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f012 f9ed 	bl	8023528 <_ZdlPvj>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011158:	b580      	push	{r7, lr}
 801115a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801115c:	2203      	movs	r2, #3
 801115e:	2100      	movs	r1, #0
 8011160:	2001      	movs	r0, #1
 8011162:	f7f8 fa3b 	bl	80095dc <xQueueGenericCreate>
 8011166:	4602      	mov	r2, r0
 8011168:	4b0b      	ldr	r3, [pc, #44]	; (8011198 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801116a:	601a      	str	r2, [r3, #0]
 801116c:	4b0a      	ldr	r3, [pc, #40]	; (8011198 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d006      	beq.n	8011182 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8011174:	4b08      	ldr	r3, [pc, #32]	; (8011198 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8011176:	6818      	ldr	r0, [r3, #0]
 8011178:	2300      	movs	r3, #0
 801117a:	2200      	movs	r2, #0
 801117c:	2100      	movs	r1, #0
 801117e:	f7f8 fa89 	bl	8009694 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8011182:	2200      	movs	r2, #0
 8011184:	2101      	movs	r1, #1
 8011186:	2001      	movs	r0, #1
 8011188:	f7f8 fa28 	bl	80095dc <xQueueGenericCreate>
 801118c:	4602      	mov	r2, r0
 801118e:	4b03      	ldr	r3, [pc, #12]	; (801119c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8011190:	601a      	str	r2, [r3, #0]
}
 8011192:	bf00      	nop
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	20029afc 	.word	0x20029afc
 801119c:	20029b00 	.word	0x20029b00

080111a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80111a4:	4b04      	ldr	r3, [pc, #16]	; (80111b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f04f 31ff 	mov.w	r1, #4294967295
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7f8 fd65 	bl	8009c7c <xQueueSemaphoreTake>
}
 80111b2:	bf00      	nop
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	20029afc 	.word	0x20029afc

080111bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80111c0:	4b04      	ldr	r3, [pc, #16]	; (80111d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80111c2:	6818      	ldr	r0, [r3, #0]
 80111c4:	2300      	movs	r3, #0
 80111c6:	2200      	movs	r2, #0
 80111c8:	2100      	movs	r1, #0
 80111ca:	f7f8 fa63 	bl	8009694 <xQueueGenericSend>
}
 80111ce:	bf00      	nop
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	20029afc 	.word	0x20029afc

080111d8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80111dc:	4b03      	ldr	r3, [pc, #12]	; (80111ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	2100      	movs	r1, #0
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7f8 fd4a 	bl	8009c7c <xQueueSemaphoreTake>
}
 80111e8:	bf00      	nop
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	20029afc 	.word	0x20029afc

080111f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80111f6:	2300      	movs	r3, #0
 80111f8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80111fa:	4b0b      	ldr	r3, [pc, #44]	; (8011228 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	1d3a      	adds	r2, r7, #4
 8011200:	4611      	mov	r1, r2
 8011202:	4618      	mov	r0, r3
 8011204:	f7f8 fbd4 	bl	80099b0 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d007      	beq.n	801121e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 801120e:	4b07      	ldr	r3, [pc, #28]	; (801122c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8011210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011214:	601a      	str	r2, [r3, #0]
 8011216:	f3bf 8f4f 	dsb	sy
 801121a:	f3bf 8f6f 	isb	sy
}
 801121e:	bf00      	nop
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	20029afc 	.word	0x20029afc
 801122c:	e000ed04 	.word	0xe000ed04

08011230 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
    if (vsync_q)
 8011236:	4b0e      	ldr	r3, [pc, #56]	; (8011270 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d013      	beq.n	8011266 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 801123e:	2300      	movs	r3, #0
 8011240:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8011242:	4b0b      	ldr	r3, [pc, #44]	; (8011270 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8011244:	6818      	ldr	r0, [r3, #0]
 8011246:	1d3a      	adds	r2, r7, #4
 8011248:	2300      	movs	r3, #0
 801124a:	490a      	ldr	r1, [pc, #40]	; (8011274 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801124c:	f7f8 fb1c 	bl	8009888 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d007      	beq.n	8011266 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8011256:	4b08      	ldr	r3, [pc, #32]	; (8011278 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8011258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801125c:	601a      	str	r2, [r3, #0]
 801125e:	f3bf 8f4f 	dsb	sy
 8011262:	f3bf 8f6f 	isb	sy
    }
}
 8011266:	bf00      	nop
 8011268:	3708      	adds	r7, #8
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	20029b00 	.word	0x20029b00
 8011274:	20000024 	.word	0x20000024
 8011278:	e000ed04 	.word	0xe000ed04

0801127c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801127c:	b580      	push	{r7, lr}
 801127e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8011280:	4b08      	ldr	r3, [pc, #32]	; (80112a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	2200      	movs	r2, #0
 8011286:	4908      	ldr	r1, [pc, #32]	; (80112a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011288:	4618      	mov	r0, r3
 801128a:	f7f8 fc1b 	bl	8009ac4 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801128e:	4b05      	ldr	r3, [pc, #20]	; (80112a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f04f 32ff 	mov.w	r2, #4294967295
 8011296:	4904      	ldr	r1, [pc, #16]	; (80112a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011298:	4618      	mov	r0, r3
 801129a:	f7f8 fc13 	bl	8009ac4 <xQueueReceive>
}
 801129e:	bf00      	nop
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	20029b00 	.word	0x20029b00
 80112a8:	20000024 	.word	0x20000024

080112ac <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	4603      	mov	r3, r0
 80112b4:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 80112b6:	88fb      	ldrh	r3, [r7, #6]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7f9 f895 	bl	800a3e8 <vTaskDelay>
}
 80112be:	bf00      	nop
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
	...

080112c8 <__NVIC_EnableIRQ>:
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	4603      	mov	r3, r0
 80112d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80112d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	db0d      	blt.n	80112f6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80112da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112de:	b2db      	uxtb	r3, r3
 80112e0:	f003 021f 	and.w	r2, r3, #31
 80112e4:	4907      	ldr	r1, [pc, #28]	; (8011304 <__NVIC_EnableIRQ+0x3c>)
 80112e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112ea:	095b      	lsrs	r3, r3, #5
 80112ec:	2001      	movs	r0, #1
 80112ee:	fa00 f202 	lsl.w	r2, r0, r2
 80112f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80112f6:	bf00      	nop
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	e000e100 	.word	0xe000e100

08011308 <__NVIC_DisableIRQ>:
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	4603      	mov	r3, r0
 8011310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011316:	2b00      	cmp	r3, #0
 8011318:	db12      	blt.n	8011340 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801131e:	b2db      	uxtb	r3, r3
 8011320:	f003 021f 	and.w	r2, r3, #31
 8011324:	4909      	ldr	r1, [pc, #36]	; (801134c <__NVIC_DisableIRQ+0x44>)
 8011326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801132a:	095b      	lsrs	r3, r3, #5
 801132c:	2001      	movs	r0, #1
 801132e:	fa00 f202 	lsl.w	r2, r0, r2
 8011332:	3320      	adds	r3, #32
 8011334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011338:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801133c:	f3bf 8f6f 	isb	sy
}
 8011340:	bf00      	nop
 8011342:	370c      	adds	r7, #12
 8011344:	46bd      	mov	sp, r7
 8011346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134a:	4770      	bx	lr
 801134c:	e000e100 	.word	0xe000e100

08011350 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	601a      	str	r2, [r3, #0]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	4618      	mov	r0, r3
 8011362:	370c      	adds	r7, #12
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 801136c:	b480      	push	{r7}
 801136e:	b083      	sub	sp, #12
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
        return color;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
    }
 8011378:	4618      	mov	r0, r3
 801137a:	370c      	adds	r7, #12
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	b29b      	uxth	r3, r3
    }
 8011392:	4618      	mov	r0, r3
 8011394:	370c      	adds	r7, #12
 8011396:	46bd      	mov	sp, r7
 8011398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139c:	4770      	bx	lr
	...

080113a0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80113a0:	b480      	push	{r7}
 80113a2:	b083      	sub	sp, #12
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
    {
 80113a8:	4a04      	ldr	r2, [pc, #16]	; (80113bc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	601a      	str	r2, [r3, #0]
    }
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	4618      	mov	r0, r3
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr
 80113bc:	080262f4 	.word	0x080262f4

080113c0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
    }
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7ff ffe9 	bl	80113a0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80113ce:	2104      	movs	r1, #4
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f012 f8a9 	bl	8023528 <_ZdlPvj>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	4618      	mov	r0, r3
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	3344      	adds	r3, #68	; 0x44
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	4798      	blx	r3
    }
 80113f4:	bf00      	nop
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8011404:	2300      	movs	r3, #0
    }
 8011406:	4618      	mov	r0, r3
 8011408:	370c      	adds	r7, #12
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr
	...

08011414 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8011414:	b480      	push	{r7}
 8011416:	b083      	sub	sp, #12
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
    {
 801141c:	4a04      	ldr	r2, [pc, #16]	; (8011430 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	601a      	str	r2, [r3, #0]
    }
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4618      	mov	r0, r3
 8011426:	370c      	adds	r7, #12
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr
 8011430:	08027300 	.word	0x08027300

08011434 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
    }
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f7ff ffe9 	bl	8011414 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011442:	210c      	movs	r1, #12
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f012 f86f 	bl	8023528 <_ZdlPvj>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4618      	mov	r0, r3
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011454:	b480      	push	{r7}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801145e:	4a09      	ldr	r2, [pc, #36]	; (8011484 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	601a      	str	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	683a      	ldr	r2, [r7, #0]
 8011468:	605a      	str	r2, [r3, #4]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	721a      	strb	r2, [r3, #8]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2200      	movs	r2, #0
 8011474:	725a      	strb	r2, [r3, #9]
    {
    }
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4618      	mov	r0, r3
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr
 8011484:	08027300 	.word	0x08027300

08011488 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685a      	ldr	r2, [r3, #4]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	3314      	adds	r3, #20
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	4610      	mov	r0, r2
 80114a0:	4798      	blx	r3
    }
 80114a2:	bf00      	nop
 80114a4:	3708      	adds	r7, #8
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}

080114aa <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80114aa:	b580      	push	{r7, lr}
 80114ac:	b082      	sub	sp, #8
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	3328      	adds	r3, #40	; 0x28
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4610      	mov	r0, r2
 80114be:	4798      	blx	r3
    }
 80114c0:	bf00      	nop
 80114c2:	3708      	adds	r7, #8
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
 80114d4:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80114e0:	68ba      	ldr	r2, [r7, #8]
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	430a      	orrs	r2, r1
 80114e8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114f0:	f023 0107 	bic.w	r1, r3, #7
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	430a      	orrs	r2, r1
 80114fc:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011504:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8011508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801150c:	6839      	ldr	r1, [r7, #0]
 801150e:	68fa      	ldr	r2, [r7, #12]
 8011510:	6812      	ldr	r2, [r2, #0]
 8011512:	430b      	orrs	r3, r1
 8011514:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8011516:	2300      	movs	r3, #0
}
 8011518:	4618      	mov	r0, r3
 801151a:	3714      	adds	r7, #20
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801152c:	f7fb f8d2 	bl	800c6d4 <_ZN8touchgfx3HAL11getInstanceEv>
 8011530:	4603      	mov	r3, r0
 8011532:	4618      	mov	r0, r3
 8011534:	f7ff ffa8 	bl	8011488 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8011538:	bf00      	nop
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
    assert(0);
 8011548:	4b02      	ldr	r3, [pc, #8]	; (8011554 <DMA2D_XferErrorCallback+0x14>)
 801154a:	4a03      	ldr	r2, [pc, #12]	; (8011558 <DMA2D_XferErrorCallback+0x18>)
 801154c:	2136      	movs	r1, #54	; 0x36
 801154e:	4803      	ldr	r0, [pc, #12]	; (801155c <DMA2D_XferErrorCallback+0x1c>)
 8011550:	f012 f816 	bl	8023580 <__assert_func>
 8011554:	08025154 	.word	0x08025154
 8011558:	08026310 	.word	0x08026310
 801155c:	08025158 	.word	0x08025158

08011560 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	3318      	adds	r3, #24
 801156c:	4618      	mov	r0, r3
 801156e:	f7ff feef 	bl	8011350 <_ZN8touchgfx9colortypeC1Ev>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4618      	mov	r0, r3
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 801157c:	b5b0      	push	{r4, r5, r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	330c      	adds	r3, #12
 801158a:	4619      	mov	r1, r3
 801158c:	4610      	mov	r0, r2
 801158e:	f7ff ff61 	bl	8011454 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8011592:	4a0e      	ldr	r2, [pc, #56]	; (80115cc <_ZN10STM32F4DMAC1Ev+0x50>)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	601a      	str	r2, [r3, #0]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f103 000c 	add.w	r0, r3, #12
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	3320      	adds	r3, #32
 80115a2:	2260      	movs	r2, #96	; 0x60
 80115a4:	4619      	mov	r1, r3
 80115a6:	f002 fd6d 	bl	8014084 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	3320      	adds	r3, #32
 80115ae:	245f      	movs	r4, #95	; 0x5f
 80115b0:	461d      	mov	r5, r3
 80115b2:	2c00      	cmp	r4, #0
 80115b4:	db05      	blt.n	80115c2 <_ZN10STM32F4DMAC1Ev+0x46>
 80115b6:	4628      	mov	r0, r5
 80115b8:	f7ff ffd2 	bl	8011560 <_ZN8touchgfx6BlitOpC1Ev>
 80115bc:	3520      	adds	r5, #32
 80115be:	3c01      	subs	r4, #1
 80115c0:	e7f7      	b.n	80115b2 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4618      	mov	r0, r3
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bdb0      	pop	{r4, r5, r7, pc}
 80115cc:	080262a4 	.word	0x080262a4

080115d0 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	4a0b      	ldr	r2, [pc, #44]	; (8011608 <_ZN10STM32F4DMAD1Ev+0x38>)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80115de:	480b      	ldr	r0, [pc, #44]	; (801160c <_ZN10STM32F4DMAD1Ev+0x3c>)
 80115e0:	f7f2 fb0c 	bl	8003bfc <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80115e4:	205a      	movs	r0, #90	; 0x5a
 80115e6:	f7ff fe8f 	bl	8011308 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	330c      	adds	r3, #12
 80115ee:	4618      	mov	r0, r3
 80115f0:	f000 faa0 	bl	8011b34 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7ff ff0c 	bl	8011414 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	4618      	mov	r0, r3
 8011600:	3708      	adds	r7, #8
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	080262a4 	.word	0x080262a4
 801160c:	2002b828 	.word	0x2002b828

08011610 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
}
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7ff ffd9 	bl	80115d0 <_ZN10STM32F4DMAD1Ev>
 801161e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f011 ff80 	bl	8023528 <_ZdlPvj>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4618      	mov	r0, r3
 801162c:	3708      	adds	r7, #8
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
	...

08011634 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 801163c:	4b09      	ldr	r3, [pc, #36]	; (8011664 <_ZN10STM32F4DMA10initializeEv+0x30>)
 801163e:	4a0a      	ldr	r2, [pc, #40]	; (8011668 <_ZN10STM32F4DMA10initializeEv+0x34>)
 8011640:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8011642:	4808      	ldr	r0, [pc, #32]	; (8011664 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8011644:	f7f2 fa90 	bl	8003b68 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8011648:	4b06      	ldr	r3, [pc, #24]	; (8011664 <_ZN10STM32F4DMA10initializeEv+0x30>)
 801164a:	4a08      	ldr	r2, [pc, #32]	; (801166c <_ZN10STM32F4DMA10initializeEv+0x38>)
 801164c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801164e:	4b05      	ldr	r3, [pc, #20]	; (8011664 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8011650:	4a07      	ldr	r2, [pc, #28]	; (8011670 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 8011652:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8011654:	205a      	movs	r0, #90	; 0x5a
 8011656:	f7ff fe37 	bl	80112c8 <__NVIC_EnableIRQ>
}
 801165a:	bf00      	nop
 801165c:	3708      	adds	r7, #8
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	2002b828 	.word	0x2002b828
 8011668:	4002b000 	.word	0x4002b000
 801166c:	08011525 	.word	0x08011525
 8011670:	08011541 	.word	0x08011541

08011674 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 801167c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8011680:	4618      	mov	r0, r3
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 801168c:	b590      	push	{r4, r7, lr}
 801168e:	b08d      	sub	sp, #52	; 0x34
 8011690:	af02      	add	r7, sp, #8
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8011696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801169a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801169c:	2300      	movs	r3, #0
 801169e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80116a4:	2b20      	cmp	r3, #32
 80116a6:	d007      	beq.n	80116b8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b40      	cmp	r3, #64	; 0x40
 80116ae:	d003      	beq.n	80116b8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2b04      	cmp	r3, #4
 80116b6:	d101      	bne.n	80116bc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80116b8:	2301      	movs	r3, #1
 80116ba:	e000      	b.n	80116be <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80116bc:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80116be:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80116c4:	2b80      	cmp	r3, #128	; 0x80
 80116c6:	d004      	beq.n	80116d2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116d0:	d101      	bne.n	80116d6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80116d2:	2301      	movs	r3, #1
 80116d4:	e000      	b.n	80116d8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80116d6:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80116d8:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80116da:	f7fb f807 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 80116de:	4602      	mov	r2, r0
 80116e0:	6813      	ldr	r3, [r2, #0]
 80116e2:	3320      	adds	r3, #32
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4610      	mov	r0, r2
 80116e8:	4798      	blx	r3
 80116ea:	4603      	mov	r3, r0
 80116ec:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2b40      	cmp	r3, #64	; 0x40
 80116f4:	d01d      	beq.n	8011732 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80116f6:	2b40      	cmp	r3, #64	; 0x40
 80116f8:	d804      	bhi.n	8011704 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80116fa:	2b04      	cmp	r3, #4
 80116fc:	d00e      	beq.n	801171c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80116fe:	2b20      	cmp	r3, #32
 8011700:	d017      	beq.n	8011732 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8011702:	e019      	b.n	8011738 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8011704:	2b80      	cmp	r3, #128	; 0x80
 8011706:	d003      	beq.n	8011710 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8011708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801170c:	d003      	beq.n	8011716 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801170e:	e013      	b.n	8011738 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8011710:	230a      	movs	r3, #10
 8011712:	623b      	str	r3, [r7, #32]
        break;
 8011714:	e01a      	b.n	801174c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8011716:	2309      	movs	r3, #9
 8011718:	623b      	str	r3, [r7, #32]
        break;
 801171a:	e017      	b.n	801174c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011720:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011722:	7f7b      	ldrb	r3, [r7, #29]
 8011724:	2b10      	cmp	r3, #16
 8011726:	d101      	bne.n	801172c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8011728:	2302      	movs	r3, #2
 801172a:	e000      	b.n	801172e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 801172c:	2301      	movs	r3, #1
 801172e:	623b      	str	r3, [r7, #32]
        break;
 8011730:	e00c      	b.n	801174c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8011732:	2300      	movs	r3, #0
 8011734:	623b      	str	r3, [r7, #32]
        break;
 8011736:	e009      	b.n	801174c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8011738:	2300      	movs	r3, #0
 801173a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801173c:	7f7b      	ldrb	r3, [r7, #29]
 801173e:	2b10      	cmp	r3, #16
 8011740:	d101      	bne.n	8011746 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8011742:	2302      	movs	r3, #2
 8011744:	e000      	b.n	8011748 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8011746:	2301      	movs	r3, #1
 8011748:	623b      	str	r3, [r7, #32]
        break;
 801174a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801174c:	4a76      	ldr	r2, [pc, #472]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011750:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8011752:	7f7b      	ldrb	r3, [r7, #29]
 8011754:	2b10      	cmp	r3, #16
 8011756:	d101      	bne.n	801175c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8011758:	2302      	movs	r3, #2
 801175a:	e000      	b.n	801175e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 801175c:	2301      	movs	r3, #1
 801175e:	4a72      	ldr	r2, [pc, #456]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011760:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	8adb      	ldrh	r3, [r3, #22]
 8011766:	461a      	mov	r2, r3
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	8a1b      	ldrh	r3, [r3, #16]
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	461a      	mov	r2, r3
 8011770:	4b6d      	ldr	r3, [pc, #436]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011772:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011774:	7f7b      	ldrb	r3, [r7, #29]
 8011776:	2b10      	cmp	r3, #16
 8011778:	d101      	bne.n	801177e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801177a:	2202      	movs	r2, #2
 801177c:	e000      	b.n	8011780 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801177e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	8adb      	ldrh	r3, [r3, #22]
 8011784:	4619      	mov	r1, r3
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	8a1b      	ldrh	r3, [r3, #16]
 801178a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801178c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801178e:	4866      	ldr	r0, [pc, #408]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011790:	f7ff fe9a 	bl	80114c8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8011794:	4a64      	ldr	r2, [pc, #400]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	8a9b      	ldrh	r3, [r3, #20]
 801179e:	461a      	mov	r2, r3
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	8a1b      	ldrh	r3, [r3, #16]
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	461a      	mov	r2, r3
 80117a8:	4b5f      	ldr	r3, [pc, #380]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80117aa:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80117ac:	7ffb      	ldrb	r3, [r7, #31]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d103      	bne.n	80117ba <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80117b2:	7fbb      	ldrb	r3, [r7, #30]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f000 8082 	beq.w	80118be <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	7f1b      	ldrb	r3, [r3, #28]
 80117be:	2bff      	cmp	r3, #255	; 0xff
 80117c0:	d008      	beq.n	80117d4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80117c2:	4b59      	ldr	r3, [pc, #356]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80117c4:	2202      	movs	r2, #2
 80117c6:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	7f1b      	ldrb	r3, [r3, #28]
 80117cc:	461a      	mov	r2, r3
 80117ce:	4b56      	ldr	r3, [pc, #344]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80117d0:	635a      	str	r2, [r3, #52]	; 0x34
 80117d2:	e002      	b.n	80117da <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80117d4:	4b54      	ldr	r3, [pc, #336]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80117d6:	2200      	movs	r2, #0
 80117d8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80117da:	7fbb      	ldrb	r3, [r7, #30]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d059      	beq.n	8011894 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80117e0:	7f7b      	ldrb	r3, [r7, #29]
 80117e2:	2b10      	cmp	r3, #16
 80117e4:	d14a      	bne.n	801187c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	3318      	adds	r3, #24
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7ff fdca 	bl	8011384 <_ZNK8touchgfx9colortypecvtEv>
 80117f0:	4603      	mov	r3, r0
 80117f2:	12db      	asrs	r3, r3, #11
 80117f4:	f003 021f 	and.w	r2, r3, #31
 80117f8:	4613      	mov	r3, r2
 80117fa:	021b      	lsls	r3, r3, #8
 80117fc:	1a9b      	subs	r3, r3, r2
 80117fe:	4a4b      	ldr	r2, [pc, #300]	; (801192c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8011800:	fb82 1203 	smull	r1, r2, r2, r3
 8011804:	441a      	add	r2, r3
 8011806:	1112      	asrs	r2, r2, #4
 8011808:	17db      	asrs	r3, r3, #31
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	3318      	adds	r3, #24
 8011812:	4618      	mov	r0, r3
 8011814:	f7ff fdb6 	bl	8011384 <_ZNK8touchgfx9colortypecvtEv>
 8011818:	4603      	mov	r3, r0
 801181a:	115b      	asrs	r3, r3, #5
 801181c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011820:	4613      	mov	r3, r2
 8011822:	021b      	lsls	r3, r3, #8
 8011824:	1a9b      	subs	r3, r3, r2
 8011826:	4a42      	ldr	r2, [pc, #264]	; (8011930 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8011828:	fb82 1203 	smull	r1, r2, r2, r3
 801182c:	441a      	add	r2, r3
 801182e:	1152      	asrs	r2, r2, #5
 8011830:	17db      	asrs	r3, r3, #31
 8011832:	1ad3      	subs	r3, r2, r3
 8011834:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	3318      	adds	r3, #24
 801183a:	4618      	mov	r0, r3
 801183c:	f7ff fda2 	bl	8011384 <_ZNK8touchgfx9colortypecvtEv>
 8011840:	4603      	mov	r3, r0
 8011842:	f003 021f 	and.w	r2, r3, #31
 8011846:	4613      	mov	r3, r2
 8011848:	021b      	lsls	r3, r3, #8
 801184a:	1a9b      	subs	r3, r3, r2
 801184c:	4a37      	ldr	r2, [pc, #220]	; (801192c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801184e:	fb82 1203 	smull	r1, r2, r2, r3
 8011852:	441a      	add	r2, r3
 8011854:	1112      	asrs	r2, r2, #4
 8011856:	17db      	asrs	r3, r3, #31
 8011858:	1ad3      	subs	r3, r2, r3
 801185a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	7f1b      	ldrb	r3, [r3, #28]
 8011860:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	061a      	lsls	r2, r3, #24
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	041b      	lsls	r3, r3, #16
 801186a:	431a      	orrs	r2, r3
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	021b      	lsls	r3, r3, #8
 8011870:	431a      	orrs	r2, r3
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	4313      	orrs	r3, r2
 8011876:	4a2c      	ldr	r2, [pc, #176]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011878:	6353      	str	r3, [r2, #52]	; 0x34
 801187a:	e00b      	b.n	8011894 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	3318      	adds	r3, #24
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff fd73 	bl	801136c <_ZNK8touchgfx9colortype10getColor32Ev>
 8011886:	4602      	mov	r2, r0
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	7f1b      	ldrb	r3, [r3, #28]
 801188c:	061b      	lsls	r3, r3, #24
 801188e:	4313      	orrs	r3, r2
 8011890:	4a25      	ldr	r2, [pc, #148]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011892:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	8adb      	ldrh	r3, [r3, #22]
 8011898:	461a      	mov	r2, r3
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	8a1b      	ldrh	r3, [r3, #16]
 801189e:	1ad3      	subs	r3, r2, r3
 80118a0:	461a      	mov	r2, r3
 80118a2:	4b21      	ldr	r3, [pc, #132]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80118a4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80118a6:	7f7b      	ldrb	r3, [r7, #29]
 80118a8:	2b10      	cmp	r3, #16
 80118aa:	d101      	bne.n	80118b0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80118ac:	2302      	movs	r3, #2
 80118ae:	e000      	b.n	80118b2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 80118b0:	2301      	movs	r3, #1
 80118b2:	4a1d      	ldr	r2, [pc, #116]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80118b4:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80118b6:	2100      	movs	r1, #0
 80118b8:	481b      	ldr	r0, [pc, #108]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80118ba:	f7f2 fc1f 	bl	80040fc <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80118be:	2101      	movs	r1, #1
 80118c0:	4819      	ldr	r0, [pc, #100]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80118c2:	f7f2 fc1b 	bl	80040fc <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 80118c6:	7ffb      	ldrb	r3, [r7, #31]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d102      	bne.n	80118d2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 80118cc:	7fbb      	ldrb	r3, [r7, #30]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d015      	beq.n	80118fe <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80118d6:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80118dc:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80118e2:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80118e8:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80118ee:	9301      	str	r3, [sp, #4]
 80118f0:	9200      	str	r2, [sp, #0]
 80118f2:	4623      	mov	r3, r4
 80118f4:	4602      	mov	r2, r0
 80118f6:	480c      	ldr	r0, [pc, #48]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80118f8:	f7f2 fa23 	bl	8003d42 <HAL_DMA2D_BlendingStart_IT>
 80118fc:	e00f      	b.n	801191e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8011902:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8011908:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 801190e:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8011914:	9300      	str	r3, [sp, #0]
 8011916:	4603      	mov	r3, r0
 8011918:	4803      	ldr	r0, [pc, #12]	; (8011928 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801191a:	f7f2 f9df 	bl	8003cdc <HAL_DMA2D_Start_IT>
    }
}
 801191e:	bf00      	nop
 8011920:	372c      	adds	r7, #44	; 0x2c
 8011922:	46bd      	mov	sp, r7
 8011924:	bd90      	pop	{r4, r7, pc}
 8011926:	bf00      	nop
 8011928:	2002b828 	.word	0x2002b828
 801192c:	84210843 	.word	0x84210843
 8011930:	82082083 	.word	0x82082083

08011934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8011934:	b590      	push	{r4, r7, lr}
 8011936:	b08d      	sub	sp, #52	; 0x34
 8011938:	af02      	add	r7, sp, #8
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801193e:	f7fa fed5 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8011942:	4602      	mov	r2, r0
 8011944:	6813      	ldr	r3, [r2, #0]
 8011946:	3320      	adds	r3, #32
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	4610      	mov	r0, r2
 801194c:	4798      	blx	r3
 801194e:	4603      	mov	r3, r0
 8011950:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011952:	7ffb      	ldrb	r3, [r7, #31]
 8011954:	2b10      	cmp	r3, #16
 8011956:	d101      	bne.n	801195c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8011958:	2302      	movs	r3, #2
 801195a:	e000      	b.n	801195e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 801195c:	2301      	movs	r3, #1
 801195e:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8011960:	2300      	movs	r3, #0
 8011962:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8011964:	7ffb      	ldrb	r3, [r7, #31]
 8011966:	2b10      	cmp	r3, #16
 8011968:	d149      	bne.n	80119fe <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	3318      	adds	r3, #24
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff fd08 	bl	8011384 <_ZNK8touchgfx9colortypecvtEv>
 8011974:	4603      	mov	r3, r0
 8011976:	12db      	asrs	r3, r3, #11
 8011978:	f003 021f 	and.w	r2, r3, #31
 801197c:	4613      	mov	r3, r2
 801197e:	021b      	lsls	r3, r3, #8
 8011980:	1a9b      	subs	r3, r3, r2
 8011982:	4a69      	ldr	r2, [pc, #420]	; (8011b28 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8011984:	fb82 1203 	smull	r1, r2, r2, r3
 8011988:	441a      	add	r2, r3
 801198a:	1112      	asrs	r2, r2, #4
 801198c:	17db      	asrs	r3, r3, #31
 801198e:	1ad3      	subs	r3, r2, r3
 8011990:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	3318      	adds	r3, #24
 8011996:	4618      	mov	r0, r3
 8011998:	f7ff fcf4 	bl	8011384 <_ZNK8touchgfx9colortypecvtEv>
 801199c:	4603      	mov	r3, r0
 801199e:	115b      	asrs	r3, r3, #5
 80119a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80119a4:	4613      	mov	r3, r2
 80119a6:	021b      	lsls	r3, r3, #8
 80119a8:	1a9b      	subs	r3, r3, r2
 80119aa:	4a60      	ldr	r2, [pc, #384]	; (8011b2c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80119ac:	fb82 1203 	smull	r1, r2, r2, r3
 80119b0:	441a      	add	r2, r3
 80119b2:	1152      	asrs	r2, r2, #5
 80119b4:	17db      	asrs	r3, r3, #31
 80119b6:	1ad3      	subs	r3, r2, r3
 80119b8:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	3318      	adds	r3, #24
 80119be:	4618      	mov	r0, r3
 80119c0:	f7ff fce0 	bl	8011384 <_ZNK8touchgfx9colortypecvtEv>
 80119c4:	4603      	mov	r3, r0
 80119c6:	f003 021f 	and.w	r2, r3, #31
 80119ca:	4613      	mov	r3, r2
 80119cc:	021b      	lsls	r3, r3, #8
 80119ce:	1a9b      	subs	r3, r3, r2
 80119d0:	4a55      	ldr	r2, [pc, #340]	; (8011b28 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80119d2:	fb82 1203 	smull	r1, r2, r2, r3
 80119d6:	441a      	add	r2, r3
 80119d8:	1112      	asrs	r2, r2, #4
 80119da:	17db      	asrs	r3, r3, #31
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	7f1b      	ldrb	r3, [r3, #28]
 80119e4:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	061a      	lsls	r2, r3, #24
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	041b      	lsls	r3, r3, #16
 80119ee:	431a      	orrs	r2, r3
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	021b      	lsls	r3, r3, #8
 80119f4:	4313      	orrs	r3, r2
 80119f6:	68fa      	ldr	r2, [r7, #12]
 80119f8:	4313      	orrs	r3, r2
 80119fa:	623b      	str	r3, [r7, #32]
 80119fc:	e00b      	b.n	8011a16 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	7f1b      	ldrb	r3, [r3, #28]
 8011a02:	061b      	lsls	r3, r3, #24
 8011a04:	461c      	mov	r4, r3
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	3318      	adds	r3, #24
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff fcae 	bl	801136c <_ZNK8touchgfx9colortype10getColor32Ev>
 8011a10:	4603      	mov	r3, r0
 8011a12:	4323      	orrs	r3, r4
 8011a14:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2b08      	cmp	r3, #8
 8011a1c:	d103      	bne.n	8011a26 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8011a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011a24:	e003      	b.n	8011a2e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8011a26:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8011a2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011a2c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8011a2e:	4a40      	ldr	r2, [pc, #256]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a32:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8011a34:	7ffb      	ldrb	r3, [r7, #31]
 8011a36:	2b10      	cmp	r3, #16
 8011a38:	d101      	bne.n	8011a3e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8011a3a:	2302      	movs	r3, #2
 8011a3c:	e000      	b.n	8011a40 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8011a3e:	2301      	movs	r3, #1
 8011a40:	4a3b      	ldr	r2, [pc, #236]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a42:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	8adb      	ldrh	r3, [r3, #22]
 8011a48:	461a      	mov	r2, r3
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	8a1b      	ldrh	r3, [r3, #16]
 8011a4e:	1ad3      	subs	r3, r2, r3
 8011a50:	461a      	mov	r2, r3
 8011a52:	4b37      	ldr	r3, [pc, #220]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a54:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011a56:	7ffb      	ldrb	r3, [r7, #31]
 8011a58:	2b10      	cmp	r3, #16
 8011a5a:	d101      	bne.n	8011a60 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8011a5c:	2202      	movs	r2, #2
 8011a5e:	e000      	b.n	8011a62 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8011a60:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	8adb      	ldrh	r3, [r3, #22]
 8011a66:	4619      	mov	r1, r3
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	8a1b      	ldrh	r3, [r3, #16]
 8011a6c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a70:	482f      	ldr	r0, [pc, #188]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a72:	f7ff fd29 	bl	80114c8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8011a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a7c:	d11e      	bne.n	8011abc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8011a7e:	4b2c      	ldr	r3, [pc, #176]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a80:	2201      	movs	r2, #1
 8011a82:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8011a84:	4a2a      	ldr	r2, [pc, #168]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a86:	6a3b      	ldr	r3, [r7, #32]
 8011a88:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8011a8a:	4b29      	ldr	r3, [pc, #164]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a8c:	2209      	movs	r2, #9
 8011a8e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	8adb      	ldrh	r3, [r3, #22]
 8011a94:	461a      	mov	r2, r3
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	8a1b      	ldrh	r3, [r3, #16]
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	4b24      	ldr	r3, [pc, #144]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011aa0:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011aa2:	7ffb      	ldrb	r3, [r7, #31]
 8011aa4:	2b10      	cmp	r3, #16
 8011aa6:	d101      	bne.n	8011aac <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	e000      	b.n	8011aae <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8011aac:	2301      	movs	r3, #1
 8011aae:	4a20      	ldr	r2, [pc, #128]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011ab0:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	481e      	ldr	r0, [pc, #120]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011ab6:	f7f2 fb21 	bl	80040fc <HAL_DMA2D_ConfigLayer>
 8011aba:	e005      	b.n	8011ac8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8011abc:	4a1c      	ldr	r2, [pc, #112]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8011ac2:	4b1b      	ldr	r3, [pc, #108]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8011ac8:	2101      	movs	r1, #1
 8011aca:	4819      	ldr	r0, [pc, #100]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011acc:	f7f2 fb16 	bl	80040fc <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011ad6:	d115      	bne.n	8011b04 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011adc:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011ae2:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011ae8:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011aee:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011af4:	9301      	str	r3, [sp, #4]
 8011af6:	9200      	str	r2, [sp, #0]
 8011af8:	4623      	mov	r3, r4
 8011afa:	4602      	mov	r2, r0
 8011afc:	480c      	ldr	r0, [pc, #48]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011afe:	f7f2 f920 	bl	8003d42 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8011b02:	e00d      	b.n	8011b20 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011b0e:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011b14:	9300      	str	r3, [sp, #0]
 8011b16:	460b      	mov	r3, r1
 8011b18:	6a39      	ldr	r1, [r7, #32]
 8011b1a:	4805      	ldr	r0, [pc, #20]	; (8011b30 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011b1c:	f7f2 f8de 	bl	8003cdc <HAL_DMA2D_Start_IT>
}
 8011b20:	bf00      	nop
 8011b22:	372c      	adds	r7, #44	; 0x2c
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd90      	pop	{r4, r7, pc}
 8011b28:	84210843 	.word	0x84210843
 8011b2c:	82082083 	.word	0x82082083
 8011b30:	2002b828 	.word	0x2002b828

08011b34 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	4a05      	ldr	r2, [pc, #20]	; (8011b54 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	601a      	str	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ff fc2b 	bl	80113a0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	08027350 	.word	0x08027350

08011b58 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7ff ffe7 	bl	8011b34 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011b66:	2114      	movs	r1, #20
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f011 fcdd 	bl	8023528 <_ZdlPvj>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	4618      	mov	r0, r3
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
        texts = t;
 8011b80:	4a04      	ldr	r2, [pc, #16]	; (8011b94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6013      	str	r3, [r2, #0]
    }
 8011b86:	bf00      	nop
 8011b88:	370c      	adds	r7, #12
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	2002b104 	.word	0x2002b104

08011b98 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	60f8      	str	r0, [r7, #12]
 8011ba0:	60b9      	str	r1, [r7, #8]
 8011ba2:	607a      	str	r2, [r7, #4]
 8011ba4:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8011ba6:	4a0b      	ldr	r2, [pc, #44]	; (8011bd4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	601a      	str	r2, [r3, #0]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	68ba      	ldr	r2, [r7, #8]
 8011bb0:	605a      	str	r2, [r3, #4]
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	609a      	str	r2, [r3, #8]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	683a      	ldr	r2, [r7, #0]
 8011bbc:	60da      	str	r2, [r3, #12]
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	69ba      	ldr	r2, [r7, #24]
 8011bc2:	611a      	str	r2, [r3, #16]
    {
    }
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3714      	adds	r7, #20
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd0:	4770      	bx	lr
 8011bd2:	bf00      	nop
 8011bd4:	08026410 	.word	0x08026410

08011bd8 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8011bd8:	b480      	push	{r7}
 8011bda:	b083      	sub	sp, #12
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
    {
 8011be0:	4a04      	ldr	r2, [pc, #16]	; (8011bf4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	601a      	str	r2, [r3, #0]
    }
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4618      	mov	r0, r3
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr
 8011bf4:	08026410 	.word	0x08026410

08011bf8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
    }
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f7ff ffe9 	bl	8011bd8 <_ZN8touchgfx7MVPHeapD1Ev>
 8011c06:	2114      	movs	r1, #20
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f011 fc8d 	bl	8023528 <_ZdlPvj>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	4618      	mov	r0, r3
 8011c12:	3708      	adds	r7, #8
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
    {
 8011c20:	4a04      	ldr	r2, [pc, #16]	; (8011c34 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	601a      	str	r2, [r3, #0]
    }
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	370c      	adds	r7, #12
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr
 8011c34:	08027878 	.word	0x08027878

08011c38 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
    }
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7ff ffe9 	bl	8011c18 <_ZN8touchgfx3LCDD1Ev>
 8011c46:	2108      	movs	r1, #8
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f011 fc6d 	bl	8023528 <_ZdlPvj>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	4618      	mov	r0, r3
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2200      	movs	r2, #0
 8011c64:	801a      	strh	r2, [r3, #0]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	805a      	strh	r2, [r3, #2]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	809a      	strh	r2, [r3, #4]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2200      	movs	r2, #0
 8011c76:	80da      	strh	r2, [r3, #6]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	811a      	strh	r2, [r3, #8]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2200      	movs	r2, #0
 8011c82:	815a      	strh	r2, [r3, #10]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2200      	movs	r2, #0
 8011c88:	819a      	strh	r2, [r3, #12]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	739a      	strb	r2, [r3, #14]
        {
        }
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	4618      	mov	r0, r3
 8011c94:	370c      	adds	r7, #12
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr

08011c9e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b082      	sub	sp, #8
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7ff ffd5 	bl	8011c58 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	611a      	str	r2, [r3, #16]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	829a      	strh	r2, [r3, #20]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	60b9      	str	r1, [r7, #8]
 8011cce:	607a      	str	r2, [r7, #4]
 8011cd0:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8011cd2:	4a44      	ldr	r2, [pc, #272]	; (8011de4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	601a      	str	r2, [r3, #0]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	68ba      	ldr	r2, [r7, #8]
 8011cdc:	605a      	str	r2, [r3, #4]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	609a      	str	r2, [r3, #8]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	60da      	str	r2, [r3, #12]
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2200      	movs	r2, #0
 8011cee:	611a      	str	r2, [r3, #16]
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	615a      	str	r2, [r3, #20]
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	619a      	str	r2, [r3, #24]
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	331c      	adds	r3, #28
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7ff ffcc 	bl	8011c9e <_ZN8touchgfx8GesturesC1Ev>
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	639a      	str	r2, [r3, #56]	; 0x38
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	63da      	str	r2, [r3, #60]	; 0x3c
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2200      	movs	r2, #0
 8011d16:	641a      	str	r2, [r3, #64]	; 0x40
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	645a      	str	r2, [r3, #68]	; 0x44
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	2200      	movs	r2, #0
 8011d22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2201      	movs	r2, #1
 8011d32:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	3350      	adds	r3, #80	; 0x50
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fb fe61 	bl	800da08 <_ZN8touchgfx4RectC1Ev>
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2200      	movs	r2, #0
 8011d52:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2201      	movs	r2, #1
 8011d62:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2200      	movs	r2, #0
 8011d72:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	2200      	movs	r2, #0
 8011d82:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2200      	movs	r2, #0
 8011d92:	671a      	str	r2, [r3, #112]	; 0x70
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8011d9c:	4a12      	ldr	r2, [pc, #72]	; (8011de8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8011da2:	4a12      	ldr	r2, [pc, #72]	; (8011dec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8011da4:	8b3b      	ldrh	r3, [r7, #24]
 8011da6:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8011da8:	4a11      	ldr	r2, [pc, #68]	; (8011df0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8011daa:	8bbb      	ldrh	r3, [r7, #28]
 8011dac:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8011dae:	4b11      	ldr	r3, [pc, #68]	; (8011df4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8011db0:	2200      	movs	r2, #0
 8011db2:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8011db4:	4b0d      	ldr	r3, [pc, #52]	; (8011dec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8011db6:	881a      	ldrh	r2, [r3, #0]
 8011db8:	4b0f      	ldr	r3, [pc, #60]	; (8011df8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8011dba:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8011dbc:	4b0c      	ldr	r3, [pc, #48]	; (8011df0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8011dbe:	881a      	ldrh	r2, [r3, #0]
 8011dc0:	4b0e      	ldr	r3, [pc, #56]	; (8011dfc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8011dc2:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011dc4:	8b3a      	ldrh	r2, [r7, #24]
 8011dc6:	8bbb      	ldrh	r3, [r7, #28]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d301      	bcc.n	8011dd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8011dcc:	2200      	movs	r2, #0
 8011dce:	e000      	b.n	8011dd2 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	08026ebc 	.word	0x08026ebc
 8011de8:	2002b088 	.word	0x2002b088
 8011dec:	2002b07c 	.word	0x2002b07c
 8011df0:	2002b07e 	.word	0x2002b07e
 8011df4:	2002b080 	.word	0x2002b080
 8011df8:	2002b082 	.word	0x2002b082
 8011dfc:	2002b084 	.word	0x2002b084

08011e00 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen2ScreenNoTransition();
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7fa fe91 	bl	800cb34 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
    }
 8011e12:	bf00      	nop
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
	...

08011e1c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b086      	sub	sp, #24
 8011e20:	af02      	add	r7, sp, #8
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]
 8011e28:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8011e2a:	68f8      	ldr	r0, [r7, #12]
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	68b9      	ldr	r1, [r7, #8]
 8011e36:	f7ff feaf 	bl	8011b98 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8011e3a:	4a04      	ldr	r2, [pc, #16]	; (8011e4c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	601a      	str	r2, [r3, #0]
    {

    }
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	4618      	mov	r0, r3
 8011e44:	3710      	adds	r7, #16
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	080263fc 	.word	0x080263fc

08011e50 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011e50:	b580      	push	{r7, lr}
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	4801      	ldr	r0, [pc, #4]	; (8011e5c <__tcf_0+0xc>)
 8011e56:	f000 f9d5 	bl	8012204 <_ZN12FrontendHeapD1Ev>
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	20029b04 	.word	0x20029b04

08011e60 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8011e60:	b580      	push	{r7, lr}
 8011e62:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8011e64:	4b08      	ldr	r3, [pc, #32]	; (8011e88 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f003 0301 	and.w	r3, r3, #1
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d108      	bne.n	8011e82 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8011e70:	4806      	ldr	r0, [pc, #24]	; (8011e8c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8011e72:	f000 f831 	bl	8011ed8 <_ZN12FrontendHeapC1Ev>
 8011e76:	4b04      	ldr	r3, [pc, #16]	; (8011e88 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8011e78:	2201      	movs	r2, #1
 8011e7a:	601a      	str	r2, [r3, #0]
 8011e7c:	4804      	ldr	r0, [pc, #16]	; (8011e90 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8011e7e:	f011 fb9d 	bl	80235bc <atexit>
        return instance;
 8011e82:	4b02      	ldr	r3, [pc, #8]	; (8011e8c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8011e84:	4618      	mov	r0, r3
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	2002a35c 	.word	0x2002a35c
 8011e8c:	20029b04 	.word	0x20029b04
 8011e90:	08011e51 	.word	0x08011e51

08011e94 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	4a05      	ldr	r2, [pc, #20]	; (8011eb4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	601a      	str	r2, [r3, #0]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7ff fe97 	bl	8011bd8 <_ZN8touchgfx7MVPHeapD1Ev>
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	4618      	mov	r0, r3
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	080263fc 	.word	0x080263fc

08011eb8 <_ZN16FrontendHeapBaseD0Ev>:
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7ff ffe7 	bl	8011e94 <_ZN16FrontendHeapBaseD1Ev>
 8011ec6:	2114      	movs	r1, #20
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f011 fb2d 	bl	8023528 <_ZdlPvj>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011ed8:	b590      	push	{r4, r7, lr}
 8011eda:	b085      	sub	sp, #20
 8011edc:	af02      	add	r7, sp, #8
 8011ede:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f103 0114 	add.w	r1, r3, #20
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f503 64d5 	add.w	r4, r3, #1704	; 0x6a8
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	4623      	mov	r3, r4
 8011efe:	f7ff ff8d 	bl	8011e1c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8011f02:	4a18      	ldr	r2, [pc, #96]	; (8011f64 <_ZN12FrontendHeapC1Ev+0x8c>)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	601a      	str	r2, [r3, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	3314      	adds	r3, #20
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f000 f8db 	bl	80120c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	332c      	adds	r3, #44	; 0x2c
 8011f16:	4618      	mov	r0, r3
 8011f18:	f000 f90a 	bl	8012130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 8011f22:	4618      	mov	r0, r3
 8011f24:	f000 f93a 	bl	801219c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f203 7004 	addw	r0, r3, #1796	; 0x704
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	4619      	mov	r1, r3
 8011f38:	f7fe fa44 	bl	80103c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fe fa54 	bl	80103f0 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8011f50:	4619      	mov	r1, r3
 8011f52:	4610      	mov	r0, r2
 8011f54:	f7ff ff54 	bl	8011e00 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	370c      	adds	r7, #12
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd90      	pop	{r4, r7, pc}
 8011f62:	bf00      	nop
 8011f64:	0802634c 	.word	0x0802634c

08011f68 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
{
public:
    LCD16bpp();

    virtual ~LCD16bpp()
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
    {
 8011f70:	4a05      	ldr	r2, [pc, #20]	; (8011f88 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7ff fe4d 	bl	8011c18 <_ZN8touchgfx3LCDD1Ev>
    }
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	4618      	mov	r0, r3
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	08028bdc 	.word	0x08028bdc

08011f8c <_ZN8touchgfx8LCD16bppD0Ev>:
    virtual ~LCD16bpp()
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
    }
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7ff ffe7 	bl	8011f68 <_ZN8touchgfx8LCD16bppD1Ev>
 8011f9a:	2178      	movs	r1, #120	; 0x78
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f011 fac3 	bl	8023528 <_ZdlPvj>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}

08011fac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b086      	sub	sp, #24
 8011fb0:	af02      	add	r7, sp, #8
 8011fb2:	60f8      	str	r0, [r7, #12]
 8011fb4:	60b9      	str	r1, [r7, #8]
 8011fb6:	607a      	str	r2, [r7, #4]
 8011fb8:	603b      	str	r3, [r7, #0]
 8011fba:	68f8      	ldr	r0, [r7, #12]
 8011fbc:	8bbb      	ldrh	r3, [r7, #28]
 8011fbe:	9301      	str	r3, [sp, #4]
 8011fc0:	8b3b      	ldrh	r3, [r7, #24]
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	68b9      	ldr	r1, [r7, #8]
 8011fca:	f7ff fe7b 	bl	8011cc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011fce:	4a04      	ldr	r2, [pc, #16]	; (8011fe0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	601a      	str	r2, [r3, #0]
    }
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3710      	adds	r7, #16
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	08026420 	.word	0x08026420

08011fe4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af02      	add	r7, sp, #8
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
 8011ff0:	603b      	str	r3, [r7, #0]
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	8bbb      	ldrh	r3, [r7, #28]
 8011ff6:	9301      	str	r3, [sp, #4]
 8011ff8:	8b3b      	ldrh	r3, [r7, #24]
 8011ffa:	9300      	str	r3, [sp, #0]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	68b9      	ldr	r1, [r7, #8]
 8012002:	f7ff ffd3 	bl	8011fac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012006:	4a04      	ldr	r2, [pc, #16]	; (8012018 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	601a      	str	r2, [r3, #0]
    }
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	4618      	mov	r0, r3
 8012010:	3710      	adds	r7, #16
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop
 8012018:	0802614c 	.word	0x0802614c

0801201c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	4a04      	ldr	r2, [pc, #16]	; (8012038 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	601a      	str	r2, [r3, #0]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	4618      	mov	r0, r3
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr
 8012038:	08026134 	.word	0x08026134

0801203c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	4618      	mov	r0, r3
 8012048:	f7ff ffe8 	bl	801201c <_ZN8touchgfx15TouchControllerC1Ev>
 801204c:	4a03      	ldr	r2, [pc, #12]	; (801205c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	601a      	str	r2, [r3, #0]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	4618      	mov	r0, r3
 8012056:	3708      	adds	r7, #8
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}
 801205c:	0802611c 	.word	0x0802611c

08012060 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8012060:	b590      	push	{r4, r7, lr}
 8012062:	b085      	sub	sp, #20
 8012064:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012066:	f7fe f86f 	bl	8010148 <_ZN14BitmapDatabase11getInstanceEv>
 801206a:	4604      	mov	r4, r0
 801206c:	f7fe f876 	bl	801015c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012070:	4603      	mov	r3, r0
 8012072:	4619      	mov	r1, r3
 8012074:	2300      	movs	r3, #0
 8012076:	9300      	str	r3, [sp, #0]
 8012078:	2300      	movs	r3, #0
 801207a:	2200      	movs	r2, #0
 801207c:	4620      	mov	r0, r4
 801207e:	f005 fdb3 	bl	8017be8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8012082:	4809      	ldr	r0, [pc, #36]	; (80120a8 <touchgfx_init+0x48>)
 8012084:	f7ff fd78 	bl	8011b78 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8012088:	2000      	movs	r0, #0
 801208a:	f7fe f88b 	bl	80101a4 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801208e:	4807      	ldr	r0, [pc, #28]	; (80120ac <touchgfx_init+0x4c>)
 8012090:	f005 fcf8 	bl	8017a84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8012094:	f7ff fee4 	bl	8011e60 <_ZN12FrontendHeap11getInstanceEv>
 8012098:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 801209a:	4805      	ldr	r0, [pc, #20]	; (80120b0 <touchgfx_init+0x50>)
 801209c:	f7fe ffd4 	bl	8011048 <_ZN11TouchGFXHAL10initializeEv>
}
 80120a0:	bf00      	nop
 80120a2:	370c      	adds	r7, #12
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd90      	pop	{r4, r7, pc}
 80120a8:	2002affc 	.word	0x2002affc
 80120ac:	20000028 	.word	0x20000028
 80120b0:	2002b000 	.word	0x2002b000

080120b4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80120b8:	4802      	ldr	r0, [pc, #8]	; (80120c4 <touchgfx_taskEntry+0x10>)
 80120ba:	f001 f970 	bl	801339e <_ZN8touchgfx3HAL9taskEntryEv>
}
 80120be:	bf00      	nop
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	2002b000 	.word	0x2002b000

080120c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f000 fc72 	bl	80129bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80120d8:	4a03      	ldr	r2, [pc, #12]	; (80120e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	601a      	str	r2, [r3, #0]
    {
    }
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	4618      	mov	r0, r3
 80120e2:	3708      	adds	r7, #8
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	080263c8 	.word	0x080263c8

080120ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
    {
    }
 80120f4:	4a05      	ldr	r2, [pc, #20]	; (801210c <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	601a      	str	r2, [r3, #0]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	4618      	mov	r0, r3
 80120fe:	f000 fc5b 	bl	80129b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	4618      	mov	r0, r3
 8012106:	3708      	adds	r7, #8
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	080263c8 	.word	0x080263c8

08012110 <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
    }
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7ff ffe7 	bl	80120ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801211e:	2118      	movs	r1, #24
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f011 fa01 	bl	8023528 <_ZdlPvj>
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	4618      	mov	r0, r3
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	4618      	mov	r0, r3
 801213c:	f000 fc3e 	bl	80129bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012140:	4a03      	ldr	r2, [pc, #12]	; (8012150 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	601a      	str	r2, [r3, #0]
    }
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4618      	mov	r0, r3
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	08026394 	.word	0x08026394

08012154 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
    }
 801215c:	4a05      	ldr	r2, [pc, #20]	; (8012174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	601a      	str	r2, [r3, #0]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	4618      	mov	r0, r3
 8012166:	f000 fc27 	bl	80129b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	4618      	mov	r0, r3
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	08026394 	.word	0x08026394

08012178 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
    }
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f7ff ffe7 	bl	8012154 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012186:	f240 617c 	movw	r1, #1660	; 0x67c
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f011 f9cc 	bl	8023528 <_ZdlPvj>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	4618      	mov	r0, r3
 8012194:	3708      	adds	r7, #8
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
	...

0801219c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	4618      	mov	r0, r3
 80121a8:	f000 fc08 	bl	80129bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80121ac:	4a03      	ldr	r2, [pc, #12]	; (80121bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	601a      	str	r2, [r3, #0]
    }
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	4618      	mov	r0, r3
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}
 80121bc:	08026360 	.word	0x08026360

080121c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
    }
 80121c8:	4a05      	ldr	r2, [pc, #20]	; (80121e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	4618      	mov	r0, r3
 80121d2:	f000 fbf1 	bl	80129b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	4618      	mov	r0, r3
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	08026360 	.word	0x08026360

080121e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
    }
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ff ffe7 	bl	80121c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80121f2:	215c      	movs	r1, #92	; 0x5c
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f011 f997 	bl	8023528 <_ZdlPvj>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4618      	mov	r0, r3
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	4a10      	ldr	r2, [pc, #64]	; (8012250 <_ZN12FrontendHeapD1Ev+0x4c>)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	601a      	str	r2, [r3, #0]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8012218:	4618      	mov	r0, r3
 801221a:	f7fe f89d 	bl	8010358 <_ZN19FrontendApplicationD1Ev>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 8012224:	4618      	mov	r0, r3
 8012226:	f7ff ffcb 	bl	80121c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	332c      	adds	r3, #44	; 0x2c
 801222e:	4618      	mov	r0, r3
 8012230:	f7ff ff90 	bl	8012154 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	3314      	adds	r3, #20
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff ff57 	bl	80120ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	4618      	mov	r0, r3
 8012242:	f7ff fe27 	bl	8011e94 <_ZN16FrontendHeapBaseD1Ev>
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	4618      	mov	r0, r3
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}
 8012250:	0802634c 	.word	0x0802634c

08012254 <_ZN12FrontendHeapD0Ev>:
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f7ff ffd1 	bl	8012204 <_ZN12FrontendHeapD1Ev>
 8012262:	f640 0158 	movw	r1, #2136	; 0x858
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f011 f95e 	bl	8023528 <_ZdlPvj>
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	4618      	mov	r0, r3
 8012270:	3708      	adds	r7, #8
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
	...

08012278 <_Z41__static_initialization_and_destruction_0ii>:
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af02      	add	r7, sp, #8
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6039      	str	r1, [r7, #0]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b01      	cmp	r3, #1
 8012286:	d118      	bne.n	80122ba <_Z41__static_initialization_and_destruction_0ii+0x42>
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801228e:	4293      	cmp	r3, r2
 8012290:	d113      	bne.n	80122ba <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 8012292:	4817      	ldr	r0, [pc, #92]	; (80122f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8012294:	f7ff fed2 	bl	801203c <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 8012298:	4816      	ldr	r0, [pc, #88]	; (80122f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801229a:	f7ff f96f 	bl	801157c <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 801229e:	4816      	ldr	r0, [pc, #88]	; (80122f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80122a0:	f008 fca6 	bl	801abf0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 80122a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80122a8:	9301      	str	r3, [sp, #4]
 80122aa:	23f0      	movs	r3, #240	; 0xf0
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	4b10      	ldr	r3, [pc, #64]	; (80122f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80122b0:	4a11      	ldr	r2, [pc, #68]	; (80122f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80122b2:	4910      	ldr	r1, [pc, #64]	; (80122f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80122b4:	4811      	ldr	r0, [pc, #68]	; (80122fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80122b6:	f7ff fe95 	bl	8011fe4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d113      	bne.n	80122e8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122c6:	4293      	cmp	r3, r2
 80122c8:	d10e      	bne.n	80122e8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80122ca:	480c      	ldr	r0, [pc, #48]	; (80122fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80122cc:	f7fe ff22 	bl	8011114 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80122d0:	480b      	ldr	r0, [pc, #44]	; (8012300 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80122d2:	f7f9 fba5 	bl	800ba20 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80122d6:	4808      	ldr	r0, [pc, #32]	; (80122f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80122d8:	f7ff fe46 	bl	8011f68 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 80122dc:	4805      	ldr	r0, [pc, #20]	; (80122f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80122de:	f7ff f977 	bl	80115d0 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 80122e2:	4803      	ldr	r0, [pc, #12]	; (80122f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80122e4:	f7fe fc8c 	bl	8010c00 <_ZN20STM32TouchControllerD1Ev>
}
 80122e8:	bf00      	nop
 80122ea:	3708      	adds	r7, #8
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	2002a360 	.word	0x2002a360
 80122f4:	2002a364 	.word	0x2002a364
 80122f8:	2002af84 	.word	0x2002af84
 80122fc:	2002b000 	.word	0x2002b000
 8012300:	20000028 	.word	0x20000028

08012304 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801230c:	2301      	movs	r3, #1
    }
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801231a:	b480      	push	{r7}
 801231c:	b083      	sub	sp, #12
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8012322:	2354      	movs	r3, #84	; 0x54
    }
 8012324:	4618      	mov	r0, r3
 8012326:	370c      	adds	r7, #12
 8012328:	46bd      	mov	sp, r7
 801232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232e:	4770      	bx	lr

08012330 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8012330:	b480      	push	{r7}
 8012332:	b083      	sub	sp, #12
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	460b      	mov	r3, r1
 801233a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801233c:	887b      	ldrh	r3, [r7, #2]
 801233e:	2254      	movs	r2, #84	; 0x54
 8012340:	fb02 f303 	mul.w	r3, r2, r3
 8012344:	3308      	adds	r3, #8
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	4413      	add	r3, r2
    }
 801234a:	4618      	mov	r0, r3
 801234c:	370c      	adds	r7, #12
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr

08012356 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8012356:	b480      	push	{r7}
 8012358:	b083      	sub	sp, #12
 801235a:	af00      	add	r7, sp, #0
 801235c:	6078      	str	r0, [r7, #4]
 801235e:	460b      	mov	r3, r1
 8012360:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012362:	887b      	ldrh	r3, [r7, #2]
 8012364:	2254      	movs	r2, #84	; 0x54
 8012366:	fb02 f303 	mul.w	r3, r2, r3
 801236a:	3308      	adds	r3, #8
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	4413      	add	r3, r2
    }
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012384:	2301      	movs	r3, #1
    }
 8012386:	4618      	mov	r0, r3
 8012388:	370c      	adds	r7, #12
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr

08012392 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012392:	b480      	push	{r7}
 8012394:	b083      	sub	sp, #12
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801239a:	f240 6374 	movw	r3, #1652	; 0x674
    }
 801239e:	4618      	mov	r0, r3
 80123a0:	370c      	adds	r7, #12
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr

080123aa <_ZN8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80123aa:	b480      	push	{r7}
 80123ac:	b083      	sub	sp, #12
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
 80123b2:	460b      	mov	r3, r1
 80123b4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80123b6:	887b      	ldrh	r3, [r7, #2]
 80123b8:	f240 6274 	movw	r2, #1652	; 0x674
 80123bc:	fb02 f303 	mul.w	r3, r2, r3
 80123c0:	3308      	adds	r3, #8
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	4413      	add	r3, r2
    }
 80123c6:	4618      	mov	r0, r3
 80123c8:	370c      	adds	r7, #12
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr

080123d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25ScreenMenuSettingLampViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80123d2:	b480      	push	{r7}
 80123d4:	b083      	sub	sp, #12
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
 80123da:	460b      	mov	r3, r1
 80123dc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80123de:	887b      	ldrh	r3, [r7, #2]
 80123e0:	f240 6274 	movw	r2, #1652	; 0x674
 80123e4:	fb02 f303 	mul.w	r3, r2, r3
 80123e8:	3308      	adds	r3, #8
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	4413      	add	r3, r2
    }
 80123ee:	4618      	mov	r0, r3
 80123f0:	370c      	adds	r7, #12
 80123f2:	46bd      	mov	sp, r7
 80123f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f8:	4770      	bx	lr

080123fa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80123fa:	b480      	push	{r7}
 80123fc:	b083      	sub	sp, #12
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012402:	2301      	movs	r3, #1
    }
 8012404:	4618      	mov	r0, r3
 8012406:	370c      	adds	r7, #12
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr

08012410 <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012418:	2310      	movs	r3, #16
    }
 801241a:	4618      	mov	r0, r3
 801241c:	370c      	adds	r7, #12
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr

08012426 <_ZN8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012426:	b480      	push	{r7}
 8012428:	b083      	sub	sp, #12
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
 801242e:	460b      	mov	r3, r1
 8012430:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012432:	887b      	ldrh	r3, [r7, #2]
 8012434:	011b      	lsls	r3, r3, #4
 8012436:	3308      	adds	r3, #8
 8012438:	687a      	ldr	r2, [r7, #4]
 801243a:	4413      	add	r3, r2
    }
 801243c:	4618      	mov	r0, r3
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI31ScreenWelcomeAnimationPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012448:	b480      	push	{r7}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	460b      	mov	r3, r1
 8012452:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012454:	887b      	ldrh	r3, [r7, #2]
 8012456:	011b      	lsls	r3, r3, #4
 8012458:	3308      	adds	r3, #8
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	4413      	add	r3, r2
    }
 801245e:	4618      	mov	r0, r3
 8012460:	370c      	adds	r7, #12
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr

0801246a <_GLOBAL__sub_I_touchgfx_init>:
 801246a:	b580      	push	{r7, lr}
 801246c:	af00      	add	r7, sp, #0
 801246e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012472:	2001      	movs	r0, #1
 8012474:	f7ff ff00 	bl	8012278 <_Z41__static_initialization_and_destruction_0ii>
 8012478:	bd80      	pop	{r7, pc}

0801247a <_GLOBAL__sub_D_touchgfx_init>:
 801247a:	b580      	push	{r7, lr}
 801247c:	af00      	add	r7, sp, #0
 801247e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012482:	2000      	movs	r0, #0
 8012484:	f7ff fef8 	bl	8012278 <_Z41__static_initialization_and_destruction_0ii>
 8012488:	bd80      	pop	{r7, pc}

0801248a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801248a:	b580      	push	{r7, lr}
 801248c:	b082      	sub	sp, #8
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	3318      	adds	r3, #24
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	4798      	blx	r3
    }
 801249e:	bf00      	nop
 80124a0:	3708      	adds	r7, #8
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80124a6:	b480      	push	{r7}
 80124a8:	b083      	sub	sp, #12
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
 80124ae:	460b      	mov	r3, r1
 80124b0:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	78fa      	ldrb	r2, [r7, #3]
 80124b6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80124ba:	bf00      	nop
 80124bc:	370c      	adds	r7, #12
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr

080124c6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80124c6:	b480      	push	{r7}
 80124c8:	b083      	sub	sp, #12
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80124d4:	3301      	adds	r3, #1
 80124d6:	b2da      	uxtb	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80124de:	bf00      	nop
 80124e0:	370c      	adds	r7, #12
 80124e2:	46bd      	mov	sp, r7
 80124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e8:	4770      	bx	lr
	...

080124ec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	460b      	mov	r3, r1
 80124f6:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80124f8:	78fb      	ldrb	r3, [r7, #3]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d002      	beq.n	8012504 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80124fe:	78fb      	ldrb	r3, [r7, #3]
 8012500:	2b02      	cmp	r3, #2
 8012502:	d105      	bne.n	8012510 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	78fa      	ldrb	r2, [r7, #3]
 8012508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801250c:	2301      	movs	r3, #1
 801250e:	e027      	b.n	8012560 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8012510:	78fb      	ldrb	r3, [r7, #3]
 8012512:	2b01      	cmp	r3, #1
 8012514:	d123      	bne.n	801255e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801251a:	2b00      	cmp	r3, #0
 801251c:	d014      	beq.n	8012548 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	3380      	adds	r3, #128	; 0x80
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	4798      	blx	r3
 801252a:	4603      	mov	r3, r0
 801252c:	461a      	mov	r2, r3
 801252e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012532:	429a      	cmp	r2, r3
 8012534:	d008      	beq.n	8012548 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012536:	4b0c      	ldr	r3, [pc, #48]	; (8012568 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	f083 0301 	eor.w	r3, r3, #1
 801253e:	b2db      	uxtb	r3, r3
 8012540:	2b00      	cmp	r3, #0
 8012542:	d001      	beq.n	8012548 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012544:	2301      	movs	r3, #1
 8012546:	e000      	b.n	801254a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8012548:	2300      	movs	r3, #0
 801254a:	2b00      	cmp	r3, #0
 801254c:	d005      	beq.n	801255a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	78fa      	ldrb	r2, [r7, #3]
 8012552:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8012556:	2301      	movs	r3, #1
 8012558:	e002      	b.n	8012560 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801255a:	2300      	movs	r3, #0
 801255c:	e000      	b.n	8012560 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801255e:	2300      	movs	r3, #0
    }
 8012560:	4618      	mov	r0, r3
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	2002b086 	.word	0x2002b086

0801256c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 801256c:	b480      	push	{r7}
 801256e:	b083      	sub	sp, #12
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	683a      	ldr	r2, [r7, #0]
 801257a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801257c:	bf00      	nop
 801257e:	370c      	adds	r7, #12
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr

08012588 <__NVIC_EnableIRQ>:
{
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	4603      	mov	r3, r0
 8012590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012596:	2b00      	cmp	r3, #0
 8012598:	db0d      	blt.n	80125b6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	f003 021f 	and.w	r2, r3, #31
 80125a4:	4907      	ldr	r1, [pc, #28]	; (80125c4 <__NVIC_EnableIRQ+0x3c>)
 80125a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125aa:	095b      	lsrs	r3, r3, #5
 80125ac:	2001      	movs	r0, #1
 80125ae:	fa00 f202 	lsl.w	r2, r0, r2
 80125b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80125b6:	bf00      	nop
 80125b8:	370c      	adds	r7, #12
 80125ba:	46bd      	mov	sp, r7
 80125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop
 80125c4:	e000e100 	.word	0xe000e100

080125c8 <__NVIC_DisableIRQ>:
{
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	4603      	mov	r3, r0
 80125d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80125d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	db12      	blt.n	8012600 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80125da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	f003 021f 	and.w	r2, r3, #31
 80125e4:	4909      	ldr	r1, [pc, #36]	; (801260c <__NVIC_DisableIRQ+0x44>)
 80125e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125ea:	095b      	lsrs	r3, r3, #5
 80125ec:	2001      	movs	r0, #1
 80125ee:	fa00 f202 	lsl.w	r2, r0, r2
 80125f2:	3320      	adds	r3, #32
 80125f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80125f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80125fc:	f3bf 8f6f 	isb	sy
}
 8012600:	bf00      	nop
 8012602:	370c      	adds	r7, #12
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr
 801260c:	e000e100 	.word	0xe000e100

08012610 <__NVIC_SetPriority>:
{
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	4603      	mov	r3, r0
 8012618:	6039      	str	r1, [r7, #0]
 801261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012620:	2b00      	cmp	r3, #0
 8012622:	db0c      	blt.n	801263e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	b2db      	uxtb	r3, r3
 8012628:	4a0e      	ldr	r2, [pc, #56]	; (8012664 <__NVIC_SetPriority+0x54>)
 801262a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801262e:	4608      	mov	r0, r1
 8012630:	011b      	lsls	r3, r3, #4
 8012632:	b2d9      	uxtb	r1, r3
 8012634:	1813      	adds	r3, r2, r0
 8012636:	460a      	mov	r2, r1
 8012638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801263c:	e00c      	b.n	8012658 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	b2da      	uxtb	r2, r3
 8012642:	4909      	ldr	r1, [pc, #36]	; (8012668 <__NVIC_SetPriority+0x58>)
 8012644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012648:	b2db      	uxtb	r3, r3
 801264a:	f003 030f 	and.w	r3, r3, #15
 801264e:	3b04      	subs	r3, #4
 8012650:	0112      	lsls	r2, r2, #4
 8012652:	b2d2      	uxtb	r2, r2
 8012654:	440b      	add	r3, r1
 8012656:	761a      	strb	r2, [r3, #24]
}
 8012658:	bf00      	nop
 801265a:	370c      	adds	r7, #12
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	e000e100 	.word	0xe000e100
 8012668:	e000ed00 	.word	0xe000ed00

0801266c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801266c:	b5b0      	push	{r4, r5, r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	4618      	mov	r0, r3
 8012678:	f001 f956 	bl	8013928 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 801267c:	687d      	ldr	r5, [r7, #4]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	334c      	adds	r3, #76	; 0x4c
 8012684:	681c      	ldr	r4, [r3, #0]
 8012686:	f003 f9b7 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 801268a:	4603      	mov	r3, r0
 801268c:	4619      	mov	r1, r3
 801268e:	4628      	mov	r0, r5
 8012690:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	490d      	ldr	r1, [pc, #52]	; (80126cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8012696:	4618      	mov	r0, r3
 8012698:	f7ff ff68 	bl	801256c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2101      	movs	r1, #1
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7ff ff23 	bl	80124ec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	3374      	adds	r3, #116	; 0x74
 80126ae:	681c      	ldr	r4, [r3, #0]
 80126b0:	2300      	movs	r3, #0
 80126b2:	2200      	movs	r2, #0
 80126b4:	4906      	ldr	r1, [pc, #24]	; (80126d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 80126b6:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2101      	movs	r1, #1
 80126bc:	4618      	mov	r0, r3
 80126be:	f7ff fef2 	bl	80124a6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80126c2:	bf00      	nop
 80126c4:	3708      	adds	r7, #8
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bdb0      	pop	{r4, r5, r7, pc}
 80126ca:	bf00      	nop
 80126cc:	080112ad 	.word	0x080112ad
 80126d0:	20000108 	.word	0x20000108

080126d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80126dc:	2109      	movs	r1, #9
 80126de:	205a      	movs	r0, #90	; 0x5a
 80126e0:	f7ff ff96 	bl	8012610 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80126e4:	2109      	movs	r1, #9
 80126e6:	2058      	movs	r0, #88	; 0x58
 80126e8:	f7ff ff92 	bl	8012610 <__NVIC_SetPriority>
}
 80126ec:	bf00      	nop
 80126ee:	3708      	adds	r7, #8
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}

080126f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80126fc:	205a      	movs	r0, #90	; 0x5a
 80126fe:	f7ff ff43 	bl	8012588 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8012702:	2058      	movs	r0, #88	; 0x58
 8012704:	f7ff ff40 	bl	8012588 <__NVIC_EnableIRQ>
}
 8012708:	bf00      	nop
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012718:	205a      	movs	r0, #90	; 0x5a
 801271a:	f7ff ff55 	bl	80125c8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801271e:	2058      	movs	r0, #88	; 0x58
 8012720:	f7ff ff52 	bl	80125c8 <__NVIC_DisableIRQ>
}
 8012724:	bf00      	nop
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801272c:	b480      	push	{r7}
 801272e:	b083      	sub	sp, #12
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8012734:	4b11      	ldr	r3, [pc, #68]	; (801277c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	b29b      	uxth	r3, r3
 801273a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801273e:	b29b      	uxth	r3, r3
 8012740:	3b01      	subs	r3, #1
 8012742:	b29a      	uxth	r2, r3
 8012744:	4b0e      	ldr	r3, [pc, #56]	; (8012780 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8012746:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8012748:	4b0c      	ldr	r3, [pc, #48]	; (801277c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801274a:	691b      	ldr	r3, [r3, #16]
 801274c:	b29b      	uxth	r3, r3
 801274e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012752:	b29b      	uxth	r3, r3
 8012754:	3b01      	subs	r3, #1
 8012756:	b29a      	uxth	r2, r3
 8012758:	4b0a      	ldr	r3, [pc, #40]	; (8012784 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801275a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801275c:	4b08      	ldr	r3, [pc, #32]	; (8012780 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801275e:	881a      	ldrh	r2, [r3, #0]
 8012760:	4b06      	ldr	r3, [pc, #24]	; (801277c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012762:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8012764:	4b05      	ldr	r3, [pc, #20]	; (801277c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012768:	4a04      	ldr	r2, [pc, #16]	; (801277c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801276a:	f043 0301 	orr.w	r3, r3, #1
 801276e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8012770:	bf00      	nop
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr
 801277c:	40016800 	.word	0x40016800
 8012780:	2002b078 	.word	0x2002b078
 8012784:	2002b07a 	.word	0x2002b07a

08012788 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8012790:	4b03      	ldr	r3, [pc, #12]	; (80127a0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8012792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8012794:	4618      	mov	r0, r3
 8012796:	370c      	adds	r7, #12
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr
 80127a0:	40016884 	.word	0x40016884

080127a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80127ae:	4a06      	ldr	r2, [pc, #24]	; (80127c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80127b4:	4b05      	ldr	r3, [pc, #20]	; (80127cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80127b6:	2201      	movs	r2, #1
 80127b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80127ba:	bf00      	nop
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	40016884 	.word	0x40016884
 80127cc:	40016800 	.word	0x40016800

080127d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6839      	ldr	r1, [r7, #0]
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 fdb2 	bl	8013348 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80127e4:	bf00      	nop
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80127ec:	b480      	push	{r7}
 80127ee:	b085      	sub	sp, #20
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80127f4:	4b0d      	ldr	r3, [pc, #52]	; (801282c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80127f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127f8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80127fa:	4b0c      	ldr	r3, [pc, #48]	; (801282c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	b29b      	uxth	r3, r3
 8012800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012804:	b29b      	uxth	r3, r3
 8012806:	3301      	adds	r3, #1
 8012808:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801280a:	89fa      	ldrh	r2, [r7, #14]
 801280c:	89bb      	ldrh	r3, [r7, #12]
 801280e:	429a      	cmp	r2, r3
 8012810:	d201      	bcs.n	8012816 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8012812:	2300      	movs	r3, #0
 8012814:	e003      	b.n	801281e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8012816:	89fa      	ldrh	r2, [r7, #14]
 8012818:	89bb      	ldrh	r3, [r7, #12]
 801281a:	1ad3      	subs	r3, r2, r3
 801281c:	b29b      	uxth	r3, r3
    }
}
 801281e:	4618      	mov	r0, r3
 8012820:	3714      	adds	r7, #20
 8012822:	46bd      	mov	sp, r7
 8012824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012828:	4770      	bx	lr
 801282a:	bf00      	nop
 801282c:	40016800 	.word	0x40016800

08012830 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8012838:	4b1a      	ldr	r3, [pc, #104]	; (80128a4 <HAL_LTDC_LineEventCallback+0x74>)
 801283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801283c:	4a1a      	ldr	r2, [pc, #104]	; (80128a8 <HAL_LTDC_LineEventCallback+0x78>)
 801283e:	8812      	ldrh	r2, [r2, #0]
 8012840:	4293      	cmp	r3, r2
 8012842:	bf0c      	ite	eq
 8012844:	2301      	moveq	r3, #1
 8012846:	2300      	movne	r3, #0
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b00      	cmp	r3, #0
 801284c:	d017      	beq.n	801287e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801284e:	4b17      	ldr	r3, [pc, #92]	; (80128ac <HAL_LTDC_LineEventCallback+0x7c>)
 8012850:	881b      	ldrh	r3, [r3, #0]
 8012852:	4619      	mov	r1, r3
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7f3 fdef 	bl	8006438 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801285a:	f7f9 ff3b 	bl	800c6d4 <_ZN8touchgfx3HAL11getInstanceEv>
 801285e:	4603      	mov	r3, r0
 8012860:	4618      	mov	r0, r3
 8012862:	f7ff fe30 	bl	80124c6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8012866:	f7fe fce3 	bl	8011230 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801286a:	f7f9 ff33 	bl	800c6d4 <_ZN8touchgfx3HAL11getInstanceEv>
 801286e:	4603      	mov	r3, r0
 8012870:	4618      	mov	r0, r3
 8012872:	f001 fae1 	bl	8013e38 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8012876:	2000      	movs	r0, #0
 8012878:	f7fe f9e4 	bl	8010c44 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801287c:	e00e      	b.n	801289c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801287e:	4b0a      	ldr	r3, [pc, #40]	; (80128a8 <HAL_LTDC_LineEventCallback+0x78>)
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	4619      	mov	r1, r3
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7f3 fdd7 	bl	8006438 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801288a:	2000      	movs	r0, #0
 801288c:	f7fe f9e5 	bl	8010c5a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8012890:	f7f9 ff20 	bl	800c6d4 <_ZN8touchgfx3HAL11getInstanceEv>
 8012894:	4603      	mov	r3, r0
 8012896:	4618      	mov	r0, r3
 8012898:	f7ff fdf7 	bl	801248a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 801289c:	bf00      	nop
 801289e:	3708      	adds	r7, #8
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	40016800 	.word	0x40016800
 80128a8:	2002b078 	.word	0x2002b078
 80128ac:	2002b07a 	.word	0x2002b07a

080128b0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80128b0:	8880      	ldrh	r0, [r0, #4]
 80128b2:	4770      	bx	lr

080128b4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80128b4:	2300      	movs	r3, #0
 80128b6:	8083      	strh	r3, [r0, #4]
 80128b8:	4770      	bx	lr
	...

080128bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80128bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128be:	6803      	ldr	r3, [r0, #0]
 80128c0:	4605      	mov	r5, r0
 80128c2:	460e      	mov	r6, r1
 80128c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c6:	2100      	movs	r1, #0
 80128c8:	4798      	blx	r3
 80128ca:	682b      	ldr	r3, [r5, #0]
 80128cc:	4604      	mov	r4, r0
 80128ce:	6a1b      	ldr	r3, [r3, #32]
 80128d0:	4628      	mov	r0, r5
 80128d2:	4798      	blx	r3
 80128d4:	88ab      	ldrh	r3, [r5, #4]
 80128d6:	1b34      	subs	r4, r6, r4
 80128d8:	b2a4      	uxth	r4, r4
 80128da:	fbb4 f4f0 	udiv	r4, r4, r0
 80128de:	42a3      	cmp	r3, r4
 80128e0:	d805      	bhi.n	80128ee <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80128e2:	4b0e      	ldr	r3, [pc, #56]	; (801291c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80128e4:	4a0e      	ldr	r2, [pc, #56]	; (8012920 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80128e6:	211e      	movs	r1, #30
 80128e8:	480e      	ldr	r0, [pc, #56]	; (8012924 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80128ea:	f010 fe49 	bl	8023580 <__assert_func>
 80128ee:	682b      	ldr	r3, [r5, #0]
 80128f0:	2100      	movs	r1, #0
 80128f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f4:	4628      	mov	r0, r5
 80128f6:	4798      	blx	r3
 80128f8:	682b      	ldr	r3, [r5, #0]
 80128fa:	4607      	mov	r7, r0
 80128fc:	6a1b      	ldr	r3, [r3, #32]
 80128fe:	4628      	mov	r0, r5
 8012900:	4798      	blx	r3
 8012902:	1bf3      	subs	r3, r6, r7
 8012904:	b29b      	uxth	r3, r3
 8012906:	fbb3 f2f0 	udiv	r2, r3, r0
 801290a:	fb02 3010 	mls	r0, r2, r0, r3
 801290e:	b118      	cbz	r0, 8012918 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8012910:	4b05      	ldr	r3, [pc, #20]	; (8012928 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8012912:	4a03      	ldr	r2, [pc, #12]	; (8012920 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8012914:	211f      	movs	r1, #31
 8012916:	e7e7      	b.n	80128e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8012918:	4620      	mov	r0, r4
 801291a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801291c:	080264cc 	.word	0x080264cc
 8012920:	0802663a 	.word	0x0802663a
 8012924:	080264e1 	.word	0x080264e1
 8012928:	0802650f 	.word	0x0802650f

0801292c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801292c:	b538      	push	{r3, r4, r5, lr}
 801292e:	6803      	ldr	r3, [r0, #0]
 8012930:	6a1b      	ldr	r3, [r3, #32]
 8012932:	460d      	mov	r5, r1
 8012934:	4604      	mov	r4, r0
 8012936:	4798      	blx	r3
 8012938:	4285      	cmp	r5, r0
 801293a:	d905      	bls.n	8012948 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801293c:	4b0c      	ldr	r3, [pc, #48]	; (8012970 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801293e:	4a0d      	ldr	r2, [pc, #52]	; (8012974 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012940:	212f      	movs	r1, #47	; 0x2f
 8012942:	480d      	ldr	r0, [pc, #52]	; (8012978 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8012944:	f010 fe1c 	bl	8023580 <__assert_func>
 8012948:	6823      	ldr	r3, [r4, #0]
 801294a:	88a5      	ldrh	r5, [r4, #4]
 801294c:	69db      	ldr	r3, [r3, #28]
 801294e:	4620      	mov	r0, r4
 8012950:	4798      	blx	r3
 8012952:	4285      	cmp	r5, r0
 8012954:	d303      	bcc.n	801295e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8012956:	4b09      	ldr	r3, [pc, #36]	; (801297c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8012958:	4a06      	ldr	r2, [pc, #24]	; (8012974 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801295a:	2130      	movs	r1, #48	; 0x30
 801295c:	e7f1      	b.n	8012942 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801295e:	6823      	ldr	r3, [r4, #0]
 8012960:	88a1      	ldrh	r1, [r4, #4]
 8012962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012964:	4620      	mov	r0, r4
 8012966:	4798      	blx	r3
 8012968:	88a3      	ldrh	r3, [r4, #4]
 801296a:	3301      	adds	r3, #1
 801296c:	80a3      	strh	r3, [r4, #4]
 801296e:	bd38      	pop	{r3, r4, r5, pc}
 8012970:	08026589 	.word	0x08026589
 8012974:	0802667d 	.word	0x0802667d
 8012978:	080264e1 	.word	0x080264e1
 801297c:	080265a0 	.word	0x080265a0

08012980 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	6803      	ldr	r3, [r0, #0]
 8012984:	6a1b      	ldr	r3, [r3, #32]
 8012986:	4616      	mov	r6, r2
 8012988:	4604      	mov	r4, r0
 801298a:	460d      	mov	r5, r1
 801298c:	4798      	blx	r3
 801298e:	4286      	cmp	r6, r0
 8012990:	d905      	bls.n	801299e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8012992:	4b06      	ldr	r3, [pc, #24]	; (80129ac <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8012994:	4a06      	ldr	r2, [pc, #24]	; (80129b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8012996:	4807      	ldr	r0, [pc, #28]	; (80129b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8012998:	2139      	movs	r1, #57	; 0x39
 801299a:	f010 fdf1 	bl	8023580 <__assert_func>
 801299e:	6823      	ldr	r3, [r4, #0]
 80129a0:	4629      	mov	r1, r5
 80129a2:	4620      	mov	r0, r4
 80129a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129aa:	4718      	bx	r3
 80129ac:	08026589 	.word	0x08026589
 80129b0:	080265f0 	.word	0x080265f0
 80129b4:	080264e1 	.word	0x080264e1

080129b8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80129b8:	4770      	bx	lr
	...

080129bc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80129bc:	4a02      	ldr	r2, [pc, #8]	; (80129c8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80129be:	6002      	str	r2, [r0, #0]
 80129c0:	2200      	movs	r2, #0
 80129c2:	8082      	strh	r2, [r0, #4]
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	080265c4 	.word	0x080265c4

080129cc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80129cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80129ce:	2000      	movs	r0, #0
 80129d0:	b12b      	cbz	r3, 80129de <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80129d2:	b920      	cbnz	r0, 80129de <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80129d4:	1a5a      	subs	r2, r3, r1
 80129d6:	4250      	negs	r0, r2
 80129d8:	4150      	adcs	r0, r2
 80129da:	699b      	ldr	r3, [r3, #24]
 80129dc:	e7f8      	b.n	80129d0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80129de:	4770      	bx	lr

080129e0 <_ZN8touchgfx9Container9removeAllEv>:
 80129e0:	2200      	movs	r2, #0
 80129e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80129e4:	b123      	cbz	r3, 80129f0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80129e6:	6999      	ldr	r1, [r3, #24]
 80129e8:	6281      	str	r1, [r0, #40]	; 0x28
 80129ea:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80129ee:	e7f8      	b.n	80129e2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80129f0:	4770      	bx	lr

080129f2 <_ZN8touchgfx9Container6unlinkEv>:
 80129f2:	2300      	movs	r3, #0
 80129f4:	6283      	str	r3, [r0, #40]	; 0x28
 80129f6:	4770      	bx	lr

080129f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80129f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fc:	461f      	mov	r7, r3
 80129fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012a02:	460d      	mov	r5, r1
 8012a04:	4616      	mov	r6, r2
 8012a06:	b103      	cbz	r3, 8012a0a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012a08:	6038      	str	r0, [r7, #0]
 8012a0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012a0c:	b314      	cbz	r4, 8012a54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012a0e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012a12:	b1eb      	cbz	r3, 8012a50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a14:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012a18:	428d      	cmp	r5, r1
 8012a1a:	db19      	blt.n	8012a50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a1c:	8923      	ldrh	r3, [r4, #8]
 8012a1e:	b289      	uxth	r1, r1
 8012a20:	440b      	add	r3, r1
 8012a22:	b21b      	sxth	r3, r3
 8012a24:	429d      	cmp	r5, r3
 8012a26:	da13      	bge.n	8012a50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a28:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012a2c:	4296      	cmp	r6, r2
 8012a2e:	db0f      	blt.n	8012a50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a30:	8963      	ldrh	r3, [r4, #10]
 8012a32:	b292      	uxth	r2, r2
 8012a34:	4413      	add	r3, r2
 8012a36:	b21b      	sxth	r3, r3
 8012a38:	429e      	cmp	r6, r3
 8012a3a:	da09      	bge.n	8012a50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a3c:	6823      	ldr	r3, [r4, #0]
 8012a3e:	1ab2      	subs	r2, r6, r2
 8012a40:	1a69      	subs	r1, r5, r1
 8012a42:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8012a46:	b212      	sxth	r2, r2
 8012a48:	463b      	mov	r3, r7
 8012a4a:	b209      	sxth	r1, r1
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	47c0      	blx	r8
 8012a50:	69a4      	ldr	r4, [r4, #24]
 8012a52:	e7db      	b.n	8012a0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a58 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012a58:	2200      	movs	r2, #0
 8012a5a:	8002      	strh	r2, [r0, #0]
 8012a5c:	8042      	strh	r2, [r0, #2]
 8012a5e:	8082      	strh	r2, [r0, #4]
 8012a60:	80c2      	strh	r2, [r0, #6]
 8012a62:	4770      	bx	lr

08012a64 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012a64:	b570      	push	{r4, r5, r6, lr}
 8012a66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012a68:	460d      	mov	r5, r1
 8012a6a:	4616      	mov	r6, r2
 8012a6c:	b13c      	cbz	r4, 8012a7e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012a6e:	6823      	ldr	r3, [r4, #0]
 8012a70:	4620      	mov	r0, r4
 8012a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a74:	4632      	mov	r2, r6
 8012a76:	4629      	mov	r1, r5
 8012a78:	4798      	blx	r3
 8012a7a:	69a4      	ldr	r4, [r4, #24]
 8012a7c:	e7f6      	b.n	8012a6c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012a7e:	bd70      	pop	{r4, r5, r6, pc}

08012a80 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012a80:	b538      	push	{r3, r4, r5, lr}
 8012a82:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012a84:	460d      	mov	r5, r1
 8012a86:	b134      	cbz	r4, 8012a96 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012a88:	682b      	ldr	r3, [r5, #0]
 8012a8a:	4621      	mov	r1, r4
 8012a8c:	689b      	ldr	r3, [r3, #8]
 8012a8e:	4628      	mov	r0, r5
 8012a90:	4798      	blx	r3
 8012a92:	69a4      	ldr	r4, [r4, #24]
 8012a94:	e7f7      	b.n	8012a86 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012a96:	bd38      	pop	{r3, r4, r5, pc}

08012a98 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012a98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012a9a:	b19b      	cbz	r3, 8012ac4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012a9c:	428b      	cmp	r3, r1
 8012a9e:	d109      	bne.n	8012ab4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012aa0:	699a      	ldr	r2, [r3, #24]
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	6159      	str	r1, [r3, #20]
 8012aa6:	6282      	str	r2, [r0, #40]	; 0x28
 8012aa8:	b902      	cbnz	r2, 8012aac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012aaa:	4770      	bx	lr
 8012aac:	6199      	str	r1, [r3, #24]
 8012aae:	4770      	bx	lr
 8012ab0:	4613      	mov	r3, r2
 8012ab2:	b13a      	cbz	r2, 8012ac4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012ab4:	699a      	ldr	r2, [r3, #24]
 8012ab6:	428a      	cmp	r2, r1
 8012ab8:	d1fa      	bne.n	8012ab0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012aba:	698a      	ldr	r2, [r1, #24]
 8012abc:	619a      	str	r2, [r3, #24]
 8012abe:	2300      	movs	r3, #0
 8012ac0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012ac4:	4770      	bx	lr

08012ac6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012ac6:	b410      	push	{r4}
 8012ac8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012aca:	4604      	mov	r4, r0
 8012acc:	b92b      	cbnz	r3, 8012ada <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012ace:	6803      	ldr	r3, [r0, #0]
 8012ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	4718      	bx	r3
 8012ada:	b941      	cbnz	r1, 8012aee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012adc:	6193      	str	r3, [r2, #24]
 8012ade:	6282      	str	r2, [r0, #40]	; 0x28
 8012ae0:	6154      	str	r4, [r2, #20]
 8012ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ae6:	4770      	bx	lr
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d0f9      	beq.n	8012ae2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012aee:	4299      	cmp	r1, r3
 8012af0:	6998      	ldr	r0, [r3, #24]
 8012af2:	d1f9      	bne.n	8012ae8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012af4:	6190      	str	r0, [r2, #24]
 8012af6:	618a      	str	r2, [r1, #24]
 8012af8:	e7f2      	b.n	8012ae0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012afc:	4288      	cmp	r0, r1
 8012afe:	b508      	push	{r3, lr}
 8012b00:	d105      	bne.n	8012b0e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8012b02:	4b11      	ldr	r3, [pc, #68]	; (8012b48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8012b04:	4a11      	ldr	r2, [pc, #68]	; (8012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012b06:	2123      	movs	r1, #35	; 0x23
 8012b08:	4811      	ldr	r0, [pc, #68]	; (8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8012b0a:	f010 fd39 	bl	8023580 <__assert_func>
 8012b0e:	694b      	ldr	r3, [r1, #20]
 8012b10:	b11b      	cbz	r3, 8012b1a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8012b12:	4b10      	ldr	r3, [pc, #64]	; (8012b54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8012b14:	4a0d      	ldr	r2, [pc, #52]	; (8012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012b16:	2124      	movs	r1, #36	; 0x24
 8012b18:	e7f6      	b.n	8012b08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8012b1a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8012b1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012b20:	b913      	cbnz	r3, 8012b28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8012b22:	6281      	str	r1, [r0, #40]	; 0x28
 8012b24:	bd08      	pop	{r3, pc}
 8012b26:	4613      	mov	r3, r2
 8012b28:	699a      	ldr	r2, [r3, #24]
 8012b2a:	b12a      	cbz	r2, 8012b38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8012b2c:	428b      	cmp	r3, r1
 8012b2e:	d1fa      	bne.n	8012b26 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8012b30:	4b09      	ldr	r3, [pc, #36]	; (8012b58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8012b32:	4a06      	ldr	r2, [pc, #24]	; (8012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012b34:	2135      	movs	r1, #53	; 0x35
 8012b36:	e7e7      	b.n	8012b08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8012b38:	428b      	cmp	r3, r1
 8012b3a:	d103      	bne.n	8012b44 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8012b3c:	4b06      	ldr	r3, [pc, #24]	; (8012b58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8012b3e:	4a03      	ldr	r2, [pc, #12]	; (8012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8012b40:	2138      	movs	r1, #56	; 0x38
 8012b42:	e7e1      	b.n	8012b08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8012b44:	6199      	str	r1, [r3, #24]
 8012b46:	e7ed      	b.n	8012b24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8012b48:	080266bb 	.word	0x080266bb
 8012b4c:	08026810 	.word	0x08026810
 8012b50:	080266e7 	.word	0x080266e7
 8012b54:	0802671a 	.word	0x0802671a
 8012b58:	08026750 	.word	0x08026750

08012b5c <_ZN8touchgfx4RectaNERKS0_>:
 8012b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b60:	888b      	ldrh	r3, [r1, #4]
 8012b62:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012b66:	f9b0 a000 	ldrsh.w	sl, [r0]
 8012b6a:	444b      	add	r3, r9
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	fa0f f883 	sxth.w	r8, r3
 8012b72:	45c2      	cmp	sl, r8
 8012b74:	da30      	bge.n	8012bd8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8012b76:	8882      	ldrh	r2, [r0, #4]
 8012b78:	4452      	add	r2, sl
 8012b7a:	b292      	uxth	r2, r2
 8012b7c:	fa0f fe82 	sxth.w	lr, r2
 8012b80:	45f1      	cmp	r9, lr
 8012b82:	da29      	bge.n	8012bd8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8012b84:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012b88:	88cc      	ldrh	r4, [r1, #6]
 8012b8a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012b8e:	442c      	add	r4, r5
 8012b90:	b224      	sxth	r4, r4
 8012b92:	42a6      	cmp	r6, r4
 8012b94:	da20      	bge.n	8012bd8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8012b96:	88c7      	ldrh	r7, [r0, #6]
 8012b98:	4437      	add	r7, r6
 8012b9a:	b2bf      	uxth	r7, r7
 8012b9c:	fa0f fc87 	sxth.w	ip, r7
 8012ba0:	4565      	cmp	r5, ip
 8012ba2:	da19      	bge.n	8012bd8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8012ba4:	45ca      	cmp	sl, r9
 8012ba6:	4654      	mov	r4, sl
 8012ba8:	bfb8      	it	lt
 8012baa:	464c      	movlt	r4, r9
 8012bac:	42b5      	cmp	r5, r6
 8012bae:	bfb8      	it	lt
 8012bb0:	4635      	movlt	r5, r6
 8012bb2:	45f0      	cmp	r8, lr
 8012bb4:	bfc8      	it	gt
 8012bb6:	4613      	movgt	r3, r2
 8012bb8:	1b1b      	subs	r3, r3, r4
 8012bba:	8083      	strh	r3, [r0, #4]
 8012bbc:	88ca      	ldrh	r2, [r1, #6]
 8012bbe:	884b      	ldrh	r3, [r1, #2]
 8012bc0:	8004      	strh	r4, [r0, #0]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	b21a      	sxth	r2, r3
 8012bc8:	4594      	cmp	ip, r2
 8012bca:	bfb8      	it	lt
 8012bcc:	463b      	movlt	r3, r7
 8012bce:	1b5b      	subs	r3, r3, r5
 8012bd0:	80c3      	strh	r3, [r0, #6]
 8012bd2:	8045      	strh	r5, [r0, #2]
 8012bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd8:	2300      	movs	r3, #0
 8012bda:	8003      	strh	r3, [r0, #0]
 8012bdc:	8043      	strh	r3, [r0, #2]
 8012bde:	8083      	strh	r3, [r0, #4]
 8012be0:	80c3      	strh	r3, [r0, #6]
 8012be2:	e7f7      	b.n	8012bd4 <_ZN8touchgfx4RectaNERKS0_+0x78>

08012be4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012be4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012be8:	b12b      	cbz	r3, 8012bf6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8012bea:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012bee:	fab0 f080 	clz	r0, r0
 8012bf2:	0940      	lsrs	r0, r0, #5
 8012bf4:	4770      	bx	lr
 8012bf6:	2001      	movs	r0, #1
 8012bf8:	4770      	bx	lr

08012bfa <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bfe:	2300      	movs	r3, #0
 8012c00:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012c02:	8003      	strh	r3, [r0, #0]
 8012c04:	4604      	mov	r4, r0
 8012c06:	8043      	strh	r3, [r0, #2]
 8012c08:	8083      	strh	r3, [r0, #4]
 8012c0a:	80c3      	strh	r3, [r0, #6]
 8012c0c:	2d00      	cmp	r5, #0
 8012c0e:	d040      	beq.n	8012c92 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012c10:	1d28      	adds	r0, r5, #4
 8012c12:	f7ff ffe7 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c16:	b988      	cbnz	r0, 8012c3c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f7ff ffe3 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c1e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012c22:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012c26:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012c2a:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012c2e:	b138      	cbz	r0, 8012c40 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012c30:	8022      	strh	r2, [r4, #0]
 8012c32:	8063      	strh	r3, [r4, #2]
 8012c34:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012c38:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012c3c:	69ad      	ldr	r5, [r5, #24]
 8012c3e:	e7e5      	b.n	8012c0c <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012c40:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012c44:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012c48:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012c4c:	4290      	cmp	r0, r2
 8012c4e:	4607      	mov	r7, r0
 8012c50:	bfa8      	it	ge
 8012c52:	4617      	movge	r7, r2
 8012c54:	4472      	add	r2, lr
 8012c56:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012c5a:	8027      	strh	r7, [r4, #0]
 8012c5c:	4299      	cmp	r1, r3
 8012c5e:	460e      	mov	r6, r1
 8012c60:	4440      	add	r0, r8
 8012c62:	bfa8      	it	ge
 8012c64:	461e      	movge	r6, r3
 8012c66:	4471      	add	r1, lr
 8012c68:	4463      	add	r3, ip
 8012c6a:	b200      	sxth	r0, r0
 8012c6c:	b212      	sxth	r2, r2
 8012c6e:	b209      	sxth	r1, r1
 8012c70:	b21b      	sxth	r3, r3
 8012c72:	4290      	cmp	r0, r2
 8012c74:	bfac      	ite	ge
 8012c76:	ebc7 0200 	rsbge	r2, r7, r0
 8012c7a:	ebc7 0202 	rsblt	r2, r7, r2
 8012c7e:	4299      	cmp	r1, r3
 8012c80:	bfac      	ite	ge
 8012c82:	ebc6 0301 	rsbge	r3, r6, r1
 8012c86:	ebc6 0303 	rsblt	r3, r6, r3
 8012c8a:	8066      	strh	r6, [r4, #2]
 8012c8c:	80a2      	strh	r2, [r4, #4]
 8012c8e:	80e3      	strh	r3, [r4, #6]
 8012c90:	e7d4      	b.n	8012c3c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012c92:	4620      	mov	r0, r4
 8012c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c98 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012c98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012c9c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012ca0:	b383      	cbz	r3, 8012d04 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012ca2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012ca4:	b374      	cbz	r4, 8012d04 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012ca6:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012caa:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012cae:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012cb2:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012cb6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012cba:	b303      	cbz	r3, 8012cfe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012cbc:	4668      	mov	r0, sp
 8012cbe:	1d21      	adds	r1, r4, #4
 8012cc0:	f8ad 5000 	strh.w	r5, [sp]
 8012cc4:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012cc8:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012ccc:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012cd0:	f7ff ff44 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 8012cd4:	4668      	mov	r0, sp
 8012cd6:	f7ff ff85 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012cda:	b980      	cbnz	r0, 8012cfe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012cdc:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ce0:	88a2      	ldrh	r2, [r4, #4]
 8012ce2:	1a9b      	subs	r3, r3, r2
 8012ce4:	f8ad 3000 	strh.w	r3, [sp]
 8012ce8:	88e2      	ldrh	r2, [r4, #6]
 8012cea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012cee:	1a9b      	subs	r3, r3, r2
 8012cf0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012cf4:	6823      	ldr	r3, [r4, #0]
 8012cf6:	4669      	mov	r1, sp
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	4798      	blx	r3
 8012cfe:	69a4      	ldr	r4, [r4, #24]
 8012d00:	2c00      	cmp	r4, #0
 8012d02:	d1d8      	bne.n	8012cb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012d04:	b002      	add	sp, #8
 8012d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d0c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012d10:	460d      	mov	r5, r1
 8012d12:	4616      	mov	r6, r2
 8012d14:	b323      	cbz	r3, 8012d60 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012d16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012d18:	b314      	cbz	r4, 8012d60 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012d1a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012d1e:	b1eb      	cbz	r3, 8012d5c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012d20:	6828      	ldr	r0, [r5, #0]
 8012d22:	6869      	ldr	r1, [r5, #4]
 8012d24:	466b      	mov	r3, sp
 8012d26:	c303      	stmia	r3!, {r0, r1}
 8012d28:	4668      	mov	r0, sp
 8012d2a:	1d21      	adds	r1, r4, #4
 8012d2c:	f7ff ff16 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 8012d30:	4668      	mov	r0, sp
 8012d32:	f7ff ff57 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d36:	b988      	cbnz	r0, 8012d5c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012d38:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d3c:	88a2      	ldrh	r2, [r4, #4]
 8012d3e:	1a9b      	subs	r3, r3, r2
 8012d40:	f8ad 3000 	strh.w	r3, [sp]
 8012d44:	88e2      	ldrh	r2, [r4, #6]
 8012d46:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012d4a:	1a9b      	subs	r3, r3, r2
 8012d4c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012d50:	6823      	ldr	r3, [r4, #0]
 8012d52:	4632      	mov	r2, r6
 8012d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012d56:	4669      	mov	r1, sp
 8012d58:	4620      	mov	r0, r4
 8012d5a:	4798      	blx	r3
 8012d5c:	69a4      	ldr	r4, [r4, #24]
 8012d5e:	e7db      	b.n	8012d18 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012d60:	b002      	add	sp, #8
 8012d62:	bd70      	pop	{r4, r5, r6, pc}

08012d64 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8012d64:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8012d68:	4770      	bx	lr

08012d6a <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8012d6a:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8012d6e:	4770      	bx	lr

08012d70 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8012d70:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8012d72:	4770      	bx	lr

08012d74 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8012d74:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8012d76:	4770      	bx	lr

08012d78 <_ZN8touchgfx6SliderD1Ev>:
 8012d78:	4770      	bx	lr

08012d7a <_ZN8touchgfx6Slider8setValueEi>:
 8012d7a:	b570      	push	{r4, r5, r6, lr}
 8012d7c:	6803      	ldr	r3, [r0, #0]
 8012d7e:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 8012d82:	4604      	mov	r4, r0
 8012d84:	4798      	blx	r3
 8012d86:	462b      	mov	r3, r5
 8012d88:	4601      	mov	r1, r0
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d90:	4718      	bx	r3

08012d92 <_ZNK8touchgfx6Slider15valueToPositionEi>:
 8012d92:	b538      	push	{r3, r4, r5, lr}
 8012d94:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 8012d98:	428c      	cmp	r4, r1
 8012d9a:	bfa8      	it	ge
 8012d9c:	460c      	movge	r4, r1
 8012d9e:	429c      	cmp	r4, r3
 8012da0:	bfac      	ite	ge
 8012da2:	ebc3 0404 	rsbge	r4, r3, r4
 8012da6:	ebc3 0403 	rsblt	r4, r3, r3
 8012daa:	6803      	ldr	r3, [r0, #0]
 8012dac:	4605      	mov	r5, r0
 8012dae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012db2:	4798      	blx	r3
 8012db4:	682b      	ldr	r3, [r5, #0]
 8012db6:	fb00 4404 	mla	r4, r0, r4, r4
 8012dba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	4798      	blx	r3
 8012dc2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8012dc6:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 8012dca:	fb94 f0f0 	sdiv	r0, r4, r0
 8012dce:	2a01      	cmp	r2, #1
 8012dd0:	bf08      	it	eq
 8012dd2:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 8012dd6:	4418      	add	r0, r3
 8012dd8:	bf04      	itt	eq
 8012dda:	1a10      	subeq	r0, r2, r0
 8012ddc:	18c0      	addeq	r0, r0, r3
 8012dde:	b200      	sxth	r0, r0
 8012de0:	bd38      	pop	{r3, r4, r5, pc}

08012de2 <_ZNK8touchgfx6Slider15positionToValueEs>:
 8012de2:	b570      	push	{r4, r5, r6, lr}
 8012de4:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 8012de8:	428b      	cmp	r3, r1
 8012dea:	4605      	mov	r5, r0
 8012dec:	460c      	mov	r4, r1
 8012dee:	d109      	bne.n	8012e04 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 8012df0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012df2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	bf01      	itttt	eq
 8012dfa:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 8012dfc:	1a18      	subeq	r0, r3, r0
 8012dfe:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 8012e00:	18c0      	addeq	r0, r0, r3
 8012e02:	bd70      	pop	{r4, r5, r6, pc}
 8012e04:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 8012e08:	428b      	cmp	r3, r1
 8012e0a:	d101      	bne.n	8012e10 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8012e0c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012e0e:	e7f0      	b.n	8012df2 <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8012e10:	6803      	ldr	r3, [r0, #0]
 8012e12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012e16:	4798      	blx	r3
 8012e18:	682b      	ldr	r3, [r5, #0]
 8012e1a:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 8012e1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012e22:	4606      	mov	r6, r0
 8012e24:	4628      	mov	r0, r5
 8012e26:	1a64      	subs	r4, r4, r1
 8012e28:	4798      	blx	r3
 8012e2a:	682b      	ldr	r3, [r5, #0]
 8012e2c:	2102      	movs	r1, #2
 8012e2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012e32:	fb96 f6f1 	sdiv	r6, r6, r1
 8012e36:	fb00 6404 	mla	r4, r0, r4, r6
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	4798      	blx	r3
 8012e3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012e40:	fb94 f0f0 	sdiv	r0, r4, r0
 8012e44:	4418      	add	r0, r3
 8012e46:	e7d4      	b.n	8012df2 <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08012e48 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8012e48:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8012e4c:	2302      	movs	r3, #2
 8012e4e:	b92a      	cbnz	r2, 8012e5c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8012e50:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 8012e54:	fb90 f0f3 	sdiv	r0, r0, r3
 8012e58:	b280      	uxth	r0, r0
 8012e5a:	4770      	bx	lr
 8012e5c:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 8012e60:	e7f8      	b.n	8012e54 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

08012e62 <_ZN8touchgfx6Slider13setValueRangeEii>:
 8012e62:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012e64:	428b      	cmp	r3, r1
 8012e66:	b410      	push	{r4}
 8012e68:	db09      	blt.n	8012e7e <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8012e6a:	4293      	cmp	r3, r2
 8012e6c:	bfa8      	it	ge
 8012e6e:	4613      	movge	r3, r2
 8012e70:	6804      	ldr	r4, [r0, #0]
 8012e72:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 8012e76:	46a4      	mov	ip, r4
 8012e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e7c:	4760      	bx	ip
 8012e7e:	460b      	mov	r3, r1
 8012e80:	e7f6      	b.n	8012e70 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

08012e82 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8012e82:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 8012e86:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 8012e8a:	1a10      	subs	r0, r2, r0
 8012e8c:	4770      	bx	lr

08012e8e <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8012e8e:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 8012e92:	1a10      	subs	r0, r2, r0
 8012e94:	4770      	bx	lr

08012e96 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8012e96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e9a:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 8012e9e:	428e      	cmp	r6, r1
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	bfb8      	it	lt
 8012ea4:	460e      	movlt	r6, r1
 8012ea6:	f9b0 10ee 	ldrsh.w	r1, [r0, #238]	; 0xee
 8012eaa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012eae:	428e      	cmp	r6, r1
 8012eb0:	bfa8      	it	ge
 8012eb2:	460e      	movge	r6, r1
 8012eb4:	3094      	adds	r0, #148	; 0x94
 8012eb6:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 8012eba:	fa1f f886 	uxth.w	r8, r6
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d132      	bne.n	8012f28 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 8012ec2:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8012ec6:	4631      	mov	r1, r6
 8012ec8:	f7fa feed 	bl	800dca6 <_ZN8touchgfx8Drawable6moveToEss>
 8012ecc:	4638      	mov	r0, r7
 8012ece:	f003 f9bd 	bl	801624c <_ZNK8touchgfx8Drawable10invalidateEv>
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8012ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012edc:	4620      	mov	r0, r4
 8012ede:	eba8 0802 	sub.w	r8, r8, r2
 8012ee2:	4798      	blx	r3
 8012ee4:	fa1f f888 	uxth.w	r8, r8
 8012ee8:	4480      	add	r8, r0
 8012eea:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 8012eee:	4638      	mov	r0, r7
 8012ef0:	f003 f9ac 	bl	801624c <_ZNK8touchgfx8Drawable10invalidateEv>
 8012ef4:	6823      	ldr	r3, [r4, #0]
 8012ef6:	4631      	mov	r1, r6
 8012ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012efc:	4620      	mov	r0, r4
 8012efe:	4798      	blx	r3
 8012f00:	6320      	str	r0, [r4, #48]	; 0x30
 8012f02:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d03c      	beq.n	8012f84 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 8012f0a:	6803      	ldr	r3, [r0, #0]
 8012f0c:	68db      	ldr	r3, [r3, #12]
 8012f0e:	4798      	blx	r3
 8012f10:	2800      	cmp	r0, #0
 8012f12:	d037      	beq.n	8012f84 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 8012f14:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8012f18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012f1a:	6803      	ldr	r3, [r0, #0]
 8012f1c:	689b      	ldr	r3, [r3, #8]
 8012f1e:	4621      	mov	r1, r4
 8012f20:	b003      	add	sp, #12
 8012f22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f26:	4718      	bx	r3
 8012f28:	4632      	mov	r2, r6
 8012f2a:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8012f2e:	f7fa feba 	bl	800dca6 <_ZN8touchgfx8Drawable6moveToEss>
 8012f32:	4638      	mov	r0, r7
 8012f34:	f003 f98a 	bl	801624c <_ZNK8touchgfx8Drawable10invalidateEv>
 8012f38:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8012f3c:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
 8012f40:	6823      	ldr	r3, [r4, #0]
 8012f42:	4405      	add	r5, r0
 8012f44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012f48:	4620      	mov	r0, r4
 8012f4a:	4798      	blx	r3
 8012f4c:	b2ad      	uxth	r5, r5
 8012f4e:	6823      	ldr	r3, [r4, #0]
 8012f50:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 8012f54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012f58:	eba5 0508 	sub.w	r5, r5, r8
 8012f5c:	1a2d      	subs	r5, r5, r0
 8012f5e:	4620      	mov	r0, r4
 8012f60:	4798      	blx	r3
 8012f62:	b2ad      	uxth	r5, r5
 8012f64:	b22a      	sxth	r2, r5
 8012f66:	4440      	add	r0, r8
 8012f68:	9200      	str	r2, [sp, #0]
 8012f6a:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 8012f6e:	b202      	sxth	r2, r0
 8012f70:	4649      	mov	r1, r9
 8012f72:	4638      	mov	r0, r7
 8012f74:	f7f9 fb66 	bl	800c644 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012f78:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8012f7c:	1a2d      	subs	r5, r5, r0
 8012f7e:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 8012f82:	e7b4      	b.n	8012eee <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 8012f84:	b003      	add	sp, #12
 8012f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012f8a <_ZN8touchgfx6SliderD0Ev>:
 8012f8a:	b510      	push	{r4, lr}
 8012f8c:	21fc      	movs	r1, #252	; 0xfc
 8012f8e:	4604      	mov	r4, r0
 8012f90:	f010 faca 	bl	8023528 <_ZdlPvj>
 8012f94:	4620      	mov	r0, r4
 8012f96:	bd10      	pop	{r4, pc}

08012f98 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8012f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f9c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8012fa0:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8012fa4:	45b8      	cmp	r8, r7
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	4689      	mov	r9, r1
 8012faa:	4616      	mov	r6, r2
 8012fac:	461d      	mov	r5, r3
 8012fae:	d305      	bcc.n	8012fbc <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8012fb0:	4b28      	ldr	r3, [pc, #160]	; (8013054 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8012fb2:	4a29      	ldr	r2, [pc, #164]	; (8013058 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 8012fb4:	4829      	ldr	r0, [pc, #164]	; (801305c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 8012fb6:	2147      	movs	r1, #71	; 0x47
 8012fb8:	f010 fae2 	bl	8023580 <__assert_func>
 8012fbc:	f04f 0a00 	mov.w	sl, #0
 8012fc0:	b213      	sxth	r3, r2
 8012fc2:	fa0f fb81 	sxth.w	fp, r1
 8012fc6:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 8012fca:	461a      	mov	r2, r3
 8012fcc:	4659      	mov	r1, fp
 8012fce:	303c      	adds	r0, #60	; 0x3c
 8012fd0:	9301      	str	r3, [sp, #4]
 8012fd2:	f7fa fdcd 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
 8012fd6:	9b01      	ldr	r3, [sp, #4]
 8012fd8:	4659      	mov	r1, fp
 8012fda:	461a      	mov	r2, r3
 8012fdc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8012fe0:	f7fa fdc6 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
 8012fe4:	4652      	mov	r2, sl
 8012fe6:	4651      	mov	r1, sl
 8012fe8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012fec:	f7fa fdc0 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
 8012ff0:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8012ff4:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8012ff8:	4449      	add	r1, r9
 8012ffa:	b28b      	uxth	r3, r1
 8012ffc:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8013000:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 8013004:	4439      	add	r1, r7
 8013006:	b289      	uxth	r1, r1
 8013008:	428b      	cmp	r3, r1
 801300a:	bf88      	it	hi
 801300c:	b219      	sxthhi	r1, r3
 801300e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8013012:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 8013016:	441e      	add	r6, r3
 8013018:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 801301c:	441d      	add	r5, r3
 801301e:	6823      	ldr	r3, [r4, #0]
 8013020:	b2ad      	uxth	r5, r5
 8013022:	b2b6      	uxth	r6, r6
 8013024:	bf98      	it	ls
 8013026:	b209      	sxthls	r1, r1
 8013028:	4620      	mov	r0, r4
 801302a:	42ae      	cmp	r6, r5
 801302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801302e:	bf8c      	ite	hi
 8013030:	b235      	sxthhi	r5, r6
 8013032:	b22d      	sxthls	r5, r5
 8013034:	4798      	blx	r3
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	4629      	mov	r1, r5
 801303a:	4620      	mov	r0, r4
 801303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801303e:	4798      	blx	r3
 8013040:	6823      	ldr	r3, [r4, #0]
 8013042:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013044:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013048:	4620      	mov	r0, r4
 801304a:	b003      	add	sp, #12
 801304c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013050:	4718      	bx	r3
 8013052:	bf00      	nop
 8013054:	080269f4 	.word	0x080269f4
 8013058:	08026c6e 	.word	0x08026c6e
 801305c:	08026a68 	.word	0x08026a68

08013060 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8013060:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013064:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8013068:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 801306c:	42b7      	cmp	r7, r6
 801306e:	4604      	mov	r4, r0
 8013070:	4689      	mov	r9, r1
 8013072:	4690      	mov	r8, r2
 8013074:	461d      	mov	r5, r3
 8013076:	d305      	bcc.n	8013084 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8013078:	4b25      	ldr	r3, [pc, #148]	; (8013110 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 801307a:	4a26      	ldr	r2, [pc, #152]	; (8013114 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 801307c:	4826      	ldr	r0, [pc, #152]	; (8013118 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 801307e:	2163      	movs	r1, #99	; 0x63
 8013080:	f010 fa7e 	bl	8023580 <__assert_func>
 8013084:	2301      	movs	r3, #1
 8013086:	fa0f fa81 	sxth.w	sl, r1
 801308a:	fa0f fb82 	sxth.w	fp, r2
 801308e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8013092:	465a      	mov	r2, fp
 8013094:	4651      	mov	r1, sl
 8013096:	303c      	adds	r0, #60	; 0x3c
 8013098:	f7fa fd6a 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
 801309c:	465a      	mov	r2, fp
 801309e:	4651      	mov	r1, sl
 80130a0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80130a4:	f7fa fd64 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
 80130a8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 80130ac:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80130b0:	4489      	add	r9, r1
 80130b2:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80130b6:	6823      	ldr	r3, [r4, #0]
 80130b8:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 80130bc:	4429      	add	r1, r5
 80130be:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 80130c2:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 80130c6:	44a8      	add	r8, r5
 80130c8:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 80130cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130ce:	b289      	uxth	r1, r1
 80130d0:	fa1f f989 	uxth.w	r9, r9
 80130d4:	4435      	add	r5, r6
 80130d6:	4589      	cmp	r9, r1
 80130d8:	b2ad      	uxth	r5, r5
 80130da:	fa1f f888 	uxth.w	r8, r8
 80130de:	bf8c      	ite	hi
 80130e0:	fa0f f189 	sxthhi.w	r1, r9
 80130e4:	b209      	sxthls	r1, r1
 80130e6:	4620      	mov	r0, r4
 80130e8:	45a8      	cmp	r8, r5
 80130ea:	bf8c      	ite	hi
 80130ec:	fa0f f588 	sxthhi.w	r5, r8
 80130f0:	b22d      	sxthls	r5, r5
 80130f2:	4798      	blx	r3
 80130f4:	6823      	ldr	r3, [r4, #0]
 80130f6:	4629      	mov	r1, r5
 80130f8:	4620      	mov	r0, r4
 80130fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130fc:	4798      	blx	r3
 80130fe:	6823      	ldr	r3, [r4, #0]
 8013100:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013106:	4620      	mov	r0, r4
 8013108:	b001      	add	sp, #4
 801310a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310e:	4718      	bx	r3
 8013110:	08026982 	.word	0x08026982
 8013114:	08026c09 	.word	0x08026c09
 8013118:	08026a68 	.word	0x08026a68

0801311c <_ZN8touchgfx6Slider13setValueRangeEiii>:
 801311c:	4291      	cmp	r1, r2
 801311e:	b510      	push	{r4, lr}
 8013120:	db06      	blt.n	8013130 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 8013122:	4b08      	ldr	r3, [pc, #32]	; (8013144 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 8013124:	4a08      	ldr	r2, [pc, #32]	; (8013148 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 8013126:	4809      	ldr	r0, [pc, #36]	; (801314c <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8013128:	f240 110b 	movw	r1, #267	; 0x10b
 801312c:	f010 fa28 	bl	8023580 <__assert_func>
 8013130:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8013134:	6802      	ldr	r2, [r0, #0]
 8013136:	4619      	mov	r1, r3
 8013138:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 801313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013140:	4710      	bx	r2
 8013142:	bf00      	nop
 8013144:	0802692a 	.word	0x0802692a
 8013148:	08026bcd 	.word	0x08026bcd
 801314c:	08026a68 	.word	0x08026a68

08013150 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8013150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013154:	790b      	ldrb	r3, [r1, #4]
 8013156:	4604      	mov	r4, r0
 8013158:	460d      	mov	r5, r1
 801315a:	b323      	cbz	r3, 80131a6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 801315c:	2b01      	cmp	r3, #1
 801315e:	d135      	bne.n	80131cc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8013160:	6823      	ldr	r3, [r4, #0]
 8013162:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013166:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 801316a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801316e:	2a00      	cmp	r2, #0
 8013170:	d12a      	bne.n	80131c8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 8013172:	88ee      	ldrh	r6, [r5, #6]
 8013174:	4620      	mov	r0, r4
 8013176:	4798      	blx	r3
 8013178:	1a31      	subs	r1, r6, r0
 801317a:	b209      	sxth	r1, r1
 801317c:	4620      	mov	r0, r4
 801317e:	47b8      	blx	r7
 8013180:	792b      	ldrb	r3, [r5, #4]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d122      	bne.n	80131cc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8013186:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801318a:	b1f8      	cbz	r0, 80131cc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801318c:	6803      	ldr	r3, [r0, #0]
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	4798      	blx	r3
 8013192:	b1d8      	cbz	r0, 80131cc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8013194:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8013198:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801319a:	6803      	ldr	r3, [r0, #0]
 801319c:	4621      	mov	r1, r4
 801319e:	689b      	ldr	r3, [r3, #8]
 80131a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131a4:	4718      	bx	r3
 80131a6:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 80131aa:	2800      	cmp	r0, #0
 80131ac:	d0d8      	beq.n	8013160 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80131ae:	6803      	ldr	r3, [r0, #0]
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	4798      	blx	r3
 80131b4:	2800      	cmp	r0, #0
 80131b6:	d0d3      	beq.n	8013160 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80131b8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80131bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80131be:	6803      	ldr	r3, [r0, #0]
 80131c0:	4621      	mov	r1, r4
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	4798      	blx	r3
 80131c6:	e7cb      	b.n	8013160 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80131c8:	892e      	ldrh	r6, [r5, #8]
 80131ca:	e7d3      	b.n	8013174 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 80131cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131d0 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 80131d0:	b570      	push	{r4, r5, r6, lr}
 80131d2:	6803      	ldr	r3, [r0, #0]
 80131d4:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80131d8:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 80131dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80131e0:	4604      	mov	r4, r0
 80131e2:	b942      	cbnz	r2, 80131f6 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 80131e4:	894d      	ldrh	r5, [r1, #10]
 80131e6:	4798      	blx	r3
 80131e8:	1a29      	subs	r1, r5, r0
 80131ea:	4633      	mov	r3, r6
 80131ec:	4620      	mov	r0, r4
 80131ee:	b209      	sxth	r1, r1
 80131f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131f4:	4718      	bx	r3
 80131f6:	898d      	ldrh	r5, [r1, #12]
 80131f8:	e7f5      	b.n	80131e6 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

080131fc <_ZN8touchgfx6SliderC1Ev>:
 80131fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013200:	ae02      	add	r6, sp, #8
 8013202:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8013206:	4604      	mov	r4, r0
 8013208:	f7fa fd9a 	bl	800dd40 <_ZN8touchgfx9ContainerC1Ev>
 801320c:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8013210:	4b23      	ldr	r3, [pc, #140]	; (80132a0 <_ZN8touchgfx6SliderC1Ev+0xa4>)
 8013212:	6023      	str	r3, [r4, #0]
 8013214:	2500      	movs	r5, #0
 8013216:	f04f 0b01 	mov.w	fp, #1
 801321a:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 801321e:	4631      	mov	r1, r6
 8013220:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 8013224:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8013228:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 801322c:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 8013230:	4648      	mov	r0, r9
 8013232:	f7fa fe7d 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013236:	f104 0894 	add.w	r8, r4, #148	; 0x94
 801323a:	4631      	mov	r1, r6
 801323c:	4650      	mov	r0, sl
 801323e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013242:	f7fa fe75 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013246:	4631      	mov	r1, r6
 8013248:	4640      	mov	r0, r8
 801324a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 801324e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013252:	f7fa fe6d 	bl	800df30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013256:	4630      	mov	r0, r6
 8013258:	f7fa fd72 	bl	800dd40 <_ZN8touchgfx9ContainerC1Ev>
 801325c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013260:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8013264:	4651      	mov	r1, sl
 8013266:	4630      	mov	r0, r6
 8013268:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 801326c:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8013270:	f7ff fc44 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013274:	4649      	mov	r1, r9
 8013276:	4620      	mov	r0, r4
 8013278:	f7ff fc40 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801327c:	4631      	mov	r1, r6
 801327e:	4620      	mov	r0, r4
 8013280:	f7ff fc3c 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013284:	4641      	mov	r1, r8
 8013286:	4620      	mov	r0, r4
 8013288:	f7ff fc38 	bl	8012afc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801328c:	4620      	mov	r0, r4
 801328e:	2264      	movs	r2, #100	; 0x64
 8013290:	4629      	mov	r1, r5
 8013292:	f7ff fde6 	bl	8012e62 <_ZN8touchgfx6Slider13setValueRangeEii>
 8013296:	4620      	mov	r0, r4
 8013298:	b003      	add	sp, #12
 801329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801329e:	bf00      	nop
 80132a0:	08026aa0 	.word	0x08026aa0

080132a4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 80132a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a8:	4604      	mov	r4, r0
 80132aa:	4608      	mov	r0, r1
 80132ac:	4615      	mov	r5, r2
 80132ae:	460e      	mov	r6, r1
 80132b0:	461f      	mov	r7, r3
 80132b2:	f004 fcad 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80132b6:	4680      	mov	r8, r0
 80132b8:	4628      	mov	r0, r5
 80132ba:	f004 fca9 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80132be:	4580      	cmp	r8, r0
 80132c0:	d005      	beq.n	80132ce <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 80132c2:	4b14      	ldr	r3, [pc, #80]	; (8013314 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 80132c4:	4a14      	ldr	r2, [pc, #80]	; (8013318 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 80132c6:	4815      	ldr	r0, [pc, #84]	; (801331c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 80132c8:	2137      	movs	r1, #55	; 0x37
 80132ca:	f010 f959 	bl	8023580 <__assert_func>
 80132ce:	4630      	mov	r0, r6
 80132d0:	f004 fcd8 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80132d4:	4680      	mov	r8, r0
 80132d6:	4628      	mov	r0, r5
 80132d8:	f004 fcd4 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80132dc:	4580      	cmp	r8, r0
 80132de:	d1f0      	bne.n	80132c2 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 80132e0:	4631      	mov	r1, r6
 80132e2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80132e6:	f001 fa2b 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80132ea:	4629      	mov	r1, r5
 80132ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80132f0:	f001 fa26 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80132f4:	4639      	mov	r1, r7
 80132f6:	f104 0094 	add.w	r0, r4, #148	; 0x94
 80132fa:	f001 fa21 	bl	8014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80132fe:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8013302:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8013306:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 801330a:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 801330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013312:	bf00      	nop
 8013314:	0802684b 	.word	0x0802684b
 8013318:	08026b60 	.word	0x08026b60
 801331c:	08026a68 	.word	0x08026a68

08013320 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8013320:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013324:	4770      	bx	lr

08013326 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8013326:	b513      	push	{r0, r1, r4, lr}
 8013328:	6803      	ldr	r3, [r0, #0]
 801332a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801332e:	2300      	movs	r3, #0
 8013330:	e9cd 3300 	strd	r3, r3, [sp]
 8013334:	466b      	mov	r3, sp
 8013336:	47a0      	blx	r4
 8013338:	b002      	add	sp, #8
 801333a:	bd10      	pop	{r4, pc}

0801333c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801333c:	2301      	movs	r3, #1
 801333e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013342:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013346:	4770      	bx	lr

08013348 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013348:	2301      	movs	r3, #1
 801334a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801334e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013352:	4770      	bx	lr

08013354 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013354:	6843      	ldr	r3, [r0, #4]
 8013356:	2201      	movs	r2, #1
 8013358:	725a      	strb	r2, [r3, #9]
 801335a:	6840      	ldr	r0, [r0, #4]
 801335c:	6803      	ldr	r3, [r0, #0]
 801335e:	691b      	ldr	r3, [r3, #16]
 8013360:	4718      	bx	r3

08013362 <_ZN8touchgfx3HAL8flushDMAEv>:
 8013362:	6840      	ldr	r0, [r0, #4]
 8013364:	6803      	ldr	r3, [r0, #0]
 8013366:	689b      	ldr	r3, [r3, #8]
 8013368:	4718      	bx	r3
	...

0801336c <_ZN8touchgfx3HAL10beginFrameEv>:
 801336c:	4b04      	ldr	r3, [pc, #16]	; (8013380 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	b123      	cbz	r3, 801337c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013372:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8013376:	f080 0001 	eor.w	r0, r0, #1
 801337a:	4770      	bx	lr
 801337c:	2001      	movs	r0, #1
 801337e:	4770      	bx	lr
 8013380:	2002b086 	.word	0x2002b086

08013384 <_ZN8touchgfx3HAL8endFrameEv>:
 8013384:	b510      	push	{r4, lr}
 8013386:	4604      	mov	r4, r0
 8013388:	6840      	ldr	r0, [r0, #4]
 801338a:	6803      	ldr	r3, [r0, #0]
 801338c:	689b      	ldr	r3, [r3, #8]
 801338e:	4798      	blx	r3
 8013390:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8013394:	b113      	cbz	r3, 801339c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013396:	2301      	movs	r3, #1
 8013398:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801339c:	bd10      	pop	{r4, pc}

0801339e <_ZN8touchgfx3HAL9taskEntryEv>:
 801339e:	b508      	push	{r3, lr}
 80133a0:	6803      	ldr	r3, [r0, #0]
 80133a2:	4604      	mov	r4, r0
 80133a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80133a6:	4798      	blx	r3
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80133ac:	4620      	mov	r0, r4
 80133ae:	4798      	blx	r3
 80133b0:	f7fd ff64 	bl	801127c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80133b4:	6823      	ldr	r3, [r4, #0]
 80133b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133b8:	e7f8      	b.n	80133ac <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080133bc <_ZN8touchgfx3HAL4tickEv>:
 80133bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80133be:	6803      	ldr	r3, [r0, #0]
 80133c0:	4d5c      	ldr	r5, [pc, #368]	; (8013534 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80133c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80133c6:	4604      	mov	r4, r0
 80133c8:	4798      	blx	r3
 80133ca:	2800      	cmp	r0, #0
 80133cc:	f000 8097 	beq.w	80134fe <_ZN8touchgfx3HAL4tickEv+0x142>
 80133d0:	2001      	movs	r0, #1
 80133d2:	f7fd fc37 	bl	8010c44 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80133d6:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80133da:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80133de:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80133e2:	2600      	movs	r6, #0
 80133e4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80133e8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80133ec:	b133      	cbz	r3, 80133fc <_ZN8touchgfx3HAL4tickEv+0x40>
 80133ee:	6823      	ldr	r3, [r4, #0]
 80133f0:	4620      	mov	r0, r4
 80133f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80133f6:	4798      	blx	r3
 80133f8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80133fc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013400:	6862      	ldr	r2, [r4, #4]
 8013402:	f083 0301 	eor.w	r3, r3, #1
 8013406:	7253      	strb	r3, [r2, #9]
 8013408:	2601      	movs	r6, #1
 801340a:	702e      	strb	r6, [r5, #0]
 801340c:	f002 faf4 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 8013410:	6803      	ldr	r3, [r0, #0]
 8013412:	4631      	mov	r1, r6
 8013414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013416:	4798      	blx	r3
 8013418:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801341c:	b90b      	cbnz	r3, 8013422 <_ZN8touchgfx3HAL4tickEv+0x66>
 801341e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013422:	f002 fae9 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 8013426:	6803      	ldr	r3, [r0, #0]
 8013428:	695b      	ldr	r3, [r3, #20]
 801342a:	4798      	blx	r3
 801342c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801342e:	6803      	ldr	r3, [r0, #0]
 8013430:	691b      	ldr	r3, [r3, #16]
 8013432:	4798      	blx	r3
 8013434:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013438:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801343c:	3b01      	subs	r3, #1
 801343e:	b2db      	uxtb	r3, r3
 8013440:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013444:	b10a      	cbz	r2, 801344a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8013446:	2b00      	cmp	r3, #0
 8013448:	d1eb      	bne.n	8013422 <_ZN8touchgfx3HAL4tickEv+0x66>
 801344a:	4a3b      	ldr	r2, [pc, #236]	; (8013538 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801344c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8013450:	7813      	ldrb	r3, [r2, #0]
 8013452:	3301      	adds	r3, #1
 8013454:	b25b      	sxtb	r3, r3
 8013456:	4299      	cmp	r1, r3
 8013458:	7013      	strb	r3, [r2, #0]
 801345a:	dc10      	bgt.n	801347e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801345c:	68e0      	ldr	r0, [r4, #12]
 801345e:	2300      	movs	r3, #0
 8013460:	7013      	strb	r3, [r2, #0]
 8013462:	6803      	ldr	r3, [r0, #0]
 8013464:	aa03      	add	r2, sp, #12
 8013466:	68db      	ldr	r3, [r3, #12]
 8013468:	a902      	add	r1, sp, #8
 801346a:	4798      	blx	r3
 801346c:	6823      	ldr	r3, [r4, #0]
 801346e:	2800      	cmp	r0, #0
 8013470:	d051      	beq.n	8013516 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8013472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013476:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801347a:	4620      	mov	r0, r4
 801347c:	4798      	blx	r3
 801347e:	6960      	ldr	r0, [r4, #20]
 8013480:	2300      	movs	r3, #0
 8013482:	f88d 3007 	strb.w	r3, [sp, #7]
 8013486:	b158      	cbz	r0, 80134a0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8013488:	6803      	ldr	r3, [r0, #0]
 801348a:	f10d 0107 	add.w	r1, sp, #7
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	4798      	blx	r3
 8013492:	b128      	cbz	r0, 80134a0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8013494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013496:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801349a:	6803      	ldr	r3, [r0, #0]
 801349c:	68db      	ldr	r3, [r3, #12]
 801349e:	4798      	blx	r3
 80134a0:	f104 001c 	add.w	r0, r4, #28
 80134a4:	f00f ff88 	bl	80233b8 <_ZN8touchgfx8Gestures4tickEv>
 80134a8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80134ac:	b30b      	cbz	r3, 80134f2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80134ae:	6920      	ldr	r0, [r4, #16]
 80134b0:	6803      	ldr	r3, [r0, #0]
 80134b2:	691b      	ldr	r3, [r3, #16]
 80134b4:	4798      	blx	r3
 80134b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80134b8:	4606      	mov	r6, r0
 80134ba:	b903      	cbnz	r3, 80134be <_ZN8touchgfx3HAL4tickEv+0x102>
 80134bc:	6720      	str	r0, [r4, #112]	; 0x70
 80134be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80134c0:	4a1e      	ldr	r2, [pc, #120]	; (801353c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80134c2:	1af3      	subs	r3, r6, r3
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d914      	bls.n	80134f2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80134c8:	6920      	ldr	r0, [r4, #16]
 80134ca:	6803      	ldr	r3, [r0, #0]
 80134cc:	699b      	ldr	r3, [r3, #24]
 80134ce:	4798      	blx	r3
 80134d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80134d2:	2264      	movs	r2, #100	; 0x64
 80134d4:	1af3      	subs	r3, r6, r3
 80134d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80134da:	fbb0 f0f3 	udiv	r0, r0, r3
 80134de:	2800      	cmp	r0, #0
 80134e0:	dc1e      	bgt.n	8013520 <_ZN8touchgfx3HAL4tickEv+0x164>
 80134e2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80134e6:	6920      	ldr	r0, [r4, #16]
 80134e8:	6803      	ldr	r3, [r0, #0]
 80134ea:	2100      	movs	r1, #0
 80134ec:	69db      	ldr	r3, [r3, #28]
 80134ee:	4798      	blx	r3
 80134f0:	6726      	str	r6, [r4, #112]	; 0x70
 80134f2:	f002 fa81 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 80134f6:	6803      	ldr	r3, [r0, #0]
 80134f8:	2100      	movs	r1, #0
 80134fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134fc:	4798      	blx	r3
 80134fe:	6823      	ldr	r3, [r4, #0]
 8013500:	4620      	mov	r0, r4
 8013502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013506:	4798      	blx	r3
 8013508:	2001      	movs	r0, #1
 801350a:	f7fd fba6 	bl	8010c5a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801350e:	2300      	movs	r3, #0
 8013510:	702b      	strb	r3, [r5, #0]
 8013512:	b004      	add	sp, #16
 8013514:	bd70      	pop	{r4, r5, r6, pc}
 8013516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801351a:	4620      	mov	r0, r4
 801351c:	4798      	blx	r3
 801351e:	e7ae      	b.n	801347e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8013520:	2863      	cmp	r0, #99	; 0x63
 8013522:	bfcb      	itete	gt
 8013524:	2300      	movgt	r3, #0
 8013526:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801352a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801352e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8013532:	e7d8      	b.n	80134e6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8013534:	2002b08c 	.word	0x2002b08c
 8013538:	2002b08d 	.word	0x2002b08d
 801353c:	05f5e100 	.word	0x05f5e100

08013540 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013540:	f7fd be3c 	b.w	80111bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013544 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013544:	6581      	str	r1, [r0, #88]	; 0x58
 8013546:	301c      	adds	r0, #28
 8013548:	f00f bf34 	b.w	80233b4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801354c <_ZN8touchgfx3HAL5touchEll>:
 801354c:	b530      	push	{r4, r5, lr}
 801354e:	b087      	sub	sp, #28
 8013550:	4604      	mov	r4, r0
 8013552:	a804      	add	r0, sp, #16
 8013554:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013558:	f002 f80c 	bl	8015574 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801355c:	9b04      	ldr	r3, [sp, #16]
 801355e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013562:	a906      	add	r1, sp, #24
 8013564:	9b05      	ldr	r3, [sp, #20]
 8013566:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801356a:	a803      	add	r0, sp, #12
 801356c:	f002 f850 	bl	8015610 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013570:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013574:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013578:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801357c:	f104 001c 	add.w	r0, r4, #28
 8013580:	b189      	cbz	r1, 80135a6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013582:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013586:	9300      	str	r3, [sp, #0]
 8013588:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801358c:	4613      	mov	r3, r2
 801358e:	462a      	mov	r2, r5
 8013590:	f00f ff20 	bl	80233d4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013594:	b128      	cbz	r0, 80135a2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8013596:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801359a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801359c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80135a0:	6623      	str	r3, [r4, #96]	; 0x60
 80135a2:	b007      	add	sp, #28
 80135a4:	bd30      	pop	{r4, r5, pc}
 80135a6:	f00f ff59 	bl	802345c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80135aa:	2301      	movs	r3, #1
 80135ac:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80135b0:	e7f1      	b.n	8013596 <_ZN8touchgfx3HAL5touchEll+0x4a>

080135b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80135b2:	b570      	push	{r4, r5, r6, lr}
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d050      	beq.n	801365a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80135b8:	ea81 0002 	eor.w	r0, r1, r2
 80135bc:	07c6      	lsls	r6, r0, #31
 80135be:	d508      	bpl.n	80135d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80135c0:	3a01      	subs	r2, #1
 80135c2:	18cc      	adds	r4, r1, r3
 80135c4:	42a1      	cmp	r1, r4
 80135c6:	d048      	beq.n	801365a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80135c8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80135cc:	f801 0b01 	strb.w	r0, [r1], #1
 80135d0:	e7f8      	b.n	80135c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80135d2:	07d5      	lsls	r5, r2, #31
 80135d4:	bf42      	ittt	mi
 80135d6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80135da:	f801 0b01 	strbmi.w	r0, [r1], #1
 80135de:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	d915      	bls.n	8013612 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80135e6:	ea82 0001 	eor.w	r0, r2, r1
 80135ea:	0784      	lsls	r4, r0, #30
 80135ec:	d02d      	beq.n	801364a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80135ee:	1e94      	subs	r4, r2, #2
 80135f0:	4608      	mov	r0, r1
 80135f2:	18ce      	adds	r6, r1, r3
 80135f4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80135f8:	f820 5b02 	strh.w	r5, [r0], #2
 80135fc:	1a35      	subs	r5, r6, r0
 80135fe:	2d01      	cmp	r5, #1
 8013600:	d8f8      	bhi.n	80135f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8013602:	1e98      	subs	r0, r3, #2
 8013604:	f020 0001 	bic.w	r0, r0, #1
 8013608:	3002      	adds	r0, #2
 801360a:	4401      	add	r1, r0
 801360c:	4402      	add	r2, r0
 801360e:	f003 0301 	and.w	r3, r3, #1
 8013612:	1f14      	subs	r4, r2, #4
 8013614:	4608      	mov	r0, r1
 8013616:	18ce      	adds	r6, r1, r3
 8013618:	1a35      	subs	r5, r6, r0
 801361a:	2d03      	cmp	r5, #3
 801361c:	d810      	bhi.n	8013640 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801361e:	089c      	lsrs	r4, r3, #2
 8013620:	00a0      	lsls	r0, r4, #2
 8013622:	4401      	add	r1, r0
 8013624:	3801      	subs	r0, #1
 8013626:	4402      	add	r2, r0
 8013628:	f06f 0003 	mvn.w	r0, #3
 801362c:	fb00 3404 	mla	r4, r0, r4, r3
 8013630:	440c      	add	r4, r1
 8013632:	42a1      	cmp	r1, r4
 8013634:	d011      	beq.n	801365a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8013636:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801363a:	f801 3b01 	strb.w	r3, [r1], #1
 801363e:	e7f8      	b.n	8013632 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8013640:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8013644:	f840 5b04 	str.w	r5, [r0], #4
 8013648:	e7e6      	b.n	8013618 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801364a:	0790      	lsls	r0, r2, #30
 801364c:	d0e1      	beq.n	8013612 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801364e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8013652:	f821 0b02 	strh.w	r0, [r1], #2
 8013656:	3b02      	subs	r3, #2
 8013658:	e7db      	b.n	8013612 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801365a:	2001      	movs	r0, #1
 801365c:	bd70      	pop	{r4, r5, r6, pc}

0801365e <_ZN8touchgfx3HAL7noTouchEv>:
 801365e:	b510      	push	{r4, lr}
 8013660:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8013664:	4604      	mov	r4, r0
 8013666:	b153      	cbz	r3, 801367e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013668:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801366c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8013670:	2101      	movs	r1, #1
 8013672:	301c      	adds	r0, #28
 8013674:	f00f fef2 	bl	802345c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013678:	2300      	movs	r3, #0
 801367a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801367e:	bd10      	pop	{r4, pc}

08013680 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013684:	4605      	mov	r5, r0
 8013686:	6980      	ldr	r0, [r0, #24]
 8013688:	b085      	sub	sp, #20
 801368a:	460f      	mov	r7, r1
 801368c:	4690      	mov	r8, r2
 801368e:	4699      	mov	r9, r3
 8013690:	b930      	cbnz	r0, 80136a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8013692:	4b1f      	ldr	r3, [pc, #124]	; (8013710 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8013694:	4a1f      	ldr	r2, [pc, #124]	; (8013714 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8013696:	f44f 7198 	mov.w	r1, #304	; 0x130
 801369a:	481f      	ldr	r0, [pc, #124]	; (8013718 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801369c:	f00f ff70 	bl	8023580 <__assert_func>
 80136a0:	ac04      	add	r4, sp, #16
 80136a2:	2600      	movs	r6, #0
 80136a4:	f844 6d04 	str.w	r6, [r4, #-4]!
 80136a8:	6806      	ldr	r6, [r0, #0]
 80136aa:	9401      	str	r4, [sp, #4]
 80136ac:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80136b0:	9400      	str	r4, [sp, #0]
 80136b2:	6834      	ldr	r4, [r6, #0]
 80136b4:	47a0      	blx	r4
 80136b6:	4c19      	ldr	r4, [pc, #100]	; (801371c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80136b8:	4606      	mov	r6, r0
 80136ba:	f8a4 9000 	strh.w	r9, [r4]
 80136be:	f7f9 f815 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 80136c2:	6803      	ldr	r3, [r0, #0]
 80136c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c6:	4798      	blx	r3
 80136c8:	280c      	cmp	r0, #12
 80136ca:	d80f      	bhi.n	80136ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80136cc:	e8df f000 	tbb	[pc, r0]
 80136d0:	1b1b1207 	.word	0x1b1b1207
 80136d4:	1b1b1b1b 	.word	0x1b1b1b1b
 80136d8:	1b1b1b1b 	.word	0x1b1b1b1b
 80136dc:	1b          	.byte	0x1b
 80136dd:	00          	.byte	0x00
 80136de:	8823      	ldrh	r3, [r4, #0]
 80136e0:	fb08 7203 	mla	r2, r8, r3, r7
 80136e4:	9b03      	ldr	r3, [sp, #12]
 80136e6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80136ea:	63eb      	str	r3, [r5, #60]	; 0x3c
 80136ec:	4630      	mov	r0, r6
 80136ee:	b005      	add	sp, #20
 80136f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136f4:	8822      	ldrh	r2, [r4, #0]
 80136f6:	9b03      	ldr	r3, [sp, #12]
 80136f8:	fb08 7202 	mla	r2, r8, r2, r7
 80136fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013700:	1a9a      	subs	r2, r3, r2
 8013702:	63ea      	str	r2, [r5, #60]	; 0x3c
 8013704:	e7f2      	b.n	80136ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8013706:	4b06      	ldr	r3, [pc, #24]	; (8013720 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8013708:	4a02      	ldr	r2, [pc, #8]	; (8013714 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801370a:	f240 114d 	movw	r1, #333	; 0x14d
 801370e:	e7c4      	b.n	801369a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8013710:	08026d43 	.word	0x08026d43
 8013714:	08027052 	.word	0x08027052
 8013718:	08026d88 	.word	0x08026d88
 801371c:	2002b082 	.word	0x2002b082
 8013720:	08026dae 	.word	0x08026dae

08013724 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8013724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013728:	4698      	mov	r8, r3
 801372a:	6803      	ldr	r3, [r0, #0]
 801372c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801372e:	4b0f      	ldr	r3, [pc, #60]	; (801376c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8013730:	b087      	sub	sp, #28
 8013732:	f8b3 9000 	ldrh.w	r9, [r3]
 8013736:	460e      	mov	r6, r1
 8013738:	4617      	mov	r7, r2
 801373a:	4604      	mov	r4, r0
 801373c:	f7f8 ffd6 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8013740:	6803      	ldr	r3, [r0, #0]
 8013742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013744:	4798      	blx	r3
 8013746:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801374a:	9302      	str	r3, [sp, #8]
 801374c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013750:	9301      	str	r3, [sp, #4]
 8013752:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801375c:	4643      	mov	r3, r8
 801375e:	463a      	mov	r2, r7
 8013760:	4631      	mov	r1, r6
 8013762:	4620      	mov	r0, r4
 8013764:	47a8      	blx	r5
 8013766:	b007      	add	sp, #28
 8013768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801376c:	2002b082 	.word	0x2002b082

08013770 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013774:	4606      	mov	r6, r0
 8013776:	b089      	sub	sp, #36	; 0x24
 8013778:	4610      	mov	r0, r2
 801377a:	460c      	mov	r4, r1
 801377c:	4691      	mov	r9, r2
 801377e:	4698      	mov	r8, r3
 8013780:	f004 f986 	bl	8017a90 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013784:	2800      	cmp	r0, #0
 8013786:	f000 8092 	beq.w	80138ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801378a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80138c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801378e:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80138cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8013792:	f8da 0000 	ldr.w	r0, [sl]
 8013796:	4f4b      	ldr	r7, [pc, #300]	; (80138c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8013798:	6802      	ldr	r2, [r0, #0]
 801379a:	6a12      	ldr	r2, [r2, #32]
 801379c:	4790      	blx	r2
 801379e:	f8da 0000 	ldr.w	r0, [sl]
 80137a2:	6802      	ldr	r2, [r0, #0]
 80137a4:	ad08      	add	r5, sp, #32
 80137a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80137a8:	4790      	blx	r2
 80137aa:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80137ae:	f8bb 3000 	ldrh.w	r3, [fp]
 80137b2:	9300      	str	r3, [sp, #0]
 80137b4:	4628      	mov	r0, r5
 80137b6:	883b      	ldrh	r3, [r7, #0]
 80137b8:	9301      	str	r3, [sp, #4]
 80137ba:	f004 fa29 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80137be:	f8ab 0000 	strh.w	r0, [fp]
 80137c2:	4628      	mov	r0, r5
 80137c4:	f004 fa5e 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80137c8:	f8da b000 	ldr.w	fp, [sl]
 80137cc:	8038      	strh	r0, [r7, #0]
 80137ce:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80137d2:	9302      	str	r3, [sp, #8]
 80137d4:	4648      	mov	r0, r9
 80137d6:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80137da:	f004 f959 	bl	8017a90 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80137de:	f8da 2000 	ldr.w	r2, [sl]
 80137e2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80137e6:	63d0      	str	r0, [r2, #60]	; 0x3c
 80137e8:	6822      	ldr	r2, [r4, #0]
 80137ea:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80137ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80137f0:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80137f4:	2200      	movs	r2, #0
 80137f6:	4611      	mov	r1, r2
 80137f8:	4620      	mov	r0, r4
 80137fa:	4798      	blx	r3
 80137fc:	2201      	movs	r2, #1
 80137fe:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8013802:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8013806:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801380a:	1d22      	adds	r2, r4, #4
 801380c:	2900      	cmp	r1, #0
 801380e:	d051      	beq.n	80138b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8013810:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8013814:	2900      	cmp	r1, #0
 8013816:	d04d      	beq.n	80138b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8013818:	6810      	ldr	r0, [r2, #0]
 801381a:	6851      	ldr	r1, [r2, #4]
 801381c:	f10d 0c18 	add.w	ip, sp, #24
 8013820:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013824:	4641      	mov	r1, r8
 8013826:	a806      	add	r0, sp, #24
 8013828:	f7ff f998 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 801382c:	4628      	mov	r0, r5
 801382e:	f004 fb7b 	bl	8017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013832:	4680      	mov	r8, r0
 8013834:	f7f8 ff5a 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8013838:	6802      	ldr	r2, [r0, #0]
 801383a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801383c:	4790      	blx	r2
 801383e:	4580      	cmp	r8, r0
 8013840:	d03d      	beq.n	80138be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8013842:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013844:	b150      	cbz	r0, 801385c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8013846:	4628      	mov	r0, r5
 8013848:	f004 fb6e 	bl	8017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801384c:	4605      	mov	r5, r0
 801384e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013850:	6803      	ldr	r3, [r0, #0]
 8013852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013854:	4798      	blx	r3
 8013856:	1a2b      	subs	r3, r5, r0
 8013858:	4258      	negs	r0, r3
 801385a:	4158      	adcs	r0, r3
 801385c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8013860:	6822      	ldr	r2, [r4, #0]
 8013862:	6963      	ldr	r3, [r4, #20]
 8013864:	9303      	str	r3, [sp, #12]
 8013866:	2500      	movs	r5, #0
 8013868:	6165      	str	r5, [r4, #20]
 801386a:	4620      	mov	r0, r4
 801386c:	6892      	ldr	r2, [r2, #8]
 801386e:	a906      	add	r1, sp, #24
 8013870:	4790      	blx	r2
 8013872:	9b03      	ldr	r3, [sp, #12]
 8013874:	6163      	str	r3, [r4, #20]
 8013876:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801387a:	6823      	ldr	r3, [r4, #0]
 801387c:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8013880:	4620      	mov	r0, r4
 8013882:	4c11      	ldr	r4, [pc, #68]	; (80138c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8013884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013886:	4652      	mov	r2, sl
 8013888:	4649      	mov	r1, r9
 801388a:	4798      	blx	r3
 801388c:	6820      	ldr	r0, [r4, #0]
 801388e:	9b02      	ldr	r3, [sp, #8]
 8013890:	9a00      	ldr	r2, [sp, #0]
 8013892:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8013896:	4b0d      	ldr	r3, [pc, #52]	; (80138cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8013898:	801a      	strh	r2, [r3, #0]
 801389a:	4b0a      	ldr	r3, [pc, #40]	; (80138c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801389c:	9a01      	ldr	r2, [sp, #4]
 801389e:	801a      	strh	r2, [r3, #0]
 80138a0:	6803      	ldr	r3, [r0, #0]
 80138a2:	6a1b      	ldr	r3, [r3, #32]
 80138a4:	4798      	blx	r3
 80138a6:	6820      	ldr	r0, [r4, #0]
 80138a8:	6803      	ldr	r3, [r0, #0]
 80138aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ac:	4798      	blx	r3
 80138ae:	b009      	add	sp, #36	; 0x24
 80138b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b4:	6810      	ldr	r0, [r2, #0]
 80138b6:	6851      	ldr	r1, [r2, #4]
 80138b8:	ab06      	add	r3, sp, #24
 80138ba:	c303      	stmia	r3!, {r0, r1}
 80138bc:	e7b6      	b.n	801382c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80138be:	2000      	movs	r0, #0
 80138c0:	e7cc      	b.n	801385c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80138c2:	bf00      	nop
 80138c4:	2002b084 	.word	0x2002b084
 80138c8:	2002b088 	.word	0x2002b088
 80138cc:	2002b082 	.word	0x2002b082

080138d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80138d0:	b510      	push	{r4, lr}
 80138d2:	4b07      	ldr	r3, [pc, #28]	; (80138f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	4604      	mov	r4, r0
 80138d8:	b13b      	cbz	r3, 80138ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80138da:	6803      	ldr	r3, [r0, #0]
 80138dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138de:	4798      	blx	r3
 80138e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80138e2:	4283      	cmp	r3, r0
 80138e4:	d101      	bne.n	80138ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80138e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80138e8:	bd10      	pop	{r4, pc}
 80138ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80138ec:	e7fc      	b.n	80138e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80138ee:	bf00      	nop
 80138f0:	2002b086 	.word	0x2002b086

080138f4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80138f4:	b510      	push	{r4, lr}
 80138f6:	4b0b      	ldr	r3, [pc, #44]	; (8013924 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	4604      	mov	r4, r0
 80138fc:	b95b      	cbnz	r3, 8013916 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80138fe:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013902:	2b02      	cmp	r3, #2
 8013904:	d007      	beq.n	8013916 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013906:	6840      	ldr	r0, [r0, #4]
 8013908:	f000 fbc8 	bl	801409c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801390c:	b118      	cbz	r0, 8013916 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801390e:	6862      	ldr	r2, [r4, #4]
 8013910:	7a53      	ldrb	r3, [r2, #9]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d0fc      	beq.n	8013910 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013916:	f7fd fc43 	bl	80111a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801391a:	4620      	mov	r0, r4
 801391c:	f7ff ffd8 	bl	80138d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013920:	bd10      	pop	{r4, pc}
 8013922:	bf00      	nop
 8013924:	2002b086 	.word	0x2002b086

08013928 <_ZN8touchgfx3HAL10initializeEv>:
 8013928:	b510      	push	{r4, lr}
 801392a:	4604      	mov	r4, r0
 801392c:	f7fd fc14 	bl	8011158 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013930:	6860      	ldr	r0, [r4, #4]
 8013932:	6803      	ldr	r3, [r0, #0]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	4798      	blx	r3
 8013938:	68e0      	ldr	r0, [r4, #12]
 801393a:	6803      	ldr	r3, [r0, #0]
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	4798      	blx	r3
 8013940:	6823      	ldr	r3, [r4, #0]
 8013942:	4620      	mov	r0, r4
 8013944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801394a:	4718      	bx	r3

0801394c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801394c:	b508      	push	{r3, lr}
 801394e:	290c      	cmp	r1, #12
 8013950:	d817      	bhi.n	8013982 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8013952:	e8df f001 	tbb	[pc, r1]
 8013956:	090b      	.short	0x090b
 8013958:	0d0d0d07 	.word	0x0d0d0d07
 801395c:	1414140d 	.word	0x1414140d
 8013960:	1414      	.short	0x1414
 8013962:	0d          	.byte	0x0d
 8013963:	00          	.byte	0x00
 8013964:	2020      	movs	r0, #32
 8013966:	bd08      	pop	{r3, pc}
 8013968:	2018      	movs	r0, #24
 801396a:	e7fc      	b.n	8013966 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801396c:	2010      	movs	r0, #16
 801396e:	e7fa      	b.n	8013966 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013970:	4b05      	ldr	r3, [pc, #20]	; (8013988 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8013972:	4a06      	ldr	r2, [pc, #24]	; (801398c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8013974:	4806      	ldr	r0, [pc, #24]	; (8013990 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8013976:	f44f 710c 	mov.w	r1, #560	; 0x230
 801397a:	f00f fe01 	bl	8023580 <__assert_func>
 801397e:	2008      	movs	r0, #8
 8013980:	e7f1      	b.n	8013966 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013982:	2000      	movs	r0, #0
 8013984:	e7ef      	b.n	8013966 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013986:	bf00      	nop
 8013988:	08026e81 	.word	0x08026e81
 801398c:	08027214 	.word	0x08027214
 8013990:	08026d88 	.word	0x08026d88

08013994 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8013994:	b570      	push	{r4, r5, r6, lr}
 8013996:	460d      	mov	r5, r1
 8013998:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801399c:	4616      	mov	r6, r2
 801399e:	461c      	mov	r4, r3
 80139a0:	f7ff ffd4 	bl	801394c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80139a4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80139a8:	10c0      	asrs	r0, r0, #3
 80139aa:	fb06 5101 	mla	r1, r6, r1, r5
 80139ae:	fb00 4001 	mla	r0, r0, r1, r4
 80139b2:	bd70      	pop	{r4, r5, r6, pc}

080139b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80139b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b8:	b08a      	sub	sp, #40	; 0x28
 80139ba:	f04f 0c00 	mov.w	ip, #0
 80139be:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80139c2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80139c6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80139ca:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80139ce:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80139d2:	f8cd c020 	str.w	ip, [sp, #32]
 80139d6:	f1b8 0f02 	cmp.w	r8, #2
 80139da:	4604      	mov	r4, r0
 80139dc:	469a      	mov	sl, r3
 80139de:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80139e2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80139e6:	d030      	beq.n	8013a4a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80139e8:	2bff      	cmp	r3, #255	; 0xff
 80139ea:	d12c      	bne.n	8013a46 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80139ec:	4560      	cmp	r0, ip
 80139ee:	bf14      	ite	ne
 80139f0:	2004      	movne	r0, #4
 80139f2:	2001      	moveq	r0, #1
 80139f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139f8:	9204      	str	r2, [sp, #16]
 80139fa:	4620      	mov	r0, r4
 80139fc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8013a00:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013a04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013a08:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013a0c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013a10:	f7ff ff5e 	bl	80138d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a14:	e9cd 9700 	strd	r9, r7, [sp]
 8013a18:	4603      	mov	r3, r0
 8013a1a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8013a1e:	4651      	mov	r1, sl
 8013a20:	4620      	mov	r0, r4
 8013a22:	f7ff ffb7 	bl	8013994 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013a26:	f8ad 901e 	strh.w	r9, [sp, #30]
 8013a2a:	9005      	str	r0, [sp, #20]
 8013a2c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8013a30:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8013a34:	b106      	cbz	r6, 8013a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8013a36:	b98d      	cbnz	r5, 8013a5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8013a38:	4b12      	ldr	r3, [pc, #72]	; (8013a84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8013a3a:	4a13      	ldr	r2, [pc, #76]	; (8013a88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8013a3c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8013a40:	4812      	ldr	r0, [pc, #72]	; (8013a8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8013a42:	f00f fd9d 	bl	8023580 <__assert_func>
 8013a46:	2004      	movs	r0, #4
 8013a48:	e7d4      	b.n	80139f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013a4a:	2bff      	cmp	r3, #255	; 0xff
 8013a4c:	d104      	bne.n	8013a58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	bf14      	ite	ne
 8013a52:	2040      	movne	r0, #64	; 0x40
 8013a54:	2020      	moveq	r0, #32
 8013a56:	e7cd      	b.n	80139f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013a58:	2040      	movs	r0, #64	; 0x40
 8013a5a:	e7cb      	b.n	80139f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013a5c:	6823      	ldr	r3, [r4, #0]
 8013a5e:	9d02      	ldr	r5, [sp, #8]
 8013a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a62:	4620      	mov	r0, r4
 8013a64:	4798      	blx	r3
 8013a66:	4228      	tst	r0, r5
 8013a68:	d104      	bne.n	8013a74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8013a6a:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8013a6c:	4a06      	ldr	r2, [pc, #24]	; (8013a88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8013a6e:	f240 11b1 	movw	r1, #433	; 0x1b1
 8013a72:	e7e5      	b.n	8013a40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8013a74:	6860      	ldr	r0, [r4, #4]
 8013a76:	6803      	ldr	r3, [r0, #0]
 8013a78:	a902      	add	r1, sp, #8
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	4798      	blx	r3
 8013a7e:	b00a      	add	sp, #40	; 0x28
 8013a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a84:	08026e04 	.word	0x08026e04
 8013a88:	080270b6 	.word	0x080270b6
 8013a8c:	08026d88 	.word	0x08026d88
 8013a90:	08026e3c 	.word	0x08026e3c

08013a94 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8013a94:	b510      	push	{r4, lr}
 8013a96:	b08a      	sub	sp, #40	; 0x28
 8013a98:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8013a9c:	9408      	str	r4, [sp, #32]
 8013a9e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8013aa2:	9407      	str	r4, [sp, #28]
 8013aa4:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8013aa8:	9406      	str	r4, [sp, #24]
 8013aaa:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8013aae:	9405      	str	r4, [sp, #20]
 8013ab0:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8013ab4:	9404      	str	r4, [sp, #16]
 8013ab6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8013aba:	9403      	str	r4, [sp, #12]
 8013abc:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8013ac0:	9402      	str	r4, [sp, #8]
 8013ac2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8013ac6:	e9cd 3400 	strd	r3, r4, [sp]
 8013aca:	4613      	mov	r3, r2
 8013acc:	2200      	movs	r2, #0
 8013ace:	f7ff ff71 	bl	80139b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013ad2:	b00a      	add	sp, #40	; 0x28
 8013ad4:	bd10      	pop	{r4, pc}
	...

08013ad8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8013ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ada:	b08b      	sub	sp, #44	; 0x2c
 8013adc:	4616      	mov	r6, r2
 8013ade:	460d      	mov	r5, r1
 8013ae0:	461f      	mov	r7, r3
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	f7f8 fe02 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8013ae8:	6803      	ldr	r3, [r0, #0]
 8013aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aec:	4798      	blx	r3
 8013aee:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013af2:	4b0d      	ldr	r3, [pc, #52]	; (8013b28 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	9306      	str	r3, [sp, #24]
 8013af8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013afc:	9305      	str	r3, [sp, #20]
 8013afe:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013b02:	9304      	str	r3, [sp, #16]
 8013b04:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013b08:	9303      	str	r3, [sp, #12]
 8013b0a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013b0e:	9302      	str	r3, [sp, #8]
 8013b10:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013b14:	2200      	movs	r2, #0
 8013b16:	e9cd 7300 	strd	r7, r3, [sp]
 8013b1a:	4629      	mov	r1, r5
 8013b1c:	4633      	mov	r3, r6
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f7ff ff48 	bl	80139b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013b24:	b00b      	add	sp, #44	; 0x2c
 8013b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b28:	2002b082 	.word	0x2002b082

08013b2c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8013b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b30:	461f      	mov	r7, r3
 8013b32:	4b14      	ldr	r3, [pc, #80]	; (8013b84 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8013b34:	b08a      	sub	sp, #40	; 0x28
 8013b36:	4616      	mov	r6, r2
 8013b38:	f8b3 8000 	ldrh.w	r8, [r3]
 8013b3c:	460d      	mov	r5, r1
 8013b3e:	4604      	mov	r4, r0
 8013b40:	f7f8 fdd4 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8013b44:	6803      	ldr	r3, [r0, #0]
 8013b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b48:	4798      	blx	r3
 8013b4a:	2302      	movs	r3, #2
 8013b4c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8013b50:	2301      	movs	r3, #1
 8013b52:	9305      	str	r3, [sp, #20]
 8013b54:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013b58:	9304      	str	r3, [sp, #16]
 8013b5a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013b5e:	9303      	str	r3, [sp, #12]
 8013b60:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013b64:	9302      	str	r3, [sp, #8]
 8013b66:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013b6a:	9008      	str	r0, [sp, #32]
 8013b6c:	e9cd 7300 	strd	r7, r3, [sp]
 8013b70:	2200      	movs	r2, #0
 8013b72:	4633      	mov	r3, r6
 8013b74:	4629      	mov	r1, r5
 8013b76:	4620      	mov	r0, r4
 8013b78:	f7ff ff1c 	bl	80139b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013b7c:	b00a      	add	sp, #40	; 0x28
 8013b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b82:	bf00      	nop
 8013b84:	2002b082 	.word	0x2002b082

08013b88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8013b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b8c:	b08b      	sub	sp, #44	; 0x2c
 8013b8e:	469b      	mov	fp, r3
 8013b90:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8013b94:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8013b98:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8013b9c:	2fff      	cmp	r7, #255	; 0xff
 8013b9e:	bf14      	ite	ne
 8013ba0:	2308      	movne	r3, #8
 8013ba2:	2302      	moveq	r3, #2
 8013ba4:	2600      	movs	r6, #0
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	4689      	mov	r9, r1
 8013baa:	4692      	mov	sl, r2
 8013bac:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8013bb0:	9608      	str	r6, [sp, #32]
 8013bb2:	f7ff fe8d 	bl	80138d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013bb6:	e9cd 8500 	strd	r8, r5, [sp]
 8013bba:	4603      	mov	r3, r0
 8013bbc:	465a      	mov	r2, fp
 8013bbe:	4651      	mov	r1, sl
 8013bc0:	4620      	mov	r0, r4
 8013bc2:	f7ff fee7 	bl	8013994 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013bc6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013bca:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013bce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013bd2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013bd6:	6823      	ldr	r3, [r4, #0]
 8013bd8:	9005      	str	r0, [sp, #20]
 8013bda:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8013bde:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8013be2:	f8ad 601c 	strh.w	r6, [sp, #28]
 8013be6:	f8ad 801e 	strh.w	r8, [sp, #30]
 8013bea:	f8cd 9020 	str.w	r9, [sp, #32]
 8013bee:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8013bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bf4:	9d02      	ldr	r5, [sp, #8]
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	4798      	blx	r3
 8013bfa:	4228      	tst	r0, r5
 8013bfc:	d106      	bne.n	8013c0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8013bfe:	4b07      	ldr	r3, [pc, #28]	; (8013c1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8013c00:	4a07      	ldr	r2, [pc, #28]	; (8013c20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8013c02:	4808      	ldr	r0, [pc, #32]	; (8013c24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8013c04:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8013c08:	f00f fcba 	bl	8023580 <__assert_func>
 8013c0c:	6860      	ldr	r0, [r4, #4]
 8013c0e:	6803      	ldr	r3, [r0, #0]
 8013c10:	a902      	add	r1, sp, #8
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	4798      	blx	r3
 8013c16:	b00b      	add	sp, #44	; 0x2c
 8013c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c1c:	08026e3c 	.word	0x08026e3c
 8013c20:	0802717f 	.word	0x0802717f
 8013c24:	08026d88 	.word	0x08026d88

08013c28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013c2c:	461f      	mov	r7, r3
 8013c2e:	4b0b      	ldr	r3, [pc, #44]	; (8013c5c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013c30:	460d      	mov	r5, r1
 8013c32:	f8b3 8000 	ldrh.w	r8, [r3]
 8013c36:	4616      	mov	r6, r2
 8013c38:	4604      	mov	r4, r0
 8013c3a:	f7f8 fd57 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8013c3e:	6803      	ldr	r3, [r0, #0]
 8013c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c42:	4798      	blx	r3
 8013c44:	463b      	mov	r3, r7
 8013c46:	e9cd 8000 	strd	r8, r0, [sp]
 8013c4a:	4632      	mov	r2, r6
 8013c4c:	4629      	mov	r1, r5
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f7ff fea0 	bl	8013994 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013c54:	b002      	add	sp, #8
 8013c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c5a:	bf00      	nop
 8013c5c:	2002b082 	.word	0x2002b082

08013c60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8013c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c64:	b088      	sub	sp, #32
 8013c66:	4698      	mov	r8, r3
 8013c68:	2300      	movs	r3, #0
 8013c6a:	9306      	str	r3, [sp, #24]
 8013c6c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013c70:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8013c74:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013c78:	f8ad 6010 	strh.w	r6, [sp, #16]
 8013c7c:	e9cd 3100 	strd	r3, r1, [sp]
 8013c80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013c84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013c88:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8013c8c:	f88d 301c 	strb.w	r3, [sp, #28]
 8013c90:	4617      	mov	r7, r2
 8013c92:	4604      	mov	r4, r0
 8013c94:	f8ad 5012 	strh.w	r5, [sp, #18]
 8013c98:	f7ff fe1a 	bl	80138d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c9c:	4642      	mov	r2, r8
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	4639      	mov	r1, r7
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	f7ff ffc0 	bl	8013c28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013ca8:	4b16      	ldr	r3, [pc, #88]	; (8013d04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8013caa:	9003      	str	r0, [sp, #12]
 8013cac:	881b      	ldrh	r3, [r3, #0]
 8013cae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013cb2:	f7f8 fd1b 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8013cb6:	6803      	ldr	r3, [r0, #0]
 8013cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cba:	4798      	blx	r3
 8013cbc:	f88d 001e 	strb.w	r0, [sp, #30]
 8013cc0:	f88d 001d 	strb.w	r0, [sp, #29]
 8013cc4:	b106      	cbz	r6, 8013cc8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8013cc6:	b935      	cbnz	r5, 8013cd6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8013cc8:	4b0f      	ldr	r3, [pc, #60]	; (8013d08 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8013cca:	4a10      	ldr	r2, [pc, #64]	; (8013d0c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8013ccc:	f240 11cd 	movw	r1, #461	; 0x1cd
 8013cd0:	480f      	ldr	r0, [pc, #60]	; (8013d10 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8013cd2:	f00f fc55 	bl	8023580 <__assert_func>
 8013cd6:	6823      	ldr	r3, [r4, #0]
 8013cd8:	9d00      	ldr	r5, [sp, #0]
 8013cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cdc:	4620      	mov	r0, r4
 8013cde:	4798      	blx	r3
 8013ce0:	4228      	tst	r0, r5
 8013ce2:	d104      	bne.n	8013cee <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8013ce4:	4b0b      	ldr	r3, [pc, #44]	; (8013d14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8013ce6:	4a09      	ldr	r2, [pc, #36]	; (8013d0c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8013ce8:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8013cec:	e7f0      	b.n	8013cd0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8013cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013cf0:	6860      	ldr	r0, [r4, #4]
 8013cf2:	9306      	str	r3, [sp, #24]
 8013cf4:	6803      	ldr	r3, [r0, #0]
 8013cf6:	4669      	mov	r1, sp
 8013cf8:	685b      	ldr	r3, [r3, #4]
 8013cfa:	4798      	blx	r3
 8013cfc:	b008      	add	sp, #32
 8013cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d02:	bf00      	nop
 8013d04:	2002b082 	.word	0x2002b082
 8013d08:	08026e04 	.word	0x08026e04
 8013d0c:	08026f68 	.word	0x08026f68
 8013d10:	08026d88 	.word	0x08026d88
 8013d14:	08026e3c 	.word	0x08026e3c

08013d18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013d18:	b570      	push	{r4, r5, r6, lr}
 8013d1a:	b08a      	sub	sp, #40	; 0x28
 8013d1c:	466b      	mov	r3, sp
 8013d1e:	e883 0006 	stmia.w	r3, {r1, r2}
 8013d22:	4b20      	ldr	r3, [pc, #128]	; (8013da4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8013d24:	781b      	ldrb	r3, [r3, #0]
 8013d26:	4604      	mov	r4, r0
 8013d28:	b933      	cbnz	r3, 8013d38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8013d2a:	4b1f      	ldr	r3, [pc, #124]	; (8013da8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8013d2c:	4a1f      	ldr	r2, [pc, #124]	; (8013dac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8013d2e:	4820      	ldr	r0, [pc, #128]	; (8013db0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8013d30:	f240 11f9 	movw	r1, #505	; 0x1f9
 8013d34:	f00f fc24 	bl	8023580 <__assert_func>
 8013d38:	2300      	movs	r3, #0
 8013d3a:	9308      	str	r3, [sp, #32]
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	9302      	str	r3, [sp, #8]
 8013d40:	6803      	ldr	r3, [r0, #0]
 8013d42:	f8bd 5000 	ldrh.w	r5, [sp]
 8013d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d48:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8013d4c:	4798      	blx	r3
 8013d4e:	4632      	mov	r2, r6
 8013d50:	4629      	mov	r1, r5
 8013d52:	4603      	mov	r3, r0
 8013d54:	4620      	mov	r0, r4
 8013d56:	f7ff ff67 	bl	8013c28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013d5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013d5c:	9305      	str	r3, [sp, #20]
 8013d5e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013d62:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013d66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013d6a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013d6e:	4b11      	ldr	r3, [pc, #68]	; (8013db4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8013d70:	9003      	str	r0, [sp, #12]
 8013d72:	881b      	ldrh	r3, [r3, #0]
 8013d74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013d78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013d7c:	f7f8 fcb6 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8013d80:	6803      	ldr	r3, [r0, #0]
 8013d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d84:	4798      	blx	r3
 8013d86:	23ff      	movs	r3, #255	; 0xff
 8013d88:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013d8c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8013d90:	6860      	ldr	r0, [r4, #4]
 8013d92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013d96:	6803      	ldr	r3, [r0, #0]
 8013d98:	a902      	add	r1, sp, #8
 8013d9a:	685b      	ldr	r3, [r3, #4]
 8013d9c:	4798      	blx	r3
 8013d9e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013da0:	b00a      	add	sp, #40	; 0x28
 8013da2:	bd70      	pop	{r4, r5, r6, pc}
 8013da4:	2002b087 	.word	0x2002b087
 8013da8:	08026cd5 	.word	0x08026cd5
 8013dac:	0802700c 	.word	0x0802700c
 8013db0:	08026d88 	.word	0x08026d88
 8013db4:	2002b082 	.word	0x2002b082

08013db8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dba:	b08b      	sub	sp, #44	; 0x2c
 8013dbc:	466d      	mov	r5, sp
 8013dbe:	e885 0006 	stmia.w	r5, {r1, r2}
 8013dc2:	461d      	mov	r5, r3
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	9308      	str	r3, [sp, #32]
 8013dc8:	2301      	movs	r3, #1
 8013dca:	9302      	str	r3, [sp, #8]
 8013dcc:	6803      	ldr	r3, [r0, #0]
 8013dce:	f8bd 6000 	ldrh.w	r6, [sp]
 8013dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dd4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013dd8:	4604      	mov	r4, r0
 8013dda:	4798      	blx	r3
 8013ddc:	463a      	mov	r2, r7
 8013dde:	4631      	mov	r1, r6
 8013de0:	4603      	mov	r3, r0
 8013de2:	4620      	mov	r0, r4
 8013de4:	f7ff ff20 	bl	8013c28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013de8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013dec:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013df0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013df4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013df8:	4b0e      	ldr	r3, [pc, #56]	; (8013e34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8013dfa:	9003      	str	r0, [sp, #12]
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e04:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013e08:	9505      	str	r5, [sp, #20]
 8013e0a:	f7f8 fc6f 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8013e0e:	6803      	ldr	r3, [r0, #0]
 8013e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e12:	4798      	blx	r3
 8013e14:	23ff      	movs	r3, #255	; 0xff
 8013e16:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013e1a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8013e1e:	6860      	ldr	r0, [r4, #4]
 8013e20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013e24:	6803      	ldr	r3, [r0, #0]
 8013e26:	a902      	add	r1, sp, #8
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	4798      	blx	r3
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	b00b      	add	sp, #44	; 0x2c
 8013e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e32:	bf00      	nop
 8013e34:	2002b082 	.word	0x2002b082

08013e38 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013e38:	b570      	push	{r4, r5, r6, lr}
 8013e3a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8013e3e:	4604      	mov	r4, r0
 8013e40:	b19b      	cbz	r3, 8013e6a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013e42:	2002      	movs	r0, #2
 8013e44:	f7fc ff14 	bl	8010c70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013e48:	2300      	movs	r3, #0
 8013e4a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013e4e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013e52:	6823      	ldr	r3, [r4, #0]
 8013e54:	4620      	mov	r0, r4
 8013e56:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8013e5a:	f7ff fd39 	bl	80138d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013e5e:	462b      	mov	r3, r5
 8013e60:	4601      	mov	r1, r0
 8013e62:	4620      	mov	r0, r4
 8013e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e68:	4718      	bx	r3
 8013e6a:	bd70      	pop	{r4, r5, r6, pc}

08013e6c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013e6c:	4770      	bx	lr

08013e6e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013e6e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013e72:	1a13      	subs	r3, r2, r0
 8013e74:	4258      	negs	r0, r3
 8013e76:	4158      	adcs	r0, r3
 8013e78:	4770      	bx	lr

08013e7a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013e7a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013e7e:	1a9b      	subs	r3, r3, r2
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	bfdc      	itt	le
 8013e84:	6882      	ldrle	r2, [r0, #8]
 8013e86:	189b      	addle	r3, r3, r2
 8013e88:	2b01      	cmp	r3, #1
 8013e8a:	bfcc      	ite	gt
 8013e8c:	2000      	movgt	r0, #0
 8013e8e:	2001      	movle	r0, #1
 8013e90:	4770      	bx	lr

08013e92 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013e92:	6902      	ldr	r2, [r0, #16]
 8013e94:	6840      	ldr	r0, [r0, #4]
 8013e96:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8013e9a:	4770      	bx	lr

08013e9c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013e9c:	6803      	ldr	r3, [r0, #0]
 8013e9e:	691b      	ldr	r3, [r3, #16]
 8013ea0:	4718      	bx	r3

08013ea2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013ea2:	4770      	bx	lr

08013ea4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013ea4:	4770      	bx	lr
	...

08013ea8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013ea8:	b570      	push	{r4, r5, r6, lr}
 8013eaa:	2301      	movs	r3, #1
 8013eac:	7203      	strb	r3, [r0, #8]
 8013eae:	4604      	mov	r4, r0
 8013eb0:	6840      	ldr	r0, [r0, #4]
 8013eb2:	6803      	ldr	r3, [r0, #0]
 8013eb4:	699b      	ldr	r3, [r3, #24]
 8013eb6:	4798      	blx	r3
 8013eb8:	6803      	ldr	r3, [r0, #0]
 8013eba:	2b08      	cmp	r3, #8
 8013ebc:	4605      	mov	r5, r0
 8013ebe:	d01e      	beq.n	8013efe <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8013ec0:	d80b      	bhi.n	8013eda <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013ec2:	2b02      	cmp	r3, #2
 8013ec4:	d027      	beq.n	8013f16 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8013ec6:	2b04      	cmp	r3, #4
 8013ec8:	d011      	beq.n	8013eee <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8013eca:	2b01      	cmp	r3, #1
 8013ecc:	d028      	beq.n	8013f20 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013ece:	4b17      	ldr	r3, [pc, #92]	; (8013f2c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8013ed0:	4a17      	ldr	r2, [pc, #92]	; (8013f30 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8013ed2:	4818      	ldr	r0, [pc, #96]	; (8013f34 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8013ed4:	218b      	movs	r1, #139	; 0x8b
 8013ed6:	f00f fb53 	bl	8023580 <__assert_func>
 8013eda:	2b40      	cmp	r3, #64	; 0x40
 8013edc:	d020      	beq.n	8013f20 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013ede:	d801      	bhi.n	8013ee4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013ee0:	2b20      	cmp	r3, #32
 8013ee2:	e7f3      	b.n	8013ecc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8013ee4:	2b80      	cmp	r3, #128	; 0x80
 8013ee6:	d01b      	beq.n	8013f20 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013eec:	e7ee      	b.n	8013ecc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8013eee:	6823      	ldr	r3, [r4, #0]
 8013ef0:	7f01      	ldrb	r1, [r0, #28]
 8013ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	4798      	blx	r3
 8013ef8:	6823      	ldr	r3, [r4, #0]
 8013efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013efc:	e006      	b.n	8013f0c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013efe:	6823      	ldr	r3, [r4, #0]
 8013f00:	7f01      	ldrb	r1, [r0, #28]
 8013f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f04:	4620      	mov	r0, r4
 8013f06:	4798      	blx	r3
 8013f08:	6823      	ldr	r3, [r4, #0]
 8013f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	4620      	mov	r0, r4
 8013f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f14:	4718      	bx	r3
 8013f16:	6823      	ldr	r3, [r4, #0]
 8013f18:	4620      	mov	r0, r4
 8013f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f1c:	4798      	blx	r3
 8013f1e:	e7f3      	b.n	8013f08 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8013f20:	6823      	ldr	r3, [r4, #0]
 8013f22:	4620      	mov	r0, r4
 8013f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f26:	4798      	blx	r3
 8013f28:	e7e6      	b.n	8013ef8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8013f2a:	bf00      	nop
 8013f2c:	0802725d 	.word	0x0802725d
 8013f30:	0802736c 	.word	0x0802736c
 8013f34:	08027282 	.word	0x08027282

08013f38 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013f38:	b570      	push	{r4, r5, r6, lr}
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	460e      	mov	r6, r1
 8013f3e:	6860      	ldr	r0, [r4, #4]
 8013f40:	6803      	ldr	r3, [r0, #0]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	4798      	blx	r3
 8013f46:	2800      	cmp	r0, #0
 8013f48:	d1f9      	bne.n	8013f3e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013f4a:	4d0b      	ldr	r5, [pc, #44]	; (8013f78 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8013f4c:	6828      	ldr	r0, [r5, #0]
 8013f4e:	6803      	ldr	r3, [r0, #0]
 8013f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013f52:	4798      	blx	r3
 8013f54:	f7fd f940 	bl	80111d8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013f58:	6860      	ldr	r0, [r4, #4]
 8013f5a:	6803      	ldr	r3, [r0, #0]
 8013f5c:	4631      	mov	r1, r6
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	4798      	blx	r3
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	4620      	mov	r0, r4
 8013f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f68:	4798      	blx	r3
 8013f6a:	6828      	ldr	r0, [r5, #0]
 8013f6c:	6803      	ldr	r3, [r0, #0]
 8013f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013f74:	4718      	bx	r3
 8013f76:	bf00      	nop
 8013f78:	2002b088 	.word	0x2002b088

08013f7c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013f7c:	b508      	push	{r3, lr}
 8013f7e:	f7fd f90f 	bl	80111a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013f82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013f86:	f7fd b919 	b.w	80111bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013f8a <_ZN8touchgfx13DMA_Interface5startEv>:
 8013f8a:	b510      	push	{r4, lr}
 8013f8c:	4604      	mov	r4, r0
 8013f8e:	6840      	ldr	r0, [r0, #4]
 8013f90:	6803      	ldr	r3, [r0, #0]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4798      	blx	r3
 8013f96:	b948      	cbnz	r0, 8013fac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013f98:	7a63      	ldrb	r3, [r4, #9]
 8013f9a:	b13b      	cbz	r3, 8013fac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013f9c:	7a23      	ldrb	r3, [r4, #8]
 8013f9e:	b92b      	cbnz	r3, 8013fac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013faa:	4718      	bx	r3
 8013fac:	bd10      	pop	{r4, pc}
	...

08013fb0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013fb0:	b510      	push	{r4, lr}
 8013fb2:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8013fb6:	1b12      	subs	r2, r2, r4
 8013fb8:	2a00      	cmp	r2, #0
 8013fba:	bfdc      	itt	le
 8013fbc:	6883      	ldrle	r3, [r0, #8]
 8013fbe:	18d2      	addle	r2, r2, r3
 8013fc0:	2a01      	cmp	r2, #1
 8013fc2:	dd18      	ble.n	8013ff6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8013fc4:	6843      	ldr	r3, [r0, #4]
 8013fc6:	f101 021c 	add.w	r2, r1, #28
 8013fca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8013fce:	f851 4b04 	ldr.w	r4, [r1], #4
 8013fd2:	f843 4b04 	str.w	r4, [r3], #4
 8013fd6:	4291      	cmp	r1, r2
 8013fd8:	d1f9      	bne.n	8013fce <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8013fda:	880a      	ldrh	r2, [r1, #0]
 8013fdc:	801a      	strh	r2, [r3, #0]
 8013fde:	788a      	ldrb	r2, [r1, #2]
 8013fe0:	709a      	strb	r2, [r3, #2]
 8013fe2:	68c3      	ldr	r3, [r0, #12]
 8013fe4:	6882      	ldr	r2, [r0, #8]
 8013fe6:	f3bf 8f5b 	dmb	ish
 8013fea:	3301      	adds	r3, #1
 8013fec:	429a      	cmp	r2, r3
 8013fee:	bfd8      	it	le
 8013ff0:	1a9b      	suble	r3, r3, r2
 8013ff2:	60c3      	str	r3, [r0, #12]
 8013ff4:	bd10      	pop	{r4, pc}
 8013ff6:	4b03      	ldr	r3, [pc, #12]	; (8014004 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8013ff8:	4a03      	ldr	r2, [pc, #12]	; (8014008 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8013ffa:	4804      	ldr	r0, [pc, #16]	; (801400c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8013ffc:	2139      	movs	r1, #57	; 0x39
 8013ffe:	f00f fabf 	bl	8023580 <__assert_func>
 8014002:	bf00      	nop
 8014004:	080272a8 	.word	0x080272a8
 8014008:	0802739c 	.word	0x0802739c
 801400c:	08027282 	.word	0x08027282

08014010 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014010:	b510      	push	{r4, lr}
 8014012:	6803      	ldr	r3, [r0, #0]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	4604      	mov	r4, r0
 8014018:	4798      	blx	r3
 801401a:	b128      	cbz	r0, 8014028 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801401c:	4b07      	ldr	r3, [pc, #28]	; (801403c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801401e:	4a08      	ldr	r2, [pc, #32]	; (8014040 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8014020:	4808      	ldr	r0, [pc, #32]	; (8014044 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8014022:	213f      	movs	r1, #63	; 0x3f
 8014024:	f00f faac 	bl	8023580 <__assert_func>
 8014028:	6923      	ldr	r3, [r4, #16]
 801402a:	68a2      	ldr	r2, [r4, #8]
 801402c:	f3bf 8f5b 	dmb	ish
 8014030:	3301      	adds	r3, #1
 8014032:	429a      	cmp	r2, r3
 8014034:	bfd8      	it	le
 8014036:	1a9b      	suble	r3, r3, r2
 8014038:	6123      	str	r3, [r4, #16]
 801403a:	bd10      	pop	{r4, pc}
 801403c:	080272cb 	.word	0x080272cb
 8014040:	080273ea 	.word	0x080273ea
 8014044:	08027282 	.word	0x08027282

08014048 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014048:	b570      	push	{r4, r5, r6, lr}
 801404a:	4604      	mov	r4, r0
 801404c:	6840      	ldr	r0, [r0, #4]
 801404e:	6803      	ldr	r3, [r0, #0]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	4798      	blx	r3
 8014054:	4605      	mov	r5, r0
 8014056:	b930      	cbnz	r0, 8014066 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014058:	7a23      	ldrb	r3, [r4, #8]
 801405a:	b123      	cbz	r3, 8014066 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801405c:	6860      	ldr	r0, [r4, #4]
 801405e:	6803      	ldr	r3, [r0, #0]
 8014060:	695b      	ldr	r3, [r3, #20]
 8014062:	4798      	blx	r3
 8014064:	7225      	strb	r5, [r4, #8]
 8014066:	6860      	ldr	r0, [r4, #4]
 8014068:	6803      	ldr	r3, [r0, #0]
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	4798      	blx	r3
 801406e:	b928      	cbnz	r0, 801407c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014070:	6823      	ldr	r3, [r4, #0]
 8014072:	4620      	mov	r0, r4
 8014074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801407a:	4718      	bx	r3
 801407c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014080:	f7fd b8b6 	b.w	80111f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08014084 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014084:	b510      	push	{r4, lr}
 8014086:	4c04      	ldr	r4, [pc, #16]	; (8014098 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014088:	6082      	str	r2, [r0, #8]
 801408a:	2200      	movs	r2, #0
 801408c:	e9c0 4100 	strd	r4, r1, [r0]
 8014090:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014094:	bd10      	pop	{r4, pc}
 8014096:	bf00      	nop
 8014098:	08027350 	.word	0x08027350

0801409c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801409c:	6840      	ldr	r0, [r0, #4]
 801409e:	6803      	ldr	r3, [r0, #0]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4718      	bx	r3

080140a4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80140a4:	b570      	push	{r4, r5, r6, lr}
 80140a6:	790b      	ldrb	r3, [r1, #4]
 80140a8:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	bf0c      	ite	eq
 80140b0:	2301      	moveq	r3, #1
 80140b2:	2300      	movne	r3, #0
 80140b4:	4604      	mov	r4, r0
 80140b6:	460e      	mov	r6, r1
 80140b8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80140bc:	d110      	bne.n	80140e0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80140be:	b185      	cbz	r5, 80140e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 80140c0:	7933      	ldrb	r3, [r6, #4]
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d113      	bne.n	80140ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80140c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80140c8:	b188      	cbz	r0, 80140ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80140ca:	6803      	ldr	r3, [r0, #0]
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	4798      	blx	r3
 80140d0:	b168      	cbz	r0, 80140ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80140d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80140d4:	6803      	ldr	r3, [r0, #0]
 80140d6:	4621      	mov	r1, r4
 80140d8:	689b      	ldr	r3, [r3, #8]
 80140da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140de:	4718      	bx	r3
 80140e0:	b12d      	cbz	r5, 80140ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80140e2:	6823      	ldr	r3, [r4, #0]
 80140e4:	4620      	mov	r0, r4
 80140e6:	695b      	ldr	r3, [r3, #20]
 80140e8:	4798      	blx	r3
 80140ea:	2d00      	cmp	r5, #0
 80140ec:	d1e8      	bne.n	80140c0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80140ee:	bd70      	pop	{r4, r5, r6, pc}

080140f0 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 80140f0:	4770      	bx	lr

080140f2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80140f2:	6803      	ldr	r3, [r0, #0]
 80140f4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80140f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140fa:	4718      	bx	r3

080140fc <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 80140fc:	b510      	push	{r4, lr}
 80140fe:	212c      	movs	r1, #44	; 0x2c
 8014100:	4604      	mov	r4, r0
 8014102:	f00f fa11 	bl	8023528 <_ZdlPvj>
 8014106:	4620      	mov	r0, r4
 8014108:	bd10      	pop	{r4, pc}

0801410a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801410a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801410e:	2bff      	cmp	r3, #255	; 0xff
 8014110:	b510      	push	{r4, lr}
 8014112:	d104      	bne.n	801411e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8014114:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8014116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801411a:	429a      	cmp	r2, r3
 801411c:	d105      	bne.n	801412a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801411e:	2300      	movs	r3, #0
 8014120:	8003      	strh	r3, [r0, #0]
 8014122:	8043      	strh	r3, [r0, #2]
 8014124:	8083      	strh	r3, [r0, #4]
 8014126:	80c3      	strh	r3, [r0, #6]
 8014128:	bd10      	pop	{r4, pc}
 801412a:	2300      	movs	r3, #0
 801412c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014130:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8014134:	8003      	strh	r3, [r0, #0]
 8014136:	8043      	strh	r3, [r0, #2]
 8014138:	8084      	strh	r4, [r0, #4]
 801413a:	80c2      	strh	r2, [r0, #6]
 801413c:	e7f4      	b.n	8014128 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801413e <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801413e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014142:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8014146:	b087      	sub	sp, #28
 8014148:	4604      	mov	r4, r0
 801414a:	4689      	mov	r9, r1
 801414c:	b363      	cbz	r3, 80141a8 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801414e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8014150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014154:	429a      	cmp	r2, r3
 8014156:	d027      	beq.n	80141a8 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8014158:	ad06      	add	r5, sp, #24
 801415a:	2700      	movs	r7, #0
 801415c:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8014160:	4628      	mov	r0, r5
 8014162:	f003 fd55 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014166:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801416a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801416e:	6823      	ldr	r3, [r4, #0]
 8014170:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014174:	a904      	add	r1, sp, #16
 8014176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014178:	9704      	str	r7, [sp, #16]
 801417a:	4620      	mov	r0, r4
 801417c:	4798      	blx	r3
 801417e:	f7f8 fab5 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 8014182:	6803      	ldr	r3, [r0, #0]
 8014184:	4606      	mov	r6, r0
 8014186:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801418a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801418c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014190:	4628      	mov	r0, r5
 8014192:	f003 fe45 	bl	8017e20 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014196:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	4601      	mov	r1, r0
 801419e:	9701      	str	r7, [sp, #4]
 80141a0:	464b      	mov	r3, r9
 80141a2:	aa04      	add	r2, sp, #16
 80141a4:	4630      	mov	r0, r6
 80141a6:	47c0      	blx	r8
 80141a8:	b007      	add	sp, #28
 80141aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080141ae <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 80141ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80141b0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80141b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80141b8:	6803      	ldr	r3, [r0, #0]
 80141ba:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80141be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80141c2:	460d      	mov	r5, r1
 80141c4:	2100      	movs	r1, #0
 80141c6:	4604      	mov	r4, r0
 80141c8:	6a1b      	ldr	r3, [r3, #32]
 80141ca:	9100      	str	r1, [sp, #0]
 80141cc:	4669      	mov	r1, sp
 80141ce:	4798      	blx	r3
 80141d0:	4621      	mov	r1, r4
 80141d2:	a802      	add	r0, sp, #8
 80141d4:	f002 f8e1 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80141d8:	f7f8 fa88 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 80141dc:	6803      	ldr	r3, [r0, #0]
 80141de:	aa02      	add	r2, sp, #8
 80141e0:	699e      	ldr	r6, [r3, #24]
 80141e2:	4669      	mov	r1, sp
 80141e4:	462b      	mov	r3, r5
 80141e6:	47b0      	blx	r6
 80141e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141ec:	2800      	cmp	r0, #0
 80141ee:	bf08      	it	eq
 80141f0:	461d      	moveq	r5, r3
 80141f2:	84e5      	strh	r5, [r4, #38]	; 0x26
 80141f4:	b004      	add	sp, #16
 80141f6:	bd70      	pop	{r4, r5, r6, pc}

080141f8 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80141f8:	2200      	movs	r2, #0
 80141fa:	8082      	strh	r2, [r0, #4]
 80141fc:	80c2      	strh	r2, [r0, #6]
 80141fe:	8102      	strh	r2, [r0, #8]
 8014200:	8142      	strh	r2, [r0, #10]
 8014202:	8182      	strh	r2, [r0, #12]
 8014204:	81c2      	strh	r2, [r0, #14]
 8014206:	8202      	strh	r2, [r0, #16]
 8014208:	8242      	strh	r2, [r0, #18]
 801420a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801420e:	61c2      	str	r2, [r0, #28]
 8014210:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014214:	2201      	movs	r2, #1
 8014216:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801421a:	4a04      	ldr	r2, [pc, #16]	; (801422c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801421c:	6002      	str	r2, [r0, #0]
 801421e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014222:	84c2      	strh	r2, [r0, #38]	; 0x26
 8014224:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop
 801422c:	08027490 	.word	0x08027490

08014230 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8014230:	b570      	push	{r4, r5, r6, lr}
 8014232:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8014234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014238:	429a      	cmp	r2, r3
 801423a:	4604      	mov	r4, r0
 801423c:	d00c      	beq.n	8014258 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801423e:	f850 3b26 	ldr.w	r3, [r0], #38
 8014242:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8014244:	f7f9 feb6 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014248:	2300      	movs	r3, #0
 801424a:	4601      	mov	r1, r0
 801424c:	46ac      	mov	ip, r5
 801424e:	4620      	mov	r0, r4
 8014250:	461a      	mov	r2, r3
 8014252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014256:	4760      	bx	ip
 8014258:	2000      	movs	r0, #0
 801425a:	bd70      	pop	{r4, r5, r6, pc}

0801425c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801425c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801425e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8014260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014264:	429a      	cmp	r2, r3
 8014266:	d016      	beq.n	8014296 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8014268:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801426c:	4620      	mov	r0, r4
 801426e:	f7f7 fccb 	bl	800bc08 <_ZNK8touchgfx9TypedText7getFontEv>
 8014272:	6803      	ldr	r3, [r0, #0]
 8014274:	4605      	mov	r5, r0
 8014276:	4620      	mov	r0, r4
 8014278:	69de      	ldr	r6, [r3, #28]
 801427a:	f7f7 fce1 	bl	800bc40 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801427e:	4607      	mov	r7, r0
 8014280:	4620      	mov	r0, r4
 8014282:	f7f9 fe97 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014286:	2300      	movs	r3, #0
 8014288:	4602      	mov	r2, r0
 801428a:	9300      	str	r3, [sp, #0]
 801428c:	4639      	mov	r1, r7
 801428e:	4628      	mov	r0, r5
 8014290:	47b0      	blx	r6
 8014292:	b003      	add	sp, #12
 8014294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014296:	2000      	movs	r0, #0
 8014298:	e7fb      	b.n	8014292 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801429a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801429a:	b40e      	push	{r1, r2, r3}
 801429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80142a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142a6:	429a      	cmp	r2, r3
 80142a8:	b09b      	sub	sp, #108	; 0x6c
 80142aa:	4604      	mov	r4, r0
 80142ac:	d03f      	beq.n	801432e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 80142ae:	f100 0726 	add.w	r7, r0, #38	; 0x26
 80142b2:	ab22      	add	r3, sp, #136	; 0x88
 80142b4:	4638      	mov	r0, r7
 80142b6:	9303      	str	r3, [sp, #12]
 80142b8:	f7f7 fca6 	bl	800bc08 <_ZNK8touchgfx9TypedText7getFontEv>
 80142bc:	6803      	ldr	r3, [r0, #0]
 80142be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c0:	4680      	mov	r8, r0
 80142c2:	4798      	blx	r3
 80142c4:	b205      	sxth	r5, r0
 80142c6:	4606      	mov	r6, r0
 80142c8:	a804      	add	r0, sp, #16
 80142ca:	f002 fee5 	bl	8017098 <_ZN8touchgfx12TextProviderC1Ev>
 80142ce:	f8d8 3000 	ldr.w	r3, [r8]
 80142d2:	4640      	mov	r0, r8
 80142d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142d6:	4798      	blx	r3
 80142d8:	9a03      	ldr	r2, [sp, #12]
 80142da:	9921      	ldr	r1, [sp, #132]	; 0x84
 80142dc:	4603      	mov	r3, r0
 80142de:	a804      	add	r0, sp, #16
 80142e0:	f002 fef7 	bl	80170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80142e4:	4638      	mov	r0, r7
 80142e6:	f7f7 fcab 	bl	800bc40 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80142ea:	4680      	mov	r8, r0
 80142ec:	4638      	mov	r0, r7
 80142ee:	f7f7 fc8b 	bl	800bc08 <_ZNK8touchgfx9TypedText7getFontEv>
 80142f2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80142f6:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80142fa:	9300      	str	r3, [sp, #0]
 80142fc:	4642      	mov	r2, r8
 80142fe:	4603      	mov	r3, r0
 8014300:	a804      	add	r0, sp, #16
 8014302:	f000 ff5a 	bl	80151ba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8014306:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801430a:	18a9      	adds	r1, r5, r2
 801430c:	2900      	cmp	r1, #0
 801430e:	b203      	sxth	r3, r0
 8014310:	dd0b      	ble.n	801432a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8014312:	3b01      	subs	r3, #1
 8014314:	fb13 f302 	smulbb	r3, r3, r2
 8014318:	fb16 3300 	smlabb	r3, r6, r0, r3
 801431c:	b21d      	sxth	r5, r3
 801431e:	4628      	mov	r0, r5
 8014320:	b01b      	add	sp, #108	; 0x6c
 8014322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014326:	b003      	add	sp, #12
 8014328:	4770      	bx	lr
 801432a:	2b00      	cmp	r3, #0
 801432c:	dcf7      	bgt.n	801431e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801432e:	2500      	movs	r5, #0
 8014330:	e7f5      	b.n	801431e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

08014334 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8014334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014338:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801433a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801433e:	429e      	cmp	r6, r3
 8014340:	b08d      	sub	sp, #52	; 0x34
 8014342:	4604      	mov	r4, r0
 8014344:	4688      	mov	r8, r1
 8014346:	d04b      	beq.n	80143e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8014348:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801434c:	4628      	mov	r0, r5
 801434e:	f7f7 fc5b 	bl	800bc08 <_ZNK8touchgfx9TypedText7getFontEv>
 8014352:	4607      	mov	r7, r0
 8014354:	2800      	cmp	r0, #0
 8014356:	d043      	beq.n	80143e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8014358:	4628      	mov	r0, r5
 801435a:	f7f7 fc89 	bl	800bc70 <_ZNK8touchgfx9TypedText11assertValidEv>
 801435e:	4b22      	ldr	r3, [pc, #136]	; (80143e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8014360:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801436a:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801436e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014372:	4628      	mov	r0, r5
 8014374:	785e      	ldrb	r6, [r3, #1]
 8014376:	f7f7 fc63 	bl	800bc40 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801437a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801437c:	9309      	str	r3, [sp, #36]	; 0x24
 801437e:	4b1b      	ldr	r3, [pc, #108]	; (80143ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8014380:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801438a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801438e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8014392:	9707      	str	r7, [sp, #28]
 8014394:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8014398:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801439c:	f88d 6020 	strb.w	r6, [sp, #32]
 80143a0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80143a4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80143a8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80143ac:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80143b0:	b10a      	cbz	r2, 80143b6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 80143b2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80143b4:	b906      	cbnz	r6, 80143b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 80143b6:	689e      	ldr	r6, [r3, #8]
 80143b8:	af05      	add	r7, sp, #20
 80143ba:	4621      	mov	r1, r4
 80143bc:	4638      	mov	r0, r7
 80143be:	f001 ffec 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143c2:	4628      	mov	r0, r5
 80143c4:	f7f9 fdf6 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 80143c8:	2300      	movs	r3, #0
 80143ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80143ce:	ab07      	add	r3, sp, #28
 80143d0:	9001      	str	r0, [sp, #4]
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	e897 0006 	ldmia.w	r7, {r1, r2}
 80143d8:	4643      	mov	r3, r8
 80143da:	4630      	mov	r0, r6
 80143dc:	f000 fcb8 	bl	8014d50 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80143e0:	b00d      	add	sp, #52	; 0x34
 80143e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e6:	bf00      	nop
 80143e8:	2002b0f8 	.word	0x2002b0f8
 80143ec:	2002b088 	.word	0x2002b088

080143f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80143f0:	b570      	push	{r4, r5, r6, lr}
 80143f2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80143f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143f8:	429a      	cmp	r2, r3
 80143fa:	4604      	mov	r4, r0
 80143fc:	d021      	beq.n	8014442 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 80143fe:	6803      	ldr	r3, [r0, #0]
 8014400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014402:	4798      	blx	r3
 8014404:	6823      	ldr	r3, [r4, #0]
 8014406:	4605      	mov	r5, r0
 8014408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801440a:	4620      	mov	r0, r4
 801440c:	4798      	blx	r3
 801440e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014412:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014416:	6823      	ldr	r3, [r4, #0]
 8014418:	4606      	mov	r6, r0
 801441a:	b22d      	sxth	r5, r5
 801441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801441e:	d109      	bne.n	8014434 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8014420:	4629      	mov	r1, r5
 8014422:	4620      	mov	r0, r4
 8014424:	4798      	blx	r3
 8014426:	6823      	ldr	r3, [r4, #0]
 8014428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801442a:	4631      	mov	r1, r6
 801442c:	4620      	mov	r0, r4
 801442e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014432:	4718      	bx	r3
 8014434:	4601      	mov	r1, r0
 8014436:	4620      	mov	r0, r4
 8014438:	4798      	blx	r3
 801443a:	6823      	ldr	r3, [r4, #0]
 801443c:	4629      	mov	r1, r5
 801443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014440:	e7f4      	b.n	801442c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8014442:	bd70      	pop	{r4, r5, r6, pc}

08014444 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8014444:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8014448:	84c1      	strh	r1, [r0, #38]	; 0x26
 801444a:	b922      	cbnz	r2, 8014456 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801444c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014450:	b90b      	cbnz	r3, 8014456 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8014452:	f7ff bfcd 	b.w	80143f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8014456:	4770      	bx	lr

08014458 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014458:	2300      	movs	r3, #0
 801445a:	8003      	strh	r3, [r0, #0]
 801445c:	8043      	strh	r3, [r0, #2]
 801445e:	8083      	strh	r3, [r0, #4]
 8014460:	80c3      	strh	r3, [r0, #6]
 8014462:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8014466:	b91b      	cbnz	r3, 8014470 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8014468:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801446c:	2bff      	cmp	r3, #255	; 0xff
 801446e:	d103      	bne.n	8014478 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8014470:	890b      	ldrh	r3, [r1, #8]
 8014472:	8083      	strh	r3, [r0, #4]
 8014474:	894b      	ldrh	r3, [r1, #10]
 8014476:	80c3      	strh	r3, [r0, #6]
 8014478:	4770      	bx	lr
	...

0801447c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801447c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801447e:	4604      	mov	r4, r0
 8014480:	6808      	ldr	r0, [r1, #0]
 8014482:	6849      	ldr	r1, [r1, #4]
 8014484:	466b      	mov	r3, sp
 8014486:	c303      	stmia	r3!, {r0, r1}
 8014488:	6823      	ldr	r3, [r4, #0]
 801448a:	4669      	mov	r1, sp
 801448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801448e:	4620      	mov	r0, r4
 8014490:	4798      	blx	r3
 8014492:	4b08      	ldr	r3, [pc, #32]	; (80144b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801449a:	b10a      	cbz	r2, 80144a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801449c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801449e:	b900      	cbnz	r0, 80144a2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80144a0:	6898      	ldr	r0, [r3, #8]
 80144a2:	6803      	ldr	r3, [r0, #0]
 80144a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80144a6:	69dd      	ldr	r5, [r3, #28]
 80144a8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80144ac:	4669      	mov	r1, sp
 80144ae:	47a8      	blx	r5
 80144b0:	b003      	add	sp, #12
 80144b2:	bd30      	pop	{r4, r5, pc}
 80144b4:	2002b088 	.word	0x2002b088

080144b8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80144b8:	b538      	push	{r3, r4, r5, lr}
 80144ba:	880b      	ldrh	r3, [r1, #0]
 80144bc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80144be:	4605      	mov	r5, r0
 80144c0:	8813      	ldrh	r3, [r2, #0]
 80144c2:	f825 3f30 	strh.w	r3, [r5, #48]!
 80144c6:	4604      	mov	r4, r0
 80144c8:	4628      	mov	r0, r5
 80144ca:	f003 fba1 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80144ce:	8120      	strh	r0, [r4, #8]
 80144d0:	4628      	mov	r0, r5
 80144d2:	f003 fbd7 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80144d6:	8160      	strh	r0, [r4, #10]
 80144d8:	bd38      	pop	{r3, r4, r5, pc}

080144da <_ZNK8touchgfx6Button12getSolidRectEv>:
 80144da:	b510      	push	{r4, lr}
 80144dc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80144e0:	2bff      	cmp	r3, #255	; 0xff
 80144e2:	4604      	mov	r4, r0
 80144e4:	d006      	beq.n	80144f4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80144e6:	2300      	movs	r3, #0
 80144e8:	8003      	strh	r3, [r0, #0]
 80144ea:	8043      	strh	r3, [r0, #2]
 80144ec:	8083      	strh	r3, [r0, #4]
 80144ee:	80c3      	strh	r3, [r0, #6]
 80144f0:	4620      	mov	r0, r4
 80144f2:	bd10      	pop	{r4, pc}
 80144f4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80144f8:	b11b      	cbz	r3, 8014502 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80144fa:	3130      	adds	r1, #48	; 0x30
 80144fc:	f003 fbfc 	bl	8017cf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014500:	e7f6      	b.n	80144f0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8014502:	312e      	adds	r1, #46	; 0x2e
 8014504:	e7fa      	b.n	80144fc <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08014508 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8014508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801450c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014510:	b08b      	sub	sp, #44	; 0x2c
 8014512:	4604      	mov	r4, r0
 8014514:	4689      	mov	r9, r1
 8014516:	2b00      	cmp	r3, #0
 8014518:	d043      	beq.n	80145a2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 801451a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801451c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014520:	a805      	add	r0, sp, #20
 8014522:	f003 fb75 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014526:	4607      	mov	r7, r0
 8014528:	fa0f f880 	sxth.w	r8, r0
 801452c:	a805      	add	r0, sp, #20
 801452e:	f003 fba9 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014532:	f9b9 6000 	ldrsh.w	r6, [r9]
 8014536:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801453a:	4432      	add	r2, r6
 801453c:	b292      	uxth	r2, r2
 801453e:	2300      	movs	r3, #0
 8014540:	fa0f fe82 	sxth.w	lr, r2
 8014544:	459e      	cmp	lr, r3
 8014546:	fa0f fc80 	sxth.w	ip, r0
 801454a:	9306      	str	r3, [sp, #24]
 801454c:	dd2b      	ble.n	80145a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801454e:	45b0      	cmp	r8, r6
 8014550:	dd29      	ble.n	80145a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8014552:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 8014556:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801455a:	442b      	add	r3, r5
 801455c:	b29b      	uxth	r3, r3
 801455e:	b219      	sxth	r1, r3
 8014560:	2900      	cmp	r1, #0
 8014562:	dd20      	ble.n	80145a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8014564:	45ac      	cmp	ip, r5
 8014566:	dd1e      	ble.n	80145a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8014568:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801456c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8014570:	45f0      	cmp	r8, lr
 8014572:	bfb8      	it	lt
 8014574:	463a      	movlt	r2, r7
 8014576:	458c      	cmp	ip, r1
 8014578:	bfb8      	it	lt
 801457a:	4603      	movlt	r3, r0
 801457c:	1b92      	subs	r2, r2, r6
 801457e:	1b5b      	subs	r3, r3, r5
 8014580:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014584:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014588:	f8ad 6018 	strh.w	r6, [sp, #24]
 801458c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8014590:	4b1d      	ldr	r3, [pc, #116]	; (8014608 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	b953      	cbnz	r3, 80145ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 8014596:	4b1d      	ldr	r3, [pc, #116]	; (801460c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 8014598:	4a1d      	ldr	r2, [pc, #116]	; (8014610 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801459a:	481e      	ldr	r0, [pc, #120]	; (8014614 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801459c:	21b8      	movs	r1, #184	; 0xb8
 801459e:	f00e ffef 	bl	8023580 <__assert_func>
 80145a2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80145a4:	e7ba      	b.n	801451c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80145a6:	2300      	movs	r3, #0
 80145a8:	9307      	str	r3, [sp, #28]
 80145aa:	e7f1      	b.n	8014590 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 80145ac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80145b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d024      	beq.n	8014602 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 80145b8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80145bc:	b30b      	cbz	r3, 8014602 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 80145be:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80145c2:	b1f3      	cbz	r3, 8014602 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 80145c4:	2300      	movs	r3, #0
 80145c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80145ca:	6823      	ldr	r3, [r4, #0]
 80145cc:	a908      	add	r1, sp, #32
 80145ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d0:	4620      	mov	r0, r4
 80145d2:	4798      	blx	r3
 80145d4:	4b10      	ldr	r3, [pc, #64]	; (8014618 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80145dc:	b10a      	cbz	r2, 80145e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80145de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80145e0:	b900      	cbnz	r0, 80145e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 80145e2:	6898      	ldr	r0, [r3, #8]
 80145e4:	6801      	ldr	r1, [r0, #0]
 80145e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80145ea:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80145ee:	2501      	movs	r5, #1
 80145f0:	9502      	str	r5, [sp, #8]
 80145f2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80145f6:	9401      	str	r4, [sp, #4]
 80145f8:	ac06      	add	r4, sp, #24
 80145fa:	9400      	str	r4, [sp, #0]
 80145fc:	68cc      	ldr	r4, [r1, #12]
 80145fe:	a905      	add	r1, sp, #20
 8014600:	47a0      	blx	r4
 8014602:	b00b      	add	sp, #44	; 0x2c
 8014604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014608:	2002b130 	.word	0x2002b130
 801460c:	080275dc 	.word	0x080275dc
 8014610:	080276b0 	.word	0x080276b0
 8014614:	08027618 	.word	0x08027618
 8014618:	2002b088 	.word	0x2002b088

0801461c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801461c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014620:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8014622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014626:	429a      	cmp	r2, r3
 8014628:	4604      	mov	r4, r0
 801462a:	d018      	beq.n	801465e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 801462c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8014630:	4628      	mov	r0, r5
 8014632:	f7f7 fae9 	bl	800bc08 <_ZNK8touchgfx9TypedText7getFontEv>
 8014636:	6803      	ldr	r3, [r0, #0]
 8014638:	4606      	mov	r6, r0
 801463a:	4628      	mov	r0, r5
 801463c:	69df      	ldr	r7, [r3, #28]
 801463e:	f7f7 faff 	bl	800bc40 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8014642:	4680      	mov	r8, r0
 8014644:	4628      	mov	r0, r5
 8014646:	f7f9 fcb5 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 801464a:	2300      	movs	r3, #0
 801464c:	9300      	str	r3, [sp, #0]
 801464e:	4602      	mov	r2, r0
 8014650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014652:	4641      	mov	r1, r8
 8014654:	4630      	mov	r0, r6
 8014656:	47b8      	blx	r7
 8014658:	b002      	add	sp, #8
 801465a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801465e:	2000      	movs	r0, #0
 8014660:	e7fa      	b.n	8014658 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08014662 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8014662:	b570      	push	{r4, r5, r6, lr}
 8014664:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8014666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801466a:	429a      	cmp	r2, r3
 801466c:	4604      	mov	r4, r0
 801466e:	d00c      	beq.n	801468a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8014670:	f850 3b26 	ldr.w	r3, [r0], #38
 8014674:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8014676:	f7f9 fc9d 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 801467a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801467c:	4601      	mov	r1, r0
 801467e:	46ac      	mov	ip, r5
 8014680:	4620      	mov	r0, r4
 8014682:	2300      	movs	r3, #0
 8014684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014688:	4760      	bx	ip
 801468a:	2000      	movs	r0, #0
 801468c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014690 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8014690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014694:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8014696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801469a:	429e      	cmp	r6, r3
 801469c:	b08d      	sub	sp, #52	; 0x34
 801469e:	4604      	mov	r4, r0
 80146a0:	460f      	mov	r7, r1
 80146a2:	d048      	beq.n	8014736 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 80146a4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80146a8:	4628      	mov	r0, r5
 80146aa:	f7f7 faad 	bl	800bc08 <_ZNK8touchgfx9TypedText7getFontEv>
 80146ae:	4680      	mov	r8, r0
 80146b0:	2800      	cmp	r0, #0
 80146b2:	d040      	beq.n	8014736 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 80146b4:	4628      	mov	r0, r5
 80146b6:	f7f7 fadb 	bl	800bc70 <_ZNK8touchgfx9TypedText11assertValidEv>
 80146ba:	4b20      	ldr	r3, [pc, #128]	; (801473c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 80146bc:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80146c6:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80146ca:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80146ce:	4628      	mov	r0, r5
 80146d0:	785e      	ldrb	r6, [r3, #1]
 80146d2:	f7f7 fab5 	bl	800bc40 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80146d6:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80146da:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80146de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80146e0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80146e4:	9309      	str	r3, [sp, #36]	; 0x24
 80146e6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80146ea:	f8cd 801c 	str.w	r8, [sp, #28]
 80146ee:	f88d 6020 	strb.w	r6, [sp, #32]
 80146f2:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80146f6:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80146fa:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80146fe:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8014702:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8014706:	f7f7 fff1 	bl	800c6ec <_ZN8touchgfx3HAL3lcdEv>
 801470a:	ae05      	add	r6, sp, #20
 801470c:	4621      	mov	r1, r4
 801470e:	4680      	mov	r8, r0
 8014710:	4630      	mov	r0, r6
 8014712:	f001 fe42 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014716:	4628      	mov	r0, r5
 8014718:	f7f9 fc4c 	bl	800dfb4 <_ZNK8touchgfx9TypedText7getTextEv>
 801471c:	2300      	movs	r3, #0
 801471e:	9303      	str	r3, [sp, #12]
 8014720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014722:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8014726:	ab07      	add	r3, sp, #28
 8014728:	9300      	str	r3, [sp, #0]
 801472a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801472e:	463b      	mov	r3, r7
 8014730:	4640      	mov	r0, r8
 8014732:	f000 fb0d 	bl	8014d50 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014736:	b00d      	add	sp, #52	; 0x34
 8014738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801473c:	2002b0f8 	.word	0x2002b0f8

08014740 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8014740:	b570      	push	{r4, r5, r6, lr}
 8014742:	4605      	mov	r5, r0
 8014744:	880b      	ldrh	r3, [r1, #0]
 8014746:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014748:	f855 3b26 	ldr.w	r3, [r5], #38
 801474c:	4604      	mov	r4, r0
 801474e:	4628      	mov	r0, r5
 8014750:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8014752:	f003 fa5d 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014756:	b201      	sxth	r1, r0
 8014758:	4620      	mov	r0, r4
 801475a:	47b0      	blx	r6
 801475c:	6823      	ldr	r3, [r4, #0]
 801475e:	4628      	mov	r0, r5
 8014760:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8014762:	f003 fa8f 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014766:	b201      	sxth	r1, r0
 8014768:	4620      	mov	r0, r4
 801476a:	47b0      	blx	r6
 801476c:	4628      	mov	r0, r5
 801476e:	f003 fb1d 	bl	8017dac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8014772:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8014776:	bd70      	pop	{r4, r5, r6, pc}

08014778 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014778:	b510      	push	{r4, lr}
 801477a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801477e:	2bff      	cmp	r3, #255	; 0xff
 8014780:	4604      	mov	r4, r0
 8014782:	d006      	beq.n	8014792 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014784:	2300      	movs	r3, #0
 8014786:	8003      	strh	r3, [r0, #0]
 8014788:	8043      	strh	r3, [r0, #2]
 801478a:	8083      	strh	r3, [r0, #4]
 801478c:	80c3      	strh	r3, [r0, #6]
 801478e:	4620      	mov	r0, r4
 8014790:	bd10      	pop	{r4, pc}
 8014792:	3126      	adds	r1, #38	; 0x26
 8014794:	f003 fab0 	bl	8017cf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014798:	e7f9      	b.n	801478e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801479c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147a0:	4604      	mov	r4, r0
 80147a2:	b088      	sub	sp, #32
 80147a4:	f854 3b26 	ldr.w	r3, [r4], #38
 80147a8:	2500      	movs	r5, #0
 80147aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147ac:	460f      	mov	r7, r1
 80147ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80147b2:	a904      	add	r1, sp, #16
 80147b4:	4606      	mov	r6, r0
 80147b6:	4798      	blx	r3
 80147b8:	4620      	mov	r0, r4
 80147ba:	f003 fa29 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80147be:	4680      	mov	r8, r0
 80147c0:	4620      	mov	r0, r4
 80147c2:	f003 fa5f 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80147c6:	9506      	str	r5, [sp, #24]
 80147c8:	ad06      	add	r5, sp, #24
 80147ca:	f8ad 001e 	strh.w	r0, [sp, #30]
 80147ce:	4639      	mov	r1, r7
 80147d0:	4628      	mov	r0, r5
 80147d2:	f8ad 801c 	strh.w	r8, [sp, #28]
 80147d6:	f7fe f9c1 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 80147da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80147de:	b1c3      	cbz	r3, 8014812 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80147e0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80147e4:	b1ab      	cbz	r3, 8014812 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80147e6:	4b0c      	ldr	r3, [pc, #48]	; (8014818 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80147ee:	b10a      	cbz	r2, 80147f4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 80147f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80147f2:	b900      	cbnz	r0, 80147f6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80147f4:	6898      	ldr	r0, [r3, #8]
 80147f6:	6801      	ldr	r1, [r0, #0]
 80147f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80147fc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014800:	2701      	movs	r7, #1
 8014802:	9702      	str	r7, [sp, #8]
 8014804:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8014808:	e9cd 5600 	strd	r5, r6, [sp]
 801480c:	68cd      	ldr	r5, [r1, #12]
 801480e:	4621      	mov	r1, r4
 8014810:	47a8      	blx	r5
 8014812:	b008      	add	sp, #32
 8014814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014818:	2002b088 	.word	0x2002b088

0801481c <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 801481c:	b538      	push	{r3, r4, r5, lr}
 801481e:	8809      	ldrh	r1, [r1, #0]
 8014820:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8014822:	8812      	ldrh	r2, [r2, #0]
 8014824:	8602      	strh	r2, [r0, #48]	; 0x30
 8014826:	881b      	ldrh	r3, [r3, #0]
 8014828:	8643      	strh	r3, [r0, #50]	; 0x32
 801482a:	9b04      	ldr	r3, [sp, #16]
 801482c:	f100 052e 	add.w	r5, r0, #46	; 0x2e
 8014830:	881b      	ldrh	r3, [r3, #0]
 8014832:	8683      	strh	r3, [r0, #52]	; 0x34
 8014834:	4604      	mov	r4, r0
 8014836:	4628      	mov	r0, r5
 8014838:	f003 f9ea 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801483c:	8120      	strh	r0, [r4, #8]
 801483e:	4628      	mov	r0, r5
 8014840:	f003 fa20 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014844:	8160      	strh	r0, [r4, #10]
 8014846:	bd38      	pop	{r3, r4, r5, pc}

08014848 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>:
 8014848:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 801484c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014850:	b122      	cbz	r2, 801485c <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x14>
 8014852:	b10b      	cbz	r3, 8014858 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x10>
 8014854:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8014856:	4770      	bx	lr
 8014858:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801485a:	4770      	bx	lr
 801485c:	b10b      	cbz	r3, 8014862 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x1a>
 801485e:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8014860:	4770      	bx	lr
 8014862:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 8014864:	4770      	bx	lr

08014866 <_ZNK8touchgfx11RadioButton12getSolidRectEv>:
 8014866:	b513      	push	{r0, r1, r4, lr}
 8014868:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 801486c:	2bff      	cmp	r3, #255	; 0xff
 801486e:	4604      	mov	r4, r0
 8014870:	d007      	beq.n	8014882 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x1c>
 8014872:	2300      	movs	r3, #0
 8014874:	8003      	strh	r3, [r0, #0]
 8014876:	8043      	strh	r3, [r0, #2]
 8014878:	8083      	strh	r3, [r0, #4]
 801487a:	80c3      	strh	r3, [r0, #6]
 801487c:	4620      	mov	r0, r4
 801487e:	b002      	add	sp, #8
 8014880:	bd10      	pop	{r4, pc}
 8014882:	4608      	mov	r0, r1
 8014884:	f7ff ffe0 	bl	8014848 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 8014888:	a902      	add	r1, sp, #8
 801488a:	f821 0d04 	strh.w	r0, [r1, #-4]!
 801488e:	4620      	mov	r0, r4
 8014890:	f003 fa32 	bl	8017cf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014894:	e7f2      	b.n	801487c <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x16>
	...

08014898 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE>:
 8014898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801489c:	b08b      	sub	sp, #44	; 0x2c
 801489e:	460f      	mov	r7, r1
 80148a0:	4606      	mov	r6, r0
 80148a2:	f7ff ffd1 	bl	8014848 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 80148a6:	ad0a      	add	r5, sp, #40	; 0x28
 80148a8:	f825 0d14 	strh.w	r0, [r5, #-20]!
 80148ac:	4628      	mov	r0, r5
 80148ae:	f003 f9af 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80148b2:	4680      	mov	r8, r0
 80148b4:	fa0f f980 	sxth.w	r9, r0
 80148b8:	4628      	mov	r0, r5
 80148ba:	f003 f9e3 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80148be:	f9b7 1000 	ldrsh.w	r1, [r7]
 80148c2:	88bc      	ldrh	r4, [r7, #4]
 80148c4:	440c      	add	r4, r1
 80148c6:	b2a4      	uxth	r4, r4
 80148c8:	2300      	movs	r3, #0
 80148ca:	fa0f fe84 	sxth.w	lr, r4
 80148ce:	459e      	cmp	lr, r3
 80148d0:	fa0f fc80 	sxth.w	ip, r0
 80148d4:	9306      	str	r3, [sp, #24]
 80148d6:	dd28      	ble.n	801492a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x92>
 80148d8:	4589      	cmp	r9, r1
 80148da:	dd26      	ble.n	801492a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x92>
 80148dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80148e0:	88fb      	ldrh	r3, [r7, #6]
 80148e2:	4413      	add	r3, r2
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	b21f      	sxth	r7, r3
 80148e8:	2f00      	cmp	r7, #0
 80148ea:	dd1e      	ble.n	801492a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x92>
 80148ec:	4594      	cmp	ip, r2
 80148ee:	dd1c      	ble.n	801492a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x92>
 80148f0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80148f4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80148f8:	45f1      	cmp	r9, lr
 80148fa:	bfb8      	it	lt
 80148fc:	4644      	movlt	r4, r8
 80148fe:	45bc      	cmp	ip, r7
 8014900:	bfb8      	it	lt
 8014902:	4603      	movlt	r3, r0
 8014904:	1a64      	subs	r4, r4, r1
 8014906:	1a9b      	subs	r3, r3, r2
 8014908:	f8ad 401c 	strh.w	r4, [sp, #28]
 801490c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014910:	f8ad 1018 	strh.w	r1, [sp, #24]
 8014914:	f8ad 201a 	strh.w	r2, [sp, #26]
 8014918:	4b1c      	ldr	r3, [pc, #112]	; (801498c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xf4>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	b943      	cbnz	r3, 8014930 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x98>
 801491e:	4b1c      	ldr	r3, [pc, #112]	; (8014990 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xf8>)
 8014920:	4a1c      	ldr	r2, [pc, #112]	; (8014994 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xfc>)
 8014922:	481d      	ldr	r0, [pc, #116]	; (8014998 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x100>)
 8014924:	21b8      	movs	r1, #184	; 0xb8
 8014926:	f00e fe2b 	bl	8023580 <__assert_func>
 801492a:	2300      	movs	r3, #0
 801492c:	9307      	str	r3, [sp, #28]
 801492e:	e7f3      	b.n	8014918 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x80>
 8014930:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014938:	429a      	cmp	r2, r3
 801493a:	d024      	beq.n	8014986 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xee>
 801493c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014940:	b30b      	cbz	r3, 8014986 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xee>
 8014942:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014946:	b1f3      	cbz	r3, 8014986 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xee>
 8014948:	2300      	movs	r3, #0
 801494a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801494e:	6833      	ldr	r3, [r6, #0]
 8014950:	a908      	add	r1, sp, #32
 8014952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014954:	4630      	mov	r0, r6
 8014956:	4798      	blx	r3
 8014958:	4b10      	ldr	r3, [pc, #64]	; (801499c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x104>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014960:	b10a      	cbz	r2, 8014966 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xce>
 8014962:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014964:	b900      	cbnz	r0, 8014968 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xd0>
 8014966:	6898      	ldr	r0, [r3, #8]
 8014968:	6801      	ldr	r1, [r0, #0]
 801496a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801496e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014972:	2401      	movs	r4, #1
 8014974:	9402      	str	r4, [sp, #8]
 8014976:	f896 4036 	ldrb.w	r4, [r6, #54]	; 0x36
 801497a:	9401      	str	r4, [sp, #4]
 801497c:	ac06      	add	r4, sp, #24
 801497e:	9400      	str	r4, [sp, #0]
 8014980:	68cc      	ldr	r4, [r1, #12]
 8014982:	4629      	mov	r1, r5
 8014984:	47a0      	blx	r4
 8014986:	b00b      	add	sp, #44	; 0x2c
 8014988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801498c:	2002b130 	.word	0x2002b130
 8014990:	080275dc 	.word	0x080275dc
 8014994:	0802783c 	.word	0x0802783c
 8014998:	08027618 	.word	0x08027618
 801499c:	2002b088 	.word	0x2002b088

080149a0 <_ZN8touchgfx11RadioButton11setSelectedEb>:
 80149a0:	b510      	push	{r4, lr}
 80149a2:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 80149a6:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
 80149aa:	4604      	mov	r4, r0
 80149ac:	b18b      	cbz	r3, 80149d2 <_ZN8touchgfx11RadioButton11setSelectedEb+0x32>
 80149ae:	b951      	cbnz	r1, 80149c6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80149b0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80149b2:	b140      	cbz	r0, 80149c6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80149b4:	6803      	ldr	r3, [r0, #0]
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	4798      	blx	r3
 80149ba:	b120      	cbz	r0, 80149c6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80149bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80149be:	6803      	ldr	r3, [r0, #0]
 80149c0:	4621      	mov	r1, r4
 80149c2:	689b      	ldr	r3, [r3, #8]
 80149c4:	4798      	blx	r3
 80149c6:	6823      	ldr	r3, [r4, #0]
 80149c8:	4620      	mov	r0, r4
 80149ca:	695b      	ldr	r3, [r3, #20]
 80149cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149d0:	4718      	bx	r3
 80149d2:	2900      	cmp	r1, #0
 80149d4:	d0f7      	beq.n	80149c6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80149d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80149d8:	2800      	cmp	r0, #0
 80149da:	d0f4      	beq.n	80149c6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80149dc:	6803      	ldr	r3, [r0, #0]
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	4798      	blx	r3
 80149e2:	2800      	cmp	r0, #0
 80149e4:	d0ef      	beq.n	80149c6 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 80149e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80149e8:	e7e9      	b.n	80149be <_ZN8touchgfx11RadioButton11setSelectedEb+0x1e>

080149ea <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE>:
 80149ea:	b570      	push	{r4, r5, r6, lr}
 80149ec:	790b      	ldrb	r3, [r1, #4]
 80149ee:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	bf0c      	ite	eq
 80149f6:	2301      	moveq	r3, #1
 80149f8:	2300      	movne	r3, #0
 80149fa:	4604      	mov	r4, r0
 80149fc:	460e      	mov	r6, r1
 80149fe:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8014a02:	d10f      	bne.n	8014a24 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3a>
 8014a04:	b17d      	cbz	r5, 8014a26 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8014a06:	7931      	ldrb	r1, [r6, #4]
 8014a08:	2901      	cmp	r1, #1
 8014a0a:	d112      	bne.n	8014a32 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8014a0c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8014a10:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8014a14:	b172      	cbz	r2, 8014a34 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8014a16:	f083 0101 	eor.w	r1, r3, #1
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a20:	f7ff bfbe 	b.w	80149a0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8014a24:	b12d      	cbz	r5, 8014a32 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8014a26:	6823      	ldr	r3, [r4, #0]
 8014a28:	4620      	mov	r0, r4
 8014a2a:	695b      	ldr	r3, [r3, #20]
 8014a2c:	4798      	blx	r3
 8014a2e:	2d00      	cmp	r5, #0
 8014a30:	d1e9      	bne.n	8014a06 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8014a32:	bd70      	pop	{r4, r5, r6, pc}
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d1fc      	bne.n	8014a32 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8014a38:	e7ef      	b.n	8014a1a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x30>

08014a3a <_ZN8touchgfx3LCD4initEv>:
 8014a3a:	4770      	bx	lr

08014a3c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014a3c:	2000      	movs	r0, #0
 8014a3e:	4770      	bx	lr

08014a40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a44:	b091      	sub	sp, #68	; 0x44
 8014a46:	4699      	mov	r9, r3
 8014a48:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8014a4c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8014a4e:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8014a52:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014a56:	4680      	mov	r8, r0
 8014a58:	4617      	mov	r7, r2
 8014a5a:	a80e      	add	r0, sp, #56	; 0x38
 8014a5c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8014a60:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8014a64:	2500      	movs	r5, #0
 8014a66:	910d      	str	r1, [sp, #52]	; 0x34
 8014a68:	950e      	str	r5, [sp, #56]	; 0x38
 8014a6a:	f000 fe3f 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014a6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014a70:	f8d9 6000 	ldr.w	r6, [r9]
 8014a74:	6818      	ldr	r0, [r3, #0]
 8014a76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014a78:	f9b4 b000 	ldrsh.w	fp, [r4]
 8014a7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014a80:	eb02 0c06 	add.w	ip, r2, r6
 8014a84:	1b80      	subs	r0, r0, r6
 8014a86:	ebab 0e0c 	sub.w	lr, fp, ip
 8014a8a:	4570      	cmp	r0, lr
 8014a8c:	f340 80bd 	ble.w	8014c0a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8014a90:	88a1      	ldrh	r1, [r4, #4]
 8014a92:	4459      	add	r1, fp
 8014a94:	b209      	sxth	r1, r1
 8014a96:	458c      	cmp	ip, r1
 8014a98:	f300 80b7 	bgt.w	8014c0a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8014a9c:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8014aa0:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8014aa4:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8014aa8:	edd9 6a07 	vldr	s13, [r9, #28]
 8014aac:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8014ab0:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8014ab4:	4283      	cmp	r3, r0
 8014ab6:	bfa8      	it	ge
 8014ab8:	4603      	movge	r3, r0
 8014aba:	ee07 3a90 	vmov	s15, r3
 8014abe:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014ac2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014ac6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014aca:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014ace:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014ad2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014ad6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014ada:	45e3      	cmp	fp, ip
 8014adc:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014ae0:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014ae4:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014ae8:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014aec:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014af0:	f340 808e 	ble.w	8014c10 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 8014af4:	fb9e f5f3 	sdiv	r5, lr, r3
 8014af8:	ee07 5a10 	vmov	s14, r5
 8014afc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b00:	2d00      	cmp	r5, #0
 8014b02:	fb03 e415 	mls	r4, r3, r5, lr
 8014b06:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014b0a:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014b0e:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014b12:	dd13      	ble.n	8014b3c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014b14:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014b18:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014b1c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b24:	bf18      	it	ne
 8014b26:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014b2a:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014b2e:	bf08      	it	eq
 8014b30:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014b34:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014b38:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014b3c:	fb05 f703 	mul.w	r7, r5, r3
 8014b40:	1bc0      	subs	r0, r0, r7
 8014b42:	443e      	add	r6, r7
 8014b44:	1997      	adds	r7, r2, r6
 8014b46:	4407      	add	r7, r0
 8014b48:	42b9      	cmp	r1, r7
 8014b4a:	bfbc      	itt	lt
 8014b4c:	1a88      	sublt	r0, r1, r2
 8014b4e:	1b80      	sublt	r0, r0, r6
 8014b50:	2800      	cmp	r0, #0
 8014b52:	dd5a      	ble.n	8014c0a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8014b54:	fb90 f1f3 	sdiv	r1, r0, r3
 8014b58:	fb03 0211 	mls	r2, r3, r1, r0
 8014b5c:	b90a      	cbnz	r2, 8014b62 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 8014b5e:	3901      	subs	r1, #1
 8014b60:	461a      	mov	r2, r3
 8014b62:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014b66:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8014b6a:	44a4      	add	ip, r4
 8014b6c:	fb03 c505 	mla	r5, r3, r5, ip
 8014b70:	2900      	cmp	r1, #0
 8014b72:	bfcc      	ite	gt
 8014b74:	469e      	movgt	lr, r3
 8014b76:	4696      	movle	lr, r2
 8014b78:	eef0 6a42 	vmov.f32	s13, s4
 8014b7c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014b80:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014b84:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014b88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014b8c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014b90:	eeb0 7a61 	vmov.f32	s14, s3
 8014b94:	ee17 0a90 	vmov	r0, s15
 8014b98:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014b9c:	fb90 f6f3 	sdiv	r6, r0, r3
 8014ba0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014ba4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014ba8:	ee17 0a90 	vmov	r0, s15
 8014bac:	fb90 f7f3 	sdiv	r7, r0, r3
 8014bb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014bb4:	900c      	str	r0, [sp, #48]	; 0x30
 8014bb6:	f8d0 8000 	ldr.w	r8, [r0]
 8014bba:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014bbc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8014bc0:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8014bc4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014bc8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8014bcc:	f8cd a020 	str.w	sl, [sp, #32]
 8014bd0:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8014bd4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014bd6:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8014bda:	9603      	str	r6, [sp, #12]
 8014bdc:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8014be0:	ee16 0a90 	vmov	r0, s13
 8014be4:	fb07 0704 	mla	r7, r7, r4, r0
 8014be8:	ee17 0a10 	vmov	r0, s14
 8014bec:	fb06 0604 	mla	r6, r6, r4, r0
 8014bf0:	e9cd 3600 	strd	r3, r6, [sp]
 8014bf4:	44ca      	add	sl, r9
 8014bf6:	f8cd a01c 	str.w	sl, [sp, #28]
 8014bfa:	9506      	str	r5, [sp, #24]
 8014bfc:	9702      	str	r7, [sp, #8]
 8014bfe:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014c02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014c04:	ebae 0304 	sub.w	r3, lr, r4
 8014c08:	47a8      	blx	r5
 8014c0a:	b011      	add	sp, #68	; 0x44
 8014c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c10:	462c      	mov	r4, r5
 8014c12:	e797      	b.n	8014b44 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

08014c14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8014c14:	b570      	push	{r4, r5, r6, lr}
 8014c16:	4604      	mov	r4, r0
 8014c18:	2500      	movs	r5, #0
 8014c1a:	7223      	strb	r3, [r4, #8]
 8014c1c:	9804      	ldr	r0, [sp, #16]
 8014c1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014c22:	8025      	strh	r5, [r4, #0]
 8014c24:	6061      	str	r1, [r4, #4]
 8014c26:	7263      	strb	r3, [r4, #9]
 8014c28:	60e0      	str	r0, [r4, #12]
 8014c2a:	8222      	strh	r2, [r4, #16]
 8014c2c:	8265      	strh	r5, [r4, #18]
 8014c2e:	82a5      	strh	r5, [r4, #20]
 8014c30:	82e5      	strh	r5, [r4, #22]
 8014c32:	8325      	strh	r5, [r4, #24]
 8014c34:	8365      	strh	r5, [r4, #26]
 8014c36:	83a5      	strh	r5, [r4, #28]
 8014c38:	77a5      	strb	r5, [r4, #30]
 8014c3a:	6803      	ldr	r3, [r0, #0]
 8014c3c:	695b      	ldr	r3, [r3, #20]
 8014c3e:	4798      	blx	r3
 8014c40:	4606      	mov	r6, r0
 8014c42:	b1f8      	cbz	r0, 8014c84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8014c44:	68e0      	ldr	r0, [r4, #12]
 8014c46:	6803      	ldr	r3, [r0, #0]
 8014c48:	4631      	mov	r1, r6
 8014c4a:	68db      	ldr	r3, [r3, #12]
 8014c4c:	4798      	blx	r3
 8014c4e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8014c52:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c56:	7a83      	ldrb	r3, [r0, #10]
 8014c58:	4313      	orrs	r3, r2
 8014c5a:	83a3      	strh	r3, [r4, #28]
 8014c5c:	7a63      	ldrb	r3, [r4, #9]
 8014c5e:	2b04      	cmp	r3, #4
 8014c60:	4605      	mov	r5, r0
 8014c62:	d10f      	bne.n	8014c84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8014c64:	68e0      	ldr	r0, [r4, #12]
 8014c66:	6803      	ldr	r3, [r0, #0]
 8014c68:	462a      	mov	r2, r5
 8014c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c6c:	4631      	mov	r1, r6
 8014c6e:	4798      	blx	r3
 8014c70:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8014c74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c78:	7aab      	ldrb	r3, [r5, #10]
 8014c7a:	4313      	orrs	r3, r2
 8014c7c:	4418      	add	r0, r3
 8014c7e:	8ba3      	ldrh	r3, [r4, #28]
 8014c80:	4418      	add	r0, r3
 8014c82:	83a0      	strh	r0, [r4, #28]
 8014c84:	4620      	mov	r0, r4
 8014c86:	bd70      	pop	{r4, r5, r6, pc}

08014c88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c8c:	2400      	movs	r4, #0
 8014c8e:	b085      	sub	sp, #20
 8014c90:	4681      	mov	r9, r0
 8014c92:	460f      	mov	r7, r1
 8014c94:	4692      	mov	sl, r2
 8014c96:	469b      	mov	fp, r3
 8014c98:	46a0      	mov	r8, r4
 8014c9a:	4626      	mov	r6, r4
 8014c9c:	4554      	cmp	r4, sl
 8014c9e:	da21      	bge.n	8014ce4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	9303      	str	r3, [sp, #12]
 8014ca4:	463a      	mov	r2, r7
 8014ca6:	ab03      	add	r3, sp, #12
 8014ca8:	4659      	mov	r1, fp
 8014caa:	4648      	mov	r0, r9
 8014cac:	f002 fb76 	bl	801739c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014cb0:	4605      	mov	r5, r0
 8014cb2:	b1b8      	cbz	r0, 8014ce4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8014cb4:	280a      	cmp	r0, #10
 8014cb6:	d015      	beq.n	8014ce4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8014cb8:	9a03      	ldr	r2, [sp, #12]
 8014cba:	b182      	cbz	r2, 8014cde <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8014cbc:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8014cc0:	7a93      	ldrb	r3, [r2, #10]
 8014cc2:	8895      	ldrh	r5, [r2, #4]
 8014cc4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014cc8:	4303      	orrs	r3, r0
 8014cca:	9301      	str	r3, [sp, #4]
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	4641      	mov	r1, r8
 8014cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cd2:	4638      	mov	r0, r7
 8014cd4:	4798      	blx	r3
 8014cd6:	9b01      	ldr	r3, [sp, #4]
 8014cd8:	4418      	add	r0, r3
 8014cda:	4406      	add	r6, r0
 8014cdc:	b2b6      	uxth	r6, r6
 8014cde:	3401      	adds	r4, #1
 8014ce0:	46a8      	mov	r8, r5
 8014ce2:	e7db      	b.n	8014c9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	b005      	add	sp, #20
 8014ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014cec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8014cec:	2a02      	cmp	r2, #2
 8014cee:	b530      	push	{r4, r5, lr}
 8014cf0:	d011      	beq.n	8014d16 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8014cf2:	2a03      	cmp	r2, #3
 8014cf4:	d01c      	beq.n	8014d30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8014cf6:	2a01      	cmp	r2, #1
 8014cf8:	d10c      	bne.n	8014d14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014cfa:	888b      	ldrh	r3, [r1, #4]
 8014cfc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014d00:	8801      	ldrh	r1, [r0, #0]
 8014d02:	8844      	ldrh	r4, [r0, #2]
 8014d04:	8004      	strh	r4, [r0, #0]
 8014d06:	1a9b      	subs	r3, r3, r2
 8014d08:	1a5b      	subs	r3, r3, r1
 8014d0a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014d0e:	8043      	strh	r3, [r0, #2]
 8014d10:	8081      	strh	r1, [r0, #4]
 8014d12:	80c2      	strh	r2, [r0, #6]
 8014d14:	bd30      	pop	{r4, r5, pc}
 8014d16:	88cb      	ldrh	r3, [r1, #6]
 8014d18:	88c2      	ldrh	r2, [r0, #6]
 8014d1a:	1a9b      	subs	r3, r3, r2
 8014d1c:	8842      	ldrh	r2, [r0, #2]
 8014d1e:	1a9b      	subs	r3, r3, r2
 8014d20:	888a      	ldrh	r2, [r1, #4]
 8014d22:	8881      	ldrh	r1, [r0, #4]
 8014d24:	8043      	strh	r3, [r0, #2]
 8014d26:	1a52      	subs	r2, r2, r1
 8014d28:	8801      	ldrh	r1, [r0, #0]
 8014d2a:	1a52      	subs	r2, r2, r1
 8014d2c:	8002      	strh	r2, [r0, #0]
 8014d2e:	e7f1      	b.n	8014d14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014d30:	88cb      	ldrh	r3, [r1, #6]
 8014d32:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014d36:	8841      	ldrh	r1, [r0, #2]
 8014d38:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014d3c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014d40:	8045      	strh	r5, [r0, #2]
 8014d42:	1a9b      	subs	r3, r3, r2
 8014d44:	1a5b      	subs	r3, r3, r1
 8014d46:	8003      	strh	r3, [r0, #0]
 8014d48:	8082      	strh	r2, [r0, #4]
 8014d4a:	80c4      	strh	r4, [r0, #6]
 8014d4c:	e7e2      	b.n	8014d14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08014d50 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8014d50:	b570      	push	{r4, r5, r6, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	ac02      	add	r4, sp, #8
 8014d56:	e884 0006 	stmia.w	r4, {r1, r2}
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	ab0c      	add	r3, sp, #48	; 0x30
 8014d5e:	9305      	str	r3, [sp, #20]
 8014d60:	4b0a      	ldr	r3, [pc, #40]	; (8014d8c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8014d62:	685d      	ldr	r5, [r3, #4]
 8014d64:	1069      	asrs	r1, r5, #1
 8014d66:	07ed      	lsls	r5, r5, #31
 8014d68:	bf4c      	ite	mi
 8014d6a:	681b      	ldrmi	r3, [r3, #0]
 8014d6c:	681d      	ldrpl	r5, [r3, #0]
 8014d6e:	eb00 0601 	add.w	r6, r0, r1
 8014d72:	bf44      	itt	mi
 8014d74:	5841      	ldrmi	r1, [r0, r1]
 8014d76:	58cd      	ldrmi	r5, [r1, r3]
 8014d78:	9b05      	ldr	r3, [sp, #20]
 8014d7a:	9301      	str	r3, [sp, #4]
 8014d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d7e:	9300      	str	r3, [sp, #0]
 8014d80:	4621      	mov	r1, r4
 8014d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d84:	4630      	mov	r0, r6
 8014d86:	47a8      	blx	r5
 8014d88:	b006      	add	sp, #24
 8014d8a:	bd70      	pop	{r4, r5, r6, pc}
 8014d8c:	2000001c 	.word	0x2000001c

08014d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d94:	b09d      	sub	sp, #116	; 0x74
 8014d96:	9114      	str	r1, [sp, #80]	; 0x50
 8014d98:	9315      	str	r3, [sp, #84]	; 0x54
 8014d9a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014d9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014d9e:	8809      	ldrh	r1, [r1, #0]
 8014da0:	889b      	ldrh	r3, [r3, #4]
 8014da2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8014da4:	9210      	str	r2, [sp, #64]	; 0x40
 8014da6:	440b      	add	r3, r1
 8014da8:	b21b      	sxth	r3, r3
 8014daa:	930e      	str	r3, [sp, #56]	; 0x38
 8014dac:	6833      	ldr	r3, [r6, #0]
 8014dae:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8014db2:	7a59      	ldrb	r1, [r3, #9]
 8014db4:	7a1b      	ldrb	r3, [r3, #8]
 8014db6:	9312      	str	r3, [sp, #72]	; 0x48
 8014db8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014dba:	900f      	str	r0, [sp, #60]	; 0x3c
 8014dbc:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8014dc0:	9113      	str	r1, [sp, #76]	; 0x4c
 8014dc2:	f9b3 4000 	ldrsh.w	r4, [r3]
 8014dc6:	2a00      	cmp	r2, #0
 8014dc8:	d059      	beq.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8014dca:	7c33      	ldrb	r3, [r6, #16]
 8014dcc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8014dce:	2b04      	cmp	r3, #4
 8014dd0:	bf14      	ite	ne
 8014dd2:	2301      	movne	r3, #1
 8014dd4:	2302      	moveq	r3, #2
 8014dd6:	4413      	add	r3, r2
 8014dd8:	f04f 0800 	mov.w	r8, #0
 8014ddc:	930d      	str	r3, [sp, #52]	; 0x34
 8014dde:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8014de2:	4645      	mov	r5, r8
 8014de4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8014de8:	4293      	cmp	r3, r2
 8014dea:	da75      	bge.n	8014ed8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8014dec:	2300      	movs	r3, #0
 8014dee:	931a      	str	r3, [sp, #104]	; 0x68
 8014df0:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014df4:	6832      	ldr	r2, [r6, #0]
 8014df6:	428b      	cmp	r3, r1
 8014df8:	db43      	blt.n	8014e82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8014dfa:	6813      	ldr	r3, [r2, #0]
 8014dfc:	4610      	mov	r0, r2
 8014dfe:	695b      	ldr	r3, [r3, #20]
 8014e00:	4798      	blx	r3
 8014e02:	4681      	mov	r9, r0
 8014e04:	6830      	ldr	r0, [r6, #0]
 8014e06:	6803      	ldr	r3, [r0, #0]
 8014e08:	aa1b      	add	r2, sp, #108	; 0x6c
 8014e0a:	689f      	ldr	r7, [r3, #8]
 8014e0c:	4649      	mov	r1, r9
 8014e0e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8014e12:	47b8      	blx	r7
 8014e14:	901a      	str	r0, [sp, #104]	; 0x68
 8014e16:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8014e1a:	45d1      	cmp	r9, sl
 8014e1c:	d045      	beq.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014e1e:	f242 070b 	movw	r7, #8203	; 0x200b
 8014e22:	45b9      	cmp	r9, r7
 8014e24:	d041      	beq.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014e26:	f1b9 0f00 	cmp.w	r9, #0
 8014e2a:	f000 80ef 	beq.w	801500c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 8014e2e:	f1b9 0f0a 	cmp.w	r9, #10
 8014e32:	d057      	beq.n	8014ee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014e34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014e36:	b383      	cbz	r3, 8014e9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8014e38:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8014e3c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014e3e:	2a00      	cmp	r2, #0
 8014e40:	f000 80d3 	beq.w	8014fea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25a>
 8014e44:	f1bb 0f00 	cmp.w	fp, #0
 8014e48:	d100      	bne.n	8014e4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8014e4a:	4444      	add	r4, r8
 8014e4c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8014e50:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8014e54:	f892 800a 	ldrb.w	r8, [r2, #10]
 8014e58:	f1bb 0f01 	cmp.w	fp, #1
 8014e5c:	ea48 0803 	orr.w	r8, r8, r3
 8014e60:	d128      	bne.n	8014eb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8014e62:	eba4 0408 	sub.w	r4, r4, r8
 8014e66:	2d00      	cmp	r5, #0
 8014e68:	d143      	bne.n	8014ef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8014e6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e6c:	eb08 0304 	add.w	r3, r8, r4
 8014e70:	4413      	add	r3, r2
 8014e72:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014e74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014e78:	4293      	cmp	r3, r2
 8014e7a:	da44      	bge.n	8014f06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8014e7c:	e02b      	b.n	8014ed6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8014e7e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014e80:	e7aa      	b.n	8014dd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8014e82:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8014e86:	9301      	str	r3, [sp, #4]
 8014e88:	ab1b      	add	r3, sp, #108	; 0x6c
 8014e8a:	9300      	str	r3, [sp, #0]
 8014e8c:	4659      	mov	r1, fp
 8014e8e:	ab1a      	add	r3, sp, #104	; 0x68
 8014e90:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014e92:	f002 fab7 	bl	8017404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014e96:	4681      	mov	r9, r0
 8014e98:	e7bd      	b.n	8014e16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8014e9a:	6830      	ldr	r0, [r6, #0]
 8014e9c:	6803      	ldr	r3, [r0, #0]
 8014e9e:	691b      	ldr	r3, [r3, #16]
 8014ea0:	4798      	blx	r3
 8014ea2:	4550      	cmp	r0, sl
 8014ea4:	d001      	beq.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014ea6:	42b8      	cmp	r0, r7
 8014ea8:	d1c8      	bne.n	8014e3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8014eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014eac:	3301      	adds	r3, #1
 8014eae:	930c      	str	r3, [sp, #48]	; 0x30
 8014eb0:	464d      	mov	r5, r9
 8014eb2:	e797      	b.n	8014de4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8014eb4:	2d00      	cmp	r5, #0
 8014eb6:	f000 80ab 	beq.w	8015010 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x280>
 8014eba:	f1bb 0f00 	cmp.w	fp, #0
 8014ebe:	d118      	bne.n	8014ef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8014ec0:	6830      	ldr	r0, [r6, #0]
 8014ec2:	6803      	ldr	r3, [r0, #0]
 8014ec4:	4629      	mov	r1, r5
 8014ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ec8:	4798      	blx	r3
 8014eca:	4404      	add	r4, r0
 8014ecc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ed0:	1ae3      	subs	r3, r4, r3
 8014ed2:	4293      	cmp	r3, r2
 8014ed4:	dd17      	ble.n	8014f06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8014ed6:	464d      	mov	r5, r9
 8014ed8:	2d00      	cmp	r5, #0
 8014eda:	f000 8097 	beq.w	801500c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 8014ede:	2d0a      	cmp	r5, #10
 8014ee0:	f040 8085 	bne.w	8014fee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8014ee4:	250a      	movs	r5, #10
 8014ee6:	fab5 f085 	clz	r0, r5
 8014eea:	0940      	lsrs	r0, r0, #5
 8014eec:	b01d      	add	sp, #116	; 0x74
 8014eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef2:	6830      	ldr	r0, [r6, #0]
 8014ef4:	6803      	ldr	r3, [r0, #0]
 8014ef6:	4629      	mov	r1, r5
 8014ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014efa:	4798      	blx	r3
 8014efc:	f1bb 0f01 	cmp.w	fp, #1
 8014f00:	eba4 0400 	sub.w	r4, r4, r0
 8014f04:	d0b1      	beq.n	8014e6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014f06:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014f08:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014f0a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014f0e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014f12:	7b43      	ldrb	r3, [r0, #13]
 8014f14:	015b      	lsls	r3, r3, #5
 8014f16:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014f1a:	7983      	ldrb	r3, [r0, #6]
 8014f1c:	4421      	add	r1, r4
 8014f1e:	4313      	orrs	r3, r2
 8014f20:	440b      	add	r3, r1
 8014f22:	42ab      	cmp	r3, r5
 8014f24:	dbc1      	blt.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f28:	4299      	cmp	r1, r3
 8014f2a:	dabe      	bge.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014f2c:	6830      	ldr	r0, [r6, #0]
 8014f2e:	6803      	ldr	r3, [r0, #0]
 8014f30:	42a5      	cmp	r5, r4
 8014f32:	bfc8      	it	gt
 8014f34:	1b2d      	subgt	r5, r5, r4
 8014f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f38:	bfcc      	ite	gt
 8014f3a:	b2ad      	uxthgt	r5, r5
 8014f3c:	2500      	movle	r5, #0
 8014f3e:	4798      	blx	r3
 8014f40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014f42:	4936      	ldr	r1, [pc, #216]	; (801501c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>)
 8014f44:	7b5a      	ldrb	r2, [r3, #13]
 8014f46:	f893 e008 	ldrb.w	lr, [r3, #8]
 8014f4a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8014f4e:	bf18      	it	ne
 8014f50:	468c      	movne	ip, r1
 8014f52:	9915      	ldr	r1, [sp, #84]	; 0x54
 8014f54:	4408      	add	r0, r1
 8014f56:	ea4f 01c2 	mov.w	r1, r2, lsl #3
 8014f5a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014f5e:	bf08      	it	eq
 8014f60:	f04f 0c00 	moveq.w	ip, #0
 8014f64:	ea41 070e 	orr.w	r7, r1, lr
 8014f68:	ea4c 0707 	orr.w	r7, ip, r7
 8014f6c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014f6e:	1bc7      	subs	r7, r0, r7
 8014f70:	b2bf      	uxth	r7, r7
 8014f72:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014f76:	fa0f fa87 	sxth.w	sl, r7
 8014f7a:	4551      	cmp	r1, sl
 8014f7c:	dd33      	ble.n	8014fe6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x256>
 8014f7e:	0112      	lsls	r2, r2, #4
 8014f80:	79d8      	ldrb	r0, [r3, #7]
 8014f82:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014f86:	4302      	orrs	r2, r0
 8014f88:	4492      	add	sl, r2
 8014f8a:	4551      	cmp	r1, sl
 8014f8c:	dc8d      	bgt.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014f8e:	1bcf      	subs	r7, r1, r7
 8014f90:	b2bf      	uxth	r7, r7
 8014f92:	468a      	mov	sl, r1
 8014f94:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f98:	6830      	ldr	r0, [r6, #0]
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	6801      	ldr	r1, [r0, #0]
 8014f9e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8014fa0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014fa2:	9311      	str	r3, [sp, #68]	; 0x44
 8014fa4:	9216      	str	r2, [sp, #88]	; 0x58
 8014fa6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014fa8:	4788      	blx	r1
 8014faa:	79b1      	ldrb	r1, [r6, #6]
 8014fac:	910b      	str	r1, [sp, #44]	; 0x2c
 8014fae:	7bb1      	ldrb	r1, [r6, #14]
 8014fb0:	910a      	str	r1, [sp, #40]	; 0x28
 8014fb2:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8014fb6:	9109      	str	r1, [sp, #36]	; 0x24
 8014fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014fba:	68b1      	ldr	r1, [r6, #8]
 8014fbc:	9305      	str	r3, [sp, #20]
 8014fbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014fc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014fc2:	9206      	str	r2, [sp, #24]
 8014fc4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014fc8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8014fcc:	e9cd a501 	strd	sl, r5, [sp, #4]
 8014fd0:	4425      	add	r5, r4
 8014fd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014fd4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014fd6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014fd8:	b22d      	sxth	r5, r5
 8014fda:	9500      	str	r5, [sp, #0]
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	47a8      	blx	r5
 8014fe4:	e761      	b.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014fe6:	2700      	movs	r7, #0
 8014fe8:	e7d4      	b.n	8014f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 8014fea:	4690      	mov	r8, r2
 8014fec:	e75d      	b.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014fee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014ff0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014ff2:	3401      	adds	r4, #1
 8014ff4:	429c      	cmp	r4, r3
 8014ff6:	f6bf af76 	bge.w	8014ee6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8014ffa:	4659      	mov	r1, fp
 8014ffc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014ffe:	f002 f98d 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015002:	4605      	mov	r5, r0
 8015004:	b110      	cbz	r0, 801500c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 8015006:	280a      	cmp	r0, #10
 8015008:	d1f2      	bne.n	8014ff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x260>
 801500a:	e76b      	b.n	8014ee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801500c:	2500      	movs	r5, #0
 801500e:	e76a      	b.n	8014ee6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8015010:	f1bb 0f00 	cmp.w	fp, #0
 8015014:	f43f af5a 	beq.w	8014ecc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8015018:	e775      	b.n	8014f06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801501a:	bf00      	nop
 801501c:	fffffe00 	.word	0xfffffe00

08015020 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015020:	b530      	push	{r4, r5, lr}
 8015022:	8a44      	ldrh	r4, [r0, #18]
 8015024:	8ac5      	ldrh	r5, [r0, #22]
 8015026:	82c3      	strh	r3, [r0, #22]
 8015028:	442c      	add	r4, r5
 801502a:	1ae4      	subs	r4, r4, r3
 801502c:	8244      	strh	r4, [r0, #18]
 801502e:	8b03      	ldrh	r3, [r0, #24]
 8015030:	8a84      	ldrh	r4, [r0, #20]
 8015032:	4422      	add	r2, r4
 8015034:	440c      	add	r4, r1
 8015036:	1a59      	subs	r1, r3, r1
 8015038:	8342      	strh	r2, [r0, #26]
 801503a:	8284      	strh	r4, [r0, #20]
 801503c:	8301      	strh	r1, [r0, #24]
 801503e:	bd30      	pop	{r4, r5, pc}

08015040 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8015040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015044:	7a45      	ldrb	r5, [r0, #9]
 8015046:	1eeb      	subs	r3, r5, #3
 8015048:	b085      	sub	sp, #20
 801504a:	4604      	mov	r4, r0
 801504c:	b2db      	uxtb	r3, r3
 801504e:	4689      	mov	r9, r1
 8015050:	b329      	cbz	r1, 801509e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8015052:	2b01      	cmp	r3, #1
 8015054:	d921      	bls.n	801509a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8015056:	1e69      	subs	r1, r5, #1
 8015058:	f1d1 0b00 	rsbs	fp, r1, #0
 801505c:	eb4b 0b01 	adc.w	fp, fp, r1
 8015060:	1eaa      	subs	r2, r5, #2
 8015062:	4253      	negs	r3, r2
 8015064:	4153      	adcs	r3, r2
 8015066:	2500      	movs	r5, #0
 8015068:	9301      	str	r3, [sp, #4]
 801506a:	9500      	str	r5, [sp, #0]
 801506c:	2600      	movs	r6, #0
 801506e:	8266      	strh	r6, [r4, #18]
 8015070:	82a6      	strh	r6, [r4, #20]
 8015072:	f242 080b 	movw	r8, #8203	; 0x200b
 8015076:	2300      	movs	r3, #0
 8015078:	9303      	str	r3, [sp, #12]
 801507a:	68e2      	ldr	r2, [r4, #12]
 801507c:	7a21      	ldrb	r1, [r4, #8]
 801507e:	6860      	ldr	r0, [r4, #4]
 8015080:	8827      	ldrh	r7, [r4, #0]
 8015082:	ab03      	add	r3, sp, #12
 8015084:	f002 f98a 	bl	801739c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015088:	8020      	strh	r0, [r4, #0]
 801508a:	b9b0      	cbnz	r0, 80150ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801508c:	8b22      	ldrh	r2, [r4, #24]
 801508e:	2300      	movs	r3, #0
 8015090:	4611      	mov	r1, r2
 8015092:	4620      	mov	r0, r4
 8015094:	f7ff ffc4 	bl	8015020 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015098:	e062      	b.n	8015160 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801509a:	468b      	mov	fp, r1
 801509c:	e7e0      	b.n	8015060 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801509e:	2b01      	cmp	r3, #1
 80150a0:	f105 35ff 	add.w	r5, r5, #4294967295
 80150a4:	bf8c      	ite	hi
 80150a6:	2300      	movhi	r3, #0
 80150a8:	2301      	movls	r3, #1
 80150aa:	2d01      	cmp	r5, #1
 80150ac:	9300      	str	r3, [sp, #0]
 80150ae:	bf8c      	ite	hi
 80150b0:	2500      	movhi	r5, #0
 80150b2:	2501      	movls	r5, #1
 80150b4:	9101      	str	r1, [sp, #4]
 80150b6:	468b      	mov	fp, r1
 80150b8:	e7d8      	b.n	801506c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 80150ba:	8ae3      	ldrh	r3, [r4, #22]
 80150bc:	280a      	cmp	r0, #10
 80150be:	f103 0301 	add.w	r3, r3, #1
 80150c2:	82e3      	strh	r3, [r4, #22]
 80150c4:	d0e2      	beq.n	801508c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 80150c6:	9a03      	ldr	r2, [sp, #12]
 80150c8:	b972      	cbnz	r2, 80150e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 80150ca:	4540      	cmp	r0, r8
 80150cc:	d1d3      	bne.n	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80150ce:	8823      	ldrh	r3, [r4, #0]
 80150d0:	8b21      	ldrh	r1, [r4, #24]
 80150d2:	2b20      	cmp	r3, #32
 80150d4:	d001      	beq.n	80150da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80150d6:	4543      	cmp	r3, r8
 80150d8:	d11d      	bne.n	8015116 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80150da:	2f20      	cmp	r7, #32
 80150dc:	d002      	beq.n	80150e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80150de:	4547      	cmp	r7, r8
 80150e0:	bf18      	it	ne
 80150e2:	460e      	movne	r6, r1
 80150e4:	2001      	movs	r0, #1
 80150e6:	e017      	b.n	8015118 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80150e8:	4540      	cmp	r0, r8
 80150ea:	d012      	beq.n	8015112 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 80150ec:	8893      	ldrh	r3, [r2, #4]
 80150ee:	8023      	strh	r3, [r4, #0]
 80150f0:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 80150f4:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 80150f8:	f892 a00a 	ldrb.w	sl, [r2, #10]
 80150fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8015100:	68e0      	ldr	r0, [r4, #12]
 8015102:	6803      	ldr	r3, [r0, #0]
 8015104:	4639      	mov	r1, r7
 8015106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015108:	4798      	blx	r3
 801510a:	eb0a 0200 	add.w	r2, sl, r0
 801510e:	b292      	uxth	r2, r2
 8015110:	e7dd      	b.n	80150ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8015112:	2200      	movs	r2, #0
 8015114:	e7db      	b.n	80150ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8015116:	2000      	movs	r0, #0
 8015118:	440a      	add	r2, r1
 801511a:	8aa3      	ldrh	r3, [r4, #20]
 801511c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015120:	b292      	uxth	r2, r2
 8015122:	8322      	strh	r2, [r4, #24]
 8015124:	4413      	add	r3, r2
 8015126:	f1b9 0f00 	cmp.w	r9, #0
 801512a:	d022      	beq.n	8015172 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801512c:	f1bb 0f00 	cmp.w	fp, #0
 8015130:	d102      	bne.n	8015138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8015132:	9901      	ldr	r1, [sp, #4]
 8015134:	b149      	cbz	r1, 801514a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8015136:	b140      	cbz	r0, 801514a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8015138:	8ba1      	ldrh	r1, [r4, #28]
 801513a:	4419      	add	r1, r3
 801513c:	458c      	cmp	ip, r1
 801513e:	da12      	bge.n	8015166 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8015140:	8a61      	ldrh	r1, [r4, #18]
 8015142:	b181      	cbz	r1, 8015166 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8015144:	4563      	cmp	r3, ip
 8015146:	dd96      	ble.n	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015148:	e004      	b.n	8015154 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801514a:	4563      	cmp	r3, ip
 801514c:	dd93      	ble.n	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801514e:	8a63      	ldrh	r3, [r4, #18]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d090      	beq.n	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015154:	2301      	movs	r3, #1
 8015156:	77a3      	strb	r3, [r4, #30]
 8015158:	8ba2      	ldrh	r2, [r4, #28]
 801515a:	8b63      	ldrh	r3, [r4, #26]
 801515c:	4413      	add	r3, r2
 801515e:	8363      	strh	r3, [r4, #26]
 8015160:	b005      	add	sp, #20
 8015162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015166:	2300      	movs	r3, #0
 8015168:	4611      	mov	r1, r2
 801516a:	4620      	mov	r0, r4
 801516c:	f7ff ff58 	bl	8015020 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015170:	e781      	b.n	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015172:	4563      	cmp	r3, ip
 8015174:	dd16      	ble.n	80151a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8015176:	9b00      	ldr	r3, [sp, #0]
 8015178:	b113      	cbz	r3, 8015180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801517a:	2301      	movs	r3, #1
 801517c:	460a      	mov	r2, r1
 801517e:	e787      	b.n	8015090 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8015180:	2d00      	cmp	r5, #0
 8015182:	f43f af78 	beq.w	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015186:	2800      	cmp	r0, #0
 8015188:	f47f af75 	bne.w	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801518c:	2f20      	cmp	r7, #32
 801518e:	d001      	beq.n	8015194 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8015190:	4547      	cmp	r7, r8
 8015192:	d102      	bne.n	801519a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8015194:	2301      	movs	r3, #1
 8015196:	4632      	mov	r2, r6
 8015198:	e77b      	b.n	8015092 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801519a:	8a63      	ldrh	r3, [r4, #18]
 801519c:	2b00      	cmp	r3, #0
 801519e:	f43f af6a 	beq.w	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80151a2:	e7dd      	b.n	8015160 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80151a4:	2800      	cmp	r0, #0
 80151a6:	f47f af66 	bne.w	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80151aa:	2f20      	cmp	r7, #32
 80151ac:	d002      	beq.n	80151b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 80151ae:	4547      	cmp	r7, r8
 80151b0:	f47f af61 	bne.w	8015076 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80151b4:	2301      	movs	r3, #1
 80151b6:	4632      	mov	r2, r6
 80151b8:	e7d7      	b.n	801516a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

080151ba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80151ba:	b570      	push	{r4, r5, r6, lr}
 80151bc:	4606      	mov	r6, r0
 80151be:	b08a      	sub	sp, #40	; 0x28
 80151c0:	4615      	mov	r5, r2
 80151c2:	b191      	cbz	r1, 80151ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 80151c4:	e9cd 3100 	strd	r3, r1, [sp]
 80151c8:	4613      	mov	r3, r2
 80151ca:	4601      	mov	r1, r0
 80151cc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80151d0:	a802      	add	r0, sp, #8
 80151d2:	f7ff fd1f 	bl	8014c14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80151d6:	2401      	movs	r4, #1
 80151d8:	2100      	movs	r1, #0
 80151da:	a802      	add	r0, sp, #8
 80151dc:	f7ff ff30 	bl	8015040 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80151e0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80151e4:	b173      	cbz	r3, 8015204 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80151e6:	3401      	adds	r4, #1
 80151e8:	e7f6      	b.n	80151d8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80151ea:	4611      	mov	r1, r2
 80151ec:	f002 f896 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80151f0:	2401      	movs	r4, #1
 80151f2:	280a      	cmp	r0, #10
 80151f4:	4629      	mov	r1, r5
 80151f6:	4630      	mov	r0, r6
 80151f8:	bf08      	it	eq
 80151fa:	3401      	addeq	r4, #1
 80151fc:	f002 f88e 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015200:	2800      	cmp	r0, #0
 8015202:	d1f6      	bne.n	80151f2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8015204:	b2a0      	uxth	r0, r4
 8015206:	b00a      	add	sp, #40	; 0x28
 8015208:	bd70      	pop	{r4, r5, r6, pc}

0801520a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801520a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801520e:	b0db      	sub	sp, #364	; 0x16c
 8015210:	468a      	mov	sl, r1
 8015212:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8015216:	9009      	str	r0, [sp, #36]	; 0x24
 8015218:	461c      	mov	r4, r3
 801521a:	f1bb 0f00 	cmp.w	fp, #0
 801521e:	f000 80c7 	beq.w	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	f000 80c3 	beq.w	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801522a:	7ba3      	ldrb	r3, [r4, #14]
 801522c:	2b00      	cmp	r3, #0
 801522e:	f000 80bf 	beq.w	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015232:	6810      	ldr	r0, [r2, #0]
 8015234:	6851      	ldr	r1, [r2, #4]
 8015236:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801523a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801523e:	af0c      	add	r7, sp, #48	; 0x30
 8015240:	463b      	mov	r3, r7
 8015242:	c303      	stmia	r3!, {r0, r1}
 8015244:	2100      	movs	r1, #0
 8015246:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801524a:	910e      	str	r1, [sp, #56]	; 0x38
 801524c:	79a2      	ldrb	r2, [r4, #6]
 801524e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015252:	a90e      	add	r1, sp, #56	; 0x38
 8015254:	4638      	mov	r0, r7
 8015256:	f7ff fd49 	bl	8014cec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801525a:	a90e      	add	r1, sp, #56	; 0x38
 801525c:	4608      	mov	r0, r1
 801525e:	79a2      	ldrb	r2, [r4, #6]
 8015260:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8015264:	f7ff fd42 	bl	8014cec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015268:	4648      	mov	r0, r9
 801526a:	f001 ff15 	bl	8017098 <_ZN8touchgfx12TextProviderC1Ev>
 801526e:	6820      	ldr	r0, [r4, #0]
 8015270:	6803      	ldr	r3, [r0, #0]
 8015272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015274:	4798      	blx	r3
 8015276:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8015278:	4603      	mov	r3, r0
 801527a:	4659      	mov	r1, fp
 801527c:	4648      	mov	r0, r9
 801527e:	f001 ff28 	bl	80170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015282:	a82e      	add	r0, sp, #184	; 0xb8
 8015284:	f001 ff08 	bl	8017098 <_ZN8touchgfx12TextProviderC1Ev>
 8015288:	f894 8004 	ldrb.w	r8, [r4, #4]
 801528c:	f1b8 0f00 	cmp.w	r8, #0
 8015290:	d009      	beq.n	80152a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8015292:	6820      	ldr	r0, [r4, #0]
 8015294:	6803      	ldr	r3, [r0, #0]
 8015296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015298:	4798      	blx	r3
 801529a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801529c:	4603      	mov	r3, r0
 801529e:	4659      	mov	r1, fp
 80152a0:	a82e      	add	r0, sp, #184	; 0xb8
 80152a2:	f001 ff16 	bl	80170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80152a6:	6820      	ldr	r0, [r4, #0]
 80152a8:	6803      	ldr	r3, [r0, #0]
 80152aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152ac:	4798      	blx	r3
 80152ae:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80152b2:	182e      	adds	r6, r5, r0
 80152b4:	2e00      	cmp	r6, #0
 80152b6:	dd45      	ble.n	8015344 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 80152b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80152bc:	4283      	cmp	r3, r0
 80152be:	db41      	blt.n	8015344 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 80152c0:	441d      	add	r5, r3
 80152c2:	fb95 f5f6 	sdiv	r5, r5, r6
 80152c6:	a844      	add	r0, sp, #272	; 0x110
 80152c8:	f001 fee6 	bl	8017098 <_ZN8touchgfx12TextProviderC1Ev>
 80152cc:	7c23      	ldrb	r3, [r4, #16]
 80152ce:	b14b      	cbz	r3, 80152e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 80152d0:	6820      	ldr	r0, [r4, #0]
 80152d2:	6803      	ldr	r3, [r0, #0]
 80152d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152d6:	4798      	blx	r3
 80152d8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80152da:	4603      	mov	r3, r0
 80152dc:	4659      	mov	r1, fp
 80152de:	a844      	add	r0, sp, #272	; 0x110
 80152e0:	f001 fef7 	bl	80170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80152e4:	7c21      	ldrb	r1, [r4, #16]
 80152e6:	9101      	str	r1, [sp, #4]
 80152e8:	6821      	ldr	r1, [r4, #0]
 80152ea:	7963      	ldrb	r3, [r4, #5]
 80152ec:	9100      	str	r1, [sp, #0]
 80152ee:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80152f2:	a944      	add	r1, sp, #272	; 0x110
 80152f4:	a810      	add	r0, sp, #64	; 0x40
 80152f6:	f7ff fc8d 	bl	8014c14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80152fa:	7c23      	ldrb	r3, [r4, #16]
 80152fc:	bb23      	cbnz	r3, 8015348 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 80152fe:	fa1f fb86 	uxth.w	fp, r6
 8015302:	2d00      	cmp	r5, #0
 8015304:	dd57      	ble.n	80153b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8015306:	7961      	ldrb	r1, [r4, #5]
 8015308:	4648      	mov	r0, r9
 801530a:	f002 f807 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801530e:	4603      	mov	r3, r0
 8015310:	f1b8 0f00 	cmp.w	r8, #0
 8015314:	d005      	beq.n	8015322 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8015316:	9008      	str	r0, [sp, #32]
 8015318:	7961      	ldrb	r1, [r4, #5]
 801531a:	a82e      	add	r0, sp, #184	; 0xb8
 801531c:	f001 fffe 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015320:	9b08      	ldr	r3, [sp, #32]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d044      	beq.n	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015326:	2b0a      	cmp	r3, #10
 8015328:	d1eb      	bne.n	8015302 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801532a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801532e:	445b      	add	r3, fp
 8015330:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015334:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015338:	eba3 030b 	sub.w	r3, r3, fp
 801533c:	3d01      	subs	r5, #1
 801533e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015342:	e7de      	b.n	8015302 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8015344:	2500      	movs	r5, #0
 8015346:	e7be      	b.n	80152c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8015348:	0073      	lsls	r3, r6, #1
 801534a:	9308      	str	r3, [sp, #32]
 801534c:	2d00      	cmp	r5, #0
 801534e:	dd32      	ble.n	80153b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8015350:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8015354:	9b08      	ldr	r3, [sp, #32]
 8015356:	428b      	cmp	r3, r1
 8015358:	bfd4      	ite	le
 801535a:	2100      	movle	r1, #0
 801535c:	2101      	movgt	r1, #1
 801535e:	a810      	add	r0, sp, #64	; 0x40
 8015360:	f7ff fe6e 	bl	8015040 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015364:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8015368:	f10b 33ff 	add.w	r3, fp, #4294967295
 801536c:	fa1f fb83 	uxth.w	fp, r3
 8015370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015374:	459b      	cmp	fp, r3
 8015376:	d00b      	beq.n	8015390 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8015378:	7961      	ldrb	r1, [r4, #5]
 801537a:	4648      	mov	r0, r9
 801537c:	f001 ffce 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015380:	f1b8 0f00 	cmp.w	r8, #0
 8015384:	d0f0      	beq.n	8015368 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8015386:	7961      	ldrb	r1, [r4, #5]
 8015388:	a82e      	add	r0, sp, #184	; 0xb8
 801538a:	f001 ffc7 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801538e:	e7eb      	b.n	8015368 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8015390:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015394:	b2b3      	uxth	r3, r6
 8015396:	441a      	add	r2, r3
 8015398:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801539c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80153a0:	1ad3      	subs	r3, r2, r3
 80153a2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80153a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80153aa:	3d01      	subs	r5, #1
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d1cd      	bne.n	801534c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 80153b0:	b05b      	add	sp, #364	; 0x16c
 80153b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153b6:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 80153ba:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 80153be:	7c23      	ldrb	r3, [r4, #16]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d05f      	beq.n	8015484 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 80153c4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80153c8:	458b      	cmp	fp, r1
 80153ca:	bfd4      	ite	le
 80153cc:	2100      	movle	r1, #0
 80153ce:	2101      	movgt	r1, #1
 80153d0:	a810      	add	r0, sp, #64	; 0x40
 80153d2:	f7ff fe35 	bl	8015040 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80153d6:	f1b8 0f00 	cmp.w	r8, #0
 80153da:	d04c      	beq.n	8015476 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80153dc:	7c23      	ldrb	r3, [r4, #16]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d053      	beq.n	801548a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 80153e2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80153e6:	7922      	ldrb	r2, [r4, #4]
 80153e8:	2a01      	cmp	r2, #1
 80153ea:	d13c      	bne.n	8015466 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80153ec:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80153f0:	1ac0      	subs	r0, r0, r3
 80153f2:	2302      	movs	r3, #2
 80153f4:	fb90 f0f3 	sdiv	r0, r0, r3
 80153f8:	b200      	sxth	r0, r0
 80153fa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80153fe:	4418      	add	r0, r3
 8015400:	7c23      	ldrb	r3, [r4, #16]
 8015402:	8028      	strh	r0, [r5, #0]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d03a      	beq.n	801547e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8015408:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801540c:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8015410:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015414:	f8cd 9010 	str.w	r9, [sp, #16]
 8015418:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801541c:	2200      	movs	r2, #0
 801541e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8015422:	e9cd 5700 	strd	r5, r7, [sp]
 8015426:	4652      	mov	r2, sl
 8015428:	2100      	movs	r1, #0
 801542a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801542c:	f7ff fcb0 	bl	8014d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015430:	2800      	cmp	r0, #0
 8015432:	d1bd      	bne.n	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015434:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8015438:	b2b2      	uxth	r2, r6
 801543a:	4611      	mov	r1, r2
 801543c:	4413      	add	r3, r2
 801543e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8015442:	1a52      	subs	r2, r2, r1
 8015444:	7c21      	ldrb	r1, [r4, #16]
 8015446:	b21b      	sxth	r3, r3
 8015448:	b212      	sxth	r2, r2
 801544a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801544e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8015452:	b109      	cbz	r1, 8015458 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8015454:	42b2      	cmp	r2, r6
 8015456:	dbab      	blt.n	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015458:	887a      	ldrh	r2, [r7, #2]
 801545a:	88f9      	ldrh	r1, [r7, #6]
 801545c:	440a      	add	r2, r1
 801545e:	b212      	sxth	r2, r2
 8015460:	4293      	cmp	r3, r2
 8015462:	ddac      	ble.n	80153be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8015464:	e7a4      	b.n	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015466:	2a02      	cmp	r2, #2
 8015468:	d107      	bne.n	801547a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801546a:	7be2      	ldrb	r2, [r4, #15]
 801546c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8015470:	1a80      	subs	r0, r0, r2
 8015472:	1ac0      	subs	r0, r0, r3
 8015474:	e7c0      	b.n	80153f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8015476:	7be0      	ldrb	r0, [r4, #15]
 8015478:	e7bf      	b.n	80153fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801547a:	2000      	movs	r0, #0
 801547c:	e7bd      	b.n	80153fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801547e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015482:	e7c3      	b.n	801540c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8015484:	f1b8 0f00 	cmp.w	r8, #0
 8015488:	d0f5      	beq.n	8015476 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801548a:	2300      	movs	r3, #0
 801548c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015490:	6821      	ldr	r1, [r4, #0]
 8015492:	a82e      	add	r0, sp, #184	; 0xb8
 8015494:	f7ff fbf8 	bl	8014c88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015498:	b203      	sxth	r3, r0
 801549a:	e7a4      	b.n	80153e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801549c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801549c:	b510      	push	{r4, lr}
 801549e:	2b02      	cmp	r3, #2
 80154a0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80154a4:	d00b      	beq.n	80154be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80154a6:	2b03      	cmp	r3, #3
 80154a8:	d00e      	beq.n	80154c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80154aa:	2b01      	cmp	r3, #1
 80154ac:	d001      	beq.n	80154b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80154ae:	1860      	adds	r0, r4, r1
 80154b0:	bd10      	pop	{r4, pc}
 80154b2:	8880      	ldrh	r0, [r0, #4]
 80154b4:	4420      	add	r0, r4
 80154b6:	b200      	sxth	r0, r0
 80154b8:	1a80      	subs	r0, r0, r2
 80154ba:	3801      	subs	r0, #1
 80154bc:	e7f8      	b.n	80154b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80154be:	8880      	ldrh	r0, [r0, #4]
 80154c0:	4420      	add	r0, r4
 80154c2:	b200      	sxth	r0, r0
 80154c4:	1a40      	subs	r0, r0, r1
 80154c6:	e7f8      	b.n	80154ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80154c8:	18a0      	adds	r0, r4, r2
 80154ca:	e7f1      	b.n	80154b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080154cc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80154cc:	b510      	push	{r4, lr}
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80154d4:	d006      	beq.n	80154e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80154d6:	2b03      	cmp	r3, #3
 80154d8:	d00a      	beq.n	80154f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80154da:	2b01      	cmp	r3, #1
 80154dc:	bf14      	ite	ne
 80154de:	18a0      	addne	r0, r4, r2
 80154e0:	1860      	addeq	r0, r4, r1
 80154e2:	bd10      	pop	{r4, pc}
 80154e4:	88c0      	ldrh	r0, [r0, #6]
 80154e6:	4420      	add	r0, r4
 80154e8:	b200      	sxth	r0, r0
 80154ea:	1a80      	subs	r0, r0, r2
 80154ec:	3801      	subs	r0, #1
 80154ee:	e7f8      	b.n	80154e2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80154f0:	88c0      	ldrh	r0, [r0, #6]
 80154f2:	4420      	add	r0, r4
 80154f4:	b200      	sxth	r0, r0
 80154f6:	1a40      	subs	r0, r0, r1
 80154f8:	e7f8      	b.n	80154ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080154fc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80154fc:	4b01      	ldr	r3, [pc, #4]	; (8015504 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80154fe:	2200      	movs	r2, #0
 8015500:	601a      	str	r2, [r3, #0]
 8015502:	4770      	bx	lr
 8015504:	2002b090 	.word	0x2002b090

08015508 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8015508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801550a:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801550e:	1e05      	subs	r5, r0, #0
 8015510:	bfba      	itte	lt
 8015512:	f04f 37ff 	movlt.w	r7, #4294967295
 8015516:	426d      	neglt	r5, r5
 8015518:	2701      	movge	r7, #1
 801551a:	f1be 0f00 	cmp.w	lr, #0
 801551e:	bfb8      	it	lt
 8015520:	f1ce 0e00 	rsblt	lr, lr, #0
 8015524:	f04f 0601 	mov.w	r6, #1
 8015528:	fa4e f001 	asr.w	r0, lr, r1
 801552c:	fa06 f101 	lsl.w	r1, r6, r1
 8015530:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8015534:	f101 31ff 	add.w	r1, r1, #4294967295
 8015538:	ea01 010e 	and.w	r1, r1, lr
 801553c:	bfb8      	it	lt
 801553e:	427f      	neglt	r7, r7
 8015540:	434d      	muls	r5, r1
 8015542:	2c00      	cmp	r4, #0
 8015544:	f8dc 1000 	ldr.w	r1, [ip]
 8015548:	bfb8      	it	lt
 801554a:	4264      	neglt	r4, r4
 801554c:	fb03 1300 	mla	r3, r3, r0, r1
 8015550:	fb95 f1f4 	sdiv	r1, r5, r4
 8015554:	fb04 5511 	mls	r5, r4, r1, r5
 8015558:	441d      	add	r5, r3
 801555a:	fb95 f3f4 	sdiv	r3, r5, r4
 801555e:	fb04 5413 	mls	r4, r4, r3, r5
 8015562:	4419      	add	r1, r3
 8015564:	bfb8      	it	lt
 8015566:	427f      	neglt	r7, r7
 8015568:	fb02 1000 	mla	r0, r2, r0, r1
 801556c:	f8cc 4000 	str.w	r4, [ip]
 8015570:	4378      	muls	r0, r7
 8015572:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015574 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015578:	4c24      	ldr	r4, [pc, #144]	; (801560c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801557a:	6807      	ldr	r7, [r0, #0]
 801557c:	69a3      	ldr	r3, [r4, #24]
 801557e:	b086      	sub	sp, #24
 8015580:	4605      	mov	r5, r0
 8015582:	b92b      	cbnz	r3, 8015590 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8015584:	6840      	ldr	r0, [r0, #4]
 8015586:	e9c5 7000 	strd	r7, r0, [r5]
 801558a:	b006      	add	sp, #24
 801558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015590:	68a2      	ldr	r2, [r4, #8]
 8015592:	6820      	ldr	r0, [r4, #0]
 8015594:	ae06      	add	r6, sp, #24
 8015596:	f04f 0802 	mov.w	r8, #2
 801559a:	fb93 f1f8 	sdiv	r1, r3, r8
 801559e:	440a      	add	r2, r1
 80155a0:	f846 2d04 	str.w	r2, [r6, #-4]!
 80155a4:	69e1      	ldr	r1, [r4, #28]
 80155a6:	9700      	str	r7, [sp, #0]
 80155a8:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80155ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80155ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80155b0:	f7ff ffaa 	bl	8015508 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80155b4:	69a3      	ldr	r3, [r4, #24]
 80155b6:	9301      	str	r3, [sp, #4]
 80155b8:	686b      	ldr	r3, [r5, #4]
 80155ba:	9300      	str	r3, [sp, #0]
 80155bc:	4607      	mov	r7, r0
 80155be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80155c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80155c2:	6a21      	ldr	r1, [r4, #32]
 80155c4:	9602      	str	r6, [sp, #8]
 80155c6:	6860      	ldr	r0, [r4, #4]
 80155c8:	f7ff ff9e 	bl	8015508 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80155cc:	6963      	ldr	r3, [r4, #20]
 80155ce:	69a2      	ldr	r2, [r4, #24]
 80155d0:	fb92 f8f8 	sdiv	r8, r2, r8
 80155d4:	4443      	add	r3, r8
 80155d6:	9305      	str	r3, [sp, #20]
 80155d8:	682b      	ldr	r3, [r5, #0]
 80155da:	9300      	str	r3, [sp, #0]
 80155dc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80155e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80155e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80155e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80155e6:	4407      	add	r7, r0
 80155e8:	68e0      	ldr	r0, [r4, #12]
 80155ea:	f7ff ff8d 	bl	8015508 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80155ee:	69a3      	ldr	r3, [r4, #24]
 80155f0:	9301      	str	r3, [sp, #4]
 80155f2:	686b      	ldr	r3, [r5, #4]
 80155f4:	9300      	str	r3, [sp, #0]
 80155f6:	4680      	mov	r8, r0
 80155f8:	9602      	str	r6, [sp, #8]
 80155fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80155fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80155fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015600:	6920      	ldr	r0, [r4, #16]
 8015602:	f7ff ff81 	bl	8015508 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8015606:	4440      	add	r0, r8
 8015608:	e7bd      	b.n	8015586 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801560a:	bf00      	nop
 801560c:	2002b094 	.word	0x2002b094

08015610 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015610:	b510      	push	{r4, lr}
 8015612:	4b07      	ldr	r3, [pc, #28]	; (8015630 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015614:	781b      	ldrb	r3, [r3, #0]
 8015616:	2b01      	cmp	r3, #1
 8015618:	d108      	bne.n	801562c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801561a:	4b06      	ldr	r3, [pc, #24]	; (8015634 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801561c:	880c      	ldrh	r4, [r1, #0]
 801561e:	881b      	ldrh	r3, [r3, #0]
 8015620:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015624:	3b01      	subs	r3, #1
 8015626:	1b1b      	subs	r3, r3, r4
 8015628:	8003      	strh	r3, [r0, #0]
 801562a:	800a      	strh	r2, [r1, #0]
 801562c:	bd10      	pop	{r4, pc}
 801562e:	bf00      	nop
 8015630:	2002b080 	.word	0x2002b080
 8015634:	2002b084 	.word	0x2002b084

08015638 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015638:	b510      	push	{r4, lr}
 801563a:	4b0a      	ldr	r3, [pc, #40]	; (8015664 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	2b01      	cmp	r3, #1
 8015640:	d10e      	bne.n	8015660 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015642:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015646:	8843      	ldrh	r3, [r0, #2]
 8015648:	f9b0 4000 	ldrsh.w	r4, [r0]
 801564c:	8044      	strh	r4, [r0, #2]
 801564e:	18ca      	adds	r2, r1, r3
 8015650:	4b05      	ldr	r3, [pc, #20]	; (8015668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015652:	881b      	ldrh	r3, [r3, #0]
 8015654:	1a9b      	subs	r3, r3, r2
 8015656:	8003      	strh	r3, [r0, #0]
 8015658:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801565c:	80c3      	strh	r3, [r0, #6]
 801565e:	8081      	strh	r1, [r0, #4]
 8015660:	bd10      	pop	{r4, pc}
 8015662:	bf00      	nop
 8015664:	2002b080 	.word	0x2002b080
 8015668:	2002b07c 	.word	0x2002b07c

0801566c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801566c:	b510      	push	{r4, lr}
 801566e:	4b07      	ldr	r3, [pc, #28]	; (801568c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	2b01      	cmp	r3, #1
 8015674:	d108      	bne.n	8015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015676:	f9b1 3000 	ldrsh.w	r3, [r1]
 801567a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801567e:	8003      	strh	r3, [r0, #0]
 8015680:	8893      	ldrh	r3, [r2, #4]
 8015682:	3b01      	subs	r3, #1
 8015684:	1b1b      	subs	r3, r3, r4
 8015686:	800b      	strh	r3, [r1, #0]
 8015688:	bd10      	pop	{r4, pc}
 801568a:	bf00      	nop
 801568c:	2002b080 	.word	0x2002b080

08015690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015690:	b513      	push	{r0, r1, r4, lr}
 8015692:	4b08      	ldr	r3, [pc, #32]	; (80156b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015694:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015698:	4b07      	ldr	r3, [pc, #28]	; (80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801569a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801569e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156a2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80156a6:	2400      	movs	r4, #0
 80156a8:	466a      	mov	r2, sp
 80156aa:	9400      	str	r4, [sp, #0]
 80156ac:	f7ff ffde 	bl	801566c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80156b0:	b002      	add	sp, #8
 80156b2:	bd10      	pop	{r4, pc}
 80156b4:	2002b07c 	.word	0x2002b07c
 80156b8:	2002b07e 	.word	0x2002b07e

080156bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80156bc:	b510      	push	{r4, lr}
 80156be:	4b0a      	ldr	r3, [pc, #40]	; (80156e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	460a      	mov	r2, r1
 80156c6:	d10d      	bne.n	80156e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80156c8:	8881      	ldrh	r1, [r0, #4]
 80156ca:	8803      	ldrh	r3, [r0, #0]
 80156cc:	440b      	add	r3, r1
 80156ce:	4601      	mov	r1, r0
 80156d0:	3b01      	subs	r3, #1
 80156d2:	f821 3b02 	strh.w	r3, [r1], #2
 80156d6:	f7ff ffc9 	bl	801566c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80156da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80156de:	88c2      	ldrh	r2, [r0, #6]
 80156e0:	8082      	strh	r2, [r0, #4]
 80156e2:	80c3      	strh	r3, [r0, #6]
 80156e4:	bd10      	pop	{r4, pc}
 80156e6:	bf00      	nop
 80156e8:	2002b080 	.word	0x2002b080

080156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80156ec:	b507      	push	{r0, r1, r2, lr}
 80156ee:	4b09      	ldr	r3, [pc, #36]	; (8015714 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80156f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80156f4:	4b08      	ldr	r3, [pc, #32]	; (8015718 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80156f6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80156fa:	2100      	movs	r1, #0
 80156fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015700:	9100      	str	r1, [sp, #0]
 8015702:	4669      	mov	r1, sp
 8015704:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015708:	f7ff ffd8 	bl	80156bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801570c:	b003      	add	sp, #12
 801570e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015712:	bf00      	nop
 8015714:	2002b07c 	.word	0x2002b07c
 8015718:	2002b07e 	.word	0x2002b07e

0801571c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801571c:	4b03      	ldr	r3, [pc, #12]	; (801572c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801571e:	6818      	ldr	r0, [r3, #0]
 8015720:	b110      	cbz	r0, 8015728 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015722:	6803      	ldr	r3, [r0, #0]
 8015724:	699b      	ldr	r3, [r3, #24]
 8015726:	4718      	bx	r3
 8015728:	4770      	bx	lr
 801572a:	bf00      	nop
 801572c:	2002b0e4 	.word	0x2002b0e4

08015730 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015730:	4770      	bx	lr
	...

08015734 <_ZN8touchgfx11Application4drawEv>:
 8015734:	b507      	push	{r0, r1, r2, lr}
 8015736:	4b09      	ldr	r3, [pc, #36]	; (801575c <_ZN8touchgfx11Application4drawEv+0x28>)
 8015738:	f9b3 2000 	ldrsh.w	r2, [r3]
 801573c:	4b08      	ldr	r3, [pc, #32]	; (8015760 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801573e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015746:	f8ad 3006 	strh.w	r3, [sp, #6]
 801574a:	6803      	ldr	r3, [r0, #0]
 801574c:	2100      	movs	r1, #0
 801574e:	9100      	str	r1, [sp, #0]
 8015750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015752:	4669      	mov	r1, sp
 8015754:	4798      	blx	r3
 8015756:	b003      	add	sp, #12
 8015758:	f85d fb04 	ldr.w	pc, [sp], #4
 801575c:	2002b07c 	.word	0x2002b07c
 8015760:	2002b07e 	.word	0x2002b07e

08015764 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015764:	4b03      	ldr	r3, [pc, #12]	; (8015774 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015766:	6818      	ldr	r0, [r3, #0]
 8015768:	b110      	cbz	r0, 8015770 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801576a:	6803      	ldr	r3, [r0, #0]
 801576c:	69db      	ldr	r3, [r3, #28]
 801576e:	4718      	bx	r3
 8015770:	4770      	bx	lr
 8015772:	bf00      	nop
 8015774:	2002b0e4 	.word	0x2002b0e4

08015778 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015778:	4b03      	ldr	r3, [pc, #12]	; (8015788 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801577a:	6818      	ldr	r0, [r3, #0]
 801577c:	b110      	cbz	r0, 8015784 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801577e:	6803      	ldr	r3, [r0, #0]
 8015780:	6a1b      	ldr	r3, [r3, #32]
 8015782:	4718      	bx	r3
 8015784:	4770      	bx	lr
 8015786:	bf00      	nop
 8015788:	2002b0e4 	.word	0x2002b0e4

0801578c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801578c:	4b03      	ldr	r3, [pc, #12]	; (801579c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801578e:	6818      	ldr	r0, [r3, #0]
 8015790:	b110      	cbz	r0, 8015798 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8015792:	6803      	ldr	r3, [r0, #0]
 8015794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015796:	4718      	bx	r3
 8015798:	4770      	bx	lr
 801579a:	bf00      	nop
 801579c:	2002b0e4 	.word	0x2002b0e4

080157a0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80157a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157a4:	4d3a      	ldr	r5, [pc, #232]	; (8015890 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 80157a6:	4604      	mov	r4, r0
 80157a8:	6828      	ldr	r0, [r5, #0]
 80157aa:	b140      	cbz	r0, 80157be <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80157ac:	7a03      	ldrb	r3, [r0, #8]
 80157ae:	b933      	cbnz	r3, 80157be <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80157b0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80157b4:	6803      	ldr	r3, [r0, #0]
 80157b6:	689b      	ldr	r3, [r3, #8]
 80157b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157bc:	4718      	bx	r3
 80157be:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80157c2:	b97b      	cbnz	r3, 80157e4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80157c4:	b170      	cbz	r0, 80157e4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80157c6:	7a03      	ldrb	r3, [r0, #8]
 80157c8:	b163      	cbz	r3, 80157e4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80157ca:	4b32      	ldr	r3, [pc, #200]	; (8015894 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 80157cc:	6818      	ldr	r0, [r3, #0]
 80157ce:	b110      	cbz	r0, 80157d6 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 80157d0:	6803      	ldr	r3, [r0, #0]
 80157d2:	691b      	ldr	r3, [r3, #16]
 80157d4:	4798      	blx	r3
 80157d6:	6828      	ldr	r0, [r5, #0]
 80157d8:	6803      	ldr	r3, [r0, #0]
 80157da:	68db      	ldr	r3, [r3, #12]
 80157dc:	4798      	blx	r3
 80157de:	2301      	movs	r3, #1
 80157e0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80157e4:	2500      	movs	r5, #0
 80157e6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80157ea:	42a8      	cmp	r0, r5
 80157ec:	dd0c      	ble.n	8015808 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80157ee:	1963      	adds	r3, r4, r5
 80157f0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80157f4:	b132      	cbz	r2, 8015804 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80157f6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80157fa:	4413      	add	r3, r2
 80157fc:	6858      	ldr	r0, [r3, #4]
 80157fe:	6803      	ldr	r3, [r0, #0]
 8015800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015802:	4798      	blx	r3
 8015804:	3501      	adds	r5, #1
 8015806:	e7ee      	b.n	80157e6 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8015808:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801580c:	3801      	subs	r0, #1
 801580e:	3678      	adds	r6, #120	; 0x78
 8015810:	f04f 0c00 	mov.w	ip, #0
 8015814:	1c43      	adds	r3, r0, #1
 8015816:	d033      	beq.n	8015880 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8015818:	1823      	adds	r3, r4, r0
 801581a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801581e:	bb6a      	cbnz	r2, 801587c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8015820:	b281      	uxth	r1, r0
 8015822:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8015826:	1d25      	adds	r5, r4, #4
 8015828:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801582c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8015830:	4293      	cmp	r3, r2
 8015832:	dc0a      	bgt.n	801584a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8015834:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8015838:	4422      	add	r2, r4
 801583a:	18b1      	adds	r1, r6, r2
 801583c:	b289      	uxth	r1, r1
 801583e:	428b      	cmp	r3, r1
 8015840:	d919      	bls.n	8015876 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8015842:	7851      	ldrb	r1, [r2, #1]
 8015844:	f802 1b01 	strb.w	r1, [r2], #1
 8015848:	e7f7      	b.n	801583a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801584a:	682f      	ldr	r7, [r5, #0]
 801584c:	45b9      	cmp	r9, r7
 801584e:	f105 0804 	add.w	r8, r5, #4
 8015852:	d10d      	bne.n	8015870 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8015854:	4696      	mov	lr, r2
 8015856:	f1be 0f1e 	cmp.w	lr, #30
 801585a:	dc06      	bgt.n	801586a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801585c:	f10e 0e01 	add.w	lr, lr, #1
 8015860:	686f      	ldr	r7, [r5, #4]
 8015862:	f845 7b04 	str.w	r7, [r5], #4
 8015866:	4573      	cmp	r3, lr
 8015868:	dcf5      	bgt.n	8015856 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801586a:	3b01      	subs	r3, #1
 801586c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8015870:	3201      	adds	r2, #1
 8015872:	4645      	mov	r5, r8
 8015874:	e7da      	b.n	801582c <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8015876:	4423      	add	r3, r4
 8015878:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801587c:	3801      	subs	r0, #1
 801587e:	e7c9      	b.n	8015814 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8015880:	4b04      	ldr	r3, [pc, #16]	; (8015894 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8015882:	6818      	ldr	r0, [r3, #0]
 8015884:	b110      	cbz	r0, 801588c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8015886:	6803      	ldr	r3, [r0, #0]
 8015888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801588a:	e795      	b.n	80157b8 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801588c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015890:	2002b0e8 	.word	0x2002b0e8
 8015894:	2002b0e4 	.word	0x2002b0e4

08015898 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015898:	b570      	push	{r4, r5, r6, lr}
 801589a:	4606      	mov	r6, r0
 801589c:	460c      	mov	r4, r1
 801589e:	b929      	cbnz	r1, 80158ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80158a0:	4b0c      	ldr	r3, [pc, #48]	; (80158d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80158a2:	4a0d      	ldr	r2, [pc, #52]	; (80158d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80158a4:	480d      	ldr	r0, [pc, #52]	; (80158dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80158a6:	2164      	movs	r1, #100	; 0x64
 80158a8:	f00d fe6a 	bl	8023580 <__assert_func>
 80158ac:	4d0c      	ldr	r5, [pc, #48]	; (80158e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80158ae:	2300      	movs	r3, #0
 80158b0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80158b4:	6828      	ldr	r0, [r5, #0]
 80158b6:	b110      	cbz	r0, 80158be <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80158b8:	6803      	ldr	r3, [r0, #0]
 80158ba:	695b      	ldr	r3, [r3, #20]
 80158bc:	4798      	blx	r3
 80158be:	602c      	str	r4, [r5, #0]
 80158c0:	6823      	ldr	r3, [r4, #0]
 80158c2:	4620      	mov	r0, r4
 80158c4:	68db      	ldr	r3, [r3, #12]
 80158c6:	4798      	blx	r3
 80158c8:	6833      	ldr	r3, [r6, #0]
 80158ca:	4630      	mov	r0, r6
 80158cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158d2:	4718      	bx	r3
 80158d4:	080278c0 	.word	0x080278c0
 80158d8:	08027988 	.word	0x08027988
 80158dc:	080278ca 	.word	0x080278ca
 80158e0:	2002b0e4 	.word	0x2002b0e4

080158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80158e4:	b510      	push	{r4, lr}
 80158e6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80158ea:	888a      	ldrh	r2, [r1, #4]
 80158ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 80158f0:	4422      	add	r2, r4
 80158f2:	b212      	sxth	r2, r2
 80158f4:	4293      	cmp	r3, r2
 80158f6:	da15      	bge.n	8015924 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80158f8:	8882      	ldrh	r2, [r0, #4]
 80158fa:	4413      	add	r3, r2
 80158fc:	b21b      	sxth	r3, r3
 80158fe:	429c      	cmp	r4, r3
 8015900:	da10      	bge.n	8015924 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015902:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015906:	88c9      	ldrh	r1, [r1, #6]
 8015908:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801590c:	4419      	add	r1, r3
 801590e:	b209      	sxth	r1, r1
 8015910:	428a      	cmp	r2, r1
 8015912:	da07      	bge.n	8015924 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015914:	88c0      	ldrh	r0, [r0, #6]
 8015916:	4410      	add	r0, r2
 8015918:	b200      	sxth	r0, r0
 801591a:	4283      	cmp	r3, r0
 801591c:	bfac      	ite	ge
 801591e:	2000      	movge	r0, #0
 8015920:	2001      	movlt	r0, #1
 8015922:	bd10      	pop	{r4, pc}
 8015924:	2000      	movs	r0, #0
 8015926:	e7fc      	b.n	8015922 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015928 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8015928:	b570      	push	{r4, r5, r6, lr}
 801592a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801592e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015932:	42ac      	cmp	r4, r5
 8015934:	db18      	blt.n	8015968 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8015936:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801593a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801593e:	429a      	cmp	r2, r3
 8015940:	db12      	blt.n	8015968 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8015942:	8886      	ldrh	r6, [r0, #4]
 8015944:	4435      	add	r5, r6
 8015946:	888e      	ldrh	r6, [r1, #4]
 8015948:	4434      	add	r4, r6
 801594a:	b22d      	sxth	r5, r5
 801594c:	b224      	sxth	r4, r4
 801594e:	42a5      	cmp	r5, r4
 8015950:	db0a      	blt.n	8015968 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8015952:	88c0      	ldrh	r0, [r0, #6]
 8015954:	4418      	add	r0, r3
 8015956:	88cb      	ldrh	r3, [r1, #6]
 8015958:	441a      	add	r2, r3
 801595a:	b200      	sxth	r0, r0
 801595c:	b212      	sxth	r2, r2
 801595e:	4290      	cmp	r0, r2
 8015960:	bfb4      	ite	lt
 8015962:	2000      	movlt	r0, #0
 8015964:	2001      	movge	r0, #1
 8015966:	bd70      	pop	{r4, r5, r6, pc}
 8015968:	2000      	movs	r0, #0
 801596a:	e7fc      	b.n	8015966 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801596e:	4604      	mov	r4, r0
 8015970:	4608      	mov	r0, r1
 8015972:	460d      	mov	r5, r1
 8015974:	f7fd f936 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015978:	b978      	cbnz	r0, 801599a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801597a:	4620      	mov	r0, r4
 801597c:	f7fd f932 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015980:	f9b5 6000 	ldrsh.w	r6, [r5]
 8015984:	b150      	cbz	r0, 801599c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8015986:	8026      	strh	r6, [r4, #0]
 8015988:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801598c:	8063      	strh	r3, [r4, #2]
 801598e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015992:	80a3      	strh	r3, [r4, #4]
 8015994:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015998:	80e3      	strh	r3, [r4, #6]
 801599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801599c:	f9b4 1000 	ldrsh.w	r1, [r4]
 80159a0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80159a4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80159a8:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80159ac:	88ed      	ldrh	r5, [r5, #6]
 80159ae:	42b1      	cmp	r1, r6
 80159b0:	460f      	mov	r7, r1
 80159b2:	bfa8      	it	ge
 80159b4:	4637      	movge	r7, r6
 80159b6:	4293      	cmp	r3, r2
 80159b8:	4618      	mov	r0, r3
 80159ba:	4466      	add	r6, ip
 80159bc:	bfa8      	it	ge
 80159be:	4610      	movge	r0, r2
 80159c0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80159c4:	8027      	strh	r7, [r4, #0]
 80159c6:	442a      	add	r2, r5
 80159c8:	88e5      	ldrh	r5, [r4, #6]
 80159ca:	8060      	strh	r0, [r4, #2]
 80159cc:	4461      	add	r1, ip
 80159ce:	442b      	add	r3, r5
 80159d0:	b236      	sxth	r6, r6
 80159d2:	b209      	sxth	r1, r1
 80159d4:	b212      	sxth	r2, r2
 80159d6:	b21b      	sxth	r3, r3
 80159d8:	428e      	cmp	r6, r1
 80159da:	bfac      	ite	ge
 80159dc:	ebc7 0106 	rsbge	r1, r7, r6
 80159e0:	ebc7 0101 	rsblt	r1, r7, r1
 80159e4:	429a      	cmp	r2, r3
 80159e6:	bfac      	ite	ge
 80159e8:	ebc0 0202 	rsbge	r2, r0, r2
 80159ec:	ebc0 0203 	rsblt	r2, r0, r3
 80159f0:	80a1      	strh	r1, [r4, #4]
 80159f2:	80e2      	strh	r2, [r4, #6]
 80159f4:	e7d1      	b.n	801599a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080159f8 <_ZN8touchgfx11Application11getInstanceEv>:
 80159f8:	4b01      	ldr	r3, [pc, #4]	; (8015a00 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80159fa:	6818      	ldr	r0, [r3, #0]
 80159fc:	4770      	bx	lr
 80159fe:	bf00      	nop
 8015a00:	2002b0f4 	.word	0x2002b0f4

08015a04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8015a04:	2300      	movs	r3, #0
 8015a06:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8015a0a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8015a0e:	30a8      	adds	r0, #168	; 0xa8
 8015a10:	f802 3b01 	strb.w	r3, [r2], #1
 8015a14:	4282      	cmp	r2, r0
 8015a16:	d1fb      	bne.n	8015a10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8015a18:	4770      	bx	lr

08015a1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8015a20:	2200      	movs	r2, #0
 8015a22:	801a      	strh	r2, [r3, #0]
 8015a24:	805a      	strh	r2, [r3, #2]
 8015a26:	809a      	strh	r2, [r3, #4]
 8015a28:	80da      	strh	r2, [r3, #6]
 8015a2a:	3308      	adds	r3, #8
 8015a2c:	428b      	cmp	r3, r1
 8015a2e:	d1f8      	bne.n	8015a22 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015a30:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8015a34:	4770      	bx	lr
	...

08015a38 <_ZN8touchgfx11ApplicationC1Ev>:
 8015a38:	b570      	push	{r4, r5, r6, lr}
 8015a3a:	4b16      	ldr	r3, [pc, #88]	; (8015a94 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8015a3c:	6003      	str	r3, [r0, #0]
 8015a3e:	2500      	movs	r5, #0
 8015a40:	4604      	mov	r4, r0
 8015a42:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8015a46:	30a8      	adds	r0, #168	; 0xa8
 8015a48:	f7ff ffe7 	bl	8015a1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015a4c:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8015a50:	f7ff ffe3 	bl	8015a1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015a54:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8015a58:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8015a5c:	490e      	ldr	r1, [pc, #56]	; (8015a98 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8015a5e:	480f      	ldr	r0, [pc, #60]	; (8015a9c <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8015a60:	4e0f      	ldr	r6, [pc, #60]	; (8015aa0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8015a62:	f00d fc5b 	bl	802331c <CRC_Lock>
 8015a66:	4b0f      	ldr	r3, [pc, #60]	; (8015aa4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8015a68:	b158      	cbz	r0, 8015a82 <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 8015a6a:	801d      	strh	r5, [r3, #0]
 8015a6c:	4a0e      	ldr	r2, [pc, #56]	; (8015aa8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8015a6e:	2300      	movs	r3, #0
 8015a70:	6013      	str	r3, [r2, #0]
 8015a72:	4a0e      	ldr	r2, [pc, #56]	; (8015aac <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8015a74:	6033      	str	r3, [r6, #0]
 8015a76:	4620      	mov	r0, r4
 8015a78:	6013      	str	r3, [r2, #0]
 8015a7a:	f7ff ffc3 	bl	8015a04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8015a7e:	4620      	mov	r0, r4
 8015a80:	bd70      	pop	{r4, r5, r6, pc}
 8015a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015a86:	2002      	movs	r0, #2
 8015a88:	801a      	strh	r2, [r3, #0]
 8015a8a:	6030      	str	r0, [r6, #0]
 8015a8c:	f000 ff24 	bl	80168d8 <_ZN8touchgfx6Screen4drawEv>
 8015a90:	e7ec      	b.n	8015a6c <_ZN8touchgfx11ApplicationC1Ev+0x34>
 8015a92:	bf00      	nop
 8015a94:	08027954 	.word	0x08027954
 8015a98:	b5e8b5cd 	.word	0xb5e8b5cd
 8015a9c:	f407a5c2 	.word	0xf407a5c2
 8015aa0:	2002b0e4 	.word	0x2002b0e4
 8015aa4:	2000002c 	.word	0x2000002c
 8015aa8:	2002b0f4 	.word	0x2002b0f4
 8015aac:	2002b0e8 	.word	0x2002b0e8

08015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	8003      	strh	r3, [r0, #0]
 8015ab4:	8043      	strh	r3, [r0, #2]
 8015ab6:	8083      	strh	r3, [r0, #4]
 8015ab8:	80c3      	strh	r3, [r0, #6]
 8015aba:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8015abe:	4293      	cmp	r3, r2
 8015ac0:	b530      	push	{r4, r5, lr}
 8015ac2:	d912      	bls.n	8015aea <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8015ac4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8015ac8:	3b01      	subs	r3, #1
 8015aca:	6825      	ldr	r5, [r4, #0]
 8015acc:	6005      	str	r5, [r0, #0]
 8015ace:	b29b      	uxth	r3, r3
 8015ad0:	6865      	ldr	r5, [r4, #4]
 8015ad2:	6045      	str	r5, [r0, #4]
 8015ad4:	4293      	cmp	r3, r2
 8015ad6:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8015ada:	d906      	bls.n	8015aea <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8015adc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8015ae0:	681d      	ldr	r5, [r3, #0]
 8015ae2:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8015ae6:	685d      	ldr	r5, [r3, #4]
 8015ae8:	6065      	str	r5, [r4, #4]
 8015aea:	bd30      	pop	{r4, r5, pc}

08015aec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8015aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015aee:	466b      	mov	r3, sp
 8015af0:	e883 0006 	stmia.w	r3, {r1, r2}
 8015af4:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8015af8:	2a07      	cmp	r2, #7
 8015afa:	4604      	mov	r4, r0
 8015afc:	d906      	bls.n	8015b0c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8015afe:	4b09      	ldr	r3, [pc, #36]	; (8015b24 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8015b00:	4a09      	ldr	r2, [pc, #36]	; (8015b28 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8015b02:	480a      	ldr	r0, [pc, #40]	; (8015b2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8015b04:	f44f 7102 	mov.w	r1, #520	; 0x208
 8015b08:	f00d fd3a 	bl	8023580 <__assert_func>
 8015b0c:	1c51      	adds	r1, r2, #1
 8015b0e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8015b12:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8015b16:	cb03      	ldmia	r3!, {r0, r1}
 8015b18:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8015b1c:	6069      	str	r1, [r5, #4]
 8015b1e:	b003      	add	sp, #12
 8015b20:	bd30      	pop	{r4, r5, pc}
 8015b22:	bf00      	nop
 8015b24:	080278f4 	.word	0x080278f4
 8015b28:	080279cc 	.word	0x080279cc
 8015b2c:	08027923 	.word	0x08027923

08015b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b34:	b089      	sub	sp, #36	; 0x24
 8015b36:	466c      	mov	r4, sp
 8015b38:	4606      	mov	r6, r0
 8015b3a:	4620      	mov	r0, r4
 8015b3c:	e884 0006 	stmia.w	r4, {r1, r2}
 8015b40:	f7fd f850 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b44:	bbb0      	cbnz	r0, 8015bb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8015b46:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8015b4a:	b1fd      	cbz	r5, 8015b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8015b4c:	3d01      	subs	r5, #1
 8015b4e:	af04      	add	r7, sp, #16
 8015b50:	f04f 090a 	mov.w	r9, #10
 8015b54:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8015b58:	ab02      	add	r3, sp, #8
 8015b5a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015b5e:	6851      	ldr	r1, [r2, #4]
 8015b60:	c303      	stmia	r3!, {r0, r1}
 8015b62:	4621      	mov	r1, r4
 8015b64:	a802      	add	r0, sp, #8
 8015b66:	fa1f f885 	uxth.w	r8, r5
 8015b6a:	f7ff fedd 	bl	8015928 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015b6e:	bb08      	cbnz	r0, 8015bb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8015b70:	a902      	add	r1, sp, #8
 8015b72:	4620      	mov	r0, r4
 8015b74:	f7ff fed8 	bl	8015928 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015b78:	b1f8      	cbz	r0, 8015bba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8015b7a:	4642      	mov	r2, r8
 8015b7c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8015b80:	a806      	add	r0, sp, #24
 8015b82:	f7ff ff95 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015b86:	f115 35ff 	adds.w	r5, r5, #4294967295
 8015b8a:	d2e3      	bcs.n	8015b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8015b8c:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8015b90:	2b08      	cmp	r3, #8
 8015b92:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8015b96:	d108      	bne.n	8015baa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8015b98:	4629      	mov	r1, r5
 8015b9a:	a806      	add	r0, sp, #24
 8015b9c:	2207      	movs	r2, #7
 8015b9e:	f7ff ff87 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015ba2:	a906      	add	r1, sp, #24
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	f7ff fee1 	bl	801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015baa:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015bae:	4628      	mov	r0, r5
 8015bb0:	f7ff ff9c 	bl	8015aec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015bb4:	b009      	add	sp, #36	; 0x24
 8015bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bba:	4621      	mov	r1, r4
 8015bbc:	a802      	add	r0, sp, #8
 8015bbe:	f7ff fe91 	bl	80158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015bc2:	b150      	cbz	r0, 8015bda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8015bc4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8015bc8:	a806      	add	r0, sp, #24
 8015bca:	4642      	mov	r2, r8
 8015bcc:	f7ff ff70 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015bd0:	a902      	add	r1, sp, #8
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f7ff feca 	bl	801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015bd8:	e7d5      	b.n	8015b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015bda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015bde:	e887 0003 	stmia.w	r7, {r0, r1}
 8015be2:	a902      	add	r1, sp, #8
 8015be4:	4638      	mov	r0, r7
 8015be6:	f7ff fec1 	bl	801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015bea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015bee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015bf2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8015bf6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015bfa:	fb13 f302 	smulbb	r3, r3, r2
 8015bfe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8015c02:	fb11 f102 	smulbb	r1, r1, r2
 8015c06:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015c0a:	fb12 1100 	smlabb	r1, r2, r0, r1
 8015c0e:	220b      	movs	r2, #11
 8015c10:	fb09 f303 	mul.w	r3, r9, r3
 8015c14:	434a      	muls	r2, r1
 8015c16:	4293      	cmp	r3, r2
 8015c18:	dab5      	bge.n	8015b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015c1a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8015c1e:	a806      	add	r0, sp, #24
 8015c20:	4642      	mov	r2, r8
 8015c22:	f7ff ff45 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015c26:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015c2a:	e884 0003 	stmia.w	r4, {r0, r1}
 8015c2e:	e7aa      	b.n	8015b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08015c30 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015c30:	b530      	push	{r4, r5, lr}
 8015c32:	4b1d      	ldr	r3, [pc, #116]	; (8015ca8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8015c34:	b085      	sub	sp, #20
 8015c36:	460c      	mov	r4, r1
 8015c38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c3c:	4b1b      	ldr	r3, [pc, #108]	; (8015cac <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8015c3e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015c42:	2100      	movs	r1, #0
 8015c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c48:	9100      	str	r1, [sp, #0]
 8015c4a:	4605      	mov	r5, r0
 8015c4c:	6861      	ldr	r1, [r4, #4]
 8015c4e:	6820      	ldr	r0, [r4, #0]
 8015c50:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015c54:	ab02      	add	r3, sp, #8
 8015c56:	c303      	stmia	r3!, {r0, r1}
 8015c58:	4669      	mov	r1, sp
 8015c5a:	a802      	add	r0, sp, #8
 8015c5c:	f7fc ff7e 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 8015c60:	ab02      	add	r3, sp, #8
 8015c62:	cb03      	ldmia	r3!, {r0, r1}
 8015c64:	4b12      	ldr	r3, [pc, #72]	; (8015cb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8015c66:	6020      	str	r0, [r4, #0]
 8015c68:	6818      	ldr	r0, [r3, #0]
 8015c6a:	6061      	str	r1, [r4, #4]
 8015c6c:	b138      	cbz	r0, 8015c7e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8015c6e:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8015c72:	b133      	cbz	r3, 8015c82 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8015c74:	6821      	ldr	r1, [r4, #0]
 8015c76:	6862      	ldr	r2, [r4, #4]
 8015c78:	4628      	mov	r0, r5
 8015c7a:	f7ff ff59 	bl	8015b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015c7e:	b005      	add	sp, #20
 8015c80:	bd30      	pop	{r4, r5, pc}
 8015c82:	6803      	ldr	r3, [r0, #0]
 8015c84:	4621      	mov	r1, r4
 8015c86:	689b      	ldr	r3, [r3, #8]
 8015c88:	4798      	blx	r3
 8015c8a:	4b0a      	ldr	r3, [pc, #40]	; (8015cb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8015c8c:	6818      	ldr	r0, [r3, #0]
 8015c8e:	b118      	cbz	r0, 8015c98 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8015c90:	6803      	ldr	r3, [r0, #0]
 8015c92:	4621      	mov	r1, r4
 8015c94:	689b      	ldr	r3, [r3, #8]
 8015c96:	4798      	blx	r3
 8015c98:	4b07      	ldr	r3, [pc, #28]	; (8015cb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8015c9a:	6818      	ldr	r0, [r3, #0]
 8015c9c:	6803      	ldr	r3, [r0, #0]
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	695b      	ldr	r3, [r3, #20]
 8015ca2:	4798      	blx	r3
 8015ca4:	e7eb      	b.n	8015c7e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8015ca6:	bf00      	nop
 8015ca8:	2002b07c 	.word	0x2002b07c
 8015cac:	2002b07e 	.word	0x2002b07e
 8015cb0:	2002b0e4 	.word	0x2002b0e4
 8015cb4:	2002b0e0 	.word	0x2002b0e0
 8015cb8:	2002b088 	.word	0x2002b088

08015cbc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8015cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc0:	4604      	mov	r4, r0
 8015cc2:	b09b      	sub	sp, #108	; 0x6c
 8015cc4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8015cc8:	b129      	cbz	r1, 8015cd6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8015cca:	2300      	movs	r3, #0
 8015ccc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8015cd0:	b01b      	add	sp, #108	; 0x6c
 8015cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cd6:	4baf      	ldr	r3, [pc, #700]	; (8015f94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	b33b      	cbz	r3, 8015d2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8015cdc:	4dae      	ldr	r5, [pc, #696]	; (8015f98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8015cde:	4628      	mov	r0, r5
 8015ce0:	f7fc ff80 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ce4:	4606      	mov	r6, r0
 8015ce6:	bb08      	cbnz	r0, 8015d2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8015ce8:	4628      	mov	r0, r5
 8015cea:	f7ff fca5 	bl	8015638 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015cee:	6829      	ldr	r1, [r5, #0]
 8015cf0:	686a      	ldr	r2, [r5, #4]
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f7ff ff1c 	bl	8015b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015cf8:	802e      	strh	r6, [r5, #0]
 8015cfa:	806e      	strh	r6, [r5, #2]
 8015cfc:	80ae      	strh	r6, [r5, #4]
 8015cfe:	80ee      	strh	r6, [r5, #6]
 8015d00:	4fa6      	ldr	r7, [pc, #664]	; (8015f9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8015d02:	a809      	add	r0, sp, #36	; 0x24
 8015d04:	f7ff fe89 	bl	8015a1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015d08:	883d      	ldrh	r5, [r7, #0]
 8015d0a:	462e      	mov	r6, r5
 8015d0c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015d10:	42b3      	cmp	r3, r6
 8015d12:	d910      	bls.n	8015d36 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8015d14:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015d18:	a809      	add	r0, sp, #36	; 0x24
 8015d1a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8015d1e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8015d22:	3601      	adds	r6, #1
 8015d24:	f7ff fee2 	bl	8015aec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015d28:	b2b6      	uxth	r6, r6
 8015d2a:	e7ef      	b.n	8015d0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8015d2c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d1e5      	bne.n	8015d00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8015d34:	e7cc      	b.n	8015cd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015d36:	462e      	mov	r6, r5
 8015d38:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8015d3c:	42b3      	cmp	r3, r6
 8015d3e:	d90b      	bls.n	8015d58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8015d40:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015d44:	4620      	mov	r0, r4
 8015d46:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8015d4a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8015d4e:	3601      	adds	r6, #1
 8015d50:	f7ff feee 	bl	8015b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015d54:	b2b6      	uxth	r6, r6
 8015d56:	e7ef      	b.n	8015d38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8015d58:	4e91      	ldr	r6, [pc, #580]	; (8015fa0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8015d5a:	6833      	ldr	r3, [r6, #0]
 8015d5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	f040 8092 	bne.w	8015e8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8015d66:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8015d6a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8015d6e:	33aa      	adds	r3, #170	; 0xaa
 8015d70:	f04f 0900 	mov.w	r9, #0
 8015d74:	42a8      	cmp	r0, r5
 8015d76:	f103 0308 	add.w	r3, r3, #8
 8015d7a:	dd0a      	ble.n	8015d92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8015d7c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8015d80:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8015d84:	440a      	add	r2, r1
 8015d86:	b212      	sxth	r2, r2
 8015d88:	4591      	cmp	r9, r2
 8015d8a:	bfb8      	it	lt
 8015d8c:	4691      	movlt	r9, r2
 8015d8e:	3501      	adds	r5, #1
 8015d90:	e7f0      	b.n	8015d74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8015d92:	4b84      	ldr	r3, [pc, #528]	; (8015fa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8015d94:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8015fac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8015d98:	881d      	ldrh	r5, [r3, #0]
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8015da0:	2d0f      	cmp	r5, #15
 8015da2:	bf8c      	ite	hi
 8015da4:	08ed      	lsrhi	r5, r5, #3
 8015da6:	2501      	movls	r5, #1
 8015da8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015dac:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8015db0:	6830      	ldr	r0, [r6, #0]
 8015db2:	440b      	add	r3, r1
 8015db4:	b21b      	sxth	r3, r3
 8015db6:	4599      	cmp	r9, r3
 8015db8:	6802      	ldr	r2, [r0, #0]
 8015dba:	dd49      	ble.n	8015e50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8015dbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8015dc0:	4798      	blx	r3
 8015dc2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015dc6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015dca:	4413      	add	r3, r2
 8015dcc:	b21b      	sxth	r3, r3
 8015dce:	195a      	adds	r2, r3, r5
 8015dd0:	4290      	cmp	r0, r2
 8015dd2:	da07      	bge.n	8015de4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8015dd4:	4581      	cmp	r9, r0
 8015dd6:	dd05      	ble.n	8015de4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8015dd8:	4298      	cmp	r0, r3
 8015dda:	da33      	bge.n	8015e44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	dd31      	ble.n	8015e44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8015de0:	4648      	mov	r0, r9
 8015de2:	e004      	b.n	8015dee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8015de4:	4298      	cmp	r0, r3
 8015de6:	dbfb      	blt.n	8015de0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8015de8:	4548      	cmp	r0, r9
 8015dea:	bfa8      	it	ge
 8015dec:	4648      	movge	r0, r9
 8015dee:	f9b8 2000 	ldrsh.w	r2, [r8]
 8015df2:	f8b7 a000 	ldrh.w	sl, [r7]
 8015df6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	1ac0      	subs	r0, r0, r3
 8015dfe:	f8ad 1014 	strh.w	r1, [sp, #20]
 8015e02:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015e06:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015e0a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015e0e:	4553      	cmp	r3, sl
 8015e10:	d9ca      	bls.n	8015da8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8015e12:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8015e16:	ab07      	add	r3, sp, #28
 8015e18:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015e1c:	6851      	ldr	r1, [r2, #4]
 8015e1e:	c303      	stmia	r3!, {r0, r1}
 8015e20:	a807      	add	r0, sp, #28
 8015e22:	a905      	add	r1, sp, #20
 8015e24:	f7fc fe9a 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 8015e28:	a807      	add	r0, sp, #28
 8015e2a:	f7fc fedb 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015e2e:	b920      	cbnz	r0, 8015e3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8015e30:	6823      	ldr	r3, [r4, #0]
 8015e32:	a907      	add	r1, sp, #28
 8015e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e36:	4620      	mov	r0, r4
 8015e38:	4798      	blx	r3
 8015e3a:	f10a 0a01 	add.w	sl, sl, #1
 8015e3e:	fa1f fa8a 	uxth.w	sl, sl
 8015e42:	e7e2      	b.n	8015e0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8015e44:	6830      	ldr	r0, [r6, #0]
 8015e46:	6803      	ldr	r3, [r0, #0]
 8015e48:	2101      	movs	r1, #1
 8015e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e4c:	4798      	blx	r3
 8015e4e:	e7ab      	b.n	8015da8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8015e50:	69d3      	ldr	r3, [r2, #28]
 8015e52:	4798      	blx	r3
 8015e54:	4b54      	ldr	r3, [pc, #336]	; (8015fa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8015e56:	781b      	ldrb	r3, [r3, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	f43f af39 	beq.w	8015cd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015e5e:	2300      	movs	r3, #0
 8015e60:	883d      	ldrh	r5, [r7, #0]
 8015e62:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8015e66:	34ea      	adds	r4, #234	; 0xea
 8015e68:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8015e6c:	42ab      	cmp	r3, r5
 8015e6e:	f67f af2f 	bls.w	8015cd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015e72:	ab1a      	add	r3, sp, #104	; 0x68
 8015e74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015e78:	3b44      	subs	r3, #68	; 0x44
 8015e7a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015e7e:	4620      	mov	r0, r4
 8015e80:	3501      	adds	r5, #1
 8015e82:	f7ff fe33 	bl	8015aec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015e86:	b2ad      	uxth	r5, r5
 8015e88:	e7ee      	b.n	8015e68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8015e8a:	2b02      	cmp	r3, #2
 8015e8c:	d16a      	bne.n	8015f64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8015e8e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8015fb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8015e92:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015e96:	42ab      	cmp	r3, r5
 8015e98:	d9dc      	bls.n	8015e54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8015e9a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015e9e:	ab03      	add	r3, sp, #12
 8015ea0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015ea4:	6851      	ldr	r1, [r2, #4]
 8015ea6:	c303      	stmia	r3!, {r0, r1}
 8015ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8015eac:	2b01      	cmp	r3, #1
 8015eae:	d102      	bne.n	8015eb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8015eb0:	a803      	add	r0, sp, #12
 8015eb2:	f7ff fc1b 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015eb6:	a803      	add	r0, sp, #12
 8015eb8:	f7fc fe94 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	d14a      	bne.n	8015f56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8015ec0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015ec4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015ec8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015ed0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015ed4:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015ed8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015edc:	f10d 0914 	add.w	r9, sp, #20
 8015ee0:	f10d 081c 	add.w	r8, sp, #28
 8015ee4:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8015ee8:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8015eec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015ef0:	6830      	ldr	r0, [r6, #0]
 8015ef2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015ef6:	f8d0 e000 	ldr.w	lr, [r0]
 8015efa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8015efe:	44dc      	add	ip, fp
 8015f00:	ebac 0c02 	sub.w	ip, ip, r2
 8015f04:	fa1f fc8c 	uxth.w	ip, ip
 8015f08:	f8cd c000 	str.w	ip, [sp]
 8015f0c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8015f10:	47d8      	blx	fp
 8015f12:	f89a 3000 	ldrb.w	r3, [sl]
 8015f16:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015f1a:	2b01      	cmp	r3, #1
 8015f1c:	d11e      	bne.n	8015f5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8015f1e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015f22:	e888 0003 	stmia.w	r8, {r0, r1}
 8015f26:	4640      	mov	r0, r8
 8015f28:	f7ff fb86 	bl	8015638 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015f2c:	6823      	ldr	r3, [r4, #0]
 8015f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f30:	4641      	mov	r1, r8
 8015f32:	4620      	mov	r0, r4
 8015f34:	4798      	blx	r3
 8015f36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015f3a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015f3e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8015f42:	4413      	add	r3, r2
 8015f44:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8015f48:	440a      	add	r2, r1
 8015f4a:	b21b      	sxth	r3, r3
 8015f4c:	b212      	sxth	r2, r2
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f54:	dbc6      	blt.n	8015ee4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8015f56:	3501      	adds	r5, #1
 8015f58:	b2ad      	uxth	r5, r5
 8015f5a:	e79a      	b.n	8015e92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8015f5c:	6823      	ldr	r3, [r4, #0]
 8015f5e:	4649      	mov	r1, r9
 8015f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f62:	e7e6      	b.n	8015f32 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8015f64:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015f68:	42ab      	cmp	r3, r5
 8015f6a:	f67f af73 	bls.w	8015e54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8015f6e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015f72:	ab07      	add	r3, sp, #28
 8015f74:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015f78:	6851      	ldr	r1, [r2, #4]
 8015f7a:	c303      	stmia	r3!, {r0, r1}
 8015f7c:	a807      	add	r0, sp, #28
 8015f7e:	f7fc fe31 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015f82:	b920      	cbnz	r0, 8015f8e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8015f84:	6823      	ldr	r3, [r4, #0]
 8015f86:	a907      	add	r1, sp, #28
 8015f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	4798      	blx	r3
 8015f8e:	3501      	adds	r5, #1
 8015f90:	b2ad      	uxth	r5, r5
 8015f92:	e7e7      	b.n	8015f64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8015f94:	2002b0e0 	.word	0x2002b0e0
 8015f98:	2002b0ec 	.word	0x2002b0ec
 8015f9c:	2000002c 	.word	0x2000002c
 8015fa0:	2002b088 	.word	0x2002b088
 8015fa4:	2002b07e 	.word	0x2002b07e
 8015fa8:	2002b086 	.word	0x2002b086
 8015fac:	2002b07c 	.word	0x2002b07c
 8015fb0:	2002b080 	.word	0x2002b080

08015fb4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015fb4:	4b03      	ldr	r3, [pc, #12]	; (8015fc4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	801a      	strh	r2, [r3, #0]
 8015fba:	805a      	strh	r2, [r3, #2]
 8015fbc:	809a      	strh	r2, [r3, #4]
 8015fbe:	80da      	strh	r2, [r3, #6]
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop
 8015fc4:	2002b0ec 	.word	0x2002b0ec

08015fc8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8015fc8:	2000      	movs	r0, #0
 8015fca:	4770      	bx	lr

08015fcc <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8015fcc:	2000      	movs	r0, #0
 8015fce:	4770      	bx	lr

08015fd0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015fd0:	b508      	push	{r3, lr}
 8015fd2:	6803      	ldr	r3, [r0, #0]
 8015fd4:	68db      	ldr	r3, [r3, #12]
 8015fd6:	4798      	blx	r3
 8015fd8:	b128      	cbz	r0, 8015fe6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015fda:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8015fde:	7a80      	ldrb	r0, [r0, #10]
 8015fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015fe4:	4318      	orrs	r0, r3
 8015fe6:	bd08      	pop	{r3, pc}

08015fe8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8015fe8:	b40e      	push	{r1, r2, r3}
 8015fea:	b533      	push	{r0, r1, r4, r5, lr}
 8015fec:	ab05      	add	r3, sp, #20
 8015fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ff2:	9301      	str	r3, [sp, #4]
 8015ff4:	4b09      	ldr	r3, [pc, #36]	; (801601c <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 8015ff6:	685c      	ldr	r4, [r3, #4]
 8015ff8:	1061      	asrs	r1, r4, #1
 8015ffa:	07e4      	lsls	r4, r4, #31
 8015ffc:	eb00 0501 	add.w	r5, r0, r1
 8016000:	bf45      	ittet	mi
 8016002:	681b      	ldrmi	r3, [r3, #0]
 8016004:	5841      	ldrmi	r1, [r0, r1]
 8016006:	681c      	ldrpl	r4, [r3, #0]
 8016008:	58cc      	ldrmi	r4, [r1, r3]
 801600a:	9b01      	ldr	r3, [sp, #4]
 801600c:	2100      	movs	r1, #0
 801600e:	4628      	mov	r0, r5
 8016010:	47a0      	blx	r4
 8016012:	b002      	add	sp, #8
 8016014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016018:	b003      	add	sp, #12
 801601a:	4770      	bx	lr
 801601c:	20000014 	.word	0x20000014

08016020 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8016020:	b40c      	push	{r2, r3}
 8016022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016024:	ab06      	add	r3, sp, #24
 8016026:	f853 2b04 	ldr.w	r2, [r3], #4
 801602a:	9301      	str	r3, [sp, #4]
 801602c:	4b09      	ldr	r3, [pc, #36]	; (8016054 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801602e:	685d      	ldr	r5, [r3, #4]
 8016030:	106c      	asrs	r4, r5, #1
 8016032:	07ed      	lsls	r5, r5, #31
 8016034:	eb00 0604 	add.w	r6, r0, r4
 8016038:	bf45      	ittet	mi
 801603a:	681b      	ldrmi	r3, [r3, #0]
 801603c:	5900      	ldrmi	r0, [r0, r4]
 801603e:	681c      	ldrpl	r4, [r3, #0]
 8016040:	58c4      	ldrmi	r4, [r0, r3]
 8016042:	9b01      	ldr	r3, [sp, #4]
 8016044:	4630      	mov	r0, r6
 8016046:	47a0      	blx	r4
 8016048:	b002      	add	sp, #8
 801604a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801604e:	b002      	add	sp, #8
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop
 8016054:	20000014 	.word	0x20000014

08016058 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016058:	b40e      	push	{r1, r2, r3}
 801605a:	b530      	push	{r4, r5, lr}
 801605c:	b098      	sub	sp, #96	; 0x60
 801605e:	ab1b      	add	r3, sp, #108	; 0x6c
 8016060:	4604      	mov	r4, r0
 8016062:	f853 5b04 	ldr.w	r5, [r3], #4
 8016066:	9301      	str	r3, [sp, #4]
 8016068:	a802      	add	r0, sp, #8
 801606a:	f001 f815 	bl	8017098 <_ZN8touchgfx12TextProviderC1Ev>
 801606e:	6823      	ldr	r3, [r4, #0]
 8016070:	4620      	mov	r0, r4
 8016072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016074:	4798      	blx	r3
 8016076:	9a01      	ldr	r2, [sp, #4]
 8016078:	4603      	mov	r3, r0
 801607a:	4629      	mov	r1, r5
 801607c:	a802      	add	r0, sp, #8
 801607e:	f001 f828 	bl	80170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016082:	a802      	add	r0, sp, #8
 8016084:	f001 f85e 	bl	8017144 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016088:	2401      	movs	r4, #1
 801608a:	b2a3      	uxth	r3, r4
 801608c:	b140      	cbz	r0, 80160a0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 801608e:	280a      	cmp	r0, #10
 8016090:	bf08      	it	eq
 8016092:	3301      	addeq	r3, #1
 8016094:	a802      	add	r0, sp, #8
 8016096:	bf08      	it	eq
 8016098:	b21c      	sxtheq	r4, r3
 801609a:	f001 f853 	bl	8017144 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801609e:	e7f4      	b.n	801608a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 80160a0:	4618      	mov	r0, r3
 80160a2:	b018      	add	sp, #96	; 0x60
 80160a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160a8:	b003      	add	sp, #12
 80160aa:	4770      	bx	lr

080160ac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80160ac:	b40e      	push	{r1, r2, r3}
 80160ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160b0:	b098      	sub	sp, #96	; 0x60
 80160b2:	ab1d      	add	r3, sp, #116	; 0x74
 80160b4:	4605      	mov	r5, r0
 80160b6:	f853 4b04 	ldr.w	r4, [r3], #4
 80160ba:	9300      	str	r3, [sp, #0]
 80160bc:	a802      	add	r0, sp, #8
 80160be:	f000 ffeb 	bl	8017098 <_ZN8touchgfx12TextProviderC1Ev>
 80160c2:	682b      	ldr	r3, [r5, #0]
 80160c4:	4f21      	ldr	r7, [pc, #132]	; (801614c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 80160c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160c8:	4628      	mov	r0, r5
 80160ca:	4798      	blx	r3
 80160cc:	ae18      	add	r6, sp, #96	; 0x60
 80160ce:	4603      	mov	r3, r0
 80160d0:	4621      	mov	r1, r4
 80160d2:	9a00      	ldr	r2, [sp, #0]
 80160d4:	a802      	add	r0, sp, #8
 80160d6:	2400      	movs	r4, #0
 80160d8:	f000 fffb 	bl	80170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80160dc:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80160e0:	462a      	mov	r2, r5
 80160e2:	4633      	mov	r3, r6
 80160e4:	4621      	mov	r1, r4
 80160e6:	a802      	add	r0, sp, #8
 80160e8:	f001 f958 	bl	801739c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80160ec:	b338      	cbz	r0, 801613e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 80160ee:	280a      	cmp	r0, #10
 80160f0:	d01e      	beq.n	8016130 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 80160f2:	9901      	ldr	r1, [sp, #4]
 80160f4:	b1e1      	cbz	r1, 8016130 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 80160f6:	7b4b      	ldrb	r3, [r1, #13]
 80160f8:	f891 c008 	ldrb.w	ip, [r1, #8]
 80160fc:	79c9      	ldrb	r1, [r1, #7]
 80160fe:	88aa      	ldrh	r2, [r5, #4]
 8016100:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016104:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8016108:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801610c:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8016110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016114:	bf14      	ite	ne
 8016116:	4638      	movne	r0, r7
 8016118:	2000      	moveq	r0, #0
 801611a:	ea41 010e 	orr.w	r1, r1, lr
 801611e:	ea43 030c 	orr.w	r3, r3, ip
 8016122:	440a      	add	r2, r1
 8016124:	4303      	orrs	r3, r0
 8016126:	1ad3      	subs	r3, r2, r3
 8016128:	b29b      	uxth	r3, r3
 801612a:	42a3      	cmp	r3, r4
 801612c:	bfc8      	it	gt
 801612e:	b21c      	sxthgt	r4, r3
 8016130:	4633      	mov	r3, r6
 8016132:	462a      	mov	r2, r5
 8016134:	2100      	movs	r1, #0
 8016136:	a802      	add	r0, sp, #8
 8016138:	f001 f930 	bl	801739c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801613c:	e7d6      	b.n	80160ec <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801613e:	b2a0      	uxth	r0, r4
 8016140:	b018      	add	sp, #96	; 0x60
 8016142:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016146:	b003      	add	sp, #12
 8016148:	4770      	bx	lr
 801614a:	bf00      	nop
 801614c:	fffffe00 	.word	0xfffffe00

08016150 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016150:	b40e      	push	{r1, r2, r3}
 8016152:	b570      	push	{r4, r5, r6, lr}
 8016154:	b099      	sub	sp, #100	; 0x64
 8016156:	ab1d      	add	r3, sp, #116	; 0x74
 8016158:	4604      	mov	r4, r0
 801615a:	f853 5b04 	ldr.w	r5, [r3], #4
 801615e:	9300      	str	r3, [sp, #0]
 8016160:	a802      	add	r0, sp, #8
 8016162:	f000 ff99 	bl	8017098 <_ZN8touchgfx12TextProviderC1Ev>
 8016166:	6823      	ldr	r3, [r4, #0]
 8016168:	4620      	mov	r0, r4
 801616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801616c:	4798      	blx	r3
 801616e:	4629      	mov	r1, r5
 8016170:	4603      	mov	r3, r0
 8016172:	9a00      	ldr	r2, [sp, #0]
 8016174:	a802      	add	r0, sp, #8
 8016176:	ad18      	add	r5, sp, #96	; 0x60
 8016178:	f000 ffab 	bl	80170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801617c:	2100      	movs	r1, #0
 801617e:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8016182:	4622      	mov	r2, r4
 8016184:	462b      	mov	r3, r5
 8016186:	a802      	add	r0, sp, #8
 8016188:	f001 f908 	bl	801739c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801618c:	26ff      	movs	r6, #255	; 0xff
 801618e:	b190      	cbz	r0, 80161b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8016190:	280a      	cmp	r0, #10
 8016192:	d009      	beq.n	80161a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8016194:	9a01      	ldr	r2, [sp, #4]
 8016196:	b13a      	cbz	r2, 80161a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8016198:	7923      	ldrb	r3, [r4, #4]
 801619a:	7a12      	ldrb	r2, [r2, #8]
 801619c:	1a9b      	subs	r3, r3, r2
 801619e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80161a2:	429e      	cmp	r6, r3
 80161a4:	bf28      	it	cs
 80161a6:	461e      	movcs	r6, r3
 80161a8:	462b      	mov	r3, r5
 80161aa:	4622      	mov	r2, r4
 80161ac:	2100      	movs	r1, #0
 80161ae:	a802      	add	r0, sp, #8
 80161b0:	f001 f8f4 	bl	801739c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80161b4:	e7eb      	b.n	801618e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80161b6:	4630      	mov	r0, r6
 80161b8:	b019      	add	sp, #100	; 0x64
 80161ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161be:	b003      	add	sp, #12
 80161c0:	4770      	bx	lr

080161c2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80161c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c6:	4606      	mov	r6, r0
 80161c8:	b099      	sub	sp, #100	; 0x64
 80161ca:	a802      	add	r0, sp, #8
 80161cc:	4614      	mov	r4, r2
 80161ce:	4688      	mov	r8, r1
 80161d0:	461d      	mov	r5, r3
 80161d2:	f000 ff61 	bl	8017098 <_ZN8touchgfx12TextProviderC1Ev>
 80161d6:	6833      	ldr	r3, [r6, #0]
 80161d8:	4630      	mov	r0, r6
 80161da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161dc:	4798      	blx	r3
 80161de:	462a      	mov	r2, r5
 80161e0:	4603      	mov	r3, r0
 80161e2:	4621      	mov	r1, r4
 80161e4:	a802      	add	r0, sp, #8
 80161e6:	f000 ff74 	bl	80170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80161ea:	f04f 0b00 	mov.w	fp, #0
 80161ee:	465f      	mov	r7, fp
 80161f0:	46da      	mov	sl, fp
 80161f2:	46d9      	mov	r9, fp
 80161f4:	ab01      	add	r3, sp, #4
 80161f6:	4632      	mov	r2, r6
 80161f8:	4641      	mov	r1, r8
 80161fa:	a802      	add	r0, sp, #8
 80161fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8016200:	f001 f8cc 	bl	801739c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016204:	4605      	mov	r5, r0
 8016206:	b108      	cbz	r0, 801620c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8016208:	280a      	cmp	r0, #10
 801620a:	d10b      	bne.n	8016224 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801620c:	4557      	cmp	r7, sl
 801620e:	bf38      	it	cc
 8016210:	4657      	movcc	r7, sl
 8016212:	f04f 0a00 	mov.w	sl, #0
 8016216:	b91d      	cbnz	r5, 8016220 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8016218:	4638      	mov	r0, r7
 801621a:	b019      	add	sp, #100	; 0x64
 801621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016220:	46ab      	mov	fp, r5
 8016222:	e7e7      	b.n	80161f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8016224:	9a01      	ldr	r2, [sp, #4]
 8016226:	2a00      	cmp	r2, #0
 8016228:	d0fa      	beq.n	8016220 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801622a:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801622e:	6833      	ldr	r3, [r6, #0]
 8016230:	8895      	ldrh	r5, [r2, #4]
 8016232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016234:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8016238:	7a94      	ldrb	r4, [r2, #10]
 801623a:	4659      	mov	r1, fp
 801623c:	4304      	orrs	r4, r0
 801623e:	4630      	mov	r0, r6
 8016240:	4798      	blx	r3
 8016242:	4420      	add	r0, r4
 8016244:	4450      	add	r0, sl
 8016246:	fa1f fa80 	uxth.w	sl, r0
 801624a:	e7e4      	b.n	8016216 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801624c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801624c:	b513      	push	{r0, r1, r4, lr}
 801624e:	1d01      	adds	r1, r0, #4
 8016250:	4603      	mov	r3, r0
 8016252:	c903      	ldmia	r1, {r0, r1}
 8016254:	466a      	mov	r2, sp
 8016256:	e882 0003 	stmia.w	r2, {r0, r1}
 801625a:	2100      	movs	r1, #0
 801625c:	9100      	str	r1, [sp, #0]
 801625e:	6819      	ldr	r1, [r3, #0]
 8016260:	4618      	mov	r0, r3
 8016262:	690c      	ldr	r4, [r1, #16]
 8016264:	4611      	mov	r1, r2
 8016266:	47a0      	blx	r4
 8016268:	b002      	add	sp, #8
 801626a:	bd10      	pop	{r4, pc}

0801626c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801626c:	b538      	push	{r3, r4, r5, lr}
 801626e:	680b      	ldr	r3, [r1, #0]
 8016270:	460c      	mov	r4, r1
 8016272:	68db      	ldr	r3, [r3, #12]
 8016274:	4605      	mov	r5, r0
 8016276:	4798      	blx	r3
 8016278:	6823      	ldr	r3, [r4, #0]
 801627a:	4620      	mov	r0, r4
 801627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801627e:	4629      	mov	r1, r5
 8016280:	4798      	blx	r3
 8016282:	4628      	mov	r0, r5
 8016284:	bd38      	pop	{r3, r4, r5, pc}

08016286 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016286:	b410      	push	{r4}
 8016288:	880a      	ldrh	r2, [r1, #0]
 801628a:	8884      	ldrh	r4, [r0, #4]
 801628c:	4422      	add	r2, r4
 801628e:	800a      	strh	r2, [r1, #0]
 8016290:	88c4      	ldrh	r4, [r0, #6]
 8016292:	884a      	ldrh	r2, [r1, #2]
 8016294:	4422      	add	r2, r4
 8016296:	804a      	strh	r2, [r1, #2]
 8016298:	6940      	ldr	r0, [r0, #20]
 801629a:	b120      	cbz	r0, 80162a6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801629c:	6803      	ldr	r3, [r0, #0]
 801629e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162a4:	4718      	bx	r3
 80162a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162aa:	4770      	bx	lr

080162ac <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80162ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162ae:	460b      	mov	r3, r1
 80162b0:	b085      	sub	sp, #20
 80162b2:	4604      	mov	r4, r0
 80162b4:	b901      	cbnz	r1, 80162b8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80162b6:	b1fa      	cbz	r2, 80162f8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 80162b8:	1d27      	adds	r7, r4, #4
 80162ba:	e897 0003 	ldmia.w	r7, {r0, r1}
 80162be:	466e      	mov	r6, sp
 80162c0:	e886 0003 	stmia.w	r6, {r0, r1}
 80162c4:	88e1      	ldrh	r1, [r4, #6]
 80162c6:	440a      	add	r2, r1
 80162c8:	88a1      	ldrh	r1, [r4, #4]
 80162ca:	4419      	add	r1, r3
 80162cc:	6823      	ldr	r3, [r4, #0]
 80162ce:	b209      	sxth	r1, r1
 80162d0:	4620      	mov	r0, r4
 80162d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162d4:	b212      	sxth	r2, r2
 80162d6:	4798      	blx	r3
 80162d8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80162dc:	ad02      	add	r5, sp, #8
 80162de:	e885 0003 	stmia.w	r5, {r0, r1}
 80162e2:	6960      	ldr	r0, [r4, #20]
 80162e4:	b150      	cbz	r0, 80162fc <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 80162e6:	6803      	ldr	r3, [r0, #0]
 80162e8:	4631      	mov	r1, r6
 80162ea:	691b      	ldr	r3, [r3, #16]
 80162ec:	4798      	blx	r3
 80162ee:	6960      	ldr	r0, [r4, #20]
 80162f0:	6803      	ldr	r3, [r0, #0]
 80162f2:	691b      	ldr	r3, [r3, #16]
 80162f4:	4629      	mov	r1, r5
 80162f6:	4798      	blx	r3
 80162f8:	b005      	add	sp, #20
 80162fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162fc:	f7ff fb7c 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 8016300:	6803      	ldr	r3, [r0, #0]
 8016302:	4631      	mov	r1, r6
 8016304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016306:	4798      	blx	r3
 8016308:	f7ff fb76 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 801630c:	6803      	ldr	r3, [r0, #0]
 801630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016310:	e7f0      	b.n	80162f4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08016312 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016312:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016314:	8882      	ldrh	r2, [r0, #4]
 8016316:	880b      	ldrh	r3, [r1, #0]
 8016318:	4413      	add	r3, r2
 801631a:	800b      	strh	r3, [r1, #0]
 801631c:	88c2      	ldrh	r2, [r0, #6]
 801631e:	884b      	ldrh	r3, [r1, #2]
 8016320:	4413      	add	r3, r2
 8016322:	4602      	mov	r2, r0
 8016324:	804b      	strh	r3, [r1, #2]
 8016326:	4605      	mov	r5, r0
 8016328:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801632c:	460c      	mov	r4, r1
 801632e:	6851      	ldr	r1, [r2, #4]
 8016330:	466b      	mov	r3, sp
 8016332:	c303      	stmia	r3!, {r0, r1}
 8016334:	4621      	mov	r1, r4
 8016336:	4668      	mov	r0, sp
 8016338:	f7fc fc10 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 801633c:	466b      	mov	r3, sp
 801633e:	cb03      	ldmia	r3!, {r0, r1}
 8016340:	6020      	str	r0, [r4, #0]
 8016342:	6061      	str	r1, [r4, #4]
 8016344:	6968      	ldr	r0, [r5, #20]
 8016346:	b128      	cbz	r0, 8016354 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8016348:	6803      	ldr	r3, [r0, #0]
 801634a:	691b      	ldr	r3, [r3, #16]
 801634c:	4621      	mov	r1, r4
 801634e:	4798      	blx	r3
 8016350:	b003      	add	sp, #12
 8016352:	bd30      	pop	{r4, r5, pc}
 8016354:	f7ff fb50 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 8016358:	6803      	ldr	r3, [r0, #0]
 801635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801635c:	e7f6      	b.n	801634c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801635e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801635e:	b570      	push	{r4, r5, r6, lr}
 8016360:	8882      	ldrh	r2, [r0, #4]
 8016362:	880b      	ldrh	r3, [r1, #0]
 8016364:	4413      	add	r3, r2
 8016366:	800b      	strh	r3, [r1, #0]
 8016368:	88c2      	ldrh	r2, [r0, #6]
 801636a:	884b      	ldrh	r3, [r1, #2]
 801636c:	460c      	mov	r4, r1
 801636e:	4413      	add	r3, r2
 8016370:	804b      	strh	r3, [r1, #2]
 8016372:	4605      	mov	r5, r0
 8016374:	1d01      	adds	r1, r0, #4
 8016376:	4620      	mov	r0, r4
 8016378:	f7fc fbf0 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 801637c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016380:	b153      	cbz	r3, 8016398 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8016382:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016386:	b13b      	cbz	r3, 8016398 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8016388:	6968      	ldr	r0, [r5, #20]
 801638a:	b128      	cbz	r0, 8016398 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801638c:	6803      	ldr	r3, [r0, #0]
 801638e:	4621      	mov	r1, r4
 8016390:	6a1b      	ldr	r3, [r3, #32]
 8016392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016396:	4718      	bx	r3
 8016398:	bd70      	pop	{r4, r5, r6, pc}

0801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801639a:	b510      	push	{r4, lr}
 801639c:	4604      	mov	r4, r0
 801639e:	4608      	mov	r0, r1
 80163a0:	2300      	movs	r3, #0
 80163a2:	8023      	strh	r3, [r4, #0]
 80163a4:	8063      	strh	r3, [r4, #2]
 80163a6:	6803      	ldr	r3, [r0, #0]
 80163a8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80163ac:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80163b0:	80a1      	strh	r1, [r4, #4]
 80163b2:	80e2      	strh	r2, [r4, #6]
 80163b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163b6:	4621      	mov	r1, r4
 80163b8:	4798      	blx	r3
 80163ba:	4620      	mov	r0, r4
 80163bc:	bd10      	pop	{r4, pc}
	...

080163c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80163c0:	b530      	push	{r4, r5, lr}
 80163c2:	8083      	strh	r3, [r0, #4]
 80163c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80163c8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80163cc:	7183      	strb	r3, [r0, #6]
 80163ce:	79c3      	ldrb	r3, [r0, #7]
 80163d0:	6101      	str	r1, [r0, #16]
 80163d2:	f365 0306 	bfi	r3, r5, #0, #7
 80163d6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80163da:	8282      	strh	r2, [r0, #20]
 80163dc:	f365 13c7 	bfi	r3, r5, #7, #1
 80163e0:	71c3      	strb	r3, [r0, #7]
 80163e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80163e6:	7203      	strb	r3, [r0, #8]
 80163e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80163ec:	7243      	strb	r3, [r0, #9]
 80163ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80163f2:	8143      	strh	r3, [r0, #10]
 80163f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80163f8:	8183      	strh	r3, [r0, #12]
 80163fa:	4b01      	ldr	r3, [pc, #4]	; (8016400 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80163fc:	6003      	str	r3, [r0, #0]
 80163fe:	bd30      	pop	{r4, r5, pc}
 8016400:	08027af4 	.word	0x08027af4

08016404 <_ZNK8touchgfx9ConstFont4findEt>:
 8016404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016406:	8a84      	ldrh	r4, [r0, #20]
 8016408:	2500      	movs	r5, #0
 801640a:	3c01      	subs	r4, #1
 801640c:	260e      	movs	r6, #14
 801640e:	42a5      	cmp	r5, r4
 8016410:	dc0c      	bgt.n	801642c <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8016412:	192a      	adds	r2, r5, r4
 8016414:	6903      	ldr	r3, [r0, #16]
 8016416:	1052      	asrs	r2, r2, #1
 8016418:	fb06 3302 	mla	r3, r6, r2, r3
 801641c:	889f      	ldrh	r7, [r3, #4]
 801641e:	428f      	cmp	r7, r1
 8016420:	d901      	bls.n	8016426 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8016422:	1e54      	subs	r4, r2, #1
 8016424:	e7f3      	b.n	801640e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8016426:	d202      	bcs.n	801642e <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8016428:	1c55      	adds	r5, r2, #1
 801642a:	e7f0      	b.n	801640e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801642c:	2300      	movs	r3, #0
 801642e:	4618      	mov	r0, r3
 8016430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016432 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016434:	4605      	mov	r5, r0
 8016436:	4617      	mov	r7, r2
 8016438:	461e      	mov	r6, r3
 801643a:	f7ff ffe3 	bl	8016404 <_ZNK8touchgfx9ConstFont4findEt>
 801643e:	b9e0      	cbnz	r0, 801647a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8016440:	b911      	cbnz	r1, 8016448 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8016442:	2400      	movs	r4, #0
 8016444:	4620      	mov	r0, r4
 8016446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016448:	290a      	cmp	r1, #10
 801644a:	d0fa      	beq.n	8016442 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801644c:	682b      	ldr	r3, [r5, #0]
 801644e:	4628      	mov	r0, r5
 8016450:	691b      	ldr	r3, [r3, #16]
 8016452:	4798      	blx	r3
 8016454:	4601      	mov	r1, r0
 8016456:	4628      	mov	r0, r5
 8016458:	f7ff ffd4 	bl	8016404 <_ZNK8touchgfx9ConstFont4findEt>
 801645c:	4604      	mov	r4, r0
 801645e:	2800      	cmp	r0, #0
 8016460:	d0ef      	beq.n	8016442 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016462:	682b      	ldr	r3, [r5, #0]
 8016464:	4621      	mov	r1, r4
 8016466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016468:	4628      	mov	r0, r5
 801646a:	4798      	blx	r3
 801646c:	6038      	str	r0, [r7, #0]
 801646e:	682b      	ldr	r3, [r5, #0]
 8016470:	4628      	mov	r0, r5
 8016472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016474:	4798      	blx	r3
 8016476:	7030      	strb	r0, [r6, #0]
 8016478:	e7e4      	b.n	8016444 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801647a:	4604      	mov	r4, r0
 801647c:	e7f1      	b.n	8016462 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801647e <_ZN8touchgfx6memsetEPvhm>:
 801647e:	4402      	add	r2, r0
 8016480:	4290      	cmp	r0, r2
 8016482:	d002      	beq.n	801648a <_ZN8touchgfx6memsetEPvhm+0xc>
 8016484:	f800 1b01 	strb.w	r1, [r0], #1
 8016488:	e7fa      	b.n	8016480 <_ZN8touchgfx6memsetEPvhm+0x2>
 801648a:	4770      	bx	lr

0801648c <_ZN8touchgfx10ClickEventD1Ev>:
 801648c:	4770      	bx	lr

0801648e <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801648e:	2000      	movs	r0, #0
 8016490:	4770      	bx	lr

08016492 <_ZN8touchgfx9DragEventD1Ev>:
 8016492:	4770      	bx	lr

08016494 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8016494:	2001      	movs	r0, #1
 8016496:	4770      	bx	lr

08016498 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8016498:	2002      	movs	r0, #2
 801649a:	4770      	bx	lr

0801649c <_ZN8touchgfx12GestureEventD1Ev>:
 801649c:	4770      	bx	lr

0801649e <_ZN8touchgfx10ClickEventD0Ev>:
 801649e:	b510      	push	{r4, lr}
 80164a0:	210c      	movs	r1, #12
 80164a2:	4604      	mov	r4, r0
 80164a4:	f00d f840 	bl	8023528 <_ZdlPvj>
 80164a8:	4620      	mov	r0, r4
 80164aa:	bd10      	pop	{r4, pc}

080164ac <_ZN8touchgfx9DragEventD0Ev>:
 80164ac:	b510      	push	{r4, lr}
 80164ae:	2110      	movs	r1, #16
 80164b0:	4604      	mov	r4, r0
 80164b2:	f00d f839 	bl	8023528 <_ZdlPvj>
 80164b6:	4620      	mov	r0, r4
 80164b8:	bd10      	pop	{r4, pc}

080164ba <_ZN8touchgfx12GestureEventD0Ev>:
 80164ba:	b510      	push	{r4, lr}
 80164bc:	210c      	movs	r1, #12
 80164be:	4604      	mov	r4, r0
 80164c0:	f00d f832 	bl	8023528 <_ZdlPvj>
 80164c4:	4620      	mov	r0, r4
 80164c6:	bd10      	pop	{r4, pc}

080164c8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80164c8:	b530      	push	{r4, r5, lr}
 80164ca:	460d      	mov	r5, r1
 80164cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80164ce:	b087      	sub	sp, #28
 80164d0:	4604      	mov	r4, r0
 80164d2:	b301      	cbz	r1, 8016516 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80164d4:	a801      	add	r0, sp, #4
 80164d6:	f7ff ff60 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80164da:	892a      	ldrh	r2, [r5, #8]
 80164dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80164e0:	7928      	ldrb	r0, [r5, #4]
 80164e2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80164e6:	f88d 0010 	strb.w	r0, [sp, #16]
 80164ea:	1ad2      	subs	r2, r2, r3
 80164ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80164ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80164f0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80164f4:	441a      	add	r2, r3
 80164f6:	896b      	ldrh	r3, [r5, #10]
 80164f8:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80164fc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016500:	1b5b      	subs	r3, r3, r5
 8016502:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8016504:	442b      	add	r3, r5
 8016506:	4d05      	ldr	r5, [pc, #20]	; (801651c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016508:	9503      	str	r5, [sp, #12]
 801650a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801650e:	6803      	ldr	r3, [r0, #0]
 8016510:	a903      	add	r1, sp, #12
 8016512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016514:	4798      	blx	r3
 8016516:	b007      	add	sp, #28
 8016518:	bd30      	pop	{r4, r5, pc}
 801651a:	bf00      	nop
 801651c:	08027b70 	.word	0x08027b70

08016520 <_ZNK8touchgfx4Rect9intersectEss>:
 8016520:	b510      	push	{r4, lr}
 8016522:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016526:	428b      	cmp	r3, r1
 8016528:	dc10      	bgt.n	801654c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801652a:	8884      	ldrh	r4, [r0, #4]
 801652c:	4423      	add	r3, r4
 801652e:	b21b      	sxth	r3, r3
 8016530:	4299      	cmp	r1, r3
 8016532:	da0b      	bge.n	801654c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8016534:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016538:	4293      	cmp	r3, r2
 801653a:	dc07      	bgt.n	801654c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801653c:	88c0      	ldrh	r0, [r0, #6]
 801653e:	4418      	add	r0, r3
 8016540:	b200      	sxth	r0, r0
 8016542:	4282      	cmp	r2, r0
 8016544:	bfac      	ite	ge
 8016546:	2000      	movge	r0, #0
 8016548:	2001      	movlt	r0, #1
 801654a:	bd10      	pop	{r4, pc}
 801654c:	2000      	movs	r0, #0
 801654e:	e7fc      	b.n	801654a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08016550 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016552:	460c      	mov	r4, r1
 8016554:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016556:	b089      	sub	sp, #36	; 0x24
 8016558:	4605      	mov	r5, r0
 801655a:	2900      	cmp	r1, #0
 801655c:	d054      	beq.n	8016608 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801655e:	4668      	mov	r0, sp
 8016560:	f7ff ff1b 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016564:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8016566:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8016568:	8922      	ldrh	r2, [r4, #8]
 801656a:	88e1      	ldrh	r1, [r4, #6]
 801656c:	443a      	add	r2, r7
 801656e:	4431      	add	r1, r6
 8016570:	b212      	sxth	r2, r2
 8016572:	b209      	sxth	r1, r1
 8016574:	4668      	mov	r0, sp
 8016576:	f7ff ffd3 	bl	8016520 <_ZNK8touchgfx4Rect9intersectEss>
 801657a:	b1d0      	cbz	r0, 80165b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801657c:	89a2      	ldrh	r2, [r4, #12]
 801657e:	8961      	ldrh	r1, [r4, #10]
 8016580:	443a      	add	r2, r7
 8016582:	4431      	add	r1, r6
 8016584:	b212      	sxth	r2, r2
 8016586:	b209      	sxth	r1, r1
 8016588:	4668      	mov	r0, sp
 801658a:	f7ff ffc9 	bl	8016520 <_ZNK8touchgfx4Rect9intersectEss>
 801658e:	4603      	mov	r3, r0
 8016590:	b978      	cbnz	r0, 80165b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8016592:	4a1e      	ldr	r2, [pc, #120]	; (801660c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8016594:	9204      	str	r2, [sp, #16]
 8016596:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016598:	f8ad 3016 	strh.w	r3, [sp, #22]
 801659c:	2202      	movs	r2, #2
 801659e:	f88d 2014 	strb.w	r2, [sp, #20]
 80165a2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80165a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80165aa:	6803      	ldr	r3, [r0, #0]
 80165ac:	a904      	add	r1, sp, #16
 80165ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165b0:	4798      	blx	r3
 80165b2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80165b4:	a802      	add	r0, sp, #8
 80165b6:	f7ff fef0 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80165ba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80165be:	88e0      	ldrh	r0, [r4, #6]
 80165c0:	8961      	ldrh	r1, [r4, #10]
 80165c2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80165c6:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80165ca:	8923      	ldrh	r3, [r4, #8]
 80165cc:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80165ce:	7927      	ldrb	r7, [r4, #4]
 80165d0:	f88d 7014 	strb.w	r7, [sp, #20]
 80165d4:	1a80      	subs	r0, r0, r2
 80165d6:	1a89      	subs	r1, r1, r2
 80165d8:	89a2      	ldrh	r2, [r4, #12]
 80165da:	4c0d      	ldr	r4, [pc, #52]	; (8016610 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80165dc:	9404      	str	r4, [sp, #16]
 80165de:	4460      	add	r0, ip
 80165e0:	eba3 030e 	sub.w	r3, r3, lr
 80165e4:	eba2 020e 	sub.w	r2, r2, lr
 80165e8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80165ec:	4433      	add	r3, r6
 80165ee:	4461      	add	r1, ip
 80165f0:	4432      	add	r2, r6
 80165f2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80165f4:	f8ad 101a 	strh.w	r1, [sp, #26]
 80165f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80165fc:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016600:	6803      	ldr	r3, [r0, #0]
 8016602:	a904      	add	r1, sp, #16
 8016604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016606:	4798      	blx	r3
 8016608:	b009      	add	sp, #36	; 0x24
 801660a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801660c:	08027b48 	.word	0x08027b48
 8016610:	08027b5c 	.word	0x08027b5c

08016614 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016618:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801661c:	790b      	ldrb	r3, [r1, #4]
 801661e:	b0a1      	sub	sp, #132	; 0x84
 8016620:	4604      	mov	r4, r0
 8016622:	460d      	mov	r5, r1
 8016624:	f1b9 0f00 	cmp.w	r9, #0
 8016628:	d00f      	beq.n	801664a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801662a:	2b00      	cmp	r3, #0
 801662c:	f040 80a0 	bne.w	8016770 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8016630:	b021      	add	sp, #132	; 0x84
 8016632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016636:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801663a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801663e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016642:	1d20      	adds	r0, r4, #4
 8016644:	f7fc f9d8 	bl	80129f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016648:	e092      	b.n	8016770 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801664a:	2b00      	cmp	r3, #0
 801664c:	d1f0      	bne.n	8016630 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801664e:	4b5e      	ldr	r3, [pc, #376]	; (80167c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8016656:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801665a:	f1ba 0f03 	cmp.w	sl, #3
 801665e:	ddea      	ble.n	8016636 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8016660:	f1ba 0f0c 	cmp.w	sl, #12
 8016664:	f04f 0303 	mov.w	r3, #3
 8016668:	bfdc      	itt	le
 801666a:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801666e:	fb92 f3f3 	sdivle	r3, r2, r3
 8016672:	9301      	str	r3, [sp, #4]
 8016674:	4b55      	ldr	r3, [pc, #340]	; (80167cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8016676:	4956      	ldr	r1, [pc, #344]	; (80167d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8016678:	f9b3 2000 	ldrsh.w	r2, [r3]
 801667c:	4b55      	ldr	r3, [pc, #340]	; (80167d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801667e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8016682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016686:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801668a:	ab0e      	add	r3, sp, #56	; 0x38
 801668c:	2248      	movs	r2, #72	; 0x48
 801668e:	2600      	movs	r6, #0
 8016690:	4618      	mov	r0, r3
 8016692:	960a      	str	r6, [sp, #40]	; 0x28
 8016694:	f00c fff2 	bl	802367c <memcpy>
 8016698:	f04f 32ff 	mov.w	r2, #4294967295
 801669c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80166a0:	f8cd a008 	str.w	sl, [sp, #8]
 80166a4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80166a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	46b3      	mov	fp, r6
 80166b0:	9303      	str	r3, [sp, #12]
 80166b2:	2300      	movs	r3, #0
 80166b4:	9309      	str	r3, [sp, #36]	; 0x24
 80166b6:	9b07      	ldr	r3, [sp, #28]
 80166b8:	9a03      	ldr	r2, [sp, #12]
 80166ba:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80166be:	88ef      	ldrh	r7, [r5, #6]
 80166c0:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80166c4:	fb13 f302 	smulbb	r3, r3, r2
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	9304      	str	r3, [sp, #16]
 80166cc:	9b07      	ldr	r3, [sp, #28]
 80166ce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80166d2:	a80a      	add	r0, sp, #40	; 0x28
 80166d4:	685b      	ldr	r3, [r3, #4]
 80166d6:	fb13 f302 	smulbb	r3, r3, r2
 80166da:	b29b      	uxth	r3, r3
 80166dc:	9305      	str	r3, [sp, #20]
 80166de:	9b04      	ldr	r3, [sp, #16]
 80166e0:	441f      	add	r7, r3
 80166e2:	9b05      	ldr	r3, [sp, #20]
 80166e4:	4498      	add	r8, r3
 80166e6:	b23f      	sxth	r7, r7
 80166e8:	fa0f f888 	sxth.w	r8, r8
 80166ec:	4642      	mov	r2, r8
 80166ee:	4639      	mov	r1, r7
 80166f0:	f7ff ff16 	bl	8016520 <_ZNK8touchgfx4Rect9intersectEss>
 80166f4:	b380      	cbz	r0, 8016758 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80166f6:	4639      	mov	r1, r7
 80166f8:	ab09      	add	r3, sp, #36	; 0x24
 80166fa:	4642      	mov	r2, r8
 80166fc:	1d20      	adds	r0, r4, #4
 80166fe:	f7fc f97b 	bl	80129f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016702:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016704:	b341      	cbz	r1, 8016758 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8016706:	4549      	cmp	r1, r9
 8016708:	d026      	beq.n	8016758 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801670a:	a80c      	add	r0, sp, #48	; 0x30
 801670c:	f7ff fe45 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016710:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8016714:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016718:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801671c:	2002      	movs	r0, #2
 801671e:	fb92 f2f0 	sdiv	r2, r2, r0
 8016722:	440a      	add	r2, r1
 8016724:	1a99      	subs	r1, r3, r2
 8016726:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801672a:	fb93 f3f0 	sdiv	r3, r3, r0
 801672e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8016732:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8016736:	4403      	add	r3, r0
 8016738:	1ad3      	subs	r3, r2, r3
 801673a:	435b      	muls	r3, r3
 801673c:	9a06      	ldr	r2, [sp, #24]
 801673e:	fb01 3301 	mla	r3, r1, r1, r3
 8016742:	4293      	cmp	r3, r2
 8016744:	d208      	bcs.n	8016758 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8016746:	9a04      	ldr	r2, [sp, #16]
 8016748:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801674c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801674e:	9a05      	ldr	r2, [sp, #20]
 8016750:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8016754:	86e2      	strh	r2, [r4, #54]	; 0x36
 8016756:	9306      	str	r3, [sp, #24]
 8016758:	f10b 0b02 	add.w	fp, fp, #2
 801675c:	f1bb 0f08 	cmp.w	fp, #8
 8016760:	dda7      	ble.n	80166b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016762:	9b02      	ldr	r3, [sp, #8]
 8016764:	4453      	add	r3, sl
 8016766:	9302      	str	r3, [sp, #8]
 8016768:	9b01      	ldr	r3, [sp, #4]
 801676a:	3601      	adds	r6, #1
 801676c:	42b3      	cmp	r3, r6
 801676e:	d199      	bne.n	80166a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8016770:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016772:	2900      	cmp	r1, #0
 8016774:	f43f af5c 	beq.w	8016630 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8016778:	a80c      	add	r0, sp, #48	; 0x30
 801677a:	f7ff fe0e 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801677e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8016782:	88ea      	ldrh	r2, [r5, #6]
 8016784:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8016788:	7929      	ldrb	r1, [r5, #4]
 801678a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801678e:	1ad2      	subs	r2, r2, r3
 8016790:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016792:	441a      	add	r2, r3
 8016794:	892b      	ldrh	r3, [r5, #8]
 8016796:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801679a:	1a1b      	subs	r3, r3, r0
 801679c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801679e:	4403      	add	r3, r0
 80167a0:	480d      	ldr	r0, [pc, #52]	; (80167d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 80167a2:	900e      	str	r0, [sp, #56]	; 0x38
 80167a4:	2600      	movs	r6, #0
 80167a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80167a8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80167ac:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80167b0:	6803      	ldr	r3, [r0, #0]
 80167b2:	a90e      	add	r1, sp, #56	; 0x38
 80167b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167b6:	4798      	blx	r3
 80167b8:	792b      	ldrb	r3, [r5, #4]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	f43f af38 	beq.w	8016630 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80167c0:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80167c4:	e734      	b.n	8016630 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80167c6:	bf00      	nop
 80167c8:	2002b088 	.word	0x2002b088
 80167cc:	2002b07c 	.word	0x2002b07c
 80167d0:	08025184 	.word	0x08025184
 80167d4:	2002b07e 	.word	0x2002b07e
 80167d8:	08027b48 	.word	0x08027b48

080167dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80167dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80167de:	4604      	mov	r4, r0
 80167e0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80167e4:	3201      	adds	r2, #1
 80167e6:	d112      	bne.n	801680e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80167e8:	6803      	ldr	r3, [r0, #0]
 80167ea:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80167ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80167f2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80167f6:	2500      	movs	r5, #0
 80167f8:	9500      	str	r5, [sp, #0]
 80167fa:	466d      	mov	r5, sp
 80167fc:	4629      	mov	r1, r5
 80167fe:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016802:	6a1b      	ldr	r3, [r3, #32]
 8016804:	4798      	blx	r3
 8016806:	e895 0003 	ldmia.w	r5, {r0, r1}
 801680a:	e884 0003 	stmia.w	r4, {r0, r1}
 801680e:	4620      	mov	r0, r4
 8016810:	b003      	add	sp, #12
 8016812:	bd30      	pop	{r4, r5, pc}

08016814 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016814:	b513      	push	{r0, r1, r4, lr}
 8016816:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801681a:	3301      	adds	r3, #1
 801681c:	4604      	mov	r4, r0
 801681e:	d109      	bne.n	8016834 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016820:	4601      	mov	r1, r0
 8016822:	4668      	mov	r0, sp
 8016824:	f7ff fdb9 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016828:	f8bd 3000 	ldrh.w	r3, [sp]
 801682c:	8423      	strh	r3, [r4, #32]
 801682e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016832:	8463      	strh	r3, [r4, #34]	; 0x22
 8016834:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016838:	b002      	add	sp, #8
 801683a:	bd10      	pop	{r4, pc}

0801683c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801683c:	b513      	push	{r0, r1, r4, lr}
 801683e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8016842:	3301      	adds	r3, #1
 8016844:	4604      	mov	r4, r0
 8016846:	d109      	bne.n	801685c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016848:	4601      	mov	r1, r0
 801684a:	4668      	mov	r0, sp
 801684c:	f7ff fda5 	bl	801639a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016850:	f8bd 3000 	ldrh.w	r3, [sp]
 8016854:	8423      	strh	r3, [r4, #32]
 8016856:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801685a:	8463      	strh	r3, [r4, #34]	; 0x22
 801685c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8016860:	b002      	add	sp, #8
 8016862:	bd10      	pop	{r4, pc}

08016864 <_ZN8touchgfx6ScreenC1Ev>:
 8016864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016866:	4605      	mov	r5, r0
 8016868:	4b17      	ldr	r3, [pc, #92]	; (80168c8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801686a:	f845 3b04 	str.w	r3, [r5], #4
 801686e:	2301      	movs	r3, #1
 8016870:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8016874:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8016878:	4b14      	ldr	r3, [pc, #80]	; (80168cc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801687a:	4915      	ldr	r1, [pc, #84]	; (80168d0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801687c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8016880:	4b14      	ldr	r3, [pc, #80]	; (80168d4 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8016882:	6041      	str	r1, [r0, #4]
 8016884:	2200      	movs	r2, #0
 8016886:	8102      	strh	r2, [r0, #8]
 8016888:	8142      	strh	r2, [r0, #10]
 801688a:	8182      	strh	r2, [r0, #12]
 801688c:	81c2      	strh	r2, [r0, #14]
 801688e:	8202      	strh	r2, [r0, #16]
 8016890:	8242      	strh	r2, [r0, #18]
 8016892:	8282      	strh	r2, [r0, #20]
 8016894:	82c2      	strh	r2, [r0, #22]
 8016896:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801689a:	6202      	str	r2, [r0, #32]
 801689c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80168a0:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80168a4:	6342      	str	r2, [r0, #52]	; 0x34
 80168a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80168aa:	4611      	mov	r1, r2
 80168ac:	4604      	mov	r4, r0
 80168ae:	4628      	mov	r0, r5
 80168b0:	f7f7 f95e 	bl	800db70 <_ZN8touchgfx8Drawable5setXYEss>
 80168b4:	4639      	mov	r1, r7
 80168b6:	4628      	mov	r0, r5
 80168b8:	f7f7 f978 	bl	800dbac <_ZN8touchgfx8Drawable8setWidthEs>
 80168bc:	4628      	mov	r0, r5
 80168be:	4631      	mov	r1, r6
 80168c0:	f7f7 f983 	bl	800dbca <_ZN8touchgfx8Drawable9setHeightEs>
 80168c4:	4620      	mov	r0, r4
 80168c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168c8:	08027b84 	.word	0x08027b84
 80168cc:	2002b07c 	.word	0x2002b07c
 80168d0:	0802678c 	.word	0x0802678c
 80168d4:	2002b07e 	.word	0x2002b07e

080168d8 <_ZN8touchgfx6Screen4drawEv>:
 80168d8:	b507      	push	{r0, r1, r2, lr}
 80168da:	4b09      	ldr	r3, [pc, #36]	; (8016900 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80168dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80168e0:	4b08      	ldr	r3, [pc, #32]	; (8016904 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80168e2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80168e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 80168ee:	6803      	ldr	r3, [r0, #0]
 80168f0:	2100      	movs	r1, #0
 80168f2:	9100      	str	r1, [sp, #0]
 80168f4:	689b      	ldr	r3, [r3, #8]
 80168f6:	4669      	mov	r1, sp
 80168f8:	4798      	blx	r3
 80168fa:	b003      	add	sp, #12
 80168fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8016900:	2002b07c 	.word	0x2002b07c
 8016904:	2002b07e 	.word	0x2002b07e

08016908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8016908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801690c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016910:	b089      	sub	sp, #36	; 0x24
 8016912:	4680      	mov	r8, r0
 8016914:	460c      	mov	r4, r1
 8016916:	4615      	mov	r5, r2
 8016918:	b16b      	cbz	r3, 8016936 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801691a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801691e:	b153      	cbz	r3, 8016936 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016920:	4628      	mov	r0, r5
 8016922:	f7ff ff5b 	bl	80167dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016926:	4621      	mov	r1, r4
 8016928:	f7fe ffdc 	bl	80158e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801692c:	69eb      	ldr	r3, [r5, #28]
 801692e:	b928      	cbnz	r0, 801693c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8016930:	461d      	mov	r5, r3
 8016932:	2b00      	cmp	r3, #0
 8016934:	d1f4      	bne.n	8016920 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8016936:	b009      	add	sp, #36	; 0x24
 8016938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801693c:	ae04      	add	r6, sp, #16
 801693e:	2b00      	cmp	r3, #0
 8016940:	d051      	beq.n	80169e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8016942:	682b      	ldr	r3, [r5, #0]
 8016944:	4629      	mov	r1, r5
 8016946:	68db      	ldr	r3, [r3, #12]
 8016948:	a802      	add	r0, sp, #8
 801694a:	4798      	blx	r3
 801694c:	4628      	mov	r0, r5
 801694e:	f7ff ff61 	bl	8016814 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016952:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016956:	4407      	add	r7, r0
 8016958:	4628      	mov	r0, r5
 801695a:	f7ff ff6f 	bl	801683c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801695e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016962:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016966:	f8ad 2014 	strh.w	r2, [sp, #20]
 801696a:	4418      	add	r0, r3
 801696c:	4621      	mov	r1, r4
 801696e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016972:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016976:	b23f      	sxth	r7, r7
 8016978:	4630      	mov	r0, r6
 801697a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801697e:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016982:	f7fc f8eb 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 8016986:	4628      	mov	r0, r5
 8016988:	f7ff ff28 	bl	80167dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801698c:	4602      	mov	r2, r0
 801698e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016992:	ab06      	add	r3, sp, #24
 8016994:	e883 0003 	stmia.w	r3, {r0, r1}
 8016998:	4611      	mov	r1, r2
 801699a:	4618      	mov	r0, r3
 801699c:	f7fc f8de 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 80169a0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80169a4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80169a8:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80169ac:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80169b0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80169b4:	4299      	cmp	r1, r3
 80169b6:	d10b      	bne.n	80169d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80169b8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80169bc:	4552      	cmp	r2, sl
 80169be:	d107      	bne.n	80169d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80169c0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80169c4:	455a      	cmp	r2, fp
 80169c6:	d103      	bne.n	80169d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80169c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80169cc:	454a      	cmp	r2, r9
 80169ce:	d00a      	beq.n	80169e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80169d0:	f1bb 0f00 	cmp.w	fp, #0
 80169d4:	d002      	beq.n	80169dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 80169d6:	f1b9 0f00 	cmp.w	r9, #0
 80169da:	d12e      	bne.n	8016a3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 80169dc:	69ea      	ldr	r2, [r5, #28]
 80169de:	4621      	mov	r1, r4
 80169e0:	4640      	mov	r0, r8
 80169e2:	f7ff ff91 	bl	8016908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80169e6:	4628      	mov	r0, r5
 80169e8:	f7ff fef8 	bl	80167dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80169ec:	6861      	ldr	r1, [r4, #4]
 80169ee:	4602      	mov	r2, r0
 80169f0:	6820      	ldr	r0, [r4, #0]
 80169f2:	4633      	mov	r3, r6
 80169f4:	c303      	stmia	r3!, {r0, r1}
 80169f6:	4611      	mov	r1, r2
 80169f8:	4630      	mov	r0, r6
 80169fa:	f7fc f8af 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 80169fe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d097      	beq.n	8016936 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016a06:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d093      	beq.n	8016936 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016a0e:	4628      	mov	r0, r5
 8016a10:	f7ff ff00 	bl	8016814 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016a14:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016a18:	1a18      	subs	r0, r3, r0
 8016a1a:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016a1e:	4628      	mov	r0, r5
 8016a20:	f7ff ff0c 	bl	801683c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016a24:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016a28:	1a18      	subs	r0, r3, r0
 8016a2a:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016a2e:	682b      	ldr	r3, [r5, #0]
 8016a30:	4631      	mov	r1, r6
 8016a32:	689b      	ldr	r3, [r3, #8]
 8016a34:	4628      	mov	r0, r5
 8016a36:	4798      	blx	r3
 8016a38:	e77d      	b.n	8016936 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016a3a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016a3e:	fa1f f08a 	uxth.w	r0, sl
 8016a42:	4552      	cmp	r2, sl
 8016a44:	9000      	str	r0, [sp, #0]
 8016a46:	da12      	bge.n	8016a6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8016a48:	9301      	str	r3, [sp, #4]
 8016a4a:	9b00      	ldr	r3, [sp, #0]
 8016a4c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016a50:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016a54:	1a9a      	subs	r2, r3, r2
 8016a56:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016a5a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016a5e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016a62:	69ea      	ldr	r2, [r5, #28]
 8016a64:	4631      	mov	r1, r6
 8016a66:	4640      	mov	r0, r8
 8016a68:	f7ff ff4e 	bl	8016908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016a6c:	9b01      	ldr	r3, [sp, #4]
 8016a6e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	b29f      	uxth	r7, r3
 8016a76:	da0d      	bge.n	8016a94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8016a78:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016a7c:	1aba      	subs	r2, r7, r2
 8016a7e:	f8ad a012 	strh.w	sl, [sp, #18]
 8016a82:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016a86:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016a8a:	69ea      	ldr	r2, [r5, #28]
 8016a8c:	4631      	mov	r1, r6
 8016a8e:	4640      	mov	r0, r8
 8016a90:	f7ff ff3a 	bl	8016908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016a94:	8822      	ldrh	r2, [r4, #0]
 8016a96:	88a3      	ldrh	r3, [r4, #4]
 8016a98:	445f      	add	r7, fp
 8016a9a:	4413      	add	r3, r2
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	b2bf      	uxth	r7, r7
 8016aa0:	b23a      	sxth	r2, r7
 8016aa2:	b219      	sxth	r1, r3
 8016aa4:	4291      	cmp	r1, r2
 8016aa6:	dd0d      	ble.n	8016ac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8016aa8:	1bdb      	subs	r3, r3, r7
 8016aaa:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016aae:	f8ad a012 	strh.w	sl, [sp, #18]
 8016ab2:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ab6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016aba:	69ea      	ldr	r2, [r5, #28]
 8016abc:	4631      	mov	r1, r6
 8016abe:	4640      	mov	r0, r8
 8016ac0:	f7ff ff22 	bl	8016908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016ac4:	88e2      	ldrh	r2, [r4, #6]
 8016ac6:	8863      	ldrh	r3, [r4, #2]
 8016ac8:	4413      	add	r3, r2
 8016aca:	9a00      	ldr	r2, [sp, #0]
 8016acc:	444a      	add	r2, r9
 8016ace:	b29b      	uxth	r3, r3
 8016ad0:	fa1f f982 	uxth.w	r9, r2
 8016ad4:	fa0f f289 	sxth.w	r2, r9
 8016ad8:	b219      	sxth	r1, r3
 8016ada:	428a      	cmp	r2, r1
 8016adc:	da83      	bge.n	80169e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8016ade:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016ae2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016ae6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016aea:	eba3 0309 	sub.w	r3, r3, r9
 8016aee:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016af2:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016af6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016afa:	69ea      	ldr	r2, [r5, #28]
 8016afc:	4631      	mov	r1, r6
 8016afe:	e76f      	b.n	80169e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08016b00 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b02:	aa02      	add	r2, sp, #8
 8016b04:	2300      	movs	r3, #0
 8016b06:	f842 3d04 	str.w	r3, [r2, #-4]!
 8016b0a:	4604      	mov	r4, r0
 8016b0c:	3004      	adds	r0, #4
 8016b0e:	460d      	mov	r5, r1
 8016b10:	f7fc f8fb 	bl	8012d0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016b14:	9a01      	ldr	r2, [sp, #4]
 8016b16:	b11a      	cbz	r2, 8016b20 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8016b18:	4629      	mov	r1, r5
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	f7ff fef4 	bl	8016908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016b20:	b003      	add	sp, #12
 8016b22:	bd30      	pop	{r4, r5, pc}

08016b24 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b26:	4602      	mov	r2, r0
 8016b28:	4604      	mov	r4, r0
 8016b2a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016b2e:	460d      	mov	r5, r1
 8016b30:	6851      	ldr	r1, [r2, #4]
 8016b32:	466b      	mov	r3, sp
 8016b34:	c303      	stmia	r3!, {r0, r1}
 8016b36:	4629      	mov	r1, r5
 8016b38:	4668      	mov	r0, sp
 8016b3a:	f7fc f80f 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 8016b3e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016b42:	4669      	mov	r1, sp
 8016b44:	b123      	cbz	r3, 8016b50 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8016b46:	4620      	mov	r0, r4
 8016b48:	f7ff ffda 	bl	8016b00 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016b4c:	b003      	add	sp, #12
 8016b4e:	bd30      	pop	{r4, r5, pc}
 8016b50:	1d20      	adds	r0, r4, #4
 8016b52:	f7fc f8a1 	bl	8012c98 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016b56:	e7f9      	b.n	8016b4c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08016b58 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8016b58:	680a      	ldr	r2, [r1, #0]
 8016b5a:	460b      	mov	r3, r1
 8016b5c:	6952      	ldr	r2, [r2, #20]
 8016b5e:	1d01      	adds	r1, r0, #4
 8016b60:	4618      	mov	r0, r3
 8016b62:	4710      	bx	r2

08016b64 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 8016b64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b6c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016b70:	bfcc      	ite	gt
 8016b72:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 8016b76:	ee30 0a67 	vsuble.f32	s0, s0, s15
 8016b7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016b7e:	ee10 3a10 	vmov	r3, s0
 8016b82:	b218      	sxth	r0, r3
 8016b84:	4770      	bx	lr

08016b86 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8016b86:	b510      	push	{r4, lr}
 8016b88:	4298      	cmp	r0, r3
 8016b8a:	eb01 0402 	add.w	r4, r1, r2
 8016b8e:	b224      	sxth	r4, r4
 8016b90:	d21f      	bcs.n	8016bd2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8016b92:	b1f3      	cbz	r3, 8016bd2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8016b94:	ee07 0a90 	vmov	s15, r0
 8016b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b9c:	ee07 3a90 	vmov	s15, r3
 8016ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016ba4:	ee06 1a10 	vmov	s12, r1
 8016ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016bb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016bb4:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 8016bb8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8016bbc:	ee06 2a90 	vmov	s13, r2
 8016bc0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016bc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016bc8:	eea6 0a87 	vfma.f32	s0, s13, s14
 8016bcc:	f7ff ffca 	bl	8016b64 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8016bd0:	4604      	mov	r4, r0
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	bd10      	pop	{r4, pc}
	...

08016bd8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8016bd8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8016bdc:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8016be0:	4b03      	ldr	r3, [pc, #12]	; (8016bf0 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8016be2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016be6:	bf08      	it	eq
 8016be8:	2300      	moveq	r3, #0
 8016bea:	4308      	orrs	r0, r1
 8016bec:	4318      	orrs	r0, r3
 8016bee:	4770      	bx	lr
 8016bf0:	fffffe00 	.word	0xfffffe00

08016bf4 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8016bf4:	7b43      	ldrb	r3, [r0, #13]
 8016bf6:	7201      	strb	r1, [r0, #8]
 8016bf8:	b289      	uxth	r1, r1
 8016bfa:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8016bfe:	05ca      	lsls	r2, r1, #23
 8016c00:	bf48      	it	mi
 8016c02:	f043 0320 	orrmi.w	r3, r3, #32
 8016c06:	7343      	strb	r3, [r0, #13]
 8016c08:	058b      	lsls	r3, r1, #22
 8016c0a:	bf42      	ittt	mi
 8016c0c:	7b43      	ldrbmi	r3, [r0, #13]
 8016c0e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8016c12:	7343      	strbmi	r3, [r0, #13]
 8016c14:	4770      	bx	lr

08016c16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016c16:	b530      	push	{r4, r5, lr}
 8016c18:	2500      	movs	r5, #0
 8016c1a:	2401      	movs	r4, #1
 8016c1c:	6843      	ldr	r3, [r0, #4]
 8016c1e:	b913      	cbnz	r3, 8016c26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016c20:	6803      	ldr	r3, [r0, #0]
 8016c22:	b1f3      	cbz	r3, 8016c62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8016c24:	6043      	str	r3, [r0, #4]
 8016c26:	7c03      	ldrb	r3, [r0, #16]
 8016c28:	b143      	cbz	r3, 8016c3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016c2a:	68c3      	ldr	r3, [r0, #12]
 8016c2c:	b12b      	cbz	r3, 8016c3a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016c2e:	881a      	ldrh	r2, [r3, #0]
 8016c30:	b11a      	cbz	r2, 8016c3a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016c32:	1c9a      	adds	r2, r3, #2
 8016c34:	60c2      	str	r2, [r0, #12]
 8016c36:	8818      	ldrh	r0, [r3, #0]
 8016c38:	bd30      	pop	{r4, r5, pc}
 8016c3a:	7405      	strb	r5, [r0, #16]
 8016c3c:	6843      	ldr	r3, [r0, #4]
 8016c3e:	8819      	ldrh	r1, [r3, #0]
 8016c40:	b179      	cbz	r1, 8016c62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8016c42:	1c9a      	adds	r2, r3, #2
 8016c44:	2902      	cmp	r1, #2
 8016c46:	6042      	str	r2, [r0, #4]
 8016c48:	d1f5      	bne.n	8016c36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016c4a:	6883      	ldr	r3, [r0, #8]
 8016c4c:	1d1a      	adds	r2, r3, #4
 8016c4e:	6082      	str	r2, [r0, #8]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	60c3      	str	r3, [r0, #12]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d0e1      	beq.n	8016c1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016c58:	881b      	ldrh	r3, [r3, #0]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d0de      	beq.n	8016c1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016c5e:	7404      	strb	r4, [r0, #16]
 8016c60:	e7dc      	b.n	8016c1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016c62:	2000      	movs	r0, #0
 8016c64:	e7e8      	b.n	8016c38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016c66 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c68:	4605      	mov	r5, r0
 8016c6a:	4608      	mov	r0, r1
 8016c6c:	b1e9      	cbz	r1, 8016caa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8016c6e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8016c72:	460b      	mov	r3, r1
 8016c74:	f101 0708 	add.w	r7, r1, #8
 8016c78:	4622      	mov	r2, r4
 8016c7a:	6818      	ldr	r0, [r3, #0]
 8016c7c:	6859      	ldr	r1, [r3, #4]
 8016c7e:	4626      	mov	r6, r4
 8016c80:	c603      	stmia	r6!, {r0, r1}
 8016c82:	3308      	adds	r3, #8
 8016c84:	42bb      	cmp	r3, r7
 8016c86:	4634      	mov	r4, r6
 8016c88:	d1f7      	bne.n	8016c7a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8016c8a:	6818      	ldr	r0, [r3, #0]
 8016c8c:	6030      	str	r0, [r6, #0]
 8016c8e:	889b      	ldrh	r3, [r3, #4]
 8016c90:	80b3      	strh	r3, [r6, #4]
 8016c92:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8016c96:	015b      	lsls	r3, r3, #5
 8016c98:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016c9c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8016ca0:	430b      	orrs	r3, r1
 8016ca2:	425b      	negs	r3, r3
 8016ca4:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8016ca8:	4610      	mov	r0, r2
 8016caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016cac <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016cac:	b538      	push	{r3, r4, r5, lr}
 8016cae:	460c      	mov	r4, r1
 8016cb0:	6811      	ldr	r1, [r2, #0]
 8016cb2:	4610      	mov	r0, r2
 8016cb4:	68cd      	ldr	r5, [r1, #12]
 8016cb6:	4619      	mov	r1, r3
 8016cb8:	47a8      	blx	r5
 8016cba:	2800      	cmp	r0, #0
 8016cbc:	bf08      	it	eq
 8016cbe:	4620      	moveq	r0, r4
 8016cc0:	bd38      	pop	{r3, r4, r5, pc}

08016cc2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016cc2:	b570      	push	{r4, r5, r6, lr}
 8016cc4:	8810      	ldrh	r0, [r2, #0]
 8016cc6:	4298      	cmp	r0, r3
 8016cc8:	d817      	bhi.n	8016cfa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016cca:	1e48      	subs	r0, r1, #1
 8016ccc:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016cd0:	4298      	cmp	r0, r3
 8016cd2:	d312      	bcc.n	8016cfa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016cd4:	2400      	movs	r4, #0
 8016cd6:	428c      	cmp	r4, r1
 8016cd8:	d20f      	bcs.n	8016cfa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016cda:	1860      	adds	r0, r4, r1
 8016cdc:	1040      	asrs	r0, r0, #1
 8016cde:	0085      	lsls	r5, r0, #2
 8016ce0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016ce4:	42b3      	cmp	r3, r6
 8016ce6:	d902      	bls.n	8016cee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8016ce8:	3001      	adds	r0, #1
 8016cea:	b284      	uxth	r4, r0
 8016cec:	e7f3      	b.n	8016cd6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016cee:	d102      	bne.n	8016cf6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8016cf0:	442a      	add	r2, r5
 8016cf2:	8850      	ldrh	r0, [r2, #2]
 8016cf4:	bd70      	pop	{r4, r5, r6, pc}
 8016cf6:	b281      	uxth	r1, r0
 8016cf8:	e7ed      	b.n	8016cd6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016cfa:	2000      	movs	r0, #0
 8016cfc:	e7fa      	b.n	8016cf4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

08016d00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8016d00:	b510      	push	{r4, lr}
 8016d02:	8ac3      	ldrh	r3, [r0, #22]
 8016d04:	428b      	cmp	r3, r1
 8016d06:	d805      	bhi.n	8016d14 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8016d08:	4b07      	ldr	r3, [pc, #28]	; (8016d28 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8016d0a:	4a08      	ldr	r2, [pc, #32]	; (8016d2c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8016d0c:	4808      	ldr	r0, [pc, #32]	; (8016d30 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8016d0e:	21fd      	movs	r1, #253	; 0xfd
 8016d10:	f00c fc36 	bl	8023580 <__assert_func>
 8016d14:	8a83      	ldrh	r3, [r0, #20]
 8016d16:	240a      	movs	r4, #10
 8016d18:	4419      	add	r1, r3
 8016d1a:	fbb1 f3f4 	udiv	r3, r1, r4
 8016d1e:	fb04 1113 	mls	r1, r4, r3, r1
 8016d22:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8016d26:	bd10      	pop	{r4, pc}
 8016d28:	08027bd1 	.word	0x08027bd1
 8016d2c:	08028000 	.word	0x08028000
 8016d30:	08027bdf 	.word	0x08027bdf

08016d34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8016d34:	b508      	push	{r3, lr}
 8016d36:	8ac3      	ldrh	r3, [r0, #22]
 8016d38:	428b      	cmp	r3, r1
 8016d3a:	d805      	bhi.n	8016d48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8016d3c:	4b07      	ldr	r3, [pc, #28]	; (8016d5c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8016d3e:	4a08      	ldr	r2, [pc, #32]	; (8016d60 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8016d40:	4808      	ldr	r0, [pc, #32]	; (8016d64 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8016d42:	21d3      	movs	r1, #211	; 0xd3
 8016d44:	f00c fc1c 	bl	8023580 <__assert_func>
 8016d48:	8a83      	ldrh	r3, [r0, #20]
 8016d4a:	220a      	movs	r2, #10
 8016d4c:	4419      	add	r1, r3
 8016d4e:	fbb1 f3f2 	udiv	r3, r1, r2
 8016d52:	fb02 1113 	mls	r1, r2, r3, r1
 8016d56:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8016d5a:	bd08      	pop	{r3, pc}
 8016d5c:	08027bd1 	.word	0x08027bd1
 8016d60:	08027d50 	.word	0x08027d50
 8016d64:	08027bdf 	.word	0x08027bdf

08016d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	4688      	mov	r8, r1
 8016d70:	4615      	mov	r5, r2
 8016d72:	b94a      	cbnz	r2, 8016d88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8016d74:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8016d78:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8016d7c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8016d80:	4691      	mov	r9, r2
 8016d82:	4648      	mov	r0, r9
 8016d84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d88:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8016d8c:	8892      	ldrh	r2, [r2, #4]
 8016d8e:	462b      	mov	r3, r5
 8016d90:	f105 0c08 	add.w	ip, r5, #8
 8016d94:	46b3      	mov	fp, r6
 8016d96:	6818      	ldr	r0, [r3, #0]
 8016d98:	6859      	ldr	r1, [r3, #4]
 8016d9a:	4637      	mov	r7, r6
 8016d9c:	c703      	stmia	r7!, {r0, r1}
 8016d9e:	3308      	adds	r3, #8
 8016da0:	4563      	cmp	r3, ip
 8016da2:	463e      	mov	r6, r7
 8016da4:	d1f7      	bne.n	8016d96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 8016da6:	6818      	ldr	r0, [r3, #0]
 8016da8:	6038      	str	r0, [r7, #0]
 8016daa:	889b      	ldrh	r3, [r3, #4]
 8016dac:	80bb      	strh	r3, [r7, #4]
 8016dae:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8016db2:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8016db6:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8016dba:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8016dbe:	18d3      	adds	r3, r2, r3
 8016dc0:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8016dc4:	b298      	uxth	r0, r3
 8016dc6:	ea4a 0a01 	orr.w	sl, sl, r1
 8016dca:	281d      	cmp	r0, #29
 8016dcc:	fa1f f68a 	uxth.w	r6, sl
 8016dd0:	46d9      	mov	r9, fp
 8016dd2:	d842      	bhi.n	8016e5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	4950      	ldr	r1, [pc, #320]	; (8016f18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b0>)
 8016dd8:	4083      	lsls	r3, r0
 8016dda:	420b      	tst	r3, r1
 8016ddc:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8016de0:	d114      	bne.n	8016e0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8016de2:	f413 7f60 	tst.w	r3, #896	; 0x380
 8016de6:	d03c      	beq.n	8016e62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfa>
 8016de8:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8016dec:	fa1f fa8a 	uxth.w	sl, sl
 8016df0:	eba1 010a 	sub.w	r1, r1, sl
 8016df4:	4658      	mov	r0, fp
 8016df6:	b209      	sxth	r1, r1
 8016df8:	f7ff fefc 	bl	8016bf4 <_ZN8touchgfx9GlyphNode6setTopEs>
 8016dfc:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8016e00:	1b86      	subs	r6, r0, r6
 8016e02:	eba6 0a0a 	sub.w	sl, r6, sl
 8016e06:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8016e0a:	e7ba      	b.n	8016d82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016e0c:	2100      	movs	r1, #0
 8016e0e:	f104 001a 	add.w	r0, r4, #26
 8016e12:	f7ff ff8f 	bl	8016d34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8016e16:	f640 6333 	movw	r3, #3635	; 0xe33
 8016e1a:	4298      	cmp	r0, r3
 8016e1c:	4601      	mov	r1, r0
 8016e1e:	d10a      	bne.n	8016e36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xce>
 8016e20:	f8d8 3000 	ldr.w	r3, [r8]
 8016e24:	4640      	mov	r0, r8
 8016e26:	68db      	ldr	r3, [r3, #12]
 8016e28:	4798      	blx	r3
 8016e2a:	7b41      	ldrb	r1, [r0, #13]
 8016e2c:	7a00      	ldrb	r0, [r0, #8]
 8016e2e:	f7ff fed3 	bl	8016bd8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8016e32:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8016e36:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8016e3a:	4431      	add	r1, r6
 8016e3c:	4451      	add	r1, sl
 8016e3e:	b209      	sxth	r1, r1
 8016e40:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8016e44:	4658      	mov	r0, fp
 8016e46:	f7ff fed5 	bl	8016bf4 <_ZN8touchgfx9GlyphNode6setTopEs>
 8016e4a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8016e4e:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8016e52:	1a9b      	subs	r3, r3, r2
 8016e54:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8016e58:	e793      	b.n	8016d82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016e5a:	f640 631b 	movw	r3, #3611	; 0xe1b
 8016e5e:	429a      	cmp	r2, r3
 8016e60:	d005      	beq.n	8016e6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x106>
 8016e62:	f022 0302 	bic.w	r3, r2, #2
 8016e66:	f640 611d 	movw	r1, #3613	; 0xe1d
 8016e6a:	428b      	cmp	r3, r1
 8016e6c:	d119      	bne.n	8016ea2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8016e6e:	1e53      	subs	r3, r2, #1
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	4642      	mov	r2, r8
 8016e74:	4629      	mov	r1, r5
 8016e76:	4620      	mov	r0, r4
 8016e78:	f7ff ff18 	bl	8016cac <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016e7c:	7b41      	ldrb	r1, [r0, #13]
 8016e7e:	7a00      	ldrb	r0, [r0, #8]
 8016e80:	f7ff feaa 	bl	8016bd8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8016e84:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8016e88:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8016e8c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016e90:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016e94:	4313      	orrs	r3, r2
 8016e96:	115a      	asrs	r2, r3, #5
 8016e98:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016e9c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8016ea0:	e02d      	b.n	8016efe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x196>
 8016ea2:	4639      	mov	r1, r7
 8016ea4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8016ea8:	f7ff fe96 	bl	8016bd8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8016eac:	f640 6109 	movw	r1, #3593	; 0xe09
 8016eb0:	f022 0310 	bic.w	r3, r2, #16
 8016eb4:	428b      	cmp	r3, r1
 8016eb6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8016eba:	d003      	beq.n	8016ec4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15c>
 8016ebc:	f640 6313 	movw	r3, #3603	; 0xe13
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d126      	bne.n	8016f12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1aa>
 8016ec4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016ec8:	b27f      	sxtb	r7, r7
 8016eca:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8016ece:	431f      	orrs	r7, r3
 8016ed0:	f640 6313 	movw	r3, #3603	; 0xe13
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	bf1a      	itte	ne
 8016ed8:	f102 33ff 	addne.w	r3, r2, #4294967295
 8016edc:	b29b      	uxthne	r3, r3
 8016ede:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8016ee2:	4642      	mov	r2, r8
 8016ee4:	4629      	mov	r1, r5
 8016ee6:	4620      	mov	r0, r4
 8016ee8:	f7ff fee0 	bl	8016cac <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016eec:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8016ef0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016ef4:	7a83      	ldrb	r3, [r0, #10]
 8016ef6:	4313      	orrs	r3, r2
 8016ef8:	1aff      	subs	r7, r7, r3
 8016efa:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8016efe:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8016f02:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8016f06:	f7ff fe67 	bl	8016bd8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8016f0a:	1b80      	subs	r0, r0, r6
 8016f0c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8016f10:	e737      	b.n	8016d82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016f12:	2300      	movs	r3, #0
 8016f14:	e7c2      	b.n	8016e9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x134>
 8016f16:	bf00      	nop
 8016f18:	3fc00079 	.word	0x3fc00079

08016f1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016f1c:	3a01      	subs	r2, #1
 8016f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f22:	b292      	uxth	r2, r2
 8016f24:	460c      	mov	r4, r1
 8016f26:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016f2a:	42b2      	cmp	r2, r6
 8016f2c:	d018      	beq.n	8016f60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8016f2e:	8b01      	ldrh	r1, [r0, #24]
 8016f30:	f834 5b02 	ldrh.w	r5, [r4], #2
 8016f34:	4291      	cmp	r1, r2
 8016f36:	d805      	bhi.n	8016f44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8016f38:	4b14      	ldr	r3, [pc, #80]	; (8016f8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8016f3a:	4a15      	ldr	r2, [pc, #84]	; (8016f90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8016f3c:	4815      	ldr	r0, [pc, #84]	; (8016f94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 8016f3e:	21d3      	movs	r1, #211	; 0xd3
 8016f40:	f00c fb1e 	bl	8023580 <__assert_func>
 8016f44:	8ac1      	ldrh	r1, [r0, #22]
 8016f46:	4411      	add	r1, r2
 8016f48:	f001 0101 	and.w	r1, r1, #1
 8016f4c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016f50:	3a01      	subs	r2, #1
 8016f52:	8a49      	ldrh	r1, [r1, #18]
 8016f54:	428d      	cmp	r5, r1
 8016f56:	b292      	uxth	r2, r2
 8016f58:	d0e7      	beq.n	8016f2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8016f5a:	2000      	movs	r0, #0
 8016f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f60:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8016f64:	2600      	movs	r6, #0
 8016f66:	441f      	add	r7, r3
 8016f68:	f100 051a 	add.w	r5, r0, #26
 8016f6c:	b2b1      	uxth	r1, r6
 8016f6e:	42b9      	cmp	r1, r7
 8016f70:	da09      	bge.n	8016f86 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6a>
 8016f72:	4628      	mov	r0, r5
 8016f74:	f7ff fede 	bl	8016d34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8016f78:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8016f7c:	4540      	cmp	r0, r8
 8016f7e:	f106 0601 	add.w	r6, r6, #1
 8016f82:	d0f3      	beq.n	8016f6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8016f84:	e7e9      	b.n	8016f5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8016f86:	2001      	movs	r0, #1
 8016f88:	e7e8      	b.n	8016f5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8016f8a:	bf00      	nop
 8016f8c:	08027bd1 	.word	0x08027bd1
 8016f90:	08028160 	.word	0x08028160
 8016f94:	08027bdf 	.word	0x08027bdf

08016f98 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8016f98:	b538      	push	{r3, r4, r5, lr}
 8016f9a:	8ac3      	ldrh	r3, [r0, #22]
 8016f9c:	428b      	cmp	r3, r1
 8016f9e:	d205      	bcs.n	8016fac <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8016fa0:	4b08      	ldr	r3, [pc, #32]	; (8016fc4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8016fa2:	4a09      	ldr	r2, [pc, #36]	; (8016fc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 8016fa4:	4809      	ldr	r0, [pc, #36]	; (8016fcc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 8016fa6:	21d8      	movs	r1, #216	; 0xd8
 8016fa8:	f00c faea 	bl	8023580 <__assert_func>
 8016fac:	8a82      	ldrh	r2, [r0, #20]
 8016fae:	250a      	movs	r5, #10
 8016fb0:	440a      	add	r2, r1
 8016fb2:	1a5b      	subs	r3, r3, r1
 8016fb4:	fbb2 f4f5 	udiv	r4, r2, r5
 8016fb8:	fb05 2214 	mls	r2, r5, r4, r2
 8016fbc:	8282      	strh	r2, [r0, #20]
 8016fbe:	82c3      	strh	r3, [r0, #22]
 8016fc0:	bd38      	pop	{r3, r4, r5, pc}
 8016fc2:	bf00      	nop
 8016fc4:	08027bc5 	.word	0x08027bc5
 8016fc8:	08027f7c 	.word	0x08027f7c
 8016fcc:	08027bdf 	.word	0x08027bdf

08016fd0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8016fd0:	b538      	push	{r3, r4, r5, lr}
 8016fd2:	8ac3      	ldrh	r3, [r0, #22]
 8016fd4:	2b09      	cmp	r3, #9
 8016fd6:	d905      	bls.n	8016fe4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8016fd8:	4b08      	ldr	r3, [pc, #32]	; (8016ffc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 8016fda:	4a09      	ldr	r2, [pc, #36]	; (8017000 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8016fdc:	4809      	ldr	r0, [pc, #36]	; (8017004 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8016fde:	21f7      	movs	r1, #247	; 0xf7
 8016fe0:	f00c face 	bl	8023580 <__assert_func>
 8016fe4:	8a82      	ldrh	r2, [r0, #20]
 8016fe6:	250a      	movs	r5, #10
 8016fe8:	441a      	add	r2, r3
 8016fea:	fbb2 f4f5 	udiv	r4, r2, r5
 8016fee:	fb05 2214 	mls	r2, r5, r4, r2
 8016ff2:	3301      	adds	r3, #1
 8016ff4:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8016ff8:	82c3      	strh	r3, [r0, #22]
 8016ffa:	bd38      	pop	{r3, r4, r5, pc}
 8016ffc:	08027bb9 	.word	0x08027bb9
 8017000:	08027ecd 	.word	0x08027ecd
 8017004:	08027bdf 	.word	0x08027bdf

08017008 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4604      	mov	r4, r0
 801700c:	f100 051a 	add.w	r5, r0, #26
 8017010:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017012:	2b0a      	cmp	r3, #10
 8017014:	d01c      	beq.n	8017050 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8017016:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8017018:	b962      	cbnz	r2, 8017034 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801701a:	f104 051a 	add.w	r5, r4, #26
 801701e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017020:	2b0a      	cmp	r3, #10
 8017022:	d015      	beq.n	8017050 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8017024:	4620      	mov	r0, r4
 8017026:	f7ff fdf6 	bl	8016c16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801702a:	4601      	mov	r1, r0
 801702c:	4628      	mov	r0, r5
 801702e:	f7ff ffcf 	bl	8016fd0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8017032:	e7f4      	b.n	801701e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8017034:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017036:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801703a:	3301      	adds	r3, #1
 801703c:	f003 0301 	and.w	r3, r3, #1
 8017040:	3a01      	subs	r2, #1
 8017042:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8017044:	86e3      	strh	r3, [r4, #54]	; 0x36
 8017046:	8722      	strh	r2, [r4, #56]	; 0x38
 8017048:	4628      	mov	r0, r5
 801704a:	f7ff ffc1 	bl	8016fd0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801704e:	e7df      	b.n	8017010 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8017050:	bd38      	pop	{r3, r4, r5, pc}
	...

08017054 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8017054:	2300      	movs	r3, #0
 8017056:	b510      	push	{r4, lr}
 8017058:	6043      	str	r3, [r0, #4]
 801705a:	60c3      	str	r3, [r0, #12]
 801705c:	7403      	strb	r3, [r0, #16]
 801705e:	8603      	strh	r3, [r0, #48]	; 0x30
 8017060:	8303      	strh	r3, [r0, #24]
 8017062:	8703      	strh	r3, [r0, #56]	; 0x38
 8017064:	4604      	mov	r4, r0
 8017066:	f7ff ffcf 	bl	8017008 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801706a:	4a0a      	ldr	r2, [pc, #40]	; (8017094 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801706c:	6813      	ldr	r3, [r2, #0]
 801706e:	4611      	mov	r1, r2
 8017070:	b913      	cbnz	r3, 8017078 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8017072:	6852      	ldr	r2, [r2, #4]
 8017074:	07d0      	lsls	r0, r2, #31
 8017076:	d50b      	bpl.n	8017090 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8017078:	6849      	ldr	r1, [r1, #4]
 801707a:	104a      	asrs	r2, r1, #1
 801707c:	07c9      	lsls	r1, r1, #31
 801707e:	eb04 0002 	add.w	r0, r4, r2
 8017082:	bf48      	it	mi
 8017084:	58a2      	ldrmi	r2, [r4, r2]
 8017086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801708a:	bf48      	it	mi
 801708c:	58d3      	ldrmi	r3, [r2, r3]
 801708e:	4718      	bx	r3
 8017090:	bd10      	pop	{r4, pc}
 8017092:	bf00      	nop
 8017094:	20029aac 	.word	0x20029aac

08017098 <_ZN8touchgfx12TextProviderC1Ev>:
 8017098:	b510      	push	{r4, lr}
 801709a:	2300      	movs	r3, #0
 801709c:	2201      	movs	r2, #1
 801709e:	4604      	mov	r4, r0
 80170a0:	e9c0 3300 	strd	r3, r3, [r0]
 80170a4:	60c3      	str	r3, [r0, #12]
 80170a6:	7403      	strb	r3, [r0, #16]
 80170a8:	82c3      	strh	r3, [r0, #22]
 80170aa:	8303      	strh	r3, [r0, #24]
 80170ac:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80170ae:	8603      	strh	r3, [r0, #48]	; 0x30
 80170b0:	86c3      	strh	r3, [r0, #54]	; 0x36
 80170b2:	8703      	strh	r3, [r0, #56]	; 0x38
 80170b4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80170b6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 80170ba:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 80170be:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80170c2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 80170c6:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 80170ca:	f7ff ffc3 	bl	8017054 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80170ce:	4620      	mov	r0, r4
 80170d0:	bd10      	pop	{r4, pc}

080170d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80170d2:	b410      	push	{r4}
 80170d4:	6082      	str	r2, [r0, #8]
 80170d6:	6001      	str	r1, [r0, #0]
 80170d8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80170da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170de:	f7ff bfb9 	b.w	8017054 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

080170e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 80170e4:	b508      	push	{r3, lr}
 80170e6:	88c2      	ldrh	r2, [r0, #6]
 80170e8:	440a      	add	r2, r1
 80170ea:	2a02      	cmp	r2, #2
 80170ec:	dd05      	ble.n	80170fa <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 80170ee:	4b06      	ldr	r3, [pc, #24]	; (8017108 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 80170f0:	4a06      	ldr	r2, [pc, #24]	; (801710c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 80170f2:	4807      	ldr	r0, [pc, #28]	; (8017110 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 80170f4:	21ec      	movs	r1, #236	; 0xec
 80170f6:	f00c fa43 	bl	8023580 <__assert_func>
 80170fa:	8883      	ldrh	r3, [r0, #4]
 80170fc:	80c2      	strh	r2, [r0, #6]
 80170fe:	1a59      	subs	r1, r3, r1
 8017100:	f001 0101 	and.w	r1, r1, #1
 8017104:	8081      	strh	r1, [r0, #4]
 8017106:	bd08      	pop	{r3, pc}
 8017108:	08027c0b 	.word	0x08027c0b
 801710c:	080280d9 	.word	0x080280d9
 8017110:	08027bdf 	.word	0x08027bdf

08017114 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8017114:	b508      	push	{r3, lr}
 8017116:	88c3      	ldrh	r3, [r0, #6]
 8017118:	428b      	cmp	r3, r1
 801711a:	d805      	bhi.n	8017128 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801711c:	4b06      	ldr	r3, [pc, #24]	; (8017138 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801711e:	4a07      	ldr	r2, [pc, #28]	; (801713c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8017120:	4807      	ldr	r0, [pc, #28]	; (8017140 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8017122:	21fd      	movs	r1, #253	; 0xfd
 8017124:	f00c fa2c 	bl	8023580 <__assert_func>
 8017128:	8883      	ldrh	r3, [r0, #4]
 801712a:	4419      	add	r1, r3
 801712c:	f001 0101 	and.w	r1, r1, #1
 8017130:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8017134:	bd08      	pop	{r3, pc}
 8017136:	bf00      	nop
 8017138:	08027bd1 	.word	0x08027bd1
 801713c:	08028231 	.word	0x08028231
 8017140:	08027bdf 	.word	0x08027bdf

08017144 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017144:	b570      	push	{r4, r5, r6, lr}
 8017146:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8017148:	4604      	mov	r4, r0
 801714a:	b92a      	cbnz	r2, 8017158 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801714c:	4b12      	ldr	r3, [pc, #72]	; (8017198 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801714e:	4a13      	ldr	r2, [pc, #76]	; (801719c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8017150:	4813      	ldr	r0, [pc, #76]	; (80171a0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8017152:	21de      	movs	r1, #222	; 0xde
 8017154:	f00c fa14 	bl	8023580 <__assert_func>
 8017158:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801715a:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801715e:	260a      	movs	r6, #10
 8017160:	3301      	adds	r3, #1
 8017162:	8b4d      	ldrh	r5, [r1, #26]
 8017164:	fbb3 f1f6 	udiv	r1, r3, r6
 8017168:	3a01      	subs	r2, #1
 801716a:	fb06 3311 	mls	r3, r6, r1, r3
 801716e:	8602      	strh	r2, [r0, #48]	; 0x30
 8017170:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017172:	f7ff ff49 	bl	8017008 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017176:	8b23      	ldrh	r3, [r4, #24]
 8017178:	2b02      	cmp	r3, #2
 801717a:	bf04      	itt	eq
 801717c:	2301      	moveq	r3, #1
 801717e:	8323      	strheq	r3, [r4, #24]
 8017180:	3412      	adds	r4, #18
 8017182:	4620      	mov	r0, r4
 8017184:	2101      	movs	r1, #1
 8017186:	f7ff ffad 	bl	80170e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801718a:	4620      	mov	r0, r4
 801718c:	462a      	mov	r2, r5
 801718e:	2100      	movs	r1, #0
 8017190:	f7ff ffc0 	bl	8017114 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8017194:	4628      	mov	r0, r5
 8017196:	bd70      	pop	{r4, r5, r6, pc}
 8017198:	08027bb0 	.word	0x08027bb0
 801719c:	08027e22 	.word	0x08027e22
 80171a0:	08027bdf 	.word	0x08027bdf

080171a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80171a4:	428a      	cmp	r2, r1
 80171a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171aa:	4604      	mov	r4, r0
 80171ac:	460e      	mov	r6, r1
 80171ae:	4615      	mov	r5, r2
 80171b0:	469a      	mov	sl, r3
 80171b2:	d92b      	bls.n	801720c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 80171b4:	1a57      	subs	r7, r2, r1
 80171b6:	b2bf      	uxth	r7, r7
 80171b8:	f04f 0800 	mov.w	r8, #0
 80171bc:	f100 0932 	add.w	r9, r0, #50	; 0x32
 80171c0:	f04f 0b0a 	mov.w	fp, #10
 80171c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80171c6:	b92b      	cbnz	r3, 80171d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 80171c8:	4b24      	ldr	r3, [pc, #144]	; (801725c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 80171ca:	4a25      	ldr	r2, [pc, #148]	; (8017260 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 80171cc:	21e6      	movs	r1, #230	; 0xe6
 80171ce:	4825      	ldr	r0, [pc, #148]	; (8017264 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 80171d0:	f00c f9d6 	bl	8023580 <__assert_func>
 80171d4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80171d6:	3b01      	subs	r3, #1
 80171d8:	b29b      	uxth	r3, r3
 80171da:	441a      	add	r2, r3
 80171dc:	8623      	strh	r3, [r4, #48]	; 0x30
 80171de:	fbb2 f3fb 	udiv	r3, r2, fp
 80171e2:	fb0b 2313 	mls	r3, fp, r3, r2
 80171e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80171ea:	2101      	movs	r1, #1
 80171ec:	8b5a      	ldrh	r2, [r3, #26]
 80171ee:	9201      	str	r2, [sp, #4]
 80171f0:	4648      	mov	r0, r9
 80171f2:	f7ff ff77 	bl	80170e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 80171f6:	f108 0801 	add.w	r8, r8, #1
 80171fa:	9a01      	ldr	r2, [sp, #4]
 80171fc:	2100      	movs	r1, #0
 80171fe:	4648      	mov	r0, r9
 8017200:	f7ff ff88 	bl	8017114 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8017204:	fa1f f388 	uxth.w	r3, r8
 8017208:	429f      	cmp	r7, r3
 801720a:	d8db      	bhi.n	80171c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801720c:	f104 071a 	add.w	r7, r4, #26
 8017210:	4631      	mov	r1, r6
 8017212:	4638      	mov	r0, r7
 8017214:	f7ff fec0 	bl	8016f98 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8017218:	260a      	movs	r6, #10
 801721a:	b1c5      	cbz	r5, 801724e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801721c:	3d01      	subs	r5, #1
 801721e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017220:	b2ad      	uxth	r5, r5
 8017222:	2b09      	cmp	r3, #9
 8017224:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8017228:	d903      	bls.n	8017232 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801722a:	4b0f      	ldr	r3, [pc, #60]	; (8017268 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801722c:	4a0f      	ldr	r2, [pc, #60]	; (801726c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801722e:	21ec      	movs	r1, #236	; 0xec
 8017230:	e7cd      	b.n	80171ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8017232:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8017234:	3109      	adds	r1, #9
 8017236:	3301      	adds	r3, #1
 8017238:	fbb1 f0f6 	udiv	r0, r1, r6
 801723c:	fb06 1110 	mls	r1, r6, r0, r1
 8017240:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8017242:	8623      	strh	r3, [r4, #48]	; 0x30
 8017244:	2100      	movs	r1, #0
 8017246:	4638      	mov	r0, r7
 8017248:	f7ff fd5a 	bl	8016d00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801724c:	e7e5      	b.n	801721a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801724e:	4620      	mov	r0, r4
 8017250:	b003      	add	sp, #12
 8017252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017256:	f7ff bed7 	b.w	8017008 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801725a:	bf00      	nop
 801725c:	08027bb0 	.word	0x08027bb0
 8017260:	08027ca6 	.word	0x08027ca6
 8017264:	08027bdf 	.word	0x08027bdf
 8017268:	08027c0b 	.word	0x08027c0b
 801726c:	08027c1e 	.word	0x08027c1e

08017270 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017274:	4605      	mov	r5, r0
 8017276:	4616      	mov	r6, r2
 8017278:	1c8c      	adds	r4, r1, #2
 801727a:	8809      	ldrh	r1, [r1, #0]
 801727c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017280:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017284:	42b3      	cmp	r3, r6
 8017286:	d124      	bne.n	80172d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017288:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801728c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017290:	f001 070f 	and.w	r7, r1, #15
 8017294:	f8cd 8000 	str.w	r8, [sp]
 8017298:	464b      	mov	r3, r9
 801729a:	4652      	mov	r2, sl
 801729c:	4621      	mov	r1, r4
 801729e:	4628      	mov	r0, r5
 80172a0:	f7ff fe3c 	bl	8016f1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80172a4:	4683      	mov	fp, r0
 80172a6:	b168      	cbz	r0, 80172c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80172a8:	eb0a 0109 	add.w	r1, sl, r9
 80172ac:	4441      	add	r1, r8
 80172ae:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80172b2:	463a      	mov	r2, r7
 80172b4:	4649      	mov	r1, r9
 80172b6:	4628      	mov	r0, r5
 80172b8:	f7ff ff74 	bl	80171a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80172bc:	4658      	mov	r0, fp
 80172be:	b003      	add	sp, #12
 80172c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172c4:	eb07 010a 	add.w	r1, r7, sl
 80172c8:	4449      	add	r1, r9
 80172ca:	4441      	add	r1, r8
 80172cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80172d0:	e7d2      	b.n	8017278 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80172d2:	f04f 0b00 	mov.w	fp, #0
 80172d6:	e7f1      	b.n	80172bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080172d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80172d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172dc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80172de:	886f      	ldrh	r7, [r5, #2]
 80172e0:	4604      	mov	r4, r0
 80172e2:	087f      	lsrs	r7, r7, #1
 80172e4:	260b      	movs	r6, #11
 80172e6:	f100 091a 	add.w	r9, r0, #26
 80172ea:	3e01      	subs	r6, #1
 80172ec:	d013      	beq.n	8017316 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80172ee:	2100      	movs	r1, #0
 80172f0:	4648      	mov	r0, r9
 80172f2:	f7ff fd1f 	bl	8016d34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80172f6:	462a      	mov	r2, r5
 80172f8:	4680      	mov	r8, r0
 80172fa:	4603      	mov	r3, r0
 80172fc:	4639      	mov	r1, r7
 80172fe:	4620      	mov	r0, r4
 8017300:	f7ff fcdf 	bl	8016cc2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017304:	b138      	cbz	r0, 8017316 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8017306:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801730a:	4642      	mov	r2, r8
 801730c:	4620      	mov	r0, r4
 801730e:	f7ff ffaf 	bl	8017270 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017312:	2800      	cmp	r0, #0
 8017314:	d1e9      	bne.n	80172ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8017316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801731c:	b570      	push	{r4, r5, r6, lr}
 801731e:	4b1e      	ldr	r3, [pc, #120]	; (8017398 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8017320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017324:	4604      	mov	r4, r0
 8017326:	f003 0501 	and.w	r5, r3, #1
 801732a:	b902      	cbnz	r2, 801732e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801732c:	b165      	cbz	r5, 8017348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801732e:	105b      	asrs	r3, r3, #1
 8017330:	f104 061a 	add.w	r6, r4, #26
 8017334:	18e0      	adds	r0, r4, r3
 8017336:	b10d      	cbz	r5, 801733c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8017338:	58e3      	ldr	r3, [r4, r3]
 801733a:	589a      	ldr	r2, [r3, r2]
 801733c:	4790      	blx	r2
 801733e:	2100      	movs	r1, #0
 8017340:	4602      	mov	r2, r0
 8017342:	4630      	mov	r0, r6
 8017344:	f7ff fcdc 	bl	8016d00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8017348:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801734a:	b303      	cbz	r3, 801738e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801734c:	f104 051a 	add.w	r5, r4, #26
 8017350:	2100      	movs	r1, #0
 8017352:	4628      	mov	r0, r5
 8017354:	f7ff fcee 	bl	8016d34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8017358:	b1c8      	cbz	r0, 801738e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801735a:	4620      	mov	r0, r4
 801735c:	f7ff ffbc 	bl	80172d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8017360:	2101      	movs	r1, #1
 8017362:	4628      	mov	r0, r5
 8017364:	f7ff fce6 	bl	8016d34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8017368:	f640 133f 	movw	r3, #2367	; 0x93f
 801736c:	4298      	cmp	r0, r3
 801736e:	4606      	mov	r6, r0
 8017370:	d10d      	bne.n	801738e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8017372:	2100      	movs	r1, #0
 8017374:	4628      	mov	r0, r5
 8017376:	f7ff fcdd 	bl	8016d34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801737a:	2101      	movs	r1, #1
 801737c:	4602      	mov	r2, r0
 801737e:	4628      	mov	r0, r5
 8017380:	f7ff fcbe 	bl	8016d00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8017384:	4632      	mov	r2, r6
 8017386:	2100      	movs	r1, #0
 8017388:	4628      	mov	r0, r5
 801738a:	f7ff fcb9 	bl	8016d00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801738e:	4620      	mov	r0, r4
 8017390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017394:	f7ff bed6 	b.w	8017144 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017398:	20029ab4 	.word	0x20029ab4

0801739c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801739e:	4617      	mov	r7, r2
 80173a0:	461e      	mov	r6, r3
 80173a2:	4605      	mov	r5, r0
 80173a4:	f7ff ffba 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	4604      	mov	r4, r0
 80173ac:	68db      	ldr	r3, [r3, #12]
 80173ae:	4601      	mov	r1, r0
 80173b0:	4638      	mov	r0, r7
 80173b2:	4798      	blx	r3
 80173b4:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	2b7f      	cmp	r3, #127	; 0x7f
 80173bc:	4602      	mov	r2, r0
 80173be:	6030      	str	r0, [r6, #0]
 80173c0:	d813      	bhi.n	80173ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 80173c2:	4639      	mov	r1, r7
 80173c4:	4628      	mov	r0, r5
 80173c6:	f7ff fccf 	bl	8016d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80173ca:	6030      	str	r0, [r6, #0]
 80173cc:	6833      	ldr	r3, [r6, #0]
 80173ce:	b143      	cbz	r3, 80173e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80173d0:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80173d4:	7a9b      	ldrb	r3, [r3, #10]
 80173d6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80173da:	4313      	orrs	r3, r2
 80173dc:	bf0c      	ite	eq
 80173de:	2301      	moveq	r3, #1
 80173e0:	2300      	movne	r3, #0
 80173e2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80173e6:	4620      	mov	r0, r4
 80173e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173ea:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d0ec      	beq.n	80173cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80173f2:	f640 1302 	movw	r3, #2306	; 0x902
 80173f6:	429c      	cmp	r4, r3
 80173f8:	d1e8      	bne.n	80173cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80173fa:	4601      	mov	r1, r0
 80173fc:	4628      	mov	r0, r5
 80173fe:	f7ff fc32 	bl	8016c66 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017402:	e7e2      	b.n	80173ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08017404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8017404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017408:	4617      	mov	r7, r2
 801740a:	461e      	mov	r6, r3
 801740c:	4605      	mov	r5, r0
 801740e:	f7ff ff85 	bl	801731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	4604      	mov	r4, r0
 8017416:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801741a:	4601      	mov	r1, r0
 801741c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017420:	4638      	mov	r0, r7
 8017422:	47c0      	blx	r8
 8017424:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8017428:	b29b      	uxth	r3, r3
 801742a:	2b7f      	cmp	r3, #127	; 0x7f
 801742c:	4602      	mov	r2, r0
 801742e:	6030      	str	r0, [r6, #0]
 8017430:	d814      	bhi.n	801745c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8017432:	4639      	mov	r1, r7
 8017434:	4628      	mov	r0, r5
 8017436:	f7ff fc97 	bl	8016d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801743a:	6030      	str	r0, [r6, #0]
 801743c:	6833      	ldr	r3, [r6, #0]
 801743e:	b143      	cbz	r3, 8017452 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017440:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8017444:	7a9b      	ldrb	r3, [r3, #10]
 8017446:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801744a:	4313      	orrs	r3, r2
 801744c:	bf0c      	ite	eq
 801744e:	2301      	moveq	r3, #1
 8017450:	2300      	movne	r3, #0
 8017452:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8017456:	4620      	mov	r0, r4
 8017458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801745c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8017460:	2b00      	cmp	r3, #0
 8017462:	d0eb      	beq.n	801743c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8017464:	f640 1302 	movw	r3, #2306	; 0x902
 8017468:	429c      	cmp	r4, r3
 801746a:	d1e7      	bne.n	801743c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801746c:	4601      	mov	r1, r0
 801746e:	4628      	mov	r0, r5
 8017470:	f7ff fbf9 	bl	8016c66 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017474:	e7e1      	b.n	801743a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08017476 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8017476:	4602      	mov	r2, r0
 8017478:	b148      	cbz	r0, 801748e <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801747a:	2300      	movs	r3, #0
 801747c:	b298      	uxth	r0, r3
 801747e:	3301      	adds	r3, #1
 8017480:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017484:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8017488:	2900      	cmp	r1, #0
 801748a:	d1f7      	bne.n	801747c <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801748c:	4770      	bx	lr
 801748e:	4770      	bx	lr

08017490 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8017490:	b140      	cbz	r0, 80174a4 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 8017492:	4602      	mov	r2, r0
 8017494:	1a13      	subs	r3, r2, r0
 8017496:	f812 1b01 	ldrb.w	r1, [r2], #1
 801749a:	b29b      	uxth	r3, r3
 801749c:	2900      	cmp	r1, #0
 801749e:	d1f9      	bne.n	8017494 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 80174a0:	4618      	mov	r0, r3
 80174a2:	4770      	bx	lr
 80174a4:	4603      	mov	r3, r0
 80174a6:	e7fb      	b.n	80174a0 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

080174a8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80174a8:	b530      	push	{r4, r5, lr}
 80174aa:	4604      	mov	r4, r0
 80174ac:	b159      	cbz	r1, 80174c6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80174ae:	b148      	cbz	r0, 80174c4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80174b0:	2300      	movs	r3, #0
 80174b2:	b298      	uxth	r0, r3
 80174b4:	4282      	cmp	r2, r0
 80174b6:	d905      	bls.n	80174c4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80174b8:	5ccd      	ldrb	r5, [r1, r3]
 80174ba:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80174be:	3301      	adds	r3, #1
 80174c0:	2d00      	cmp	r5, #0
 80174c2:	d1f6      	bne.n	80174b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80174c4:	bd30      	pop	{r4, r5, pc}
 80174c6:	4608      	mov	r0, r1
 80174c8:	e7fc      	b.n	80174c4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080174ca <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80174ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174cc:	b08b      	sub	sp, #44	; 0x2c
 80174ce:	468c      	mov	ip, r1
 80174d0:	2100      	movs	r1, #0
 80174d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80174d6:	ae01      	add	r6, sp, #4
 80174d8:	211f      	movs	r1, #31
 80174da:	fbb0 f7f3 	udiv	r7, r0, r3
 80174de:	fb03 0517 	mls	r5, r3, r7, r0
 80174e2:	b2ec      	uxtb	r4, r5
 80174e4:	2d09      	cmp	r5, #9
 80174e6:	bfd4      	ite	le
 80174e8:	3430      	addle	r4, #48	; 0x30
 80174ea:	3457      	addgt	r4, #87	; 0x57
 80174ec:	b2e4      	uxtb	r4, r4
 80174ee:	558c      	strb	r4, [r1, r6]
 80174f0:	4638      	mov	r0, r7
 80174f2:	1e4c      	subs	r4, r1, #1
 80174f4:	b92f      	cbnz	r7, 8017502 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80174f6:	4431      	add	r1, r6
 80174f8:	4660      	mov	r0, ip
 80174fa:	f7ff ffd5 	bl	80174a8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80174fe:	b00b      	add	sp, #44	; 0x2c
 8017500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017502:	4621      	mov	r1, r4
 8017504:	e7e9      	b.n	80174da <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08017506 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8017506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017508:	4607      	mov	r7, r0
 801750a:	b08b      	sub	sp, #44	; 0x2c
 801750c:	4608      	mov	r0, r1
 801750e:	b341      	cbz	r1, 8017562 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8017510:	1e99      	subs	r1, r3, #2
 8017512:	290e      	cmp	r1, #14
 8017514:	d825      	bhi.n	8017562 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8017516:	2100      	movs	r1, #0
 8017518:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801751c:	463c      	mov	r4, r7
 801751e:	261f      	movs	r6, #31
 8017520:	f10d 0c04 	add.w	ip, sp, #4
 8017524:	fb94 fef3 	sdiv	lr, r4, r3
 8017528:	fb03 441e 	mls	r4, r3, lr, r4
 801752c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8017530:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8017534:	b2ec      	uxtb	r4, r5
 8017536:	2d09      	cmp	r5, #9
 8017538:	bfd4      	ite	le
 801753a:	3430      	addle	r4, #48	; 0x30
 801753c:	3457      	addgt	r4, #87	; 0x57
 801753e:	b2e4      	uxtb	r4, r4
 8017540:	f80c 4006 	strb.w	r4, [ip, r6]
 8017544:	4674      	mov	r4, lr
 8017546:	1e71      	subs	r1, r6, #1
 8017548:	b96c      	cbnz	r4, 8017566 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801754a:	2f00      	cmp	r7, #0
 801754c:	da05      	bge.n	801755a <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801754e:	ab0a      	add	r3, sp, #40	; 0x28
 8017550:	4419      	add	r1, r3
 8017552:	232d      	movs	r3, #45	; 0x2d
 8017554:	f801 3c24 	strb.w	r3, [r1, #-36]
 8017558:	1eb1      	subs	r1, r6, #2
 801755a:	3101      	adds	r1, #1
 801755c:	4461      	add	r1, ip
 801755e:	f7ff ffa3 	bl	80174a8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017562:	b00b      	add	sp, #44	; 0x2c
 8017564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017566:	460e      	mov	r6, r1
 8017568:	e7dc      	b.n	8017524 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801756a <_ZN8touchgfx7Unicode4atoiEPKt>:
 801756a:	b510      	push	{r4, lr}
 801756c:	b158      	cbz	r0, 8017586 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801756e:	1e82      	subs	r2, r0, #2
 8017570:	210a      	movs	r1, #10
 8017572:	2000      	movs	r0, #0
 8017574:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8017578:	3b30      	subs	r3, #48	; 0x30
 801757a:	b29c      	uxth	r4, r3
 801757c:	2c09      	cmp	r4, #9
 801757e:	d802      	bhi.n	8017586 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8017580:	fb01 3000 	mla	r0, r1, r0, r3
 8017584:	e7f6      	b.n	8017574 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8017586:	bd10      	pop	{r4, pc}

08017588 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8017588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801758c:	b085      	sub	sp, #20
 801758e:	f8d0 8000 	ldr.w	r8, [r0]
 8017592:	9203      	str	r2, [sp, #12]
 8017594:	468a      	mov	sl, r1
 8017596:	4681      	mov	r9, r0
 8017598:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801759c:	9102      	str	r1, [sp, #8]
 801759e:	461c      	mov	r4, r3
 80175a0:	4640      	mov	r0, r8
 80175a2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80175a6:	9301      	str	r3, [sp, #4]
 80175a8:	f7ff ff65 	bl	8017476 <_ZN8touchgfx7Unicode6strlenEPKt>
 80175ac:	9a03      	ldr	r2, [sp, #12]
 80175ae:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80175b2:	8812      	ldrh	r2, [r2, #0]
 80175b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80175b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80175b8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80175ba:	f1ba 0f00 	cmp.w	sl, #0
 80175be:	bf0c      	ite	eq
 80175c0:	4684      	moveq	ip, r0
 80175c2:	f100 0c01 	addne.w	ip, r0, #1
 80175c6:	2a69      	cmp	r2, #105	; 0x69
 80175c8:	fa1f fc8c 	uxth.w	ip, ip
 80175cc:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 80175d0:	d004      	beq.n	80175dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80175d2:	d844      	bhi.n	801765e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 80175d4:	2a58      	cmp	r2, #88	; 0x58
 80175d6:	d001      	beq.n	80175dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80175d8:	2a64      	cmp	r2, #100	; 0x64
 80175da:	d14b      	bne.n	8017674 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80175dc:	b1a4      	cbz	r4, 8017608 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 80175de:	b956      	cbnz	r6, 80175f6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 80175e0:	2801      	cmp	r0, #1
 80175e2:	d108      	bne.n	80175f6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 80175e4:	f8b8 2000 	ldrh.w	r2, [r8]
 80175e8:	2a30      	cmp	r2, #48	; 0x30
 80175ea:	bf02      	ittt	eq
 80175ec:	f108 0202 	addeq.w	r2, r8, #2
 80175f0:	f8c9 2000 	streq.w	r2, [r9]
 80175f4:	4630      	moveq	r0, r6
 80175f6:	45b4      	cmp	ip, r6
 80175f8:	da3e      	bge.n	8017678 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 80175fa:	b2b6      	uxth	r6, r6
 80175fc:	eba6 040c 	sub.w	r4, r6, ip
 8017600:	b2a4      	uxth	r4, r4
 8017602:	46b4      	mov	ip, r6
 8017604:	f04f 0b00 	mov.w	fp, #0
 8017608:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801760c:	3a01      	subs	r2, #1
 801760e:	b169      	cbz	r1, 801762c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8017610:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017612:	458c      	cmp	ip, r1
 8017614:	da09      	bge.n	801762a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8017616:	eba1 010c 	sub.w	r1, r1, ip
 801761a:	b289      	uxth	r1, r1
 801761c:	b933      	cbnz	r3, 801762c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801761e:	f1bb 0f00 	cmp.w	fp, #0
 8017622:	d02b      	beq.n	801767c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8017624:	b350      	cbz	r0, 801767c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8017626:	440c      	add	r4, r1
 8017628:	b2a4      	uxth	r4, r4
 801762a:	2100      	movs	r1, #0
 801762c:	682b      	ldr	r3, [r5, #0]
 801762e:	4293      	cmp	r3, r2
 8017630:	da07      	bge.n	8017642 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8017632:	f1ba 0f00 	cmp.w	sl, #0
 8017636:	d004      	beq.n	8017642 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8017638:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801763c:	682b      	ldr	r3, [r5, #0]
 801763e:	3301      	adds	r3, #1
 8017640:	602b      	str	r3, [r5, #0]
 8017642:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8017646:	b354      	cbz	r4, 801769e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8017648:	682e      	ldr	r6, [r5, #0]
 801764a:	3c01      	subs	r4, #1
 801764c:	42b2      	cmp	r2, r6
 801764e:	b2a4      	uxth	r4, r4
 8017650:	dd25      	ble.n	801769e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8017652:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8017656:	682b      	ldr	r3, [r5, #0]
 8017658:	3301      	adds	r3, #1
 801765a:	602b      	str	r3, [r5, #0]
 801765c:	e7f3      	b.n	8017646 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801765e:	2a73      	cmp	r2, #115	; 0x73
 8017660:	d003      	beq.n	801766a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 8017662:	2a78      	cmp	r2, #120	; 0x78
 8017664:	d0ba      	beq.n	80175dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8017666:	2a6f      	cmp	r2, #111	; 0x6f
 8017668:	e7b7      	b.n	80175da <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801766a:	2c00      	cmp	r4, #0
 801766c:	d0cc      	beq.n	8017608 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801766e:	42b0      	cmp	r0, r6
 8017670:	dd00      	ble.n	8017674 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8017672:	b2b0      	uxth	r0, r6
 8017674:	2400      	movs	r4, #0
 8017676:	e7c7      	b.n	8017608 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8017678:	2400      	movs	r4, #0
 801767a:	e7c3      	b.n	8017604 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801767c:	2900      	cmp	r1, #0
 801767e:	d0d5      	beq.n	801762c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8017680:	f04f 0c20 	mov.w	ip, #32
 8017684:	682e      	ldr	r6, [r5, #0]
 8017686:	2900      	cmp	r1, #0
 8017688:	d0d0      	beq.n	801762c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801768a:	3901      	subs	r1, #1
 801768c:	4296      	cmp	r6, r2
 801768e:	b289      	uxth	r1, r1
 8017690:	dacb      	bge.n	801762a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8017692:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8017696:	682b      	ldr	r3, [r5, #0]
 8017698:	3301      	adds	r3, #1
 801769a:	602b      	str	r3, [r5, #0]
 801769c:	e7f2      	b.n	8017684 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801769e:	b198      	cbz	r0, 80176c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80176a0:	f8d9 3000 	ldr.w	r3, [r9]
 80176a4:	881c      	ldrh	r4, [r3, #0]
 80176a6:	b17c      	cbz	r4, 80176c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80176a8:	682c      	ldr	r4, [r5, #0]
 80176aa:	3801      	subs	r0, #1
 80176ac:	42a2      	cmp	r2, r4
 80176ae:	b280      	uxth	r0, r0
 80176b0:	dd0a      	ble.n	80176c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80176b2:	1c9c      	adds	r4, r3, #2
 80176b4:	f8c9 4000 	str.w	r4, [r9]
 80176b8:	881c      	ldrh	r4, [r3, #0]
 80176ba:	682b      	ldr	r3, [r5, #0]
 80176bc:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80176c0:	682b      	ldr	r3, [r5, #0]
 80176c2:	3301      	adds	r3, #1
 80176c4:	602b      	str	r3, [r5, #0]
 80176c6:	e7ea      	b.n	801769e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80176c8:	2620      	movs	r6, #32
 80176ca:	b151      	cbz	r1, 80176e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80176cc:	6828      	ldr	r0, [r5, #0]
 80176ce:	3901      	subs	r1, #1
 80176d0:	4282      	cmp	r2, r0
 80176d2:	b289      	uxth	r1, r1
 80176d4:	dd05      	ble.n	80176e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80176d6:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 80176da:	682b      	ldr	r3, [r5, #0]
 80176dc:	3301      	adds	r3, #1
 80176de:	602b      	str	r3, [r5, #0]
 80176e0:	e7f3      	b.n	80176ca <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 80176e2:	b005      	add	sp, #20
 80176e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080176e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 80176e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176ec:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 80176f0:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80176f4:	4604      	mov	r4, r0
 80176f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80176f8:	2000      	movs	r0, #0
 80176fa:	8008      	strh	r0, [r1, #0]
 80176fc:	f04f 0801 	mov.w	r8, #1
 8017700:	7010      	strb	r0, [r2, #0]
 8017702:	7018      	strb	r0, [r3, #0]
 8017704:	f88c 0000 	strb.w	r0, [ip]
 8017708:	f88e 0000 	strb.w	r0, [lr]
 801770c:	7030      	strb	r0, [r6, #0]
 801770e:	6820      	ldr	r0, [r4, #0]
 8017710:	8800      	ldrh	r0, [r0, #0]
 8017712:	b190      	cbz	r0, 801773a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8017714:	282b      	cmp	r0, #43	; 0x2b
 8017716:	d001      	beq.n	801771c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8017718:	2820      	cmp	r0, #32
 801771a:	d104      	bne.n	8017726 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801771c:	8008      	strh	r0, [r1, #0]
 801771e:	6820      	ldr	r0, [r4, #0]
 8017720:	3002      	adds	r0, #2
 8017722:	6020      	str	r0, [r4, #0]
 8017724:	e7f3      	b.n	801770e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 8017726:	282d      	cmp	r0, #45	; 0x2d
 8017728:	d102      	bne.n	8017730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801772a:	f882 8000 	strb.w	r8, [r2]
 801772e:	e7f6      	b.n	801771e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8017730:	2823      	cmp	r0, #35	; 0x23
 8017732:	d102      	bne.n	801773a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8017734:	f883 8000 	strb.w	r8, [r3]
 8017738:	e7f1      	b.n	801771e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801773a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801773e:	2b09      	cmp	r3, #9
 8017740:	d901      	bls.n	8017746 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 8017742:	282a      	cmp	r0, #42	; 0x2a
 8017744:	d114      	bne.n	8017770 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8017746:	2201      	movs	r2, #1
 8017748:	f88e 2000 	strb.w	r2, [lr]
 801774c:	6823      	ldr	r3, [r4, #0]
 801774e:	8819      	ldrh	r1, [r3, #0]
 8017750:	2930      	cmp	r1, #48	; 0x30
 8017752:	bf02      	ittt	eq
 8017754:	3302      	addeq	r3, #2
 8017756:	6023      	streq	r3, [r4, #0]
 8017758:	f88c 2000 	strbeq.w	r2, [ip]
 801775c:	6820      	ldr	r0, [r4, #0]
 801775e:	8803      	ldrh	r3, [r0, #0]
 8017760:	2b2a      	cmp	r3, #42	; 0x2a
 8017762:	d11e      	bne.n	80177a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8017764:	f04f 33ff 	mov.w	r3, #4294967295
 8017768:	603b      	str	r3, [r7, #0]
 801776a:	6823      	ldr	r3, [r4, #0]
 801776c:	3302      	adds	r3, #2
 801776e:	6023      	str	r3, [r4, #0]
 8017770:	6823      	ldr	r3, [r4, #0]
 8017772:	881b      	ldrh	r3, [r3, #0]
 8017774:	2b2e      	cmp	r3, #46	; 0x2e
 8017776:	d112      	bne.n	801779e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 8017778:	2301      	movs	r3, #1
 801777a:	7033      	strb	r3, [r6, #0]
 801777c:	6823      	ldr	r3, [r4, #0]
 801777e:	1c98      	adds	r0, r3, #2
 8017780:	6020      	str	r0, [r4, #0]
 8017782:	885b      	ldrh	r3, [r3, #2]
 8017784:	2b2a      	cmp	r3, #42	; 0x2a
 8017786:	d117      	bne.n	80177b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 8017788:	f04f 33ff 	mov.w	r3, #4294967295
 801778c:	602b      	str	r3, [r5, #0]
 801778e:	6823      	ldr	r3, [r4, #0]
 8017790:	3302      	adds	r3, #2
 8017792:	6023      	str	r3, [r4, #0]
 8017794:	682b      	ldr	r3, [r5, #0]
 8017796:	2b06      	cmp	r3, #6
 8017798:	bfa8      	it	ge
 801779a:	2306      	movge	r3, #6
 801779c:	602b      	str	r3, [r5, #0]
 801779e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177a2:	f7ff fee2 	bl	801756a <_ZN8touchgfx7Unicode4atoiEPKt>
 80177a6:	6038      	str	r0, [r7, #0]
 80177a8:	6823      	ldr	r3, [r4, #0]
 80177aa:	881a      	ldrh	r2, [r3, #0]
 80177ac:	3a30      	subs	r2, #48	; 0x30
 80177ae:	2a09      	cmp	r2, #9
 80177b0:	d8de      	bhi.n	8017770 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 80177b2:	3302      	adds	r3, #2
 80177b4:	6023      	str	r3, [r4, #0]
 80177b6:	e7f7      	b.n	80177a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 80177b8:	f7ff fed7 	bl	801756a <_ZN8touchgfx7Unicode4atoiEPKt>
 80177bc:	6028      	str	r0, [r5, #0]
 80177be:	6823      	ldr	r3, [r4, #0]
 80177c0:	881a      	ldrh	r2, [r3, #0]
 80177c2:	3a30      	subs	r2, #48	; 0x30
 80177c4:	2a09      	cmp	r2, #9
 80177c6:	d8e5      	bhi.n	8017794 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 80177c8:	3302      	adds	r3, #2
 80177ca:	6023      	str	r3, [r4, #0]
 80177cc:	e7f7      	b.n	80177be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

080177ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80177ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177d2:	b0a2      	sub	sp, #136	; 0x88
 80177d4:	2500      	movs	r5, #0
 80177d6:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80177da:	4606      	mov	r6, r0
 80177dc:	460f      	mov	r7, r1
 80177de:	9209      	str	r2, [sp, #36]	; 0x24
 80177e0:	4629      	mov	r1, r5
 80177e2:	2242      	movs	r2, #66	; 0x42
 80177e4:	4640      	mov	r0, r8
 80177e6:	461c      	mov	r4, r3
 80177e8:	950d      	str	r5, [sp, #52]	; 0x34
 80177ea:	f7fe fe48 	bl	801647e <_ZN8touchgfx6memsetEPvhm>
 80177ee:	b30e      	cbz	r6, 8017834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 80177f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177f2:	b1f3      	cbz	r3, 8017832 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 80177f4:	f107 3aff 	add.w	sl, r7, #4294967295
 80177f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177fc:	8812      	ldrh	r2, [r2, #0]
 80177fe:	2a00      	cmp	r2, #0
 8017800:	f000 80b3 	beq.w	801796a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8017804:	459a      	cmp	sl, r3
 8017806:	f340 80b0 	ble.w	801796a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801780a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801780e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017810:	f8b9 2000 	ldrh.w	r2, [r9]
 8017814:	2a00      	cmp	r2, #0
 8017816:	d0ef      	beq.n	80177f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8017818:	2a25      	cmp	r2, #37	; 0x25
 801781a:	f000 80aa 	beq.w	8017972 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801781e:	459a      	cmp	sl, r3
 8017820:	ddea      	ble.n	80177f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8017822:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8017826:	f109 0202 	add.w	r2, r9, #2
 801782a:	3301      	adds	r3, #1
 801782c:	9209      	str	r2, [sp, #36]	; 0x24
 801782e:	930d      	str	r3, [sp, #52]	; 0x34
 8017830:	e7eb      	b.n	801780a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 8017832:	8033      	strh	r3, [r6, #0]
 8017834:	4630      	mov	r0, r6
 8017836:	b022      	add	sp, #136	; 0x88
 8017838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801783c:	3b63      	subs	r3, #99	; 0x63
 801783e:	2b01      	cmp	r3, #1
 8017840:	f200 80e1 	bhi.w	8017a06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x238>
 8017844:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017848:	8813      	ldrh	r3, [r2, #0]
 801784a:	2b69      	cmp	r3, #105	; 0x69
 801784c:	d058      	beq.n	8017900 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801784e:	d81b      	bhi.n	8017888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 8017850:	2b63      	cmp	r3, #99	; 0x63
 8017852:	d02e      	beq.n	80178b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 8017854:	2b64      	cmp	r3, #100	; 0x64
 8017856:	d053      	beq.n	8017900 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8017858:	2b58      	cmp	r3, #88	; 0x58
 801785a:	d06f      	beq.n	801793c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801785c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017860:	46a1      	mov	r9, r4
 8017862:	e02d      	b.n	80178c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8017864:	2b73      	cmp	r3, #115	; 0x73
 8017866:	d0ed      	beq.n	8017844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8017868:	d803      	bhi.n	8017872 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801786a:	2b6f      	cmp	r3, #111	; 0x6f
 801786c:	f040 80cb 	bne.w	8017a06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x238>
 8017870:	e7e8      	b.n	8017844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8017872:	2b75      	cmp	r3, #117	; 0x75
 8017874:	d0e6      	beq.n	8017844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8017876:	2b78      	cmp	r3, #120	; 0x78
 8017878:	e7f8      	b.n	801786c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801787a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801787c:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8017880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017882:	3302      	adds	r3, #2
 8017884:	9309      	str	r3, [sp, #36]	; 0x24
 8017886:	e7b7      	b.n	80177f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8017888:	2b73      	cmp	r3, #115	; 0x73
 801788a:	d034      	beq.n	80178f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801788c:	d807      	bhi.n	801789e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801788e:	2b6f      	cmp	r3, #111	; 0x6f
 8017890:	d1e4      	bne.n	801785c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8017892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017894:	f104 0904 	add.w	r9, r4, #4
 8017898:	1aba      	subs	r2, r7, r2
 801789a:	2308      	movs	r3, #8
 801789c:	e048      	b.n	8017930 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801789e:	2b75      	cmp	r3, #117	; 0x75
 80178a0:	d041      	beq.n	8017926 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 80178a2:	2b78      	cmp	r3, #120	; 0x78
 80178a4:	d1da      	bne.n	801785c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 80178a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80178a8:	f104 0904 	add.w	r9, r4, #4
 80178ac:	1aba      	subs	r2, r7, r2
 80178ae:	2310      	movs	r3, #16
 80178b0:	e03e      	b.n	8017930 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 80178b2:	7823      	ldrb	r3, [r4, #0]
 80178b4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80178b8:	f104 0904 	add.w	r9, r4, #4
 80178bc:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80178c0:	aa0d      	add	r2, sp, #52	; 0x34
 80178c2:	9205      	str	r2, [sp, #20]
 80178c4:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80178c8:	9204      	str	r2, [sp, #16]
 80178ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80178cc:	9203      	str	r2, [sp, #12]
 80178ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80178d2:	9202      	str	r2, [sp, #8]
 80178d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178d6:	9201      	str	r2, [sp, #4]
 80178d8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80178dc:	9200      	str	r2, [sp, #0]
 80178de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80178e2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80178e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178e8:	e9cd 7606 	strd	r7, r6, [sp, #24]
 80178ec:	a810      	add	r0, sp, #64	; 0x40
 80178ee:	f7ff fe4b 	bl	8017588 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 80178f2:	464c      	mov	r4, r9
 80178f4:	e7c4      	b.n	8017880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 80178f6:	6823      	ldr	r3, [r4, #0]
 80178f8:	f104 0904 	add.w	r9, r4, #4
 80178fc:	9310      	str	r3, [sp, #64]	; 0x40
 80178fe:	e7df      	b.n	80178c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8017900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017902:	6820      	ldr	r0, [r4, #0]
 8017904:	1aba      	subs	r2, r7, r2
 8017906:	230a      	movs	r3, #10
 8017908:	b292      	uxth	r2, r2
 801790a:	4641      	mov	r1, r8
 801790c:	f7ff fdfb 	bl	8017506 <_ZN8touchgfx7Unicode4itoaElPtti>
 8017910:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017914:	2b2d      	cmp	r3, #45	; 0x2d
 8017916:	f104 0904 	add.w	r9, r4, #4
 801791a:	d1d1      	bne.n	80178c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801791c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017920:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017922:	3302      	adds	r3, #2
 8017924:	e7ea      	b.n	80178fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 8017926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017928:	f104 0904 	add.w	r9, r4, #4
 801792c:	1aba      	subs	r2, r7, r2
 801792e:	230a      	movs	r3, #10
 8017930:	b292      	uxth	r2, r2
 8017932:	4641      	mov	r1, r8
 8017934:	6820      	ldr	r0, [r4, #0]
 8017936:	f7ff fdc8 	bl	80174ca <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801793a:	e7c1      	b.n	80178c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801793c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801793e:	6820      	ldr	r0, [r4, #0]
 8017940:	1aba      	subs	r2, r7, r2
 8017942:	b292      	uxth	r2, r2
 8017944:	2310      	movs	r3, #16
 8017946:	4641      	mov	r1, r8
 8017948:	f7ff fdbf 	bl	80174ca <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801794c:	f104 0904 	add.w	r9, r4, #4
 8017950:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8017954:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8017958:	2b00      	cmp	r3, #0
 801795a:	d0b1      	beq.n	80178c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801795c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8017960:	2919      	cmp	r1, #25
 8017962:	d8f7      	bhi.n	8017954 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8017964:	3b20      	subs	r3, #32
 8017966:	8013      	strh	r3, [r2, #0]
 8017968:	e7f4      	b.n	8017954 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801796a:	2200      	movs	r2, #0
 801796c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8017970:	e760      	b.n	8017834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8017972:	459a      	cmp	sl, r3
 8017974:	f77f af40 	ble.w	80177f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8017978:	f109 0302 	add.w	r3, r9, #2
 801797c:	9309      	str	r3, [sp, #36]	; 0x24
 801797e:	ab0f      	add	r3, sp, #60	; 0x3c
 8017980:	9304      	str	r3, [sp, #16]
 8017982:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8017986:	9303      	str	r3, [sp, #12]
 8017988:	ab0e      	add	r3, sp, #56	; 0x38
 801798a:	9302      	str	r3, [sp, #8]
 801798c:	ab0c      	add	r3, sp, #48	; 0x30
 801798e:	9301      	str	r3, [sp, #4]
 8017990:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8017994:	9300      	str	r3, [sp, #0]
 8017996:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801799a:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801799e:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 80179a2:	a809      	add	r0, sp, #36	; 0x24
 80179a4:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 80179a8:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 80179ac:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 80179b0:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 80179b4:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 80179b8:	950e      	str	r5, [sp, #56]	; 0x38
 80179ba:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 80179be:	950f      	str	r5, [sp, #60]	; 0x3c
 80179c0:	f7ff fe92 	bl	80176e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 80179c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	bfbe      	ittt	lt
 80179cc:	6823      	ldrlt	r3, [r4, #0]
 80179ce:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80179d2:	930e      	strlt	r3, [sp, #56]	; 0x38
 80179d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179d6:	bfb8      	it	lt
 80179d8:	3404      	addlt	r4, #4
 80179da:	2b00      	cmp	r3, #0
 80179dc:	bfbe      	ittt	lt
 80179de:	6823      	ldrlt	r3, [r4, #0]
 80179e0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80179e4:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80179e6:	8813      	ldrh	r3, [r2, #0]
 80179e8:	bfb8      	it	lt
 80179ea:	3404      	addlt	r4, #4
 80179ec:	2b69      	cmp	r3, #105	; 0x69
 80179ee:	f43f af29 	beq.w	8017844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80179f2:	f63f af37 	bhi.w	8017864 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 80179f6:	2b58      	cmp	r3, #88	; 0x58
 80179f8:	f43f af24 	beq.w	8017844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80179fc:	f63f af1e 	bhi.w	801783c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 8017a00:	2b25      	cmp	r3, #37	; 0x25
 8017a02:	f43f af3a 	beq.w	801787a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 8017a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a08:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017a0c:	f8b9 2000 	ldrh.w	r2, [r9]
 8017a10:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8017a14:	3301      	adds	r3, #1
 8017a16:	930d      	str	r3, [sp, #52]	; 0x34
 8017a18:	e732      	b.n	8017880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

08017a1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8017a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a1e:	4605      	mov	r5, r0
 8017a20:	b0a1      	sub	sp, #132	; 0x84
 8017a22:	4610      	mov	r0, r2
 8017a24:	460e      	mov	r6, r1
 8017a26:	4614      	mov	r4, r2
 8017a28:	461f      	mov	r7, r3
 8017a2a:	f7ff fd31 	bl	8017490 <_ZN8touchgfx7Unicode6strlenEPKc>
 8017a2e:	283f      	cmp	r0, #63	; 0x3f
 8017a30:	d906      	bls.n	8017a40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 8017a32:	4b0a      	ldr	r3, [pc, #40]	; (8017a5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8017a34:	4a0a      	ldr	r2, [pc, #40]	; (8017a60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8017a36:	480b      	ldr	r0, [pc, #44]	; (8017a64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8017a38:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8017a3c:	f00b fda0 	bl	8023580 <__assert_func>
 8017a40:	4621      	mov	r1, r4
 8017a42:	2240      	movs	r2, #64	; 0x40
 8017a44:	4668      	mov	r0, sp
 8017a46:	f7ff fd2f 	bl	80174a8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017a4a:	463b      	mov	r3, r7
 8017a4c:	466a      	mov	r2, sp
 8017a4e:	4631      	mov	r1, r6
 8017a50:	4628      	mov	r0, r5
 8017a52:	f7ff febc 	bl	80177ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8017a56:	b021      	add	sp, #132	; 0x84
 8017a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	08028309 	.word	0x08028309
 8017a60:	0802834c 	.word	0x0802834c
 8017a64:	08028326 	.word	0x08028326

08017a68 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8017a68:	b40c      	push	{r2, r3}
 8017a6a:	b507      	push	{r0, r1, r2, lr}
 8017a6c:	ab04      	add	r3, sp, #16
 8017a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a72:	9301      	str	r3, [sp, #4]
 8017a74:	f7ff ffd2 	bl	8017a1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8017a78:	b003      	add	sp, #12
 8017a7a:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a7e:	b002      	add	sp, #8
 8017a80:	4770      	bx	lr
	...

08017a84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8017a84:	4b01      	ldr	r3, [pc, #4]	; (8017a8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8017a86:	6018      	str	r0, [r3, #0]
 8017a88:	4770      	bx	lr
 8017a8a:	bf00      	nop
 8017a8c:	2002b108 	.word	0x2002b108

08017a90 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8017a90:	4b07      	ldr	r3, [pc, #28]	; (8017ab0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8017a92:	881a      	ldrh	r2, [r3, #0]
 8017a94:	4282      	cmp	r2, r0
 8017a96:	d809      	bhi.n	8017aac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8017a98:	4b06      	ldr	r3, [pc, #24]	; (8017ab4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8017a9a:	881b      	ldrh	r3, [r3, #0]
 8017a9c:	4413      	add	r3, r2
 8017a9e:	4298      	cmp	r0, r3
 8017aa0:	da04      	bge.n	8017aac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8017aa2:	4b05      	ldr	r3, [pc, #20]	; (8017ab8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017aaa:	4770      	bx	lr
 8017aac:	2000      	movs	r0, #0
 8017aae:	4770      	bx	lr
 8017ab0:	2002b128 	.word	0x2002b128
 8017ab4:	2002b12c 	.word	0x2002b12c
 8017ab8:	2002b10c 	.word	0x2002b10c

08017abc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8017abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ac0:	4d26      	ldr	r5, [pc, #152]	; (8017b5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8017ac2:	682b      	ldr	r3, [r5, #0]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d046      	beq.n	8017b56 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8017ac8:	4a25      	ldr	r2, [pc, #148]	; (8017b60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8017aca:	4f26      	ldr	r7, [pc, #152]	; (8017b64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017acc:	8810      	ldrh	r0, [r2, #0]
 8017ace:	883c      	ldrh	r4, [r7, #0]
 8017ad0:	4e25      	ldr	r6, [pc, #148]	; (8017b68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8017ad2:	4420      	add	r0, r4
 8017ad4:	1c42      	adds	r2, r0, #1
 8017ad6:	f022 0201 	bic.w	r2, r2, #1
 8017ada:	0412      	lsls	r2, r2, #16
 8017adc:	0c12      	lsrs	r2, r2, #16
 8017ade:	0051      	lsls	r1, r2, #1
 8017ae0:	220e      	movs	r2, #14
 8017ae2:	fb02 fc04 	mul.w	ip, r2, r4
 8017ae6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8017aea:	4c20      	ldr	r4, [pc, #128]	; (8017b6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017aec:	eb03 0208 	add.w	r2, r3, r8
 8017af0:	eb08 0e01 	add.w	lr, r8, r1
 8017af4:	6022      	str	r2, [r4, #0]
 8017af6:	eb03 020e 	add.w	r2, r3, lr
 8017afa:	6032      	str	r2, [r6, #0]
 8017afc:	44e6      	add	lr, ip
 8017afe:	4a1c      	ldr	r2, [pc, #112]	; (8017b70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8017b00:	4473      	add	r3, lr
 8017b02:	6013      	str	r3, [r2, #0]
 8017b04:	4a1b      	ldr	r2, [pc, #108]	; (8017b74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017b06:	2300      	movs	r3, #0
 8017b08:	8013      	strh	r3, [r2, #0]
 8017b0a:	4a1b      	ldr	r2, [pc, #108]	; (8017b78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8017b0c:	6812      	ldr	r2, [r2, #0]
 8017b0e:	eba2 0208 	sub.w	r2, r2, r8
 8017b12:	1a52      	subs	r2, r2, r1
 8017b14:	4919      	ldr	r1, [pc, #100]	; (8017b7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8017b16:	eba2 020c 	sub.w	r2, r2, ip
 8017b1a:	600a      	str	r2, [r1, #0]
 8017b1c:	4a18      	ldr	r2, [pc, #96]	; (8017b80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8017b1e:	469c      	mov	ip, r3
 8017b20:	8013      	strh	r3, [r2, #0]
 8017b22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017b26:	4283      	cmp	r3, r0
 8017b28:	d10d      	bne.n	8017b46 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 8017b2a:	883d      	ldrh	r5, [r7, #0]
 8017b2c:	6830      	ldr	r0, [r6, #0]
 8017b2e:	2300      	movs	r3, #0
 8017b30:	240e      	movs	r4, #14
 8017b32:	429d      	cmp	r5, r3
 8017b34:	d90f      	bls.n	8017b56 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8017b36:	fb04 0203 	mla	r2, r4, r3, r0
 8017b3a:	3301      	adds	r3, #1
 8017b3c:	7b11      	ldrb	r1, [r2, #12]
 8017b3e:	f36f 1145 	bfc	r1, #5, #1
 8017b42:	7311      	strb	r1, [r2, #12]
 8017b44:	e7f5      	b.n	8017b32 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8017b46:	682a      	ldr	r2, [r5, #0]
 8017b48:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017b4c:	6822      	ldr	r2, [r4, #0]
 8017b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8017b52:	3301      	adds	r3, #1
 8017b54:	e7e7      	b.n	8017b26 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8017b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b5a:	bf00      	nop
 8017b5c:	2002b10c 	.word	0x2002b10c
 8017b60:	2002b128 	.word	0x2002b128
 8017b64:	2002b12c 	.word	0x2002b12c
 8017b68:	2002b110 	.word	0x2002b110
 8017b6c:	2002b120 	.word	0x2002b120
 8017b70:	2002b118 	.word	0x2002b118
 8017b74:	2002b12a 	.word	0x2002b12a
 8017b78:	2002b114 	.word	0x2002b114
 8017b7c:	2002b124 	.word	0x2002b124
 8017b80:	2002b11c 	.word	0x2002b11c

08017b84 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017b84:	b510      	push	{r4, lr}
 8017b86:	4b10      	ldr	r3, [pc, #64]	; (8017bc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	b9db      	cbnz	r3, 8017bc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8017b8c:	b1d1      	cbz	r1, 8017bc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8017b8e:	4b0f      	ldr	r3, [pc, #60]	; (8017bcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8017b90:	801a      	strh	r2, [r3, #0]
 8017b92:	4b0f      	ldr	r3, [pc, #60]	; (8017bd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8017b94:	881b      	ldrh	r3, [r3, #0]
 8017b96:	b292      	uxth	r2, r2
 8017b98:	240e      	movs	r4, #14
 8017b9a:	4413      	add	r3, r2
 8017b9c:	4362      	muls	r2, r4
 8017b9e:	2406      	movs	r4, #6
 8017ba0:	fb04 2203 	mla	r2, r4, r3, r2
 8017ba4:	428a      	cmp	r2, r1
 8017ba6:	d305      	bcc.n	8017bb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8017ba8:	4b0a      	ldr	r3, [pc, #40]	; (8017bd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8017baa:	4a0b      	ldr	r2, [pc, #44]	; (8017bd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8017bac:	480b      	ldr	r0, [pc, #44]	; (8017bdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8017bae:	2137      	movs	r1, #55	; 0x37
 8017bb0:	f00b fce6 	bl	8023580 <__assert_func>
 8017bb4:	4b0a      	ldr	r3, [pc, #40]	; (8017be0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8017bb6:	6019      	str	r1, [r3, #0]
 8017bb8:	4b0a      	ldr	r3, [pc, #40]	; (8017be4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8017bba:	6018      	str	r0, [r3, #0]
 8017bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bc0:	f7ff bf7c 	b.w	8017abc <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017bc4:	bd10      	pop	{r4, pc}
 8017bc6:	bf00      	nop
 8017bc8:	2002b118 	.word	0x2002b118
 8017bcc:	2002b12c 	.word	0x2002b12c
 8017bd0:	2002b128 	.word	0x2002b128
 8017bd4:	0802842e 	.word	0x0802842e
 8017bd8:	08028487 	.word	0x08028487
 8017bdc:	08028409 	.word	0x08028409
 8017be0:	2002b114 	.word	0x2002b114
 8017be4:	2002b10c 	.word	0x2002b10c

08017be8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8017be8:	b470      	push	{r4, r5, r6}
 8017bea:	4c07      	ldr	r4, [pc, #28]	; (8017c08 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017bec:	6826      	ldr	r6, [r4, #0]
 8017bee:	4605      	mov	r5, r0
 8017bf0:	4610      	mov	r0, r2
 8017bf2:	9a03      	ldr	r2, [sp, #12]
 8017bf4:	b936      	cbnz	r6, 8017c04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8017bf6:	6025      	str	r5, [r4, #0]
 8017bf8:	4c04      	ldr	r4, [pc, #16]	; (8017c0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8017bfa:	8021      	strh	r1, [r4, #0]
 8017bfc:	bc70      	pop	{r4, r5, r6}
 8017bfe:	4619      	mov	r1, r3
 8017c00:	f7ff bfc0 	b.w	8017b84 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017c04:	bc70      	pop	{r4, r5, r6}
 8017c06:	4770      	bx	lr
 8017c08:	2002b130 	.word	0x2002b130
 8017c0c:	2002b128 	.word	0x2002b128

08017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8017c10:	b508      	push	{r3, lr}
 8017c12:	4b14      	ldr	r3, [pc, #80]	; (8017c64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017c14:	6819      	ldr	r1, [r3, #0]
 8017c16:	b931      	cbnz	r1, 8017c26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8017c18:	4b13      	ldr	r3, [pc, #76]	; (8017c68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8017c1a:	4a14      	ldr	r2, [pc, #80]	; (8017c6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8017c1c:	4814      	ldr	r0, [pc, #80]	; (8017c70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8017c1e:	f240 21e6 	movw	r1, #742	; 0x2e6
 8017c22:	f00b fcad 	bl	8023580 <__assert_func>
 8017c26:	4a13      	ldr	r2, [pc, #76]	; (8017c74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017c28:	8803      	ldrh	r3, [r0, #0]
 8017c2a:	8812      	ldrh	r2, [r2, #0]
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	d204      	bcs.n	8017c3a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8017c30:	2214      	movs	r2, #20
 8017c32:	fb02 1303 	mla	r3, r2, r3, r1
 8017c36:	8918      	ldrh	r0, [r3, #8]
 8017c38:	bd08      	pop	{r3, pc}
 8017c3a:	490f      	ldr	r1, [pc, #60]	; (8017c78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8017c3c:	8809      	ldrh	r1, [r1, #0]
 8017c3e:	4411      	add	r1, r2
 8017c40:	428b      	cmp	r3, r1
 8017c42:	da06      	bge.n	8017c52 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8017c44:	1a9b      	subs	r3, r3, r2
 8017c46:	4a0d      	ldr	r2, [pc, #52]	; (8017c7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8017c48:	6812      	ldr	r2, [r2, #0]
 8017c4a:	210e      	movs	r1, #14
 8017c4c:	fb01 2303 	mla	r3, r1, r3, r2
 8017c50:	e7f1      	b.n	8017c36 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8017c52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017c56:	4293      	cmp	r3, r2
 8017c58:	bf0a      	itet	eq
 8017c5a:	4b09      	ldreq	r3, [pc, #36]	; (8017c80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8017c5c:	2000      	movne	r0, #0
 8017c5e:	8818      	ldrheq	r0, [r3, #0]
 8017c60:	e7ea      	b.n	8017c38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8017c62:	bf00      	nop
 8017c64:	2002b130 	.word	0x2002b130
 8017c68:	080275dc 	.word	0x080275dc
 8017c6c:	08028534 	.word	0x08028534
 8017c70:	08028409 	.word	0x08028409
 8017c74:	2002b128 	.word	0x2002b128
 8017c78:	2002b12c 	.word	0x2002b12c
 8017c7c:	2002b110 	.word	0x2002b110
 8017c80:	2002b07c 	.word	0x2002b07c

08017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017c84:	b508      	push	{r3, lr}
 8017c86:	4b14      	ldr	r3, [pc, #80]	; (8017cd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017c88:	6819      	ldr	r1, [r3, #0]
 8017c8a:	b931      	cbnz	r1, 8017c9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8017c8c:	4b13      	ldr	r3, [pc, #76]	; (8017cdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017c8e:	4a14      	ldr	r2, [pc, #80]	; (8017ce0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017c90:	4814      	ldr	r0, [pc, #80]	; (8017ce4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017c92:	f240 21fa 	movw	r1, #762	; 0x2fa
 8017c96:	f00b fc73 	bl	8023580 <__assert_func>
 8017c9a:	4a13      	ldr	r2, [pc, #76]	; (8017ce8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017c9c:	8803      	ldrh	r3, [r0, #0]
 8017c9e:	8812      	ldrh	r2, [r2, #0]
 8017ca0:	4293      	cmp	r3, r2
 8017ca2:	d204      	bcs.n	8017cae <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8017ca4:	2214      	movs	r2, #20
 8017ca6:	fb02 1303 	mla	r3, r2, r3, r1
 8017caa:	8958      	ldrh	r0, [r3, #10]
 8017cac:	bd08      	pop	{r3, pc}
 8017cae:	490f      	ldr	r1, [pc, #60]	; (8017cec <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8017cb0:	8809      	ldrh	r1, [r1, #0]
 8017cb2:	4411      	add	r1, r2
 8017cb4:	428b      	cmp	r3, r1
 8017cb6:	da06      	bge.n	8017cc6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8017cb8:	1a9b      	subs	r3, r3, r2
 8017cba:	4a0d      	ldr	r2, [pc, #52]	; (8017cf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8017cbc:	6812      	ldr	r2, [r2, #0]
 8017cbe:	210e      	movs	r1, #14
 8017cc0:	fb01 2303 	mla	r3, r1, r3, r2
 8017cc4:	e7f1      	b.n	8017caa <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8017cc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017cca:	4293      	cmp	r3, r2
 8017ccc:	bf0a      	itet	eq
 8017cce:	4b09      	ldreq	r3, [pc, #36]	; (8017cf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8017cd0:	2000      	movne	r0, #0
 8017cd2:	8818      	ldrheq	r0, [r3, #0]
 8017cd4:	e7ea      	b.n	8017cac <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8017cd6:	bf00      	nop
 8017cd8:	2002b130 	.word	0x2002b130
 8017cdc:	080275dc 	.word	0x080275dc
 8017ce0:	08028560 	.word	0x08028560
 8017ce4:	08028409 	.word	0x08028409
 8017ce8:	2002b128 	.word	0x2002b128
 8017cec:	2002b12c 	.word	0x2002b12c
 8017cf0:	2002b110 	.word	0x2002b110
 8017cf4:	2002b07e 	.word	0x2002b07e

08017cf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017cf8:	b510      	push	{r4, lr}
 8017cfa:	4b23      	ldr	r3, [pc, #140]	; (8017d88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8017cfc:	681c      	ldr	r4, [r3, #0]
 8017cfe:	b934      	cbnz	r4, 8017d0e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8017d00:	4b22      	ldr	r3, [pc, #136]	; (8017d8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017d02:	4a23      	ldr	r2, [pc, #140]	; (8017d90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8017d04:	4823      	ldr	r0, [pc, #140]	; (8017d94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017d06:	f240 310e 	movw	r1, #782	; 0x30e
 8017d0a:	f00b fc39 	bl	8023580 <__assert_func>
 8017d0e:	4a22      	ldr	r2, [pc, #136]	; (8017d98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017d10:	880b      	ldrh	r3, [r1, #0]
 8017d12:	8812      	ldrh	r2, [r2, #0]
 8017d14:	4293      	cmp	r3, r2
 8017d16:	d211      	bcs.n	8017d3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8017d18:	2214      	movs	r2, #20
 8017d1a:	fb02 4303 	mla	r3, r2, r3, r4
 8017d1e:	8a1a      	ldrh	r2, [r3, #16]
 8017d20:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8017d24:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017d28:	8a5b      	ldrh	r3, [r3, #18]
 8017d2a:	8004      	strh	r4, [r0, #0]
 8017d2c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d34:	8041      	strh	r1, [r0, #2]
 8017d36:	8082      	strh	r2, [r0, #4]
 8017d38:	80c3      	strh	r3, [r0, #6]
 8017d3a:	e00e      	b.n	8017d5a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017d3c:	4917      	ldr	r1, [pc, #92]	; (8017d9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8017d3e:	8809      	ldrh	r1, [r1, #0]
 8017d40:	4411      	add	r1, r2
 8017d42:	428b      	cmp	r3, r1
 8017d44:	da0a      	bge.n	8017d5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8017d46:	1a9b      	subs	r3, r3, r2
 8017d48:	4a15      	ldr	r2, [pc, #84]	; (8017da0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8017d4a:	6812      	ldr	r2, [r2, #0]
 8017d4c:	210e      	movs	r1, #14
 8017d4e:	fb01 2303 	mla	r3, r1, r3, r2
 8017d52:	681a      	ldr	r2, [r3, #0]
 8017d54:	6002      	str	r2, [r0, #0]
 8017d56:	685a      	ldr	r2, [r3, #4]
 8017d58:	6042      	str	r2, [r0, #4]
 8017d5a:	bd10      	pop	{r4, pc}
 8017d5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017d60:	4293      	cmp	r3, r2
 8017d62:	d10b      	bne.n	8017d7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8017d64:	4b0f      	ldr	r3, [pc, #60]	; (8017da4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8017d66:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017d6a:	4b0f      	ldr	r3, [pc, #60]	; (8017da8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8017d6c:	8081      	strh	r1, [r0, #4]
 8017d6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d72:	80c2      	strh	r2, [r0, #6]
 8017d74:	2300      	movs	r3, #0
 8017d76:	8003      	strh	r3, [r0, #0]
 8017d78:	8043      	strh	r3, [r0, #2]
 8017d7a:	e7ee      	b.n	8017d5a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	8003      	strh	r3, [r0, #0]
 8017d80:	8043      	strh	r3, [r0, #2]
 8017d82:	8083      	strh	r3, [r0, #4]
 8017d84:	e7d8      	b.n	8017d38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8017d86:	bf00      	nop
 8017d88:	2002b130 	.word	0x2002b130
 8017d8c:	080275dc 	.word	0x080275dc
 8017d90:	080284cd 	.word	0x080284cd
 8017d94:	08028409 	.word	0x08028409
 8017d98:	2002b128 	.word	0x2002b128
 8017d9c:	2002b12c 	.word	0x2002b12c
 8017da0:	2002b110 	.word	0x2002b110
 8017da4:	2002b07c 	.word	0x2002b07c
 8017da8:	2002b07e 	.word	0x2002b07e

08017dac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017dac:	4b18      	ldr	r3, [pc, #96]	; (8017e10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	b34b      	cbz	r3, 8017e06 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8017db2:	4a18      	ldr	r2, [pc, #96]	; (8017e14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017db4:	8800      	ldrh	r0, [r0, #0]
 8017db6:	8812      	ldrh	r2, [r2, #0]
 8017db8:	4290      	cmp	r0, r2
 8017dba:	d211      	bcs.n	8017de0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8017dbc:	2214      	movs	r2, #20
 8017dbe:	fb02 3300 	mla	r3, r2, r0, r3
 8017dc2:	8a1a      	ldrh	r2, [r3, #16]
 8017dc4:	8919      	ldrh	r1, [r3, #8]
 8017dc6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017dca:	428a      	cmp	r2, r1
 8017dcc:	db1d      	blt.n	8017e0a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8017dce:	8a58      	ldrh	r0, [r3, #18]
 8017dd0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017dd4:	895b      	ldrh	r3, [r3, #10]
 8017dd6:	4298      	cmp	r0, r3
 8017dd8:	bfac      	ite	ge
 8017dda:	2000      	movge	r0, #0
 8017ddc:	2001      	movlt	r0, #1
 8017dde:	4770      	bx	lr
 8017de0:	4b0d      	ldr	r3, [pc, #52]	; (8017e18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017de2:	881b      	ldrh	r3, [r3, #0]
 8017de4:	4413      	add	r3, r2
 8017de6:	4298      	cmp	r0, r3
 8017de8:	da0d      	bge.n	8017e06 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8017dea:	4b0c      	ldr	r3, [pc, #48]	; (8017e1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	1a80      	subs	r0, r0, r2
 8017df0:	220e      	movs	r2, #14
 8017df2:	fb02 3300 	mla	r3, r2, r0, r3
 8017df6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017dfa:	891a      	ldrh	r2, [r3, #8]
 8017dfc:	4291      	cmp	r1, r2
 8017dfe:	db04      	blt.n	8017e0a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8017e00:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8017e04:	e7e6      	b.n	8017dd4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8017e06:	2000      	movs	r0, #0
 8017e08:	4770      	bx	lr
 8017e0a:	2001      	movs	r0, #1
 8017e0c:	4770      	bx	lr
 8017e0e:	bf00      	nop
 8017e10:	2002b130 	.word	0x2002b130
 8017e14:	2002b128 	.word	0x2002b128
 8017e18:	2002b12c 	.word	0x2002b12c
 8017e1c:	2002b110 	.word	0x2002b110

08017e20 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017e20:	b508      	push	{r3, lr}
 8017e22:	4b12      	ldr	r3, [pc, #72]	; (8017e6c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8017e24:	6819      	ldr	r1, [r3, #0]
 8017e26:	b931      	cbnz	r1, 8017e36 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017e28:	4b11      	ldr	r3, [pc, #68]	; (8017e70 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017e2a:	4a12      	ldr	r2, [pc, #72]	; (8017e74 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017e2c:	4812      	ldr	r0, [pc, #72]	; (8017e78 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017e2e:	f240 3132 	movw	r1, #818	; 0x332
 8017e32:	f00b fba5 	bl	8023580 <__assert_func>
 8017e36:	8803      	ldrh	r3, [r0, #0]
 8017e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	d012      	beq.n	8017e66 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017e40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017e44:	4293      	cmp	r3, r2
 8017e46:	d103      	bne.n	8017e50 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8017e48:	4b0c      	ldr	r3, [pc, #48]	; (8017e7c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8017e4e:	bd08      	pop	{r3, pc}
 8017e50:	4a0b      	ldr	r2, [pc, #44]	; (8017e80 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8017e52:	6812      	ldr	r2, [r2, #0]
 8017e54:	b11a      	cbz	r2, 8017e5e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8017e56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017e5a:	2800      	cmp	r0, #0
 8017e5c:	d1f7      	bne.n	8017e4e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017e5e:	2214      	movs	r2, #20
 8017e60:	4353      	muls	r3, r2
 8017e62:	58c8      	ldr	r0, [r1, r3]
 8017e64:	e7f3      	b.n	8017e4e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017e66:	2000      	movs	r0, #0
 8017e68:	e7f1      	b.n	8017e4e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017e6a:	bf00      	nop
 8017e6c:	2002b130 	.word	0x2002b130
 8017e70:	080275dc 	.word	0x080275dc
 8017e74:	08028503 	.word	0x08028503
 8017e78:	08028409 	.word	0x08028409
 8017e7c:	2002b088 	.word	0x2002b088
 8017e80:	2002b10c 	.word	0x2002b10c

08017e84 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017e84:	8802      	ldrh	r2, [r0, #0]
 8017e86:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d840      	bhi.n	8017f10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8017e8e:	4b21      	ldr	r3, [pc, #132]	; (8017f14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8017e90:	881b      	ldrh	r3, [r3, #0]
 8017e92:	429a      	cmp	r2, r3
 8017e94:	d220      	bcs.n	8017ed8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8017e96:	4b20      	ldr	r3, [pc, #128]	; (8017f18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8017e98:	6819      	ldr	r1, [r3, #0]
 8017e9a:	2314      	movs	r3, #20
 8017e9c:	fb03 1302 	mla	r3, r3, r2, r1
 8017ea0:	6858      	ldr	r0, [r3, #4]
 8017ea2:	2800      	cmp	r0, #0
 8017ea4:	d035      	beq.n	8017f12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017ea6:	491d      	ldr	r1, [pc, #116]	; (8017f1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017ea8:	6809      	ldr	r1, [r1, #0]
 8017eaa:	2900      	cmp	r1, #0
 8017eac:	d031      	beq.n	8017f12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017eae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017eb2:	b371      	cbz	r1, 8017f12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017eb4:	895a      	ldrh	r2, [r3, #10]
 8017eb6:	8918      	ldrh	r0, [r3, #8]
 8017eb8:	4350      	muls	r0, r2
 8017eba:	7c5a      	ldrb	r2, [r3, #17]
 8017ebc:	7cdb      	ldrb	r3, [r3, #19]
 8017ebe:	0952      	lsrs	r2, r2, #5
 8017ec0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017ec4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017ec8:	2b0b      	cmp	r3, #11
 8017eca:	bf18      	it	ne
 8017ecc:	0040      	lslne	r0, r0, #1
 8017ece:	3003      	adds	r0, #3
 8017ed0:	f020 0003 	bic.w	r0, r0, #3
 8017ed4:	4408      	add	r0, r1
 8017ed6:	4770      	bx	lr
 8017ed8:	4911      	ldr	r1, [pc, #68]	; (8017f20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017eda:	8809      	ldrh	r1, [r1, #0]
 8017edc:	4419      	add	r1, r3
 8017ede:	428a      	cmp	r2, r1
 8017ee0:	da16      	bge.n	8017f10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8017ee2:	4910      	ldr	r1, [pc, #64]	; (8017f24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017ee4:	6809      	ldr	r1, [r1, #0]
 8017ee6:	1ad3      	subs	r3, r2, r3
 8017ee8:	200e      	movs	r0, #14
 8017eea:	fb00 1303 	mla	r3, r0, r3, r1
 8017eee:	7b19      	ldrb	r1, [r3, #12]
 8017ef0:	f001 011f 	and.w	r1, r1, #31
 8017ef4:	290b      	cmp	r1, #11
 8017ef6:	d10b      	bne.n	8017f10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8017ef8:	8919      	ldrh	r1, [r3, #8]
 8017efa:	8958      	ldrh	r0, [r3, #10]
 8017efc:	4b07      	ldr	r3, [pc, #28]	; (8017f1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017efe:	4348      	muls	r0, r1
 8017f00:	6819      	ldr	r1, [r3, #0]
 8017f02:	3003      	adds	r0, #3
 8017f04:	f020 0303 	bic.w	r3, r0, #3
 8017f08:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017f0c:	4418      	add	r0, r3
 8017f0e:	4770      	bx	lr
 8017f10:	2000      	movs	r0, #0
 8017f12:	4770      	bx	lr
 8017f14:	2002b128 	.word	0x2002b128
 8017f18:	2002b130 	.word	0x2002b130
 8017f1c:	2002b10c 	.word	0x2002b10c
 8017f20:	2002b12c 	.word	0x2002b12c
 8017f24:	2002b110 	.word	0x2002b110

08017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017f28:	4b19      	ldr	r3, [pc, #100]	; (8017f90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8017f2a:	6819      	ldr	r1, [r3, #0]
 8017f2c:	8803      	ldrh	r3, [r0, #0]
 8017f2e:	b1e9      	cbz	r1, 8017f6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017f30:	4a18      	ldr	r2, [pc, #96]	; (8017f94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8017f32:	8812      	ldrh	r2, [r2, #0]
 8017f34:	429a      	cmp	r2, r3
 8017f36:	d90a      	bls.n	8017f4e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8017f38:	2214      	movs	r2, #20
 8017f3a:	fb02 1303 	mla	r3, r2, r3, r1
 8017f3e:	7c58      	ldrb	r0, [r3, #17]
 8017f40:	0942      	lsrs	r2, r0, #5
 8017f42:	7cd8      	ldrb	r0, [r3, #19]
 8017f44:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8017f48:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8017f4c:	4770      	bx	lr
 8017f4e:	4912      	ldr	r1, [pc, #72]	; (8017f98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8017f50:	8809      	ldrh	r1, [r1, #0]
 8017f52:	4411      	add	r1, r2
 8017f54:	428b      	cmp	r3, r1
 8017f56:	da09      	bge.n	8017f6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017f58:	1a9b      	subs	r3, r3, r2
 8017f5a:	4a10      	ldr	r2, [pc, #64]	; (8017f9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8017f5c:	6812      	ldr	r2, [r2, #0]
 8017f5e:	210e      	movs	r1, #14
 8017f60:	fb01 2303 	mla	r3, r1, r3, r2
 8017f64:	7b18      	ldrb	r0, [r3, #12]
 8017f66:	f000 001f 	and.w	r0, r0, #31
 8017f6a:	4770      	bx	lr
 8017f6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017f70:	4293      	cmp	r3, r2
 8017f72:	d10a      	bne.n	8017f8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8017f74:	4b0a      	ldr	r3, [pc, #40]	; (8017fa0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017f7c:	b10a      	cbz	r2, 8017f82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8017f7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017f80:	b900      	cbnz	r0, 8017f84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8017f82:	6898      	ldr	r0, [r3, #8]
 8017f84:	6803      	ldr	r3, [r0, #0]
 8017f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f88:	4718      	bx	r3
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	4770      	bx	lr
 8017f8e:	bf00      	nop
 8017f90:	2002b130 	.word	0x2002b130
 8017f94:	2002b128 	.word	0x2002b128
 8017f98:	2002b12c 	.word	0x2002b12c
 8017f9c:	2002b110 	.word	0x2002b110
 8017fa0:	2002b088 	.word	0x2002b088

08017fa4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8017fa4:	2010      	movs	r0, #16
 8017fa6:	4770      	bx	lr

08017fa8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8017fa8:	2000      	movs	r0, #0
 8017faa:	4770      	bx	lr

08017fac <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8017fac:	00d2      	lsls	r2, r2, #3
 8017fae:	0209      	lsls	r1, r1, #8
 8017fb0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017fb4:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8017fb8:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8017fbc:	4310      	orrs	r0, r2
 8017fbe:	4770      	bx	lr

08017fc0 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8017fc0:	1209      	asrs	r1, r1, #8
 8017fc2:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8017fc6:	4770      	bx	lr

08017fc8 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8017fc8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8017fcc:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8017fd0:	4770      	bx	lr

08017fd2 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8017fd2:	00c9      	lsls	r1, r1, #3
 8017fd4:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8017fd8:	4770      	bx	lr

08017fda <_ZN8touchgfx8LCD16bpp4initEv>:
 8017fda:	4770      	bx	lr

08017fdc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017fdc:	2bff      	cmp	r3, #255	; 0xff
 8017fde:	d050      	beq.n	8018082 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017fe0:	2a0b      	cmp	r2, #11
 8017fe2:	d04a      	beq.n	801807a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017fe4:	d80e      	bhi.n	8018004 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017fe6:	2a03      	cmp	r2, #3
 8017fe8:	d03f      	beq.n	801806a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017fea:	d804      	bhi.n	8017ff6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017fec:	2a01      	cmp	r2, #1
 8017fee:	d03e      	beq.n	801806e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017ff0:	d93f      	bls.n	8018072 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017ff2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017ff4:	4770      	bx	lr
 8017ff6:	2a09      	cmp	r2, #9
 8017ff8:	d03f      	beq.n	801807a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017ffa:	d83c      	bhi.n	8018076 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017ffc:	2a08      	cmp	r2, #8
 8017ffe:	d03a      	beq.n	8018076 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018000:	2000      	movs	r0, #0
 8018002:	4770      	bx	lr
 8018004:	2a2f      	cmp	r2, #47	; 0x2f
 8018006:	d024      	beq.n	8018052 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8018008:	d80d      	bhi.n	8018026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801800a:	2a2d      	cmp	r2, #45	; 0x2d
 801800c:	d014      	beq.n	8018038 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801800e:	d826      	bhi.n	801805e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8018010:	2a2c      	cmp	r2, #44	; 0x2c
 8018012:	d1f5      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018014:	684b      	ldr	r3, [r1, #4]
 8018016:	781b      	ldrb	r3, [r3, #0]
 8018018:	2b01      	cmp	r3, #1
 801801a:	d018      	beq.n	801804e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801801c:	d323      	bcc.n	8018066 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801801e:	2b02      	cmp	r3, #2
 8018020:	d1ee      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018022:	6880      	ldr	r0, [r0, #8]
 8018024:	4770      	bx	lr
 8018026:	2a31      	cmp	r2, #49	; 0x31
 8018028:	d004      	beq.n	8018034 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801802a:	d328      	bcc.n	801807e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801802c:	2a32      	cmp	r2, #50	; 0x32
 801802e:	d026      	beq.n	801807e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8018030:	2a33      	cmp	r2, #51	; 0x33
 8018032:	d1e5      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018034:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8018036:	4770      	bx	lr
 8018038:	684b      	ldr	r3, [r1, #4]
 801803a:	781b      	ldrb	r3, [r3, #0]
 801803c:	2b01      	cmp	r3, #1
 801803e:	d004      	beq.n	801804a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8018040:	d30b      	bcc.n	801805a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018042:	2b02      	cmp	r3, #2
 8018044:	d1dc      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018046:	6900      	ldr	r0, [r0, #16]
 8018048:	4770      	bx	lr
 801804a:	6a00      	ldr	r0, [r0, #32]
 801804c:	4770      	bx	lr
 801804e:	6980      	ldr	r0, [r0, #24]
 8018050:	4770      	bx	lr
 8018052:	684b      	ldr	r3, [r1, #4]
 8018054:	781b      	ldrb	r3, [r3, #0]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d1d2      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801805a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801805c:	4770      	bx	lr
 801805e:	684b      	ldr	r3, [r1, #4]
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d1cc      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018066:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018068:	4770      	bx	lr
 801806a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801806c:	4770      	bx	lr
 801806e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8018070:	4770      	bx	lr
 8018072:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018074:	4770      	bx	lr
 8018076:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8018078:	4770      	bx	lr
 801807a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801807c:	4770      	bx	lr
 801807e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8018080:	4770      	bx	lr
 8018082:	2a0b      	cmp	r2, #11
 8018084:	d049      	beq.n	801811a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018086:	d80e      	bhi.n	80180a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8018088:	2a03      	cmp	r2, #3
 801808a:	d040      	beq.n	801810e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801808c:	d804      	bhi.n	8018098 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801808e:	2a01      	cmp	r2, #1
 8018090:	d03f      	beq.n	8018112 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8018092:	d940      	bls.n	8018116 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8018094:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8018096:	4770      	bx	lr
 8018098:	2a09      	cmp	r2, #9
 801809a:	d03e      	beq.n	801811a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801809c:	d801      	bhi.n	80180a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801809e:	2a08      	cmp	r2, #8
 80180a0:	d1ae      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80180a2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80180a4:	4770      	bx	lr
 80180a6:	2a2f      	cmp	r2, #47	; 0x2f
 80180a8:	d024      	beq.n	80180f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80180aa:	d80d      	bhi.n	80180c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80180ac:	2a2d      	cmp	r2, #45	; 0x2d
 80180ae:	d014      	beq.n	80180da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80180b0:	d826      	bhi.n	8018100 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80180b2:	2a2c      	cmp	r2, #44	; 0x2c
 80180b4:	d1a4      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80180b6:	684b      	ldr	r3, [r1, #4]
 80180b8:	781b      	ldrb	r3, [r3, #0]
 80180ba:	2b01      	cmp	r3, #1
 80180bc:	d018      	beq.n	80180f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80180be:	d324      	bcc.n	801810a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80180c0:	2b02      	cmp	r3, #2
 80180c2:	d19d      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80180c4:	68c0      	ldr	r0, [r0, #12]
 80180c6:	4770      	bx	lr
 80180c8:	2a31      	cmp	r2, #49	; 0x31
 80180ca:	d004      	beq.n	80180d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80180cc:	d327      	bcc.n	801811e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80180ce:	2a32      	cmp	r2, #50	; 0x32
 80180d0:	d025      	beq.n	801811e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80180d2:	2a33      	cmp	r2, #51	; 0x33
 80180d4:	d194      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80180d6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80180d8:	4770      	bx	lr
 80180da:	684b      	ldr	r3, [r1, #4]
 80180dc:	781b      	ldrb	r3, [r3, #0]
 80180de:	2b01      	cmp	r3, #1
 80180e0:	d004      	beq.n	80180ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80180e2:	d30b      	bcc.n	80180fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80180e4:	2b02      	cmp	r3, #2
 80180e6:	d18b      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80180e8:	6940      	ldr	r0, [r0, #20]
 80180ea:	4770      	bx	lr
 80180ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80180ee:	4770      	bx	lr
 80180f0:	69c0      	ldr	r0, [r0, #28]
 80180f2:	4770      	bx	lr
 80180f4:	684b      	ldr	r3, [r1, #4]
 80180f6:	781b      	ldrb	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d181      	bne.n	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80180fc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80180fe:	4770      	bx	lr
 8018100:	684b      	ldr	r3, [r1, #4]
 8018102:	781b      	ldrb	r3, [r3, #0]
 8018104:	2b00      	cmp	r3, #0
 8018106:	f47f af7b 	bne.w	8018000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801810a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801810c:	4770      	bx	lr
 801810e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8018110:	4770      	bx	lr
 8018112:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8018114:	4770      	bx	lr
 8018116:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8018118:	4770      	bx	lr
 801811a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801811c:	4770      	bx	lr
 801811e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8018120:	4770      	bx	lr

08018122 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018126:	b087      	sub	sp, #28
 8018128:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801812a:	9205      	str	r2, [sp, #20]
 801812c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8018130:	9202      	str	r2, [sp, #8]
 8018132:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8018136:	9101      	str	r1, [sp, #4]
 8018138:	6871      	ldr	r1, [r6, #4]
 801813a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801813c:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8018140:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8018144:	fb01 2505 	mla	r5, r1, r5, r2
 8018148:	6832      	ldr	r2, [r6, #0]
 801814a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801814e:	6802      	ldr	r2, [r0, #0]
 8018150:	9203      	str	r2, [sp, #12]
 8018152:	6842      	ldr	r2, [r0, #4]
 8018154:	fa1f fe84 	uxth.w	lr, r4
 8018158:	3204      	adds	r2, #4
 801815a:	43e4      	mvns	r4, r4
 801815c:	9204      	str	r2, [sp, #16]
 801815e:	b2e4      	uxtb	r4, r4
 8018160:	9a01      	ldr	r2, [sp, #4]
 8018162:	2a00      	cmp	r2, #0
 8018164:	dc03      	bgt.n	801816e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8018166:	9a05      	ldr	r2, [sp, #20]
 8018168:	2a00      	cmp	r2, #0
 801816a:	f340 8119 	ble.w	80183a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801816e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018170:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018176:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801817a:	2b00      	cmp	r3, #0
 801817c:	dd0f      	ble.n	801819e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801817e:	1408      	asrs	r0, r1, #16
 8018180:	d406      	bmi.n	8018190 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8018182:	4540      	cmp	r0, r8
 8018184:	da04      	bge.n	8018190 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8018186:	1410      	asrs	r0, r2, #16
 8018188:	d402      	bmi.n	8018190 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801818a:	9e02      	ldr	r6, [sp, #8]
 801818c:	42b0      	cmp	r0, r6
 801818e:	db07      	blt.n	80181a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8018190:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018192:	4401      	add	r1, r0
 8018194:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018196:	3b01      	subs	r3, #1
 8018198:	4402      	add	r2, r0
 801819a:	3502      	adds	r5, #2
 801819c:	e7ed      	b.n	801817a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801819e:	d00f      	beq.n	80181c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80181a0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80181a2:	1e58      	subs	r0, r3, #1
 80181a4:	fb06 1600 	mla	r6, r6, r0, r1
 80181a8:	1436      	asrs	r6, r6, #16
 80181aa:	d547      	bpl.n	801823c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 80181ac:	469b      	mov	fp, r3
 80181ae:	46aa      	mov	sl, r5
 80181b0:	f1bb 0f00 	cmp.w	fp, #0
 80181b4:	f300 809e 	bgt.w	80182f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 80181b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80181bc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80181c0:	9b01      	ldr	r3, [sp, #4]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	f340 80ec 	ble.w	80183a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 80181c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80181cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80181d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80181d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80181d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80181da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80181de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80181e2:	eef0 6a62 	vmov.f32	s13, s5
 80181e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80181ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80181ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80181f2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80181f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80181fa:	eef0 6a43 	vmov.f32	s13, s6
 80181fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018202:	ee12 2a90 	vmov	r2, s5
 8018206:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801820a:	fb92 f3f3 	sdiv	r3, r2, r3
 801820e:	ee13 2a10 	vmov	r2, s6
 8018212:	9313      	str	r3, [sp, #76]	; 0x4c
 8018214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018216:	fb92 f3f3 	sdiv	r3, r2, r3
 801821a:	9314      	str	r3, [sp, #80]	; 0x50
 801821c:	9b01      	ldr	r3, [sp, #4]
 801821e:	9a05      	ldr	r2, [sp, #20]
 8018220:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018224:	3b01      	subs	r3, #1
 8018226:	9301      	str	r3, [sp, #4]
 8018228:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801822c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801822e:	eeb0 3a67 	vmov.f32	s6, s15
 8018232:	bf08      	it	eq
 8018234:	4613      	moveq	r3, r2
 8018236:	eef0 2a47 	vmov.f32	s5, s14
 801823a:	e791      	b.n	8018160 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801823c:	4546      	cmp	r6, r8
 801823e:	dab5      	bge.n	80181ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8018240:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018242:	fb06 2000 	mla	r0, r6, r0, r2
 8018246:	1400      	asrs	r0, r0, #16
 8018248:	d4b0      	bmi.n	80181ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801824a:	9e02      	ldr	r6, [sp, #8]
 801824c:	42b0      	cmp	r0, r6
 801824e:	daad      	bge.n	80181ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8018250:	469a      	mov	sl, r3
 8018252:	46ab      	mov	fp, r5
 8018254:	f1ba 0f00 	cmp.w	sl, #0
 8018258:	ddae      	ble.n	80181b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801825a:	9f03      	ldr	r7, [sp, #12]
 801825c:	1410      	asrs	r0, r2, #16
 801825e:	140e      	asrs	r6, r1, #16
 8018260:	fb08 7000 	mla	r0, r8, r0, r7
 8018264:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018268:	5d80      	ldrb	r0, [r0, r6]
 801826a:	9e04      	ldr	r6, [sp, #16]
 801826c:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8018270:	f8bb 6000 	ldrh.w	r6, [fp]
 8018274:	1237      	asrs	r7, r6, #8
 8018276:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801827a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801827e:	fb17 f704 	smulbb	r7, r7, r4
 8018282:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8018286:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801828a:	00f6      	lsls	r6, r6, #3
 801828c:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8018290:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8018294:	10c7      	asrs	r7, r0, #3
 8018296:	b2f6      	uxtb	r6, r6
 8018298:	00c0      	lsls	r0, r0, #3
 801829a:	fb19 f904 	smulbb	r9, r9, r4
 801829e:	fb16 f604 	smulbb	r6, r6, r4
 80182a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80182a6:	b2c0      	uxtb	r0, r0
 80182a8:	fa1f fc8c 	uxth.w	ip, ip
 80182ac:	fb07 970e 	mla	r7, r7, lr, r9
 80182b0:	fb00 600e 	mla	r0, r0, lr, r6
 80182b4:	b280      	uxth	r0, r0
 80182b6:	b2bf      	uxth	r7, r7
 80182b8:	f10c 0601 	add.w	r6, ip, #1
 80182bc:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80182c0:	f107 0901 	add.w	r9, r7, #1
 80182c4:	1c46      	adds	r6, r0, #1
 80182c6:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80182ca:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80182ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80182d0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80182d4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80182d8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80182dc:	ea4c 0c06 	orr.w	ip, ip, r6
 80182e0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80182e4:	4401      	add	r1, r0
 80182e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80182e8:	ea4c 0c09 	orr.w	ip, ip, r9
 80182ec:	f82b cb02 	strh.w	ip, [fp], #2
 80182f0:	4402      	add	r2, r0
 80182f2:	e7af      	b.n	8018254 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 80182f4:	140e      	asrs	r6, r1, #16
 80182f6:	d44a      	bmi.n	801838e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 80182f8:	4546      	cmp	r6, r8
 80182fa:	da48      	bge.n	801838e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 80182fc:	1410      	asrs	r0, r2, #16
 80182fe:	d446      	bmi.n	801838e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8018300:	9f02      	ldr	r7, [sp, #8]
 8018302:	42b8      	cmp	r0, r7
 8018304:	da43      	bge.n	801838e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8018306:	9f03      	ldr	r7, [sp, #12]
 8018308:	fb08 7000 	mla	r0, r8, r0, r7
 801830c:	5d80      	ldrb	r0, [r0, r6]
 801830e:	9e04      	ldr	r6, [sp, #16]
 8018310:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8018314:	f8ba 6000 	ldrh.w	r6, [sl]
 8018318:	1237      	asrs	r7, r6, #8
 801831a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801831e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018322:	fb17 f704 	smulbb	r7, r7, r4
 8018326:	ea4f 09e6 	mov.w	r9, r6, asr #3
 801832a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801832e:	00f6      	lsls	r6, r6, #3
 8018330:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8018334:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8018338:	10c7      	asrs	r7, r0, #3
 801833a:	b2f6      	uxtb	r6, r6
 801833c:	00c0      	lsls	r0, r0, #3
 801833e:	fb19 f904 	smulbb	r9, r9, r4
 8018342:	fb16 f604 	smulbb	r6, r6, r4
 8018346:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801834a:	b2c0      	uxtb	r0, r0
 801834c:	fa1f fc8c 	uxth.w	ip, ip
 8018350:	fb07 970e 	mla	r7, r7, lr, r9
 8018354:	fb00 600e 	mla	r0, r0, lr, r6
 8018358:	b2bf      	uxth	r7, r7
 801835a:	b280      	uxth	r0, r0
 801835c:	f10c 0601 	add.w	r6, ip, #1
 8018360:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8018364:	f107 0901 	add.w	r9, r7, #1
 8018368:	1c46      	adds	r6, r0, #1
 801836a:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801836e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8018372:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018376:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801837a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801837e:	ea4c 0c06 	orr.w	ip, ip, r6
 8018382:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8018386:	ea4c 0c09 	orr.w	ip, ip, r9
 801838a:	f8aa c000 	strh.w	ip, [sl]
 801838e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018390:	4401      	add	r1, r0
 8018392:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018394:	f10a 0a02 	add.w	sl, sl, #2
 8018398:	4402      	add	r2, r0
 801839a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801839e:	e707      	b.n	80181b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80183a0:	b007      	add	sp, #28
 80183a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080183a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80183a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183aa:	b085      	sub	sp, #20
 80183ac:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 80183b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80183b2:	9203      	str	r2, [sp, #12]
 80183b4:	6842      	ldr	r2, [r0, #4]
 80183b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80183b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80183ba:	6800      	ldr	r0, [r0, #0]
 80183bc:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 80183c0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 80183c4:	4696      	mov	lr, r2
 80183c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80183c8:	fb0e 2505 	mla	r5, lr, r5, r2
 80183cc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80183d0:	6860      	ldr	r0, [r4, #4]
 80183d2:	6822      	ldr	r2, [r4, #0]
 80183d4:	9201      	str	r2, [sp, #4]
 80183d6:	1d02      	adds	r2, r0, #4
 80183d8:	9202      	str	r2, [sp, #8]
 80183da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80183de:	2900      	cmp	r1, #0
 80183e0:	dc03      	bgt.n	80183ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80183e2:	9a03      	ldr	r2, [sp, #12]
 80183e4:	2a00      	cmp	r2, #0
 80183e6:	f340 809b 	ble.w	8018520 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 80183ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183ec:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80183f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80183f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	dd0e      	ble.n	8018418 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80183fa:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80183fe:	d406      	bmi.n	801840e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8018400:	45e6      	cmp	lr, ip
 8018402:	da04      	bge.n	801840e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8018404:	ea5f 4e20 	movs.w	lr, r0, asr #16
 8018408:	d401      	bmi.n	801840e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801840a:	45c6      	cmp	lr, r8
 801840c:	db05      	blt.n	801841a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801840e:	443c      	add	r4, r7
 8018410:	4430      	add	r0, r6
 8018412:	3b01      	subs	r3, #1
 8018414:	3502      	adds	r5, #2
 8018416:	e7ee      	b.n	80183f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8018418:	d010      	beq.n	801843c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801841a:	f103 3eff 	add.w	lr, r3, #4294967295
 801841e:	fb07 490e 	mla	r9, r7, lr, r4
 8018422:	ea5f 4929 	movs.w	r9, r9, asr #16
 8018426:	d53d      	bpl.n	80184a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8018428:	469e      	mov	lr, r3
 801842a:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 801842e:	f1be 0f00 	cmp.w	lr, #0
 8018432:	dc58      	bgt.n	80184e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8018434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018438:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801843c:	2900      	cmp	r1, #0
 801843e:	dd6f      	ble.n	8018520 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8018440:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018444:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018448:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801844c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801844e:	3901      	subs	r1, #1
 8018450:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018454:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018458:	eeb0 6a62 	vmov.f32	s12, s5
 801845c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018460:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018464:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018468:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801846c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018470:	eeb0 6a43 	vmov.f32	s12, s6
 8018474:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018478:	ee12 2a90 	vmov	r2, s5
 801847c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018480:	fb92 f7f3 	sdiv	r7, r2, r3
 8018484:	ee13 2a10 	vmov	r2, s6
 8018488:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801848c:	fb92 f6f3 	sdiv	r6, r2, r3
 8018490:	9a03      	ldr	r2, [sp, #12]
 8018492:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018496:	bf08      	it	eq
 8018498:	4613      	moveq	r3, r2
 801849a:	eeb0 3a67 	vmov.f32	s6, s15
 801849e:	eef0 2a47 	vmov.f32	s5, s14
 80184a2:	e79c      	b.n	80183de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80184a4:	45e1      	cmp	r9, ip
 80184a6:	dabf      	bge.n	8018428 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80184a8:	fb06 0e0e 	mla	lr, r6, lr, r0
 80184ac:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80184b0:	d4ba      	bmi.n	8018428 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80184b2:	45c6      	cmp	lr, r8
 80184b4:	dab8      	bge.n	8018428 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80184b6:	469e      	mov	lr, r3
 80184b8:	46aa      	mov	sl, r5
 80184ba:	f1be 0f00 	cmp.w	lr, #0
 80184be:	ddb9      	ble.n	8018434 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80184c0:	9a01      	ldr	r2, [sp, #4]
 80184c2:	ea4f 4920 	mov.w	r9, r0, asr #16
 80184c6:	ea4f 4b24 	mov.w	fp, r4, asr #16
 80184ca:	fb0c 2909 	mla	r9, ip, r9, r2
 80184ce:	9a02      	ldr	r2, [sp, #8]
 80184d0:	f819 900b 	ldrb.w	r9, [r9, fp]
 80184d4:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 80184d8:	f82a 9b02 	strh.w	r9, [sl], #2
 80184dc:	443c      	add	r4, r7
 80184de:	4430      	add	r0, r6
 80184e0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80184e4:	e7e9      	b.n	80184ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80184e6:	ea5f 4a24 	movs.w	sl, r4, asr #16
 80184ea:	d414      	bmi.n	8018516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80184ec:	45e2      	cmp	sl, ip
 80184ee:	da12      	bge.n	8018516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80184f0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80184f4:	d40f      	bmi.n	8018516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80184f6:	45c1      	cmp	r9, r8
 80184f8:	da0d      	bge.n	8018516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80184fa:	9a01      	ldr	r2, [sp, #4]
 80184fc:	fb0c 2909 	mla	r9, ip, r9, r2
 8018500:	9a02      	ldr	r2, [sp, #8]
 8018502:	f819 900a 	ldrb.w	r9, [r9, sl]
 8018506:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 801850a:	f06f 0201 	mvn.w	r2, #1
 801850e:	fb02 f90e 	mul.w	r9, r2, lr
 8018512:	f82b a009 	strh.w	sl, [fp, r9]
 8018516:	443c      	add	r4, r7
 8018518:	4430      	add	r0, r6
 801851a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801851e:	e786      	b.n	801842e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8018520:	b005      	add	sp, #20
 8018522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018526 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801852a:	b087      	sub	sp, #28
 801852c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801852e:	9205      	str	r2, [sp, #20]
 8018530:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8018534:	9202      	str	r2, [sp, #8]
 8018536:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801853a:	9101      	str	r1, [sp, #4]
 801853c:	6871      	ldr	r1, [r6, #4]
 801853e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8018540:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8018544:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8018548:	fb01 2404 	mla	r4, r1, r4, r2
 801854c:	6832      	ldr	r2, [r6, #0]
 801854e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018552:	682a      	ldr	r2, [r5, #0]
 8018554:	9203      	str	r2, [sp, #12]
 8018556:	686a      	ldr	r2, [r5, #4]
 8018558:	fa1f fc80 	uxth.w	ip, r0
 801855c:	3204      	adds	r2, #4
 801855e:	43c0      	mvns	r0, r0
 8018560:	9200      	str	r2, [sp, #0]
 8018562:	b2c0      	uxtb	r0, r0
 8018564:	9a01      	ldr	r2, [sp, #4]
 8018566:	2a00      	cmp	r2, #0
 8018568:	dc03      	bgt.n	8018572 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801856a:	9a05      	ldr	r2, [sp, #20]
 801856c:	2a00      	cmp	r2, #0
 801856e:	f340 811b 	ble.w	80187a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8018572:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018574:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801857a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801857e:	2b00      	cmp	r3, #0
 8018580:	dd0f      	ble.n	80185a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8018582:	140d      	asrs	r5, r1, #16
 8018584:	d406      	bmi.n	8018594 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8018586:	4575      	cmp	r5, lr
 8018588:	da04      	bge.n	8018594 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801858a:	1415      	asrs	r5, r2, #16
 801858c:	d402      	bmi.n	8018594 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801858e:	9e02      	ldr	r6, [sp, #8]
 8018590:	42b5      	cmp	r5, r6
 8018592:	db07      	blt.n	80185a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8018594:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018596:	4429      	add	r1, r5
 8018598:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801859a:	3b01      	subs	r3, #1
 801859c:	442a      	add	r2, r5
 801859e:	3402      	adds	r4, #2
 80185a0:	e7ed      	b.n	801857e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 80185a2:	d00f      	beq.n	80185c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80185a4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80185a6:	1e5d      	subs	r5, r3, #1
 80185a8:	fb06 1605 	mla	r6, r6, r5, r1
 80185ac:	1436      	asrs	r6, r6, #16
 80185ae:	d547      	bpl.n	8018640 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 80185b0:	469a      	mov	sl, r3
 80185b2:	46a1      	mov	r9, r4
 80185b4:	f1ba 0f00 	cmp.w	sl, #0
 80185b8:	f300 809f 	bgt.w	80186fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 80185bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80185c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80185c4:	9b01      	ldr	r3, [sp, #4]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	f340 80ee 	ble.w	80187a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80185cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80185d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80185d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80185d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80185de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80185e6:	eef0 6a62 	vmov.f32	s13, s5
 80185ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80185ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80185f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80185f6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80185fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80185fe:	eef0 6a43 	vmov.f32	s13, s6
 8018602:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018606:	ee12 2a90 	vmov	r2, s5
 801860a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801860e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018612:	ee13 2a10 	vmov	r2, s6
 8018616:	9313      	str	r3, [sp, #76]	; 0x4c
 8018618:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801861a:	fb92 f3f3 	sdiv	r3, r2, r3
 801861e:	9314      	str	r3, [sp, #80]	; 0x50
 8018620:	9b01      	ldr	r3, [sp, #4]
 8018622:	9a05      	ldr	r2, [sp, #20]
 8018624:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018628:	3b01      	subs	r3, #1
 801862a:	9301      	str	r3, [sp, #4]
 801862c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8018630:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018632:	eeb0 3a67 	vmov.f32	s6, s15
 8018636:	bf08      	it	eq
 8018638:	4613      	moveq	r3, r2
 801863a:	eef0 2a47 	vmov.f32	s5, s14
 801863e:	e791      	b.n	8018564 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8018640:	4576      	cmp	r6, lr
 8018642:	dab5      	bge.n	80185b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8018644:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018646:	fb06 2505 	mla	r5, r6, r5, r2
 801864a:	142d      	asrs	r5, r5, #16
 801864c:	d4b0      	bmi.n	80185b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801864e:	9e02      	ldr	r6, [sp, #8]
 8018650:	42b5      	cmp	r5, r6
 8018652:	daad      	bge.n	80185b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8018654:	4699      	mov	r9, r3
 8018656:	46a2      	mov	sl, r4
 8018658:	f1b9 0f00 	cmp.w	r9, #0
 801865c:	ddae      	ble.n	80185bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801865e:	9f03      	ldr	r7, [sp, #12]
 8018660:	1415      	asrs	r5, r2, #16
 8018662:	140e      	asrs	r6, r1, #16
 8018664:	fb0e 7505 	mla	r5, lr, r5, r7
 8018668:	f109 39ff 	add.w	r9, r9, #4294967295
 801866c:	f815 8006 	ldrb.w	r8, [r5, r6]
 8018670:	9d00      	ldr	r5, [sp, #0]
 8018672:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018676:	eb05 0b08 	add.w	fp, r5, r8
 801867a:	f8ba 5000 	ldrh.w	r5, [sl]
 801867e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018682:	f89b b001 	ldrb.w	fp, [fp, #1]
 8018686:	122f      	asrs	r7, r5, #8
 8018688:	fb16 f60c 	smulbb	r6, r6, ip
 801868c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018690:	fb07 6700 	mla	r7, r7, r0, r6
 8018694:	10ee      	asrs	r6, r5, #3
 8018696:	fb1b fb0c 	smulbb	fp, fp, ip
 801869a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801869e:	fb06 b600 	mla	r6, r6, r0, fp
 80186a2:	b2b6      	uxth	r6, r6
 80186a4:	9604      	str	r6, [sp, #16]
 80186a6:	9e00      	ldr	r6, [sp, #0]
 80186a8:	00ed      	lsls	r5, r5, #3
 80186aa:	f816 8008 	ldrb.w	r8, [r6, r8]
 80186ae:	b2ed      	uxtb	r5, r5
 80186b0:	fb15 f500 	smulbb	r5, r5, r0
 80186b4:	b2bf      	uxth	r7, r7
 80186b6:	fb08 580c 	mla	r8, r8, ip, r5
 80186ba:	fa1f f888 	uxth.w	r8, r8
 80186be:	1c7d      	adds	r5, r7, #1
 80186c0:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80186c4:	f108 0501 	add.w	r5, r8, #1
 80186c8:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 80186cc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80186d0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80186d4:	432f      	orrs	r7, r5
 80186d6:	9d04      	ldr	r5, [sp, #16]
 80186d8:	f105 0b01 	add.w	fp, r5, #1
 80186dc:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80186e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80186e2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80186e6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80186ea:	4429      	add	r1, r5
 80186ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80186ee:	ea47 070b 	orr.w	r7, r7, fp
 80186f2:	f82a 7b02 	strh.w	r7, [sl], #2
 80186f6:	442a      	add	r2, r5
 80186f8:	e7ae      	b.n	8018658 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 80186fa:	140e      	asrs	r6, r1, #16
 80186fc:	d44b      	bmi.n	8018796 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80186fe:	4576      	cmp	r6, lr
 8018700:	da49      	bge.n	8018796 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8018702:	1415      	asrs	r5, r2, #16
 8018704:	d447      	bmi.n	8018796 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8018706:	9f02      	ldr	r7, [sp, #8]
 8018708:	42bd      	cmp	r5, r7
 801870a:	da44      	bge.n	8018796 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801870c:	9f03      	ldr	r7, [sp, #12]
 801870e:	fb0e 7505 	mla	r5, lr, r5, r7
 8018712:	f815 8006 	ldrb.w	r8, [r5, r6]
 8018716:	9d00      	ldr	r5, [sp, #0]
 8018718:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801871c:	eb05 0b08 	add.w	fp, r5, r8
 8018720:	f8b9 5000 	ldrh.w	r5, [r9]
 8018724:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018728:	f89b b001 	ldrb.w	fp, [fp, #1]
 801872c:	122f      	asrs	r7, r5, #8
 801872e:	fb16 f60c 	smulbb	r6, r6, ip
 8018732:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018736:	fb07 6700 	mla	r7, r7, r0, r6
 801873a:	10ee      	asrs	r6, r5, #3
 801873c:	fb1b fb0c 	smulbb	fp, fp, ip
 8018740:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018744:	fb06 b600 	mla	r6, r6, r0, fp
 8018748:	b2b6      	uxth	r6, r6
 801874a:	9604      	str	r6, [sp, #16]
 801874c:	9e00      	ldr	r6, [sp, #0]
 801874e:	00ed      	lsls	r5, r5, #3
 8018750:	f816 8008 	ldrb.w	r8, [r6, r8]
 8018754:	b2ed      	uxtb	r5, r5
 8018756:	fb15 f500 	smulbb	r5, r5, r0
 801875a:	b2bf      	uxth	r7, r7
 801875c:	fb08 580c 	mla	r8, r8, ip, r5
 8018760:	fa1f f888 	uxth.w	r8, r8
 8018764:	1c7d      	adds	r5, r7, #1
 8018766:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801876a:	f108 0501 	add.w	r5, r8, #1
 801876e:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8018772:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018776:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801877a:	432f      	orrs	r7, r5
 801877c:	9d04      	ldr	r5, [sp, #16]
 801877e:	f105 0b01 	add.w	fp, r5, #1
 8018782:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8018786:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801878a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801878e:	ea47 070b 	orr.w	r7, r7, fp
 8018792:	f8a9 7000 	strh.w	r7, [r9]
 8018796:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018798:	4429      	add	r1, r5
 801879a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801879c:	f109 0902 	add.w	r9, r9, #2
 80187a0:	442a      	add	r2, r5
 80187a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80187a6:	e705      	b.n	80185b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80187a8:	b007      	add	sp, #28
 80187aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080187b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80187b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b4:	b085      	sub	sp, #20
 80187b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80187ba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80187bc:	9203      	str	r2, [sp, #12]
 80187be:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80187c2:	6870      	ldr	r0, [r6, #4]
 80187c4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80187c6:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 80187ca:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 80187ce:	9101      	str	r1, [sp, #4]
 80187d0:	fb00 2404 	mla	r4, r0, r4, r2
 80187d4:	6832      	ldr	r2, [r6, #0]
 80187d6:	686e      	ldr	r6, [r5, #4]
 80187d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80187dc:	682a      	ldr	r2, [r5, #0]
 80187de:	9202      	str	r2, [sp, #8]
 80187e0:	3604      	adds	r6, #4
 80187e2:	9a01      	ldr	r2, [sp, #4]
 80187e4:	2a00      	cmp	r2, #0
 80187e6:	dc03      	bgt.n	80187f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 80187e8:	9a03      	ldr	r2, [sp, #12]
 80187ea:	2a00      	cmp	r2, #0
 80187ec:	f340 80c7 	ble.w	801897e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 80187f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80187f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80187f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80187f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	dd0e      	ble.n	801881e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8018800:	1405      	asrs	r5, r0, #16
 8018802:	d405      	bmi.n	8018810 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8018804:	42bd      	cmp	r5, r7
 8018806:	da03      	bge.n	8018810 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8018808:	1415      	asrs	r5, r2, #16
 801880a:	d401      	bmi.n	8018810 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801880c:	4545      	cmp	r5, r8
 801880e:	db07      	blt.n	8018820 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8018810:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018812:	4428      	add	r0, r5
 8018814:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018816:	3b01      	subs	r3, #1
 8018818:	442a      	add	r2, r5
 801881a:	3402      	adds	r4, #2
 801881c:	e7ee      	b.n	80187fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801881e:	d010      	beq.n	8018842 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8018820:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018822:	1e5d      	subs	r5, r3, #1
 8018824:	fb01 0c05 	mla	ip, r1, r5, r0
 8018828:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801882c:	d545      	bpl.n	80188ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801882e:	469e      	mov	lr, r3
 8018830:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 8018834:	f1be 0f00 	cmp.w	lr, #0
 8018838:	dc72      	bgt.n	8018920 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801883a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801883e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018842:	9b01      	ldr	r3, [sp, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	f340 809a 	ble.w	801897e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 801884a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801884e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018852:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018858:	ee31 1a05 	vadd.f32	s2, s2, s10
 801885c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018860:	eeb0 6a62 	vmov.f32	s12, s5
 8018864:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018868:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801886c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018870:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018874:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018878:	eeb0 6a43 	vmov.f32	s12, s6
 801887c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018880:	ee12 2a90 	vmov	r2, s5
 8018884:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018888:	fb92 f3f3 	sdiv	r3, r2, r3
 801888c:	ee13 2a10 	vmov	r2, s6
 8018890:	9311      	str	r3, [sp, #68]	; 0x44
 8018892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018894:	fb92 f3f3 	sdiv	r3, r2, r3
 8018898:	9312      	str	r3, [sp, #72]	; 0x48
 801889a:	9b01      	ldr	r3, [sp, #4]
 801889c:	9a03      	ldr	r2, [sp, #12]
 801889e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80188a2:	3b01      	subs	r3, #1
 80188a4:	9301      	str	r3, [sp, #4]
 80188a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80188aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188ac:	eeb0 3a67 	vmov.f32	s6, s15
 80188b0:	bf08      	it	eq
 80188b2:	4613      	moveq	r3, r2
 80188b4:	eef0 2a47 	vmov.f32	s5, s14
 80188b8:	e793      	b.n	80187e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 80188ba:	45bc      	cmp	ip, r7
 80188bc:	dab7      	bge.n	801882e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80188be:	9912      	ldr	r1, [sp, #72]	; 0x48
 80188c0:	fb01 2505 	mla	r5, r1, r5, r2
 80188c4:	142d      	asrs	r5, r5, #16
 80188c6:	d4b2      	bmi.n	801882e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80188c8:	4545      	cmp	r5, r8
 80188ca:	dab0      	bge.n	801882e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80188cc:	469e      	mov	lr, r3
 80188ce:	46a2      	mov	sl, r4
 80188d0:	f1be 0f00 	cmp.w	lr, #0
 80188d4:	ddb1      	ble.n	801883a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80188d6:	9902      	ldr	r1, [sp, #8]
 80188d8:	1415      	asrs	r5, r2, #16
 80188da:	fb07 1505 	mla	r5, r7, r5, r1
 80188de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80188e2:	4928      	ldr	r1, [pc, #160]	; (8018984 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 80188e4:	f815 c00c 	ldrb.w	ip, [r5, ip]
 80188e8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80188ec:	eb06 0b0c 	add.w	fp, r6, ip
 80188f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80188f4:	f89b 5001 	ldrb.w	r5, [fp, #1]
 80188f8:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80188fc:	00ed      	lsls	r5, r5, #3
 80188fe:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8018902:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018906:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018908:	ea49 0505 	orr.w	r5, r9, r5
 801890c:	f816 900c 	ldrb.w	r9, [r6, ip]
 8018910:	4408      	add	r0, r1
 8018912:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018914:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 8018918:	f82a 5b02 	strh.w	r5, [sl], #2
 801891c:	440a      	add	r2, r1
 801891e:	e7d7      	b.n	80188d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 8018920:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8018924:	d424      	bmi.n	8018970 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8018926:	45bc      	cmp	ip, r7
 8018928:	da22      	bge.n	8018970 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801892a:	1415      	asrs	r5, r2, #16
 801892c:	d420      	bmi.n	8018970 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801892e:	4545      	cmp	r5, r8
 8018930:	da1e      	bge.n	8018970 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8018932:	9902      	ldr	r1, [sp, #8]
 8018934:	fb07 1505 	mla	r5, r7, r5, r1
 8018938:	f06f 0101 	mvn.w	r1, #1
 801893c:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8018940:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018944:	eb06 050c 	add.w	r5, r6, ip
 8018948:	fb01 f90e 	mul.w	r9, r1, lr
 801894c:	f895 a002 	ldrb.w	sl, [r5, #2]
 8018950:	786d      	ldrb	r5, [r5, #1]
 8018952:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8018956:	00ed      	lsls	r5, r5, #3
 8018958:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 801895c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018960:	ea4a 0505 	orr.w	r5, sl, r5
 8018964:	f816 a00c 	ldrb.w	sl, [r6, ip]
 8018968:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 801896c:	f82b 5009 	strh.w	r5, [fp, r9]
 8018970:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018972:	4408      	add	r0, r1
 8018974:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018976:	f10e 3eff 	add.w	lr, lr, #4294967295
 801897a:	440a      	add	r2, r1
 801897c:	e75a      	b.n	8018834 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 801897e:	b005      	add	sp, #20
 8018980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018984:	fffff800 	.word	0xfffff800

08018988 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801898c:	b087      	sub	sp, #28
 801898e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018992:	9204      	str	r2, [sp, #16]
 8018994:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8018998:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801899a:	9201      	str	r2, [sp, #4]
 801899c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80189a0:	9205      	str	r2, [sp, #20]
 80189a2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80189a6:	9100      	str	r1, [sp, #0]
 80189a8:	6869      	ldr	r1, [r5, #4]
 80189aa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80189ac:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 80189b0:	fb01 2404 	mla	r4, r1, r4, r2
 80189b4:	682a      	ldr	r2, [r5, #0]
 80189b6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80189ba:	6802      	ldr	r2, [r0, #0]
 80189bc:	9202      	str	r2, [sp, #8]
 80189be:	6842      	ldr	r2, [r0, #4]
 80189c0:	3204      	adds	r2, #4
 80189c2:	9203      	str	r2, [sp, #12]
 80189c4:	9a00      	ldr	r2, [sp, #0]
 80189c6:	2a00      	cmp	r2, #0
 80189c8:	dc03      	bgt.n	80189d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 80189ca:	9a04      	ldr	r2, [sp, #16]
 80189cc:	2a00      	cmp	r2, #0
 80189ce:	f340 812c 	ble.w	8018c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80189d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80189d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80189d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80189da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80189de:	2b00      	cmp	r3, #0
 80189e0:	dd0f      	ble.n	8018a02 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80189e2:	1402      	asrs	r2, r0, #16
 80189e4:	d406      	bmi.n	80189f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80189e6:	4572      	cmp	r2, lr
 80189e8:	da04      	bge.n	80189f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80189ea:	140a      	asrs	r2, r1, #16
 80189ec:	d402      	bmi.n	80189f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80189ee:	9d01      	ldr	r5, [sp, #4]
 80189f0:	42aa      	cmp	r2, r5
 80189f2:	db07      	blt.n	8018a04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80189f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80189f6:	4410      	add	r0, r2
 80189f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189fa:	3b01      	subs	r3, #1
 80189fc:	4411      	add	r1, r2
 80189fe:	3402      	adds	r4, #2
 8018a00:	e7ed      	b.n	80189de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8018a02:	d00f      	beq.n	8018a24 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8018a04:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018a06:	1e5a      	subs	r2, r3, #1
 8018a08:	fb05 0502 	mla	r5, r5, r2, r0
 8018a0c:	142d      	asrs	r5, r5, #16
 8018a0e:	d545      	bpl.n	8018a9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8018a10:	4699      	mov	r9, r3
 8018a12:	46a0      	mov	r8, r4
 8018a14:	f1b9 0f00 	cmp.w	r9, #0
 8018a18:	f300 80a7 	bgt.w	8018b6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8018a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a20:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018a24:	9b00      	ldr	r3, [sp, #0]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	f340 80ff 	ble.w	8018c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8018a2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018a30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018a34:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018a3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018a42:	eeb0 6a62 	vmov.f32	s12, s5
 8018a46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018a52:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018a56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018a5a:	eeb0 6a43 	vmov.f32	s12, s6
 8018a5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018a62:	ee12 2a90 	vmov	r2, s5
 8018a66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018a6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a6e:	ee13 2a10 	vmov	r2, s6
 8018a72:	9313      	str	r3, [sp, #76]	; 0x4c
 8018a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a76:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a7a:	9314      	str	r3, [sp, #80]	; 0x50
 8018a7c:	9b00      	ldr	r3, [sp, #0]
 8018a7e:	9a04      	ldr	r2, [sp, #16]
 8018a80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a84:	3b01      	subs	r3, #1
 8018a86:	9300      	str	r3, [sp, #0]
 8018a88:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a8e:	eeb0 3a67 	vmov.f32	s6, s15
 8018a92:	bf08      	it	eq
 8018a94:	4613      	moveq	r3, r2
 8018a96:	eef0 2a47 	vmov.f32	s5, s14
 8018a9a:	e793      	b.n	80189c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8018a9c:	4575      	cmp	r5, lr
 8018a9e:	dab7      	bge.n	8018a10 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8018aa0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018aa2:	fb05 1202 	mla	r2, r5, r2, r1
 8018aa6:	1412      	asrs	r2, r2, #16
 8018aa8:	d4b2      	bmi.n	8018a10 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8018aaa:	9d01      	ldr	r5, [sp, #4]
 8018aac:	42aa      	cmp	r2, r5
 8018aae:	daaf      	bge.n	8018a10 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8018ab0:	f04f 0800 	mov.w	r8, #0
 8018ab4:	eba3 0208 	sub.w	r2, r3, r8
 8018ab8:	2a00      	cmp	r2, #0
 8018aba:	ddaf      	ble.n	8018a1c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8018abc:	9e02      	ldr	r6, [sp, #8]
 8018abe:	140a      	asrs	r2, r1, #16
 8018ac0:	1405      	asrs	r5, r0, #16
 8018ac2:	fb0e 6202 	mla	r2, lr, r2, r6
 8018ac6:	5d52      	ldrb	r2, [r2, r5]
 8018ac8:	9d03      	ldr	r5, [sp, #12]
 8018aca:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018ace:	0e2e      	lsrs	r6, r5, #24
 8018ad0:	d044      	beq.n	8018b5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8018ad2:	9a05      	ldr	r2, [sp, #20]
 8018ad4:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8018ad8:	4356      	muls	r6, r2
 8018ada:	1c72      	adds	r2, r6, #1
 8018adc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018ae0:	1212      	asrs	r2, r2, #8
 8018ae2:	fa1f f982 	uxth.w	r9, r2
 8018ae6:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018aea:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018aee:	43d2      	mvns	r2, r2
 8018af0:	b2d2      	uxtb	r2, r2
 8018af2:	fb16 f609 	smulbb	r6, r6, r9
 8018af6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018afa:	fb07 6702 	mla	r7, r7, r2, r6
 8018afe:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018b02:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018b06:	b2ed      	uxtb	r5, r5
 8018b08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018b0c:	fa5f fc8c 	uxtb.w	ip, ip
 8018b10:	fb15 f509 	smulbb	r5, r5, r9
 8018b14:	fb0c 5502 	mla	r5, ip, r2, r5
 8018b18:	b2bf      	uxth	r7, r7
 8018b1a:	fb1a fa09 	smulbb	sl, sl, r9
 8018b1e:	b2ad      	uxth	r5, r5
 8018b20:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018b24:	fb06 a602 	mla	r6, r6, r2, sl
 8018b28:	1c7a      	adds	r2, r7, #1
 8018b2a:	f105 0a01 	add.w	sl, r5, #1
 8018b2e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018b32:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018b36:	b2b6      	uxth	r6, r6
 8018b38:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018b3c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018b40:	ea47 070a 	orr.w	r7, r7, sl
 8018b44:	f106 0a01 	add.w	sl, r6, #1
 8018b48:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018b4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018b50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018b54:	ea47 070a 	orr.w	r7, r7, sl
 8018b58:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8018b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018b5e:	4410      	add	r0, r2
 8018b60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018b62:	f108 0801 	add.w	r8, r8, #1
 8018b66:	4411      	add	r1, r2
 8018b68:	e7a4      	b.n	8018ab4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 8018b6a:	1405      	asrs	r5, r0, #16
 8018b6c:	d454      	bmi.n	8018c18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8018b6e:	4575      	cmp	r5, lr
 8018b70:	da52      	bge.n	8018c18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8018b72:	140a      	asrs	r2, r1, #16
 8018b74:	d450      	bmi.n	8018c18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8018b76:	9e01      	ldr	r6, [sp, #4]
 8018b78:	42b2      	cmp	r2, r6
 8018b7a:	da4d      	bge.n	8018c18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8018b7c:	9e02      	ldr	r6, [sp, #8]
 8018b7e:	fb0e 6202 	mla	r2, lr, r2, r6
 8018b82:	5d52      	ldrb	r2, [r2, r5]
 8018b84:	9d03      	ldr	r5, [sp, #12]
 8018b86:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018b8a:	0e2e      	lsrs	r6, r5, #24
 8018b8c:	d044      	beq.n	8018c18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8018b8e:	9a05      	ldr	r2, [sp, #20]
 8018b90:	f8b8 c000 	ldrh.w	ip, [r8]
 8018b94:	4356      	muls	r6, r2
 8018b96:	1c72      	adds	r2, r6, #1
 8018b98:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018b9c:	1212      	asrs	r2, r2, #8
 8018b9e:	fa1f fa82 	uxth.w	sl, r2
 8018ba2:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018ba6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018baa:	43d2      	mvns	r2, r2
 8018bac:	b2d2      	uxtb	r2, r2
 8018bae:	fb16 f60a 	smulbb	r6, r6, sl
 8018bb2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018bb6:	fb07 6702 	mla	r7, r7, r2, r6
 8018bba:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 8018bbe:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018bc2:	b2ed      	uxtb	r5, r5
 8018bc4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018bc8:	fa5f fc8c 	uxtb.w	ip, ip
 8018bcc:	fb15 f50a 	smulbb	r5, r5, sl
 8018bd0:	fb0c 5502 	mla	r5, ip, r2, r5
 8018bd4:	b2bf      	uxth	r7, r7
 8018bd6:	fb1b fb0a 	smulbb	fp, fp, sl
 8018bda:	b2ad      	uxth	r5, r5
 8018bdc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018be0:	fb06 b602 	mla	r6, r6, r2, fp
 8018be4:	1c7a      	adds	r2, r7, #1
 8018be6:	f105 0b01 	add.w	fp, r5, #1
 8018bea:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018bee:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8018bf2:	b2b6      	uxth	r6, r6
 8018bf4:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8018bf8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018bfc:	ea47 070b 	orr.w	r7, r7, fp
 8018c00:	f106 0b01 	add.w	fp, r6, #1
 8018c04:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8018c08:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8018c0c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018c10:	ea47 070b 	orr.w	r7, r7, fp
 8018c14:	f8a8 7000 	strh.w	r7, [r8]
 8018c18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018c1a:	4410      	add	r0, r2
 8018c1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018c1e:	f108 0802 	add.w	r8, r8, #2
 8018c22:	4411      	add	r1, r2
 8018c24:	f109 39ff 	add.w	r9, r9, #4294967295
 8018c28:	e6f4      	b.n	8018a14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8018c2a:	b007      	add	sp, #28
 8018c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c34:	b087      	sub	sp, #28
 8018c36:	468b      	mov	fp, r1
 8018c38:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018c3a:	9205      	str	r2, [sp, #20]
 8018c3c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8018c40:	9201      	str	r2, [sp, #4]
 8018c42:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018c46:	6869      	ldr	r1, [r5, #4]
 8018c48:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018c4a:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8018c4e:	fb01 2404 	mla	r4, r1, r4, r2
 8018c52:	682a      	ldr	r2, [r5, #0]
 8018c54:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018c58:	6802      	ldr	r2, [r0, #0]
 8018c5a:	9203      	str	r2, [sp, #12]
 8018c5c:	6842      	ldr	r2, [r0, #4]
 8018c5e:	3204      	adds	r2, #4
 8018c60:	9204      	str	r2, [sp, #16]
 8018c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018c66:	f1bb 0f00 	cmp.w	fp, #0
 8018c6a:	dc03      	bgt.n	8018c74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8018c6c:	9a05      	ldr	r2, [sp, #20]
 8018c6e:	2a00      	cmp	r2, #0
 8018c70:	f340 814a 	ble.w	8018f08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8018c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018c76:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018c7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018c7c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	dd0f      	ble.n	8018ca4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8018c84:	1408      	asrs	r0, r1, #16
 8018c86:	d406      	bmi.n	8018c96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8018c88:	4540      	cmp	r0, r8
 8018c8a:	da04      	bge.n	8018c96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8018c8c:	1410      	asrs	r0, r2, #16
 8018c8e:	d402      	bmi.n	8018c96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8018c90:	9d01      	ldr	r5, [sp, #4]
 8018c92:	42a8      	cmp	r0, r5
 8018c94:	db07      	blt.n	8018ca6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8018c96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018c98:	4401      	add	r1, r0
 8018c9a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018c9c:	3b01      	subs	r3, #1
 8018c9e:	4402      	add	r2, r0
 8018ca0:	3402      	adds	r4, #2
 8018ca2:	e7ed      	b.n	8018c80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8018ca4:	d018      	beq.n	8018cd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 8018ca6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018ca8:	1e58      	subs	r0, r3, #1
 8018caa:	fb05 1500 	mla	r5, r5, r0, r1
 8018cae:	142d      	asrs	r5, r5, #16
 8018cb0:	d40a      	bmi.n	8018cc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8018cb2:	4545      	cmp	r5, r8
 8018cb4:	da08      	bge.n	8018cc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8018cb6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018cb8:	fb05 2000 	mla	r0, r5, r0, r2
 8018cbc:	1400      	asrs	r0, r0, #16
 8018cbe:	d403      	bmi.n	8018cc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8018cc0:	9d01      	ldr	r5, [sp, #4]
 8018cc2:	42a8      	cmp	r0, r5
 8018cc4:	f2c0 80b7 	blt.w	8018e36 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8018cc8:	2600      	movs	r6, #0
 8018cca:	1998      	adds	r0, r3, r6
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	dc3e      	bgt.n	8018d4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8018cd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018cd4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018cd8:	f1bb 0f00 	cmp.w	fp, #0
 8018cdc:	f340 8114 	ble.w	8018f08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8018ce0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018ce4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ce8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018cee:	f1bb 0b01 	subs.w	fp, fp, #1
 8018cf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018cf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018cfa:	eeb0 6a62 	vmov.f32	s12, s5
 8018cfe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018d02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018d0a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018d0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d12:	eeb0 6a43 	vmov.f32	s12, s6
 8018d16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018d1a:	ee12 2a90 	vmov	r2, s5
 8018d1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d26:	ee13 2a10 	vmov	r2, s6
 8018d2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d36:	9a05      	ldr	r2, [sp, #20]
 8018d38:	9314      	str	r3, [sp, #80]	; 0x50
 8018d3a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018d3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d40:	eeb0 3a67 	vmov.f32	s6, s15
 8018d44:	bf08      	it	eq
 8018d46:	4613      	moveq	r3, r2
 8018d48:	eef0 2a47 	vmov.f32	s5, s14
 8018d4c:	e78b      	b.n	8018c66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8018d4e:	140d      	asrs	r5, r1, #16
 8018d50:	d459      	bmi.n	8018e06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8018d52:	4545      	cmp	r5, r8
 8018d54:	da57      	bge.n	8018e06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8018d56:	1410      	asrs	r0, r2, #16
 8018d58:	d455      	bmi.n	8018e06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8018d5a:	9f01      	ldr	r7, [sp, #4]
 8018d5c:	42b8      	cmp	r0, r7
 8018d5e:	da52      	bge.n	8018e06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8018d60:	9f03      	ldr	r7, [sp, #12]
 8018d62:	fb08 7000 	mla	r0, r8, r0, r7
 8018d66:	5d40      	ldrb	r0, [r0, r5]
 8018d68:	9d04      	ldr	r5, [sp, #16]
 8018d6a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018d6e:	0e07      	lsrs	r7, r0, #24
 8018d70:	2fff      	cmp	r7, #255	; 0xff
 8018d72:	d04e      	beq.n	8018e12 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8018d74:	b2fd      	uxtb	r5, r7
 8018d76:	2f00      	cmp	r7, #0
 8018d78:	d045      	beq.n	8018e06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8018d7a:	f06f 0701 	mvn.w	r7, #1
 8018d7e:	4377      	muls	r7, r6
 8018d80:	fa1f f985 	uxth.w	r9, r5
 8018d84:	f834 e007 	ldrh.w	lr, [r4, r7]
 8018d88:	9702      	str	r7, [sp, #8]
 8018d8a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018d8e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018d92:	43ed      	mvns	r5, r5
 8018d94:	b2ed      	uxtb	r5, r5
 8018d96:	fb17 f709 	smulbb	r7, r7, r9
 8018d9a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018d9e:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018da2:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018da6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018daa:	b2c0      	uxtb	r0, r0
 8018dac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018db0:	fa5f fe8e 	uxtb.w	lr, lr
 8018db4:	fb10 f009 	smulbb	r0, r0, r9
 8018db8:	fb0e 0005 	mla	r0, lr, r5, r0
 8018dbc:	b280      	uxth	r0, r0
 8018dbe:	fa1f fc8c 	uxth.w	ip, ip
 8018dc2:	fb1a fa09 	smulbb	sl, sl, r9
 8018dc6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018dca:	fb07 a705 	mla	r7, r7, r5, sl
 8018dce:	f100 0a01 	add.w	sl, r0, #1
 8018dd2:	f10c 0501 	add.w	r5, ip, #1
 8018dd6:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018dda:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018dde:	b2bf      	uxth	r7, r7
 8018de0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018de4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018de8:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018dec:	f107 0a01 	add.w	sl, r7, #1
 8018df0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018df4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018df8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018dfc:	9802      	ldr	r0, [sp, #8]
 8018dfe:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018e02:	f824 c000 	strh.w	ip, [r4, r0]
 8018e06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018e08:	4401      	add	r1, r0
 8018e0a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018e0c:	3e01      	subs	r6, #1
 8018e0e:	4402      	add	r2, r0
 8018e10:	e75b      	b.n	8018cca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8018e12:	f06f 0501 	mvn.w	r5, #1
 8018e16:	fb05 f706 	mul.w	r7, r5, r6
 8018e1a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8018e1e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8018e22:	0945      	lsrs	r5, r0, #5
 8018e24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018e28:	ea4c 0505 	orr.w	r5, ip, r5
 8018e2c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018e30:	4305      	orrs	r5, r0
 8018e32:	53e5      	strh	r5, [r4, r7]
 8018e34:	e7e7      	b.n	8018e06 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8018e36:	f04f 0e00 	mov.w	lr, #0
 8018e3a:	eba3 000e 	sub.w	r0, r3, lr
 8018e3e:	2800      	cmp	r0, #0
 8018e40:	f77f af46 	ble.w	8018cd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8018e44:	9e03      	ldr	r6, [sp, #12]
 8018e46:	1410      	asrs	r0, r2, #16
 8018e48:	140d      	asrs	r5, r1, #16
 8018e4a:	fb08 6000 	mla	r0, r8, r0, r6
 8018e4e:	5d40      	ldrb	r0, [r0, r5]
 8018e50:	9d04      	ldr	r5, [sp, #16]
 8018e52:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018e56:	0e06      	lsrs	r6, r0, #24
 8018e58:	2eff      	cmp	r6, #255	; 0xff
 8018e5a:	d048      	beq.n	8018eee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8018e5c:	b2f5      	uxtb	r5, r6
 8018e5e:	2e00      	cmp	r6, #0
 8018e60:	d03e      	beq.n	8018ee0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8018e62:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8018e66:	fa1f f985 	uxth.w	r9, r5
 8018e6a:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018e6e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8018e72:	43ed      	mvns	r5, r5
 8018e74:	b2ed      	uxtb	r5, r5
 8018e76:	fb16 f609 	smulbb	r6, r6, r9
 8018e7a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018e7e:	fb07 6705 	mla	r7, r7, r5, r6
 8018e82:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018e86:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018e8a:	b2c0      	uxtb	r0, r0
 8018e8c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018e90:	fa5f fc8c 	uxtb.w	ip, ip
 8018e94:	fb10 f009 	smulbb	r0, r0, r9
 8018e98:	fb0c 0005 	mla	r0, ip, r5, r0
 8018e9c:	b2bf      	uxth	r7, r7
 8018e9e:	fb1a fa09 	smulbb	sl, sl, r9
 8018ea2:	b280      	uxth	r0, r0
 8018ea4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018ea8:	fb06 a605 	mla	r6, r6, r5, sl
 8018eac:	1c7d      	adds	r5, r7, #1
 8018eae:	f100 0a01 	add.w	sl, r0, #1
 8018eb2:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8018eb6:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018eba:	b2b6      	uxth	r6, r6
 8018ebc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018ec0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018ec4:	ea47 070a 	orr.w	r7, r7, sl
 8018ec8:	f106 0a01 	add.w	sl, r6, #1
 8018ecc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018ed0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018ed4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018ed8:	ea47 070a 	orr.w	r7, r7, sl
 8018edc:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8018ee0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018ee2:	4401      	add	r1, r0
 8018ee4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018ee6:	f10e 0e01 	add.w	lr, lr, #1
 8018eea:	4402      	add	r2, r0
 8018eec:	e7a5      	b.n	8018e3a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 8018eee:	4d08      	ldr	r5, [pc, #32]	; (8018f10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 8018ef0:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 8018ef4:	0945      	lsrs	r5, r0, #5
 8018ef6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018efa:	4335      	orrs	r5, r6
 8018efc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018f00:	4305      	orrs	r5, r0
 8018f02:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 8018f06:	e7eb      	b.n	8018ee0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8018f08:	b007      	add	sp, #28
 8018f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f0e:	bf00      	nop
 8018f10:	fffff800 	.word	0xfffff800

08018f14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f18:	b087      	sub	sp, #28
 8018f1a:	468b      	mov	fp, r1
 8018f1c:	9204      	str	r2, [sp, #16]
 8018f1e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8018f22:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018f24:	9201      	str	r2, [sp, #4]
 8018f26:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8018f2a:	9205      	str	r2, [sp, #20]
 8018f2c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018f30:	6869      	ldr	r1, [r5, #4]
 8018f32:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018f34:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8018f38:	fb01 2404 	mla	r4, r1, r4, r2
 8018f3c:	682a      	ldr	r2, [r5, #0]
 8018f3e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018f42:	6802      	ldr	r2, [r0, #0]
 8018f44:	9202      	str	r2, [sp, #8]
 8018f46:	6842      	ldr	r2, [r0, #4]
 8018f48:	9203      	str	r2, [sp, #12]
 8018f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018f4e:	f1bb 0f00 	cmp.w	fp, #0
 8018f52:	dc03      	bgt.n	8018f5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8018f54:	9a04      	ldr	r2, [sp, #16]
 8018f56:	2a00      	cmp	r2, #0
 8018f58:	f340 8136 	ble.w	80191c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8018f5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f5e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018f62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018f64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	dd0f      	ble.n	8018f8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8018f6c:	1408      	asrs	r0, r1, #16
 8018f6e:	d406      	bmi.n	8018f7e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8018f70:	4540      	cmp	r0, r8
 8018f72:	da04      	bge.n	8018f7e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8018f74:	1410      	asrs	r0, r2, #16
 8018f76:	d402      	bmi.n	8018f7e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8018f78:	9d01      	ldr	r5, [sp, #4]
 8018f7a:	42a8      	cmp	r0, r5
 8018f7c:	db07      	blt.n	8018f8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8018f7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018f80:	4401      	add	r1, r0
 8018f82:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018f84:	3b01      	subs	r3, #1
 8018f86:	4402      	add	r2, r0
 8018f88:	3402      	adds	r4, #2
 8018f8a:	e7ed      	b.n	8018f68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8018f8c:	d00f      	beq.n	8018fae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8018f8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018f90:	1e58      	subs	r0, r3, #1
 8018f92:	fb05 1500 	mla	r5, r5, r0, r1
 8018f96:	142d      	asrs	r5, r5, #16
 8018f98:	d544      	bpl.n	8019024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8018f9a:	9300      	str	r3, [sp, #0]
 8018f9c:	46a2      	mov	sl, r4
 8018f9e:	9800      	ldr	r0, [sp, #0]
 8018fa0:	2800      	cmp	r0, #0
 8018fa2:	f300 80ab 	bgt.w	80190fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8018fa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018faa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018fae:	f1bb 0f00 	cmp.w	fp, #0
 8018fb2:	f340 8109 	ble.w	80191c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8018fb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018fba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018fbe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018fc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018fc4:	f1bb 0b01 	subs.w	fp, fp, #1
 8018fc8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018fcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018fd0:	eeb0 6a62 	vmov.f32	s12, s5
 8018fd4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018fd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018fdc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018fe0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018fe4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018fe8:	eeb0 6a43 	vmov.f32	s12, s6
 8018fec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018ff0:	ee12 2a90 	vmov	r2, s5
 8018ff4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ffc:	ee13 2a10 	vmov	r2, s6
 8019000:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019004:	9313      	str	r3, [sp, #76]	; 0x4c
 8019006:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019008:	fb92 f3f3 	sdiv	r3, r2, r3
 801900c:	9a04      	ldr	r2, [sp, #16]
 801900e:	9314      	str	r3, [sp, #80]	; 0x50
 8019010:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019016:	eeb0 3a67 	vmov.f32	s6, s15
 801901a:	bf08      	it	eq
 801901c:	4613      	moveq	r3, r2
 801901e:	eef0 2a47 	vmov.f32	s5, s14
 8019022:	e794      	b.n	8018f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8019024:	4545      	cmp	r5, r8
 8019026:	dab8      	bge.n	8018f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019028:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801902a:	fb05 2000 	mla	r0, r5, r0, r2
 801902e:	1400      	asrs	r0, r0, #16
 8019030:	d4b3      	bmi.n	8018f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019032:	9d01      	ldr	r5, [sp, #4]
 8019034:	42a8      	cmp	r0, r5
 8019036:	dab0      	bge.n	8018f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019038:	f04f 0900 	mov.w	r9, #0
 801903c:	eba3 0009 	sub.w	r0, r3, r9
 8019040:	2800      	cmp	r0, #0
 8019042:	ddb0      	ble.n	8018fa6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019044:	140d      	asrs	r5, r1, #16
 8019046:	1410      	asrs	r0, r2, #16
 8019048:	fb08 5000 	mla	r0, r8, r0, r5
 801904c:	9d03      	ldr	r5, [sp, #12]
 801904e:	5c2e      	ldrb	r6, [r5, r0]
 8019050:	2e00      	cmp	r6, #0
 8019052:	d04c      	beq.n	80190ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 8019054:	9d02      	ldr	r5, [sp, #8]
 8019056:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 801905a:	9805      	ldr	r0, [sp, #20]
 801905c:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 8019060:	4346      	muls	r6, r0
 8019062:	1c70      	adds	r0, r6, #1
 8019064:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8019068:	1200      	asrs	r0, r0, #8
 801906a:	b287      	uxth	r7, r0
 801906c:	122e      	asrs	r6, r5, #8
 801906e:	43c0      	mvns	r0, r0
 8019070:	b2c0      	uxtb	r0, r0
 8019072:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019076:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801907a:	fb16 f600 	smulbb	r6, r6, r0
 801907e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019082:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019086:	00ed      	lsls	r5, r5, #3
 8019088:	fb0c 6c07 	mla	ip, ip, r7, r6
 801908c:	b2ed      	uxtb	r5, r5
 801908e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019092:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019096:	fb15 f500 	smulbb	r5, r5, r0
 801909a:	fa5f fe8e 	uxtb.w	lr, lr
 801909e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80190a2:	fb0e 5507 	mla	r5, lr, r7, r5
 80190a6:	fb1a fa00 	smulbb	sl, sl, r0
 80190aa:	fa1f fc8c 	uxth.w	ip, ip
 80190ae:	b2ad      	uxth	r5, r5
 80190b0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80190b4:	fb06 a607 	mla	r6, r6, r7, sl
 80190b8:	f10c 0001 	add.w	r0, ip, #1
 80190bc:	f105 0a01 	add.w	sl, r5, #1
 80190c0:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 80190c4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80190c8:	b2b6      	uxth	r6, r6
 80190ca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80190ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80190d2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80190d6:	f106 0a01 	add.w	sl, r6, #1
 80190da:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80190de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80190e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80190e6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80190ea:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 80190ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80190f0:	4401      	add	r1, r0
 80190f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80190f4:	f109 0901 	add.w	r9, r9, #1
 80190f8:	4402      	add	r2, r0
 80190fa:	e79f      	b.n	801903c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 80190fc:	1408      	asrs	r0, r1, #16
 80190fe:	d459      	bmi.n	80191b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8019100:	4540      	cmp	r0, r8
 8019102:	da57      	bge.n	80191b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8019104:	1415      	asrs	r5, r2, #16
 8019106:	d455      	bmi.n	80191b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8019108:	9e01      	ldr	r6, [sp, #4]
 801910a:	42b5      	cmp	r5, r6
 801910c:	da52      	bge.n	80191b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801910e:	fb08 0005 	mla	r0, r8, r5, r0
 8019112:	9d03      	ldr	r5, [sp, #12]
 8019114:	5c2e      	ldrb	r6, [r5, r0]
 8019116:	2e00      	cmp	r6, #0
 8019118:	d04c      	beq.n	80191b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801911a:	9d02      	ldr	r5, [sp, #8]
 801911c:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8019120:	9805      	ldr	r0, [sp, #20]
 8019122:	f8ba 5000 	ldrh.w	r5, [sl]
 8019126:	4346      	muls	r6, r0
 8019128:	1c70      	adds	r0, r6, #1
 801912a:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 801912e:	1200      	asrs	r0, r0, #8
 8019130:	b287      	uxth	r7, r0
 8019132:	122e      	asrs	r6, r5, #8
 8019134:	43c0      	mvns	r0, r0
 8019136:	b2c0      	uxtb	r0, r0
 8019138:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801913c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019140:	fb16 f600 	smulbb	r6, r6, r0
 8019144:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019148:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801914c:	00ed      	lsls	r5, r5, #3
 801914e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019152:	b2ed      	uxtb	r5, r5
 8019154:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019158:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801915c:	fb15 f500 	smulbb	r5, r5, r0
 8019160:	fa5f fe8e 	uxtb.w	lr, lr
 8019164:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019168:	fb0e 5507 	mla	r5, lr, r7, r5
 801916c:	fb19 f900 	smulbb	r9, r9, r0
 8019170:	fa1f fc8c 	uxth.w	ip, ip
 8019174:	b2ad      	uxth	r5, r5
 8019176:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801917a:	fb06 9607 	mla	r6, r6, r7, r9
 801917e:	f10c 0001 	add.w	r0, ip, #1
 8019182:	f105 0901 	add.w	r9, r5, #1
 8019186:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801918a:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801918e:	b2b6      	uxth	r6, r6
 8019190:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8019194:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019198:	ea4c 0c09 	orr.w	ip, ip, r9
 801919c:	f106 0901 	add.w	r9, r6, #1
 80191a0:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 80191a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80191a8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80191ac:	ea4c 0c09 	orr.w	ip, ip, r9
 80191b0:	f8aa c000 	strh.w	ip, [sl]
 80191b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80191b6:	4401      	add	r1, r0
 80191b8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80191ba:	4402      	add	r2, r0
 80191bc:	9800      	ldr	r0, [sp, #0]
 80191be:	3801      	subs	r0, #1
 80191c0:	f10a 0a02 	add.w	sl, sl, #2
 80191c4:	9000      	str	r0, [sp, #0]
 80191c6:	e6ea      	b.n	8018f9e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80191c8:	b007      	add	sp, #28
 80191ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80191ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d2:	b087      	sub	sp, #28
 80191d4:	468b      	mov	fp, r1
 80191d6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80191d8:	9205      	str	r2, [sp, #20]
 80191da:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80191de:	9202      	str	r2, [sp, #8]
 80191e0:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80191e4:	6869      	ldr	r1, [r5, #4]
 80191e6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80191e8:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 80191ec:	fb01 2000 	mla	r0, r1, r0, r2
 80191f0:	682a      	ldr	r2, [r5, #0]
 80191f2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80191f6:	6822      	ldr	r2, [r4, #0]
 80191f8:	9201      	str	r2, [sp, #4]
 80191fa:	6862      	ldr	r2, [r4, #4]
 80191fc:	9204      	str	r2, [sp, #16]
 80191fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019202:	f1bb 0f00 	cmp.w	fp, #0
 8019206:	dc03      	bgt.n	8019210 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8019208:	9a05      	ldr	r2, [sp, #20]
 801920a:	2a00      	cmp	r2, #0
 801920c:	f340 813d 	ble.w	801948a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8019210:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019212:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019216:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019218:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801921c:	2b00      	cmp	r3, #0
 801921e:	dd0f      	ble.n	8019240 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019220:	140c      	asrs	r4, r1, #16
 8019222:	d406      	bmi.n	8019232 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019224:	454c      	cmp	r4, r9
 8019226:	da04      	bge.n	8019232 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019228:	1414      	asrs	r4, r2, #16
 801922a:	d402      	bmi.n	8019232 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801922c:	9d02      	ldr	r5, [sp, #8]
 801922e:	42ac      	cmp	r4, r5
 8019230:	db07      	blt.n	8019242 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019232:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019234:	4421      	add	r1, r4
 8019236:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019238:	3b01      	subs	r3, #1
 801923a:	4422      	add	r2, r4
 801923c:	3002      	adds	r0, #2
 801923e:	e7ed      	b.n	801921c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8019240:	d018      	beq.n	8019274 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 8019242:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019244:	1e5c      	subs	r4, r3, #1
 8019246:	fb05 1504 	mla	r5, r5, r4, r1
 801924a:	142d      	asrs	r5, r5, #16
 801924c:	d40a      	bmi.n	8019264 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801924e:	454d      	cmp	r5, r9
 8019250:	da08      	bge.n	8019264 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8019252:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019254:	fb05 2404 	mla	r4, r5, r4, r2
 8019258:	1424      	asrs	r4, r4, #16
 801925a:	d403      	bmi.n	8019264 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801925c:	9d02      	ldr	r5, [sp, #8]
 801925e:	42ac      	cmp	r4, r5
 8019260:	f2c0 80ae 	blt.w	80193c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 8019264:	2600      	movs	r6, #0
 8019266:	199c      	adds	r4, r3, r6
 8019268:	2c00      	cmp	r4, #0
 801926a:	dc3e      	bgt.n	80192ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 801926c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019270:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019274:	f1bb 0f00 	cmp.w	fp, #0
 8019278:	f340 8107 	ble.w	801948a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801927c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019280:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019284:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019288:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801928a:	f1bb 0b01 	subs.w	fp, fp, #1
 801928e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019292:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019296:	eeb0 6a62 	vmov.f32	s12, s5
 801929a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801929e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80192a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80192a6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80192aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80192ae:	eeb0 6a43 	vmov.f32	s12, s6
 80192b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80192b6:	ee12 2a90 	vmov	r2, s5
 80192ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80192be:	fb92 f3f3 	sdiv	r3, r2, r3
 80192c2:	ee13 2a10 	vmov	r2, s6
 80192c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80192ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80192cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80192d2:	9a05      	ldr	r2, [sp, #20]
 80192d4:	9314      	str	r3, [sp, #80]	; 0x50
 80192d6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80192da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192dc:	eeb0 3a67 	vmov.f32	s6, s15
 80192e0:	bf08      	it	eq
 80192e2:	4613      	moveq	r3, r2
 80192e4:	eef0 2a47 	vmov.f32	s5, s14
 80192e8:	e78b      	b.n	8019202 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 80192ea:	140c      	asrs	r4, r1, #16
 80192ec:	d45a      	bmi.n	80193a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80192ee:	454c      	cmp	r4, r9
 80192f0:	da58      	bge.n	80193a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80192f2:	1415      	asrs	r5, r2, #16
 80192f4:	d456      	bmi.n	80193a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80192f6:	9f02      	ldr	r7, [sp, #8]
 80192f8:	42bd      	cmp	r5, r7
 80192fa:	da53      	bge.n	80193a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80192fc:	fb09 4505 	mla	r5, r9, r5, r4
 8019300:	9c04      	ldr	r4, [sp, #16]
 8019302:	5d64      	ldrb	r4, [r4, r5]
 8019304:	2cff      	cmp	r4, #255	; 0xff
 8019306:	d053      	beq.n	80193b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8019308:	2c00      	cmp	r4, #0
 801930a:	d04b      	beq.n	80193a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801930c:	9f01      	ldr	r7, [sp, #4]
 801930e:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 8019312:	f06f 0501 	mvn.w	r5, #1
 8019316:	4375      	muls	r5, r6
 8019318:	9503      	str	r5, [sp, #12]
 801931a:	5b45      	ldrh	r5, [r0, r5]
 801931c:	fa1f fc84 	uxth.w	ip, r4
 8019320:	122f      	asrs	r7, r5, #8
 8019322:	43e4      	mvns	r4, r4
 8019324:	b2e4      	uxtb	r4, r4
 8019326:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801932a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801932e:	fb17 f704 	smulbb	r7, r7, r4
 8019332:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019336:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801933a:	00ed      	lsls	r5, r5, #3
 801933c:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8019340:	b2ed      	uxtb	r5, r5
 8019342:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8019346:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801934a:	fb15 f504 	smulbb	r5, r5, r4
 801934e:	fa5f f888 	uxtb.w	r8, r8
 8019352:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019356:	fb08 550c 	mla	r5, r8, ip, r5
 801935a:	fb1a fa04 	smulbb	sl, sl, r4
 801935e:	fa1f fe8e 	uxth.w	lr, lr
 8019362:	b2ad      	uxth	r5, r5
 8019364:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019368:	fb07 a70c 	mla	r7, r7, ip, sl
 801936c:	f10e 0401 	add.w	r4, lr, #1
 8019370:	f105 0a01 	add.w	sl, r5, #1
 8019374:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8019378:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801937c:	b2bf      	uxth	r7, r7
 801937e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019382:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019386:	ea4e 0e0a 	orr.w	lr, lr, sl
 801938a:	f107 0a01 	add.w	sl, r7, #1
 801938e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019392:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019396:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801939a:	9c03      	ldr	r4, [sp, #12]
 801939c:	ea4e 0e0a 	orr.w	lr, lr, sl
 80193a0:	f820 e004 	strh.w	lr, [r0, r4]
 80193a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80193a6:	4421      	add	r1, r4
 80193a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80193aa:	3e01      	subs	r6, #1
 80193ac:	4422      	add	r2, r4
 80193ae:	e75a      	b.n	8019266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80193b0:	9c01      	ldr	r4, [sp, #4]
 80193b2:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80193b6:	f06f 0401 	mvn.w	r4, #1
 80193ba:	4374      	muls	r4, r6
 80193bc:	5305      	strh	r5, [r0, r4]
 80193be:	e7f1      	b.n	80193a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80193c0:	f04f 0800 	mov.w	r8, #0
 80193c4:	eba3 0408 	sub.w	r4, r3, r8
 80193c8:	2c00      	cmp	r4, #0
 80193ca:	f77f af4f 	ble.w	801926c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80193ce:	140c      	asrs	r4, r1, #16
 80193d0:	1415      	asrs	r5, r2, #16
 80193d2:	fb09 4505 	mla	r5, r9, r5, r4
 80193d6:	9c04      	ldr	r4, [sp, #16]
 80193d8:	5d64      	ldrb	r4, [r4, r5]
 80193da:	2cff      	cmp	r4, #255	; 0xff
 80193dc:	d04f      	beq.n	801947e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80193de:	2c00      	cmp	r4, #0
 80193e0:	d046      	beq.n	8019470 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80193e2:	9e01      	ldr	r6, [sp, #4]
 80193e4:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80193e8:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 80193ec:	b2a7      	uxth	r7, r4
 80193ee:	122e      	asrs	r6, r5, #8
 80193f0:	43e4      	mvns	r4, r4
 80193f2:	b2e4      	uxtb	r4, r4
 80193f4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80193f8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80193fc:	fb16 f604 	smulbb	r6, r6, r4
 8019400:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019404:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019408:	00ed      	lsls	r5, r5, #3
 801940a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801940e:	b2ed      	uxtb	r5, r5
 8019410:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019414:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019418:	fb15 f504 	smulbb	r5, r5, r4
 801941c:	fa5f fe8e 	uxtb.w	lr, lr
 8019420:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019424:	fb0e 5507 	mla	r5, lr, r7, r5
 8019428:	fb1a fa04 	smulbb	sl, sl, r4
 801942c:	fa1f fc8c 	uxth.w	ip, ip
 8019430:	b2ad      	uxth	r5, r5
 8019432:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019436:	fb06 a607 	mla	r6, r6, r7, sl
 801943a:	f10c 0401 	add.w	r4, ip, #1
 801943e:	f105 0a01 	add.w	sl, r5, #1
 8019442:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8019446:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801944a:	b2b6      	uxth	r6, r6
 801944c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019450:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019454:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019458:	f106 0a01 	add.w	sl, r6, #1
 801945c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019460:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019464:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019468:	ea4c 0c0a 	orr.w	ip, ip, sl
 801946c:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 8019470:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019472:	4421      	add	r1, r4
 8019474:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019476:	f108 0801 	add.w	r8, r8, #1
 801947a:	4422      	add	r2, r4
 801947c:	e7a2      	b.n	80193c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801947e:	9c01      	ldr	r4, [sp, #4]
 8019480:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8019484:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 8019488:	e7f2      	b.n	8019470 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801948a:	b007      	add	sp, #28
 801948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019490 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019494:	b085      	sub	sp, #20
 8019496:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019498:	9203      	str	r2, [sp, #12]
 801949a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801949e:	9201      	str	r2, [sp, #4]
 80194a0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80194a4:	9100      	str	r1, [sp, #0]
 80194a6:	6841      	ldr	r1, [r0, #4]
 80194a8:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80194ac:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 80194b0:	fb01 2404 	mla	r4, r1, r4, r2
 80194b4:	6802      	ldr	r2, [r0, #0]
 80194b6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80194ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80194bc:	fa1f fe85 	uxth.w	lr, r5
 80194c0:	6812      	ldr	r2, [r2, #0]
 80194c2:	9202      	str	r2, [sp, #8]
 80194c4:	43ed      	mvns	r5, r5
 80194c6:	b2ed      	uxtb	r5, r5
 80194c8:	9a00      	ldr	r2, [sp, #0]
 80194ca:	2a00      	cmp	r2, #0
 80194cc:	dc03      	bgt.n	80194d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80194ce:	9a03      	ldr	r2, [sp, #12]
 80194d0:	2a00      	cmp	r2, #0
 80194d2:	f340 8117 	ble.w	8019704 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80194d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194d8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80194dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80194de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	dd0f      	ble.n	8019506 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80194e6:	1408      	asrs	r0, r1, #16
 80194e8:	d406      	bmi.n	80194f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80194ea:	4540      	cmp	r0, r8
 80194ec:	da04      	bge.n	80194f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80194ee:	1410      	asrs	r0, r2, #16
 80194f0:	d402      	bmi.n	80194f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80194f2:	9e01      	ldr	r6, [sp, #4]
 80194f4:	42b0      	cmp	r0, r6
 80194f6:	db07      	blt.n	8019508 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80194f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80194fa:	4401      	add	r1, r0
 80194fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80194fe:	3b01      	subs	r3, #1
 8019500:	4402      	add	r2, r0
 8019502:	3402      	adds	r4, #2
 8019504:	e7ed      	b.n	80194e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 8019506:	d069      	beq.n	80195dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8019508:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801950a:	1e58      	subs	r0, r3, #1
 801950c:	fb06 1600 	mla	r6, r6, r0, r1
 8019510:	1436      	asrs	r6, r6, #16
 8019512:	d459      	bmi.n	80195c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8019514:	4546      	cmp	r6, r8
 8019516:	da57      	bge.n	80195c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8019518:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801951a:	fb06 2000 	mla	r0, r6, r0, r2
 801951e:	1400      	asrs	r0, r0, #16
 8019520:	d452      	bmi.n	80195c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8019522:	9e01      	ldr	r6, [sp, #4]
 8019524:	42b0      	cmp	r0, r6
 8019526:	da4f      	bge.n	80195c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8019528:	469a      	mov	sl, r3
 801952a:	46a3      	mov	fp, r4
 801952c:	f1ba 0f00 	cmp.w	sl, #0
 8019530:	dd50      	ble.n	80195d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8019532:	140e      	asrs	r6, r1, #16
 8019534:	1410      	asrs	r0, r2, #16
 8019536:	fb08 6000 	mla	r0, r8, r0, r6
 801953a:	9e02      	ldr	r6, [sp, #8]
 801953c:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8019540:	f8bb 6000 	ldrh.w	r6, [fp]
 8019544:	1237      	asrs	r7, r6, #8
 8019546:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801954a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801954e:	fb17 f705 	smulbb	r7, r7, r5
 8019552:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8019556:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801955a:	00f6      	lsls	r6, r6, #3
 801955c:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8019560:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019564:	10c7      	asrs	r7, r0, #3
 8019566:	b2f6      	uxtb	r6, r6
 8019568:	00c0      	lsls	r0, r0, #3
 801956a:	fb19 f905 	smulbb	r9, r9, r5
 801956e:	fb16 f605 	smulbb	r6, r6, r5
 8019572:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019576:	b2c0      	uxtb	r0, r0
 8019578:	fa1f fc8c 	uxth.w	ip, ip
 801957c:	fb07 970e 	mla	r7, r7, lr, r9
 8019580:	fb00 600e 	mla	r0, r0, lr, r6
 8019584:	b280      	uxth	r0, r0
 8019586:	b2bf      	uxth	r7, r7
 8019588:	f10c 0601 	add.w	r6, ip, #1
 801958c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8019590:	f107 0901 	add.w	r9, r7, #1
 8019594:	1c46      	adds	r6, r0, #1
 8019596:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801959a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801959e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80195a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80195a4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80195a8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80195ac:	ea4c 0c06 	orr.w	ip, ip, r6
 80195b0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80195b4:	4401      	add	r1, r0
 80195b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80195b8:	ea4c 0c09 	orr.w	ip, ip, r9
 80195bc:	f82b cb02 	strh.w	ip, [fp], #2
 80195c0:	4402      	add	r2, r0
 80195c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80195c6:	e7b1      	b.n	801952c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80195c8:	f04f 0900 	mov.w	r9, #0
 80195cc:	eb03 0009 	add.w	r0, r3, r9
 80195d0:	2800      	cmp	r0, #0
 80195d2:	dc41      	bgt.n	8019658 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 80195d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80195dc:	9b00      	ldr	r3, [sp, #0]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	f340 8090 	ble.w	8019704 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80195e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80195e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80195f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80195f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80195fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80195fe:	eef0 6a62 	vmov.f32	s13, s5
 8019602:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019606:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801960a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801960e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019612:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019616:	eef0 6a43 	vmov.f32	s13, s6
 801961a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801961e:	ee12 2a90 	vmov	r2, s5
 8019622:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019626:	fb92 f3f3 	sdiv	r3, r2, r3
 801962a:	ee13 2a10 	vmov	r2, s6
 801962e:	9311      	str	r3, [sp, #68]	; 0x44
 8019630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019632:	fb92 f3f3 	sdiv	r3, r2, r3
 8019636:	9312      	str	r3, [sp, #72]	; 0x48
 8019638:	9b00      	ldr	r3, [sp, #0]
 801963a:	9a03      	ldr	r2, [sp, #12]
 801963c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019640:	3b01      	subs	r3, #1
 8019642:	9300      	str	r3, [sp, #0]
 8019644:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8019648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801964a:	eeb0 3a67 	vmov.f32	s6, s15
 801964e:	bf08      	it	eq
 8019650:	4613      	moveq	r3, r2
 8019652:	eef0 2a47 	vmov.f32	s5, s14
 8019656:	e737      	b.n	80194c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8019658:	140e      	asrs	r6, r1, #16
 801965a:	d44c      	bmi.n	80196f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801965c:	4546      	cmp	r6, r8
 801965e:	da4a      	bge.n	80196f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8019660:	1410      	asrs	r0, r2, #16
 8019662:	d448      	bmi.n	80196f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8019664:	9f01      	ldr	r7, [sp, #4]
 8019666:	42b8      	cmp	r0, r7
 8019668:	da45      	bge.n	80196f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801966a:	fb08 6000 	mla	r0, r8, r0, r6
 801966e:	9e02      	ldr	r6, [sp, #8]
 8019670:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8019674:	f06f 0601 	mvn.w	r6, #1
 8019678:	fb06 fb09 	mul.w	fp, r6, r9
 801967c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019680:	f834 600b 	ldrh.w	r6, [r4, fp]
 8019684:	1237      	asrs	r7, r6, #8
 8019686:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801968a:	fb17 f705 	smulbb	r7, r7, r5
 801968e:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 8019692:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019696:	00f6      	lsls	r6, r6, #3
 8019698:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801969c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80196a0:	10c7      	asrs	r7, r0, #3
 80196a2:	b2f6      	uxtb	r6, r6
 80196a4:	00c0      	lsls	r0, r0, #3
 80196a6:	fb1a fa05 	smulbb	sl, sl, r5
 80196aa:	fb16 f605 	smulbb	r6, r6, r5
 80196ae:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80196b2:	b2c0      	uxtb	r0, r0
 80196b4:	fa1f fc8c 	uxth.w	ip, ip
 80196b8:	fb07 a70e 	mla	r7, r7, lr, sl
 80196bc:	fb00 600e 	mla	r0, r0, lr, r6
 80196c0:	b2bf      	uxth	r7, r7
 80196c2:	b280      	uxth	r0, r0
 80196c4:	f10c 0601 	add.w	r6, ip, #1
 80196c8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80196cc:	f107 0a01 	add.w	sl, r7, #1
 80196d0:	1c46      	adds	r6, r0, #1
 80196d2:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80196d6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80196da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80196de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80196e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80196e6:	ea4c 0c06 	orr.w	ip, ip, r6
 80196ea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80196ee:	ea4c 0c0a 	orr.w	ip, ip, sl
 80196f2:	f824 c00b 	strh.w	ip, [r4, fp]
 80196f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80196f8:	4401      	add	r1, r0
 80196fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80196fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8019700:	4402      	add	r2, r0
 8019702:	e763      	b.n	80195cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 8019704:	b005      	add	sp, #20
 8019706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801970a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801970a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801970e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019710:	9201      	str	r2, [sp, #4]
 8019712:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8019716:	6844      	ldr	r4, [r0, #4]
 8019718:	6800      	ldr	r0, [r0, #0]
 801971a:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801971e:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8019722:	fb04 2505 	mla	r5, r4, r5, r2
 8019726:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801972a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801972c:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8019730:	6802      	ldr	r2, [r0, #0]
 8019732:	9200      	str	r2, [sp, #0]
 8019734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019738:	2900      	cmp	r1, #0
 801973a:	dc03      	bgt.n	8019744 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 801973c:	9a01      	ldr	r2, [sp, #4]
 801973e:	2a00      	cmp	r2, #0
 8019740:	f340 8095 	ble.w	801986e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8019744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019746:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801974a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801974c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019750:	2b00      	cmp	r3, #0
 8019752:	dd0e      	ble.n	8019772 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019754:	ea5f 4824 	movs.w	r8, r4, asr #16
 8019758:	d406      	bmi.n	8019768 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801975a:	45e0      	cmp	r8, ip
 801975c:	da04      	bge.n	8019768 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801975e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019762:	d401      	bmi.n	8019768 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8019764:	45f0      	cmp	r8, lr
 8019766:	db05      	blt.n	8019774 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019768:	443c      	add	r4, r7
 801976a:	4430      	add	r0, r6
 801976c:	3b01      	subs	r3, #1
 801976e:	3502      	adds	r5, #2
 8019770:	e7ee      	b.n	8019750 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8019772:	d010      	beq.n	8019796 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8019774:	f103 38ff 	add.w	r8, r3, #4294967295
 8019778:	fb07 4908 	mla	r9, r7, r8, r4
 801977c:	ea5f 4929 	movs.w	r9, r9, asr #16
 8019780:	d53d      	bpl.n	80197fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8019782:	4698      	mov	r8, r3
 8019784:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8019788:	f1b8 0f00 	cmp.w	r8, #0
 801978c:	dc55      	bgt.n	801983a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801978e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019792:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019796:	2900      	cmp	r1, #0
 8019798:	dd69      	ble.n	801986e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801979a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801979e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80197a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80197a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197a8:	3901      	subs	r1, #1
 80197aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80197ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80197b2:	eeb0 6a62 	vmov.f32	s12, s5
 80197b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80197ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80197c2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80197c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80197ca:	eeb0 6a43 	vmov.f32	s12, s6
 80197ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80197d2:	ee12 2a90 	vmov	r2, s5
 80197d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80197da:	fb92 f7f3 	sdiv	r7, r2, r3
 80197de:	ee13 2a10 	vmov	r2, s6
 80197e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197e6:	fb92 f6f3 	sdiv	r6, r2, r3
 80197ea:	9a01      	ldr	r2, [sp, #4]
 80197ec:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80197f0:	bf08      	it	eq
 80197f2:	4613      	moveq	r3, r2
 80197f4:	eeb0 3a67 	vmov.f32	s6, s15
 80197f8:	eef0 2a47 	vmov.f32	s5, s14
 80197fc:	e79c      	b.n	8019738 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 80197fe:	45e1      	cmp	r9, ip
 8019800:	dabf      	bge.n	8019782 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8019802:	fb06 0808 	mla	r8, r6, r8, r0
 8019806:	ea5f 4828 	movs.w	r8, r8, asr #16
 801980a:	d4ba      	bmi.n	8019782 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801980c:	45f0      	cmp	r8, lr
 801980e:	dab8      	bge.n	8019782 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8019810:	4698      	mov	r8, r3
 8019812:	46aa      	mov	sl, r5
 8019814:	f1b8 0f00 	cmp.w	r8, #0
 8019818:	ddb9      	ble.n	801978e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 801981a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801981e:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8019822:	fb0c b909 	mla	r9, ip, r9, fp
 8019826:	9a00      	ldr	r2, [sp, #0]
 8019828:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 801982c:	f82a 9b02 	strh.w	r9, [sl], #2
 8019830:	443c      	add	r4, r7
 8019832:	4430      	add	r0, r6
 8019834:	f108 38ff 	add.w	r8, r8, #4294967295
 8019838:	e7ec      	b.n	8019814 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801983a:	ea5f 4a24 	movs.w	sl, r4, asr #16
 801983e:	d411      	bmi.n	8019864 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8019840:	45e2      	cmp	sl, ip
 8019842:	da0f      	bge.n	8019864 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8019844:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019848:	d40c      	bmi.n	8019864 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801984a:	45f1      	cmp	r9, lr
 801984c:	da0a      	bge.n	8019864 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801984e:	fb0c a909 	mla	r9, ip, r9, sl
 8019852:	9a00      	ldr	r2, [sp, #0]
 8019854:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 8019858:	f06f 0201 	mvn.w	r2, #1
 801985c:	fb02 f908 	mul.w	r9, r2, r8
 8019860:	f82b a009 	strh.w	sl, [fp, r9]
 8019864:	443c      	add	r4, r7
 8019866:	4430      	add	r0, r6
 8019868:	f108 38ff 	add.w	r8, r8, #4294967295
 801986c:	e78c      	b.n	8019788 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801986e:	b003      	add	sp, #12
 8019870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019874 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019878:	b087      	sub	sp, #28
 801987a:	468b      	mov	fp, r1
 801987c:	9204      	str	r2, [sp, #16]
 801987e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8019882:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019884:	9201      	str	r2, [sp, #4]
 8019886:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801988a:	9205      	str	r2, [sp, #20]
 801988c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019890:	6841      	ldr	r1, [r0, #4]
 8019892:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8019896:	fb01 2404 	mla	r4, r1, r4, r2
 801989a:	6802      	ldr	r2, [r0, #0]
 801989c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80198a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80198a2:	6812      	ldr	r2, [r2, #0]
 80198a4:	9203      	str	r2, [sp, #12]
 80198a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80198aa:	f1bb 0f00 	cmp.w	fp, #0
 80198ae:	dc03      	bgt.n	80198b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80198b0:	9a04      	ldr	r2, [sp, #16]
 80198b2:	2a00      	cmp	r2, #0
 80198b4:	f340 812c 	ble.w	8019b10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 80198b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80198ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80198be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198c0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	dd0f      	ble.n	80198e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80198c8:	1402      	asrs	r2, r0, #16
 80198ca:	d406      	bmi.n	80198da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80198cc:	4542      	cmp	r2, r8
 80198ce:	da04      	bge.n	80198da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80198d0:	140a      	asrs	r2, r1, #16
 80198d2:	d402      	bmi.n	80198da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80198d4:	9d01      	ldr	r5, [sp, #4]
 80198d6:	42aa      	cmp	r2, r5
 80198d8:	db07      	blt.n	80198ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80198da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80198dc:	4410      	add	r0, r2
 80198de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80198e0:	3b01      	subs	r3, #1
 80198e2:	4411      	add	r1, r2
 80198e4:	3402      	adds	r4, #2
 80198e6:	e7ed      	b.n	80198c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80198e8:	d01a      	beq.n	8019920 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 80198ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80198ec:	1e5a      	subs	r2, r3, #1
 80198ee:	fb05 0502 	mla	r5, r5, r2, r0
 80198f2:	142d      	asrs	r5, r5, #16
 80198f4:	d40a      	bmi.n	801990c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80198f6:	4545      	cmp	r5, r8
 80198f8:	da08      	bge.n	801990c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80198fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80198fc:	fb05 1202 	mla	r2, r5, r2, r1
 8019900:	1412      	asrs	r2, r2, #16
 8019902:	d403      	bmi.n	801990c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8019904:	9d01      	ldr	r5, [sp, #4]
 8019906:	42aa      	cmp	r2, r5
 8019908:	f2c0 80a6 	blt.w	8019a58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 801990c:	f04f 0c00 	mov.w	ip, #0
 8019910:	eb03 020c 	add.w	r2, r3, ip
 8019914:	2a00      	cmp	r2, #0
 8019916:	dc3e      	bgt.n	8019996 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019918:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801991c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019920:	f1bb 0f00 	cmp.w	fp, #0
 8019924:	f340 80f4 	ble.w	8019b10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8019928:	ee30 0a04 	vadd.f32	s0, s0, s8
 801992c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019930:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019936:	f1bb 0b01 	subs.w	fp, fp, #1
 801993a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801993e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019942:	eeb0 6a62 	vmov.f32	s12, s5
 8019946:	ee61 7a27 	vmul.f32	s15, s2, s15
 801994a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801994e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019952:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019956:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801995a:	eeb0 6a43 	vmov.f32	s12, s6
 801995e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019962:	ee12 2a90 	vmov	r2, s5
 8019966:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801996a:	fb92 f3f3 	sdiv	r3, r2, r3
 801996e:	ee13 2a10 	vmov	r2, s6
 8019972:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019976:	9313      	str	r3, [sp, #76]	; 0x4c
 8019978:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801997a:	fb92 f3f3 	sdiv	r3, r2, r3
 801997e:	9a04      	ldr	r2, [sp, #16]
 8019980:	9314      	str	r3, [sp, #80]	; 0x50
 8019982:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019988:	eeb0 3a67 	vmov.f32	s6, s15
 801998c:	bf08      	it	eq
 801998e:	4613      	moveq	r3, r2
 8019990:	eef0 2a47 	vmov.f32	s5, s14
 8019994:	e789      	b.n	80198aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8019996:	1405      	asrs	r5, r0, #16
 8019998:	d457      	bmi.n	8019a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801999a:	4545      	cmp	r5, r8
 801999c:	da55      	bge.n	8019a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801999e:	140a      	asrs	r2, r1, #16
 80199a0:	d453      	bmi.n	8019a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80199a2:	9e01      	ldr	r6, [sp, #4]
 80199a4:	42b2      	cmp	r2, r6
 80199a6:	da50      	bge.n	8019a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80199a8:	fb08 5202 	mla	r2, r8, r2, r5
 80199ac:	9d03      	ldr	r5, [sp, #12]
 80199ae:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80199b2:	0e2e      	lsrs	r6, r5, #24
 80199b4:	d049      	beq.n	8019a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80199b6:	f06f 0201 	mvn.w	r2, #1
 80199ba:	fb02 f20c 	mul.w	r2, r2, ip
 80199be:	9202      	str	r2, [sp, #8]
 80199c0:	f834 e002 	ldrh.w	lr, [r4, r2]
 80199c4:	9a05      	ldr	r2, [sp, #20]
 80199c6:	4356      	muls	r6, r2
 80199c8:	1c72      	adds	r2, r6, #1
 80199ca:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80199ce:	1212      	asrs	r2, r2, #8
 80199d0:	fa1f f982 	uxth.w	r9, r2
 80199d4:	ea4f 272e 	mov.w	r7, lr, asr #8
 80199d8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80199dc:	43d2      	mvns	r2, r2
 80199de:	b2d2      	uxtb	r2, r2
 80199e0:	fb16 f609 	smulbb	r6, r6, r9
 80199e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80199e8:	fb07 6702 	mla	r7, r7, r2, r6
 80199ec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80199f0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80199f4:	b2ed      	uxtb	r5, r5
 80199f6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80199fa:	fa5f fe8e 	uxtb.w	lr, lr
 80199fe:	fb15 f509 	smulbb	r5, r5, r9
 8019a02:	fb0e 5502 	mla	r5, lr, r2, r5
 8019a06:	b2bf      	uxth	r7, r7
 8019a08:	fb1a fa09 	smulbb	sl, sl, r9
 8019a0c:	b2ad      	uxth	r5, r5
 8019a0e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019a12:	fb06 a602 	mla	r6, r6, r2, sl
 8019a16:	1c7a      	adds	r2, r7, #1
 8019a18:	f105 0a01 	add.w	sl, r5, #1
 8019a1c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019a20:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019a24:	b2b6      	uxth	r6, r6
 8019a26:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019a2a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019a2e:	ea47 070a 	orr.w	r7, r7, sl
 8019a32:	f106 0a01 	add.w	sl, r6, #1
 8019a36:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019a3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019a3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019a42:	9a02      	ldr	r2, [sp, #8]
 8019a44:	ea47 070a 	orr.w	r7, r7, sl
 8019a48:	52a7      	strh	r7, [r4, r2]
 8019a4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019a4c:	4410      	add	r0, r2
 8019a4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a50:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019a54:	4411      	add	r1, r2
 8019a56:	e75b      	b.n	8019910 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8019a58:	f04f 0e00 	mov.w	lr, #0
 8019a5c:	eba3 020e 	sub.w	r2, r3, lr
 8019a60:	2a00      	cmp	r2, #0
 8019a62:	f77f af59 	ble.w	8019918 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8019a66:	1405      	asrs	r5, r0, #16
 8019a68:	140a      	asrs	r2, r1, #16
 8019a6a:	fb08 5202 	mla	r2, r8, r2, r5
 8019a6e:	9d03      	ldr	r5, [sp, #12]
 8019a70:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8019a74:	0e2e      	lsrs	r6, r5, #24
 8019a76:	d044      	beq.n	8019b02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8019a78:	9a05      	ldr	r2, [sp, #20]
 8019a7a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019a7e:	4356      	muls	r6, r2
 8019a80:	1c72      	adds	r2, r6, #1
 8019a82:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019a86:	1212      	asrs	r2, r2, #8
 8019a88:	fa1f f982 	uxth.w	r9, r2
 8019a8c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019a90:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019a94:	43d2      	mvns	r2, r2
 8019a96:	b2d2      	uxtb	r2, r2
 8019a98:	fb16 f609 	smulbb	r6, r6, r9
 8019a9c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019aa0:	fb07 6702 	mla	r7, r7, r2, r6
 8019aa4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019aa8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8019aac:	b2ed      	uxtb	r5, r5
 8019aae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019ab2:	fa5f fc8c 	uxtb.w	ip, ip
 8019ab6:	fb15 f509 	smulbb	r5, r5, r9
 8019aba:	fb0c 5502 	mla	r5, ip, r2, r5
 8019abe:	b2bf      	uxth	r7, r7
 8019ac0:	fb1a fa09 	smulbb	sl, sl, r9
 8019ac4:	b2ad      	uxth	r5, r5
 8019ac6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019aca:	fb06 a602 	mla	r6, r6, r2, sl
 8019ace:	1c7a      	adds	r2, r7, #1
 8019ad0:	f105 0a01 	add.w	sl, r5, #1
 8019ad4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019ad8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019adc:	b2b6      	uxth	r6, r6
 8019ade:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019ae2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019ae6:	ea47 070a 	orr.w	r7, r7, sl
 8019aea:	f106 0a01 	add.w	sl, r6, #1
 8019aee:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019af2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019af6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019afa:	ea47 070a 	orr.w	r7, r7, sl
 8019afe:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8019b02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019b04:	4410      	add	r0, r2
 8019b06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b08:	f10e 0e01 	add.w	lr, lr, #1
 8019b0c:	4411      	add	r1, r2
 8019b0e:	e7a5      	b.n	8019a5c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8019b10:	b007      	add	sp, #28
 8019b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019b18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b1c:	b087      	sub	sp, #28
 8019b1e:	468b      	mov	fp, r1
 8019b20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019b22:	9205      	str	r2, [sp, #20]
 8019b24:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8019b28:	9201      	str	r2, [sp, #4]
 8019b2a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019b2e:	6861      	ldr	r1, [r4, #4]
 8019b30:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8019b34:	fb01 2000 	mla	r0, r1, r0, r2
 8019b38:	6822      	ldr	r2, [r4, #0]
 8019b3a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8019b3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019b40:	6812      	ldr	r2, [r2, #0]
 8019b42:	9203      	str	r2, [sp, #12]
 8019b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b48:	f1bb 0f00 	cmp.w	fp, #0
 8019b4c:	dc03      	bgt.n	8019b56 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8019b4e:	9a05      	ldr	r2, [sp, #20]
 8019b50:	2a00      	cmp	r2, #0
 8019b52:	f340 814b 	ble.w	8019dec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 8019b56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019b58:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019b5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b5e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	dd0f      	ble.n	8019b86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019b66:	140c      	asrs	r4, r1, #16
 8019b68:	d406      	bmi.n	8019b78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019b6a:	454c      	cmp	r4, r9
 8019b6c:	da04      	bge.n	8019b78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019b6e:	1414      	asrs	r4, r2, #16
 8019b70:	d402      	bmi.n	8019b78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019b72:	9d01      	ldr	r5, [sp, #4]
 8019b74:	42ac      	cmp	r4, r5
 8019b76:	db07      	blt.n	8019b88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8019b78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019b7a:	4421      	add	r1, r4
 8019b7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019b7e:	3b01      	subs	r3, #1
 8019b80:	4422      	add	r2, r4
 8019b82:	3002      	adds	r0, #2
 8019b84:	e7ed      	b.n	8019b62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8019b86:	d018      	beq.n	8019bba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8019b88:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019b8a:	1e5c      	subs	r4, r3, #1
 8019b8c:	fb05 1504 	mla	r5, r5, r4, r1
 8019b90:	142d      	asrs	r5, r5, #16
 8019b92:	d40a      	bmi.n	8019baa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019b94:	454d      	cmp	r5, r9
 8019b96:	da08      	bge.n	8019baa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019b98:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019b9a:	fb05 2404 	mla	r4, r5, r4, r2
 8019b9e:	1424      	asrs	r4, r4, #16
 8019ba0:	d403      	bmi.n	8019baa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019ba2:	9d01      	ldr	r5, [sp, #4]
 8019ba4:	42ac      	cmp	r4, r5
 8019ba6:	f2c0 80bb 	blt.w	8019d20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 8019baa:	2700      	movs	r7, #0
 8019bac:	19dc      	adds	r4, r3, r7
 8019bae:	2c00      	cmp	r4, #0
 8019bb0:	dc3e      	bgt.n	8019c30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8019bb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019bb6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019bba:	f1bb 0f00 	cmp.w	fp, #0
 8019bbe:	f340 8115 	ble.w	8019dec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 8019bc2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019bc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019bca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019bce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019bd0:	f1bb 0b01 	subs.w	fp, fp, #1
 8019bd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019bd8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019bdc:	eeb0 6a62 	vmov.f32	s12, s5
 8019be0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019be4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019be8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019bec:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019bf0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019bf4:	eeb0 6a43 	vmov.f32	s12, s6
 8019bf8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019bfc:	ee12 2a90 	vmov	r2, s5
 8019c00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019c04:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c08:	ee13 2a10 	vmov	r2, s6
 8019c0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019c10:	9313      	str	r3, [sp, #76]	; 0x4c
 8019c12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c14:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c18:	9a05      	ldr	r2, [sp, #20]
 8019c1a:	9314      	str	r3, [sp, #80]	; 0x50
 8019c1c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c22:	eeb0 3a67 	vmov.f32	s6, s15
 8019c26:	bf08      	it	eq
 8019c28:	4613      	moveq	r3, r2
 8019c2a:	eef0 2a47 	vmov.f32	s5, s14
 8019c2e:	e78b      	b.n	8019b48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8019c30:	140d      	asrs	r5, r1, #16
 8019c32:	d45c      	bmi.n	8019cee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8019c34:	454d      	cmp	r5, r9
 8019c36:	da5a      	bge.n	8019cee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8019c38:	1414      	asrs	r4, r2, #16
 8019c3a:	d458      	bmi.n	8019cee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8019c3c:	9e01      	ldr	r6, [sp, #4]
 8019c3e:	42b4      	cmp	r4, r6
 8019c40:	da55      	bge.n	8019cee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8019c42:	fb09 5404 	mla	r4, r9, r4, r5
 8019c46:	9d03      	ldr	r5, [sp, #12]
 8019c48:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8019c4c:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8019c50:	d04d      	beq.n	8019cee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8019c52:	0a26      	lsrs	r6, r4, #8
 8019c54:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019c58:	fa5f f58e 	uxtb.w	r5, lr
 8019c5c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8019c60:	9604      	str	r6, [sp, #16]
 8019c62:	d04a      	beq.n	8019cfa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8019c64:	f06f 0601 	mvn.w	r6, #1
 8019c68:	437e      	muls	r6, r7
 8019c6a:	fa1f fa85 	uxth.w	sl, r5
 8019c6e:	f830 8006 	ldrh.w	r8, [r0, r6]
 8019c72:	9602      	str	r6, [sp, #8]
 8019c74:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019c78:	43ed      	mvns	r5, r5
 8019c7a:	fa5f fc8c 	uxtb.w	ip, ip
 8019c7e:	b2ed      	uxtb	r5, r5
 8019c80:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019c84:	fb1c fc0a 	smulbb	ip, ip, sl
 8019c88:	fb0e cc05 	mla	ip, lr, r5, ip
 8019c8c:	b2e4      	uxtb	r4, r4
 8019c8e:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 8019c92:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019c96:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8019c9a:	fa5f f888 	uxtb.w	r8, r8
 8019c9e:	fb14 f40a 	smulbb	r4, r4, sl
 8019ca2:	fb08 4405 	mla	r4, r8, r5, r4
 8019ca6:	b2a4      	uxth	r4, r4
 8019ca8:	fa1f fc8c 	uxth.w	ip, ip
 8019cac:	fb16 f60a 	smulbb	r6, r6, sl
 8019cb0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8019cb4:	fb0e 6e05 	mla	lr, lr, r5, r6
 8019cb8:	1c66      	adds	r6, r4, #1
 8019cba:	f10c 0501 	add.w	r5, ip, #1
 8019cbe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8019cc2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019cc6:	fa1f fe8e 	uxth.w	lr, lr
 8019cca:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019cce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019cd2:	ea4c 0c06 	orr.w	ip, ip, r6
 8019cd6:	f10e 0601 	add.w	r6, lr, #1
 8019cda:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8019cde:	0976      	lsrs	r6, r6, #5
 8019ce0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019ce4:	9c02      	ldr	r4, [sp, #8]
 8019ce6:	ea4c 0c06 	orr.w	ip, ip, r6
 8019cea:	f820 c004 	strh.w	ip, [r0, r4]
 8019cee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019cf0:	4421      	add	r1, r4
 8019cf2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019cf4:	3f01      	subs	r7, #1
 8019cf6:	4422      	add	r2, r4
 8019cf8:	e758      	b.n	8019bac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8019cfa:	4e3e      	ldr	r6, [pc, #248]	; (8019df4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8019cfc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019d00:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 8019d04:	ea4c 0c04 	orr.w	ip, ip, r4
 8019d08:	9c04      	ldr	r4, [sp, #16]
 8019d0a:	f06f 0501 	mvn.w	r5, #1
 8019d0e:	00e6      	lsls	r6, r4, #3
 8019d10:	437d      	muls	r5, r7
 8019d12:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8019d16:	ea4c 0c04 	orr.w	ip, ip, r4
 8019d1a:	f820 c005 	strh.w	ip, [r0, r5]
 8019d1e:	e7e6      	b.n	8019cee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8019d20:	f04f 0800 	mov.w	r8, #0
 8019d24:	eba3 0408 	sub.w	r4, r3, r8
 8019d28:	2c00      	cmp	r4, #0
 8019d2a:	f77f af42 	ble.w	8019bb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8019d2e:	140d      	asrs	r5, r1, #16
 8019d30:	1414      	asrs	r4, r2, #16
 8019d32:	fb09 5404 	mla	r4, r9, r4, r5
 8019d36:	9d03      	ldr	r5, [sp, #12]
 8019d38:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8019d3c:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8019d40:	d042      	beq.n	8019dc8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8019d42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019d46:	fa5f f58c 	uxtb.w	r5, ip
 8019d4a:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8019d4e:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8019d52:	d040      	beq.n	8019dd6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8019d54:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 8019d58:	fa1f fa85 	uxth.w	sl, r5
 8019d5c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019d60:	43ed      	mvns	r5, r5
 8019d62:	b2ff      	uxtb	r7, r7
 8019d64:	b2ed      	uxtb	r5, r5
 8019d66:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019d6a:	fb17 f70a 	smulbb	r7, r7, sl
 8019d6e:	fb0c 7705 	mla	r7, ip, r5, r7
 8019d72:	b2e4      	uxtb	r4, r4
 8019d74:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8019d78:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019d7c:	fa5f fe8e 	uxtb.w	lr, lr
 8019d80:	fb14 f40a 	smulbb	r4, r4, sl
 8019d84:	fb0e 4405 	mla	r4, lr, r5, r4
 8019d88:	b2f6      	uxtb	r6, r6
 8019d8a:	b2bf      	uxth	r7, r7
 8019d8c:	fb16 f60a 	smulbb	r6, r6, sl
 8019d90:	b2a4      	uxth	r4, r4
 8019d92:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019d96:	fb0c 6c05 	mla	ip, ip, r5, r6
 8019d9a:	1c7d      	adds	r5, r7, #1
 8019d9c:	1c66      	adds	r6, r4, #1
 8019d9e:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8019da2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8019da6:	fa1f fc8c 	uxth.w	ip, ip
 8019daa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019dae:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019db2:	4337      	orrs	r7, r6
 8019db4:	f10c 0601 	add.w	r6, ip, #1
 8019db8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8019dbc:	0976      	lsrs	r6, r6, #5
 8019dbe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019dc2:	4337      	orrs	r7, r6
 8019dc4:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 8019dc8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019dca:	4421      	add	r1, r4
 8019dcc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019dce:	f108 0801 	add.w	r8, r8, #1
 8019dd2:	4422      	add	r2, r4
 8019dd4:	e7a6      	b.n	8019d24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 8019dd6:	4d07      	ldr	r5, [pc, #28]	; (8019df4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8019dd8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019ddc:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 8019de0:	00f6      	lsls	r6, r6, #3
 8019de2:	4327      	orrs	r7, r4
 8019de4:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8019de8:	4327      	orrs	r7, r4
 8019dea:	e7eb      	b.n	8019dc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8019dec:	b007      	add	sp, #28
 8019dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df2:	bf00      	nop
 8019df4:	fffff800 	.word	0xfffff800

08019df8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dfc:	b089      	sub	sp, #36	; 0x24
 8019dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e02:	9206      	str	r2, [sp, #24]
 8019e04:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 8019e08:	9202      	str	r2, [sp, #8]
 8019e0a:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 8019e0e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019e10:	9203      	str	r2, [sp, #12]
 8019e12:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8019e16:	9207      	str	r2, [sp, #28]
 8019e18:	e9dd 2518 	ldrd	r2, r5, [sp, #96]	; 0x60
 8019e1c:	6860      	ldr	r0, [r4, #4]
 8019e1e:	9101      	str	r1, [sp, #4]
 8019e20:	fb00 2505 	mla	r5, r0, r5, r2
 8019e24:	6822      	ldr	r2, [r4, #0]
 8019e26:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8019e2a:	9a02      	ldr	r2, [sp, #8]
 8019e2c:	3201      	adds	r2, #1
 8019e2e:	f022 0201 	bic.w	r2, r2, #1
 8019e32:	9204      	str	r2, [sp, #16]
 8019e34:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019e36:	6812      	ldr	r2, [r2, #0]
 8019e38:	9205      	str	r2, [sp, #20]
 8019e3a:	9a01      	ldr	r2, [sp, #4]
 8019e3c:	2a00      	cmp	r2, #0
 8019e3e:	dc03      	bgt.n	8019e48 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8019e40:	9a06      	ldr	r2, [sp, #24]
 8019e42:	2a00      	cmp	r2, #0
 8019e44:	f340 8153 	ble.w	801a0ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8019e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019e4a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019e4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019e50:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	dd10      	ble.n	8019e7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8019e58:	1422      	asrs	r2, r4, #16
 8019e5a:	d407      	bmi.n	8019e6c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019e5c:	9e02      	ldr	r6, [sp, #8]
 8019e5e:	4296      	cmp	r6, r2
 8019e60:	dd04      	ble.n	8019e6c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019e62:	1402      	asrs	r2, r0, #16
 8019e64:	d402      	bmi.n	8019e6c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019e66:	9e03      	ldr	r6, [sp, #12]
 8019e68:	42b2      	cmp	r2, r6
 8019e6a:	db07      	blt.n	8019e7c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 8019e6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019e6e:	4414      	add	r4, r2
 8019e70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019e72:	3b01      	subs	r3, #1
 8019e74:	4410      	add	r0, r2
 8019e76:	3502      	adds	r5, #2
 8019e78:	e7ec      	b.n	8019e54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8019e7a:	d00f      	beq.n	8019e9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8019e7c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019e7e:	1e5a      	subs	r2, r3, #1
 8019e80:	fb06 4602 	mla	r6, r6, r2, r4
 8019e84:	1436      	asrs	r6, r6, #16
 8019e86:	d545      	bpl.n	8019f14 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 8019e88:	469a      	mov	sl, r3
 8019e8a:	46a9      	mov	r9, r5
 8019e8c:	f1ba 0f00 	cmp.w	sl, #0
 8019e90:	f300 80ba 	bgt.w	801a008 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8019e94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e98:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019e9c:	9b01      	ldr	r3, [sp, #4]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	f340 8125 	ble.w	801a0ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8019ea4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019ea8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019eac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019eb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019eb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019eba:	eeb0 6a62 	vmov.f32	s12, s5
 8019ebe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019ec2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ec6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019eca:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8019ece:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ed2:	eeb0 6a43 	vmov.f32	s12, s6
 8019ed6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019eda:	ee12 2a90 	vmov	r2, s5
 8019ede:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ee6:	ee13 2a10 	vmov	r2, s6
 8019eea:	9315      	str	r3, [sp, #84]	; 0x54
 8019eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019eee:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ef2:	9316      	str	r3, [sp, #88]	; 0x58
 8019ef4:	9b01      	ldr	r3, [sp, #4]
 8019ef6:	9a06      	ldr	r2, [sp, #24]
 8019ef8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019efc:	3b01      	subs	r3, #1
 8019efe:	9301      	str	r3, [sp, #4]
 8019f00:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8019f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019f06:	eeb0 3a67 	vmov.f32	s6, s15
 8019f0a:	bf08      	it	eq
 8019f0c:	4613      	moveq	r3, r2
 8019f0e:	eef0 2a47 	vmov.f32	s5, s14
 8019f12:	e792      	b.n	8019e3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8019f14:	9f02      	ldr	r7, [sp, #8]
 8019f16:	42b7      	cmp	r7, r6
 8019f18:	ddb6      	ble.n	8019e88 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8019f1a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8019f1c:	fb06 0202 	mla	r2, r6, r2, r0
 8019f20:	1412      	asrs	r2, r2, #16
 8019f22:	d4b1      	bmi.n	8019e88 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8019f24:	9e03      	ldr	r6, [sp, #12]
 8019f26:	42b2      	cmp	r2, r6
 8019f28:	daae      	bge.n	8019e88 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8019f2a:	f04f 0800 	mov.w	r8, #0
 8019f2e:	eba3 0208 	sub.w	r2, r3, r8
 8019f32:	2a00      	cmp	r2, #0
 8019f34:	ddae      	ble.n	8019e94 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8019f36:	9904      	ldr	r1, [sp, #16]
 8019f38:	1422      	asrs	r2, r4, #16
 8019f3a:	1406      	asrs	r6, r0, #16
 8019f3c:	fb01 2606 	mla	r6, r1, r6, r2
 8019f40:	0872      	lsrs	r2, r6, #1
 8019f42:	9905      	ldr	r1, [sp, #20]
 8019f44:	5c8a      	ldrb	r2, [r1, r2]
 8019f46:	07f1      	lsls	r1, r6, #31
 8019f48:	bf54      	ite	pl
 8019f4a:	f002 020f 	andpl.w	r2, r2, #15
 8019f4e:	1112      	asrmi	r2, r2, #4
 8019f50:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019f54:	b2d2      	uxtb	r2, r2
 8019f56:	2a00      	cmp	r2, #0
 8019f58:	d04f      	beq.n	8019ffa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8019f5a:	4966      	ldr	r1, [pc, #408]	; (801a0f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8019f5c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8019f60:	680e      	ldr	r6, [r1, #0]
 8019f62:	9907      	ldr	r1, [sp, #28]
 8019f64:	434a      	muls	r2, r1
 8019f66:	1c57      	adds	r7, r2, #1
 8019f68:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8019f6c:	1212      	asrs	r2, r2, #8
 8019f6e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8019f72:	fa1f fa82 	uxth.w	sl, r2
 8019f76:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019f7a:	43d2      	mvns	r2, r2
 8019f7c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019f80:	b2d2      	uxtb	r2, r2
 8019f82:	fb1c fc0a 	smulbb	ip, ip, sl
 8019f86:	f3c6 09cc 	ubfx	r9, r6, #3, #13
 8019f8a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019f8e:	495a      	ldr	r1, [pc, #360]	; (801a0f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 8019f90:	fb07 c702 	mla	r7, r7, r2, ip
 8019f94:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019f98:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8019f9c:	fb19 f90a 	smulbb	r9, r9, sl
 8019fa0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019fa4:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8019fa8:	fb0c 9c02 	mla	ip, ip, r2, r9
 8019fac:	b2f6      	uxtb	r6, r6
 8019fae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019fb2:	fa1f fc8c 	uxth.w	ip, ip
 8019fb6:	fa5f fe8e 	uxtb.w	lr, lr
 8019fba:	fb16 f60a 	smulbb	r6, r6, sl
 8019fbe:	b2bf      	uxth	r7, r7
 8019fc0:	fb0e 6602 	mla	r6, lr, r2, r6
 8019fc4:	f10c 0901 	add.w	r9, ip, #1
 8019fc8:	b2b6      	uxth	r6, r6
 8019fca:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8019fce:	f107 0b01 	add.w	fp, r7, #1
 8019fd2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8019fd6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019fda:	f106 0e01 	add.w	lr, r6, #1
 8019fde:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8019fe2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019fe6:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8019fea:	ea4c 0c07 	orr.w	ip, ip, r7
 8019fee:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019ff2:	ea4c 0c0e 	orr.w	ip, ip, lr
 8019ff6:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8019ffa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019ffc:	4414      	add	r4, r2
 8019ffe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a000:	f108 0801 	add.w	r8, r8, #1
 801a004:	4410      	add	r0, r2
 801a006:	e792      	b.n	8019f2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a008:	1422      	asrs	r2, r4, #16
 801a00a:	d467      	bmi.n	801a0dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801a00c:	9e02      	ldr	r6, [sp, #8]
 801a00e:	4296      	cmp	r6, r2
 801a010:	dd64      	ble.n	801a0dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801a012:	1406      	asrs	r6, r0, #16
 801a014:	d462      	bmi.n	801a0dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801a016:	9f03      	ldr	r7, [sp, #12]
 801a018:	42be      	cmp	r6, r7
 801a01a:	da5f      	bge.n	801a0dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801a01c:	9f04      	ldr	r7, [sp, #16]
 801a01e:	fb06 2607 	mla	r6, r6, r7, r2
 801a022:	0872      	lsrs	r2, r6, #1
 801a024:	9f05      	ldr	r7, [sp, #20]
 801a026:	5cba      	ldrb	r2, [r7, r2]
 801a028:	07f6      	lsls	r6, r6, #31
 801a02a:	bf54      	ite	pl
 801a02c:	f002 020f 	andpl.w	r2, r2, #15
 801a030:	1112      	asrmi	r2, r2, #4
 801a032:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a036:	b2d2      	uxtb	r2, r2
 801a038:	2a00      	cmp	r2, #0
 801a03a:	d04f      	beq.n	801a0dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801a03c:	9f07      	ldr	r7, [sp, #28]
 801a03e:	4e2d      	ldr	r6, [pc, #180]	; (801a0f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 801a040:	f8b9 e000 	ldrh.w	lr, [r9]
 801a044:	6836      	ldr	r6, [r6, #0]
 801a046:	492c      	ldr	r1, [pc, #176]	; (801a0f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 801a048:	437a      	muls	r2, r7
 801a04a:	1c57      	adds	r7, r2, #1
 801a04c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801a050:	1212      	asrs	r2, r2, #8
 801a052:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801a056:	fa1f fb82 	uxth.w	fp, r2
 801a05a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a05e:	43d2      	mvns	r2, r2
 801a060:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a064:	b2d2      	uxtb	r2, r2
 801a066:	fb1c fc0b 	smulbb	ip, ip, fp
 801a06a:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 801a06e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a072:	fb07 c702 	mla	r7, r7, r2, ip
 801a076:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a07a:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801a07e:	fb18 f80b 	smulbb	r8, r8, fp
 801a082:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a086:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 801a08a:	fb0c 8c02 	mla	ip, ip, r2, r8
 801a08e:	b2f6      	uxtb	r6, r6
 801a090:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a094:	fa1f fc8c 	uxth.w	ip, ip
 801a098:	fa5f fe8e 	uxtb.w	lr, lr
 801a09c:	fb16 f60b 	smulbb	r6, r6, fp
 801a0a0:	b2bf      	uxth	r7, r7
 801a0a2:	fb0e 6602 	mla	r6, lr, r2, r6
 801a0a6:	f10c 0801 	add.w	r8, ip, #1
 801a0aa:	b2b6      	uxth	r6, r6
 801a0ac:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801a0b0:	f107 0801 	add.w	r8, r7, #1
 801a0b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801a0b8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801a0bc:	f106 0e01 	add.w	lr, r6, #1
 801a0c0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801a0c4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a0c8:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801a0cc:	ea4c 0c07 	orr.w	ip, ip, r7
 801a0d0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801a0d4:	ea4c 0c0e 	orr.w	ip, ip, lr
 801a0d8:	f8a9 c000 	strh.w	ip, [r9]
 801a0dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a0de:	4414      	add	r4, r2
 801a0e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a0e2:	f109 0902 	add.w	r9, r9, #2
 801a0e6:	4410      	add	r0, r2
 801a0e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a0ec:	e6ce      	b.n	8019e8c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801a0ee:	b009      	add	sp, #36	; 0x24
 801a0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f4:	2002b090 	.word	0x2002b090
 801a0f8:	0007fff8 	.word	0x0007fff8

0801a0fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a100:	b087      	sub	sp, #28
 801a102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a106:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a108:	9205      	str	r2, [sp, #20]
 801a10a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a10e:	9201      	str	r2, [sp, #4]
 801a110:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a114:	6860      	ldr	r0, [r4, #4]
 801a116:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 801a11a:	9100      	str	r1, [sp, #0]
 801a11c:	fb00 2505 	mla	r5, r0, r5, r2
 801a120:	6822      	ldr	r2, [r4, #0]
 801a122:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801a126:	f10b 0201 	add.w	r2, fp, #1
 801a12a:	f022 0201 	bic.w	r2, r2, #1
 801a12e:	9203      	str	r2, [sp, #12]
 801a130:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a132:	6812      	ldr	r2, [r2, #0]
 801a134:	9204      	str	r2, [sp, #16]
 801a136:	9a00      	ldr	r2, [sp, #0]
 801a138:	2a00      	cmp	r2, #0
 801a13a:	dc03      	bgt.n	801a144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801a13c:	9a05      	ldr	r2, [sp, #20]
 801a13e:	2a00      	cmp	r2, #0
 801a140:	f340 815c 	ble.w	801a3fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 801a144:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a146:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a14a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a14c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a150:	2b00      	cmp	r3, #0
 801a152:	dd0f      	ble.n	801a174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801a154:	1422      	asrs	r2, r4, #16
 801a156:	d406      	bmi.n	801a166 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a158:	4593      	cmp	fp, r2
 801a15a:	dd04      	ble.n	801a166 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a15c:	1402      	asrs	r2, r0, #16
 801a15e:	d402      	bmi.n	801a166 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a160:	9e01      	ldr	r6, [sp, #4]
 801a162:	42b2      	cmp	r2, r6
 801a164:	db07      	blt.n	801a176 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801a166:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a168:	4414      	add	r4, r2
 801a16a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a16c:	3b01      	subs	r3, #1
 801a16e:	4410      	add	r0, r2
 801a170:	3502      	adds	r5, #2
 801a172:	e7ed      	b.n	801a150 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 801a174:	d018      	beq.n	801a1a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 801a176:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a178:	1e5a      	subs	r2, r3, #1
 801a17a:	fb06 4602 	mla	r6, r6, r2, r4
 801a17e:	1436      	asrs	r6, r6, #16
 801a180:	d40a      	bmi.n	801a198 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801a182:	45b3      	cmp	fp, r6
 801a184:	dd08      	ble.n	801a198 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801a186:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a188:	fb06 0202 	mla	r2, r6, r2, r0
 801a18c:	1412      	asrs	r2, r2, #16
 801a18e:	d403      	bmi.n	801a198 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801a190:	9e01      	ldr	r6, [sp, #4]
 801a192:	42b2      	cmp	r2, r6
 801a194:	f2c0 80bf 	blt.w	801a316 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 801a198:	2700      	movs	r7, #0
 801a19a:	19da      	adds	r2, r3, r7
 801a19c:	2a00      	cmp	r2, #0
 801a19e:	dc3f      	bgt.n	801a220 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801a1a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1a4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a1a8:	9b00      	ldr	r3, [sp, #0]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	f340 8126 	ble.w	801a3fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 801a1b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a1b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a1b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a1bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a1be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a1c6:	eeb0 6a62 	vmov.f32	s12, s5
 801a1ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a1ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a1d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a1d6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a1da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a1de:	eeb0 6a43 	vmov.f32	s12, s6
 801a1e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a1e6:	ee12 2a90 	vmov	r2, s5
 801a1ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a1ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1f2:	ee13 2a10 	vmov	r2, s6
 801a1f6:	9313      	str	r3, [sp, #76]	; 0x4c
 801a1f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a1fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1fe:	9314      	str	r3, [sp, #80]	; 0x50
 801a200:	9b00      	ldr	r3, [sp, #0]
 801a202:	9a05      	ldr	r2, [sp, #20]
 801a204:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a208:	3b01      	subs	r3, #1
 801a20a:	9300      	str	r3, [sp, #0]
 801a20c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a210:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a212:	eeb0 3a67 	vmov.f32	s6, s15
 801a216:	bf08      	it	eq
 801a218:	4613      	moveq	r3, r2
 801a21a:	eef0 2a47 	vmov.f32	s5, s14
 801a21e:	e78a      	b.n	801a136 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 801a220:	1422      	asrs	r2, r4, #16
 801a222:	d466      	bmi.n	801a2f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801a224:	4593      	cmp	fp, r2
 801a226:	dd64      	ble.n	801a2f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801a228:	1406      	asrs	r6, r0, #16
 801a22a:	d462      	bmi.n	801a2f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801a22c:	9901      	ldr	r1, [sp, #4]
 801a22e:	428e      	cmp	r6, r1
 801a230:	da5f      	bge.n	801a2f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801a232:	9903      	ldr	r1, [sp, #12]
 801a234:	fb06 2601 	mla	r6, r6, r1, r2
 801a238:	0872      	lsrs	r2, r6, #1
 801a23a:	9904      	ldr	r1, [sp, #16]
 801a23c:	5c8a      	ldrb	r2, [r1, r2]
 801a23e:	07f6      	lsls	r6, r6, #31
 801a240:	bf54      	ite	pl
 801a242:	f002 020f 	andpl.w	r2, r2, #15
 801a246:	1112      	asrmi	r2, r2, #4
 801a248:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a24c:	b2d2      	uxtb	r2, r2
 801a24e:	2a00      	cmp	r2, #0
 801a250:	d04f      	beq.n	801a2f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801a252:	496c      	ldr	r1, [pc, #432]	; (801a404 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 801a254:	680e      	ldr	r6, [r1, #0]
 801a256:	496c      	ldr	r1, [pc, #432]	; (801a408 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 801a258:	ea4f 2926 	mov.w	r9, r6, asr #8
 801a25c:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 801a260:	2aff      	cmp	r2, #255	; 0xff
 801a262:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 801a266:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801a26a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a26e:	b2f6      	uxtb	r6, r6
 801a270:	d045      	beq.n	801a2fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801a272:	f06f 0101 	mvn.w	r1, #1
 801a276:	4379      	muls	r1, r7
 801a278:	fa1f fa82 	uxth.w	sl, r2
 801a27c:	f835 e001 	ldrh.w	lr, [r5, r1]
 801a280:	9102      	str	r1, [sp, #8]
 801a282:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a286:	43d2      	mvns	r2, r2
 801a288:	b2d2      	uxtb	r2, r2
 801a28a:	fb19 f90a 	smulbb	r9, r9, sl
 801a28e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a292:	fb0c 9c02 	mla	ip, ip, r2, r9
 801a296:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801a29a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a29e:	fb18 f80a 	smulbb	r8, r8, sl
 801a2a2:	fb09 8802 	mla	r8, r9, r2, r8
 801a2a6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a2aa:	fa1f f888 	uxth.w	r8, r8
 801a2ae:	fa5f fe8e 	uxtb.w	lr, lr
 801a2b2:	fb16 f60a 	smulbb	r6, r6, sl
 801a2b6:	fa1f fc8c 	uxth.w	ip, ip
 801a2ba:	fb0e 6602 	mla	r6, lr, r2, r6
 801a2be:	f108 0901 	add.w	r9, r8, #1
 801a2c2:	b2b6      	uxth	r6, r6
 801a2c4:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801a2c8:	f10c 0901 	add.w	r9, ip, #1
 801a2cc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a2d0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801a2d4:	1c72      	adds	r2, r6, #1
 801a2d6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a2da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a2de:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801a2e2:	ea48 080c 	orr.w	r8, r8, ip
 801a2e6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a2ea:	ea48 0806 	orr.w	r8, r8, r6
 801a2ee:	f825 8001 	strh.w	r8, [r5, r1]
 801a2f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a2f4:	4414      	add	r4, r2
 801a2f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a2f8:	3f01      	subs	r7, #1
 801a2fa:	4410      	add	r0, r2
 801a2fc:	e74d      	b.n	801a19a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801a2fe:	f06f 0201 	mvn.w	r2, #1
 801a302:	08f6      	lsrs	r6, r6, #3
 801a304:	fb02 fe07 	mul.w	lr, r2, r7
 801a308:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 801a30c:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 801a310:	f825 600e 	strh.w	r6, [r5, lr]
 801a314:	e7ed      	b.n	801a2f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801a316:	f04f 0e00 	mov.w	lr, #0
 801a31a:	eba3 020e 	sub.w	r2, r3, lr
 801a31e:	2a00      	cmp	r2, #0
 801a320:	f77f af3e 	ble.w	801a1a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 801a324:	9903      	ldr	r1, [sp, #12]
 801a326:	1422      	asrs	r2, r4, #16
 801a328:	1406      	asrs	r6, r0, #16
 801a32a:	fb01 2606 	mla	r6, r1, r6, r2
 801a32e:	0872      	lsrs	r2, r6, #1
 801a330:	9904      	ldr	r1, [sp, #16]
 801a332:	5c8a      	ldrb	r2, [r1, r2]
 801a334:	07f1      	lsls	r1, r6, #31
 801a336:	bf54      	ite	pl
 801a338:	f002 020f 	andpl.w	r2, r2, #15
 801a33c:	1112      	asrmi	r2, r2, #4
 801a33e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a342:	b2d2      	uxtb	r2, r2
 801a344:	2a00      	cmp	r2, #0
 801a346:	d04a      	beq.n	801a3de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 801a348:	492e      	ldr	r1, [pc, #184]	; (801a404 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 801a34a:	680e      	ldr	r6, [r1, #0]
 801a34c:	492e      	ldr	r1, [pc, #184]	; (801a408 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 801a34e:	ea4f 2926 	mov.w	r9, r6, asr #8
 801a352:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 801a356:	2aff      	cmp	r2, #255	; 0xff
 801a358:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 801a35c:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801a360:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a364:	b2f6      	uxtb	r6, r6
 801a366:	d041      	beq.n	801a3ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f0>
 801a368:	f835 c01e 	ldrh.w	ip, [r5, lr, lsl #1]
 801a36c:	fa1f fa82 	uxth.w	sl, r2
 801a370:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a374:	43d2      	mvns	r2, r2
 801a376:	b2d2      	uxtb	r2, r2
 801a378:	fb19 f90a 	smulbb	r9, r9, sl
 801a37c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a380:	fb07 9702 	mla	r7, r7, r2, r9
 801a384:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801a388:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a38c:	fb18 f80a 	smulbb	r8, r8, sl
 801a390:	fb09 8802 	mla	r8, r9, r2, r8
 801a394:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a398:	fa1f f888 	uxth.w	r8, r8
 801a39c:	fa5f fc8c 	uxtb.w	ip, ip
 801a3a0:	fb16 f60a 	smulbb	r6, r6, sl
 801a3a4:	b2bf      	uxth	r7, r7
 801a3a6:	fb0c 6602 	mla	r6, ip, r2, r6
 801a3aa:	f108 0901 	add.w	r9, r8, #1
 801a3ae:	b2b6      	uxth	r6, r6
 801a3b0:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801a3b4:	f107 0901 	add.w	r9, r7, #1
 801a3b8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a3bc:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a3c0:	1c72      	adds	r2, r6, #1
 801a3c2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a3c6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a3ca:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801a3ce:	ea48 0807 	orr.w	r8, r8, r7
 801a3d2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a3d6:	ea48 0806 	orr.w	r8, r8, r6
 801a3da:	f825 801e 	strh.w	r8, [r5, lr, lsl #1]
 801a3de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a3e0:	4414      	add	r4, r2
 801a3e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a3e4:	f10e 0e01 	add.w	lr, lr, #1
 801a3e8:	4410      	add	r0, r2
 801a3ea:	e796      	b.n	801a31a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801a3ec:	08f6      	lsrs	r6, r6, #3
 801a3ee:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 801a3f2:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 801a3f6:	f825 601e 	strh.w	r6, [r5, lr, lsl #1]
 801a3fa:	e7f0      	b.n	801a3de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 801a3fc:	b007      	add	sp, #28
 801a3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a402:	bf00      	nop
 801a404:	2002b090 	.word	0x2002b090
 801a408:	0007fff8 	.word	0x0007fff8

0801a40c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a40c:	4770      	bx	lr

0801a40e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a40e:	4770      	bx	lr

0801a410 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a410:	4770      	bx	lr

0801a412 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a412:	4770      	bx	lr

0801a414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a414:	4770      	bx	lr

0801a416 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a416:	4770      	bx	lr

0801a418 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a418:	4770      	bx	lr

0801a41a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a41a:	4770      	bx	lr

0801a41c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a41c:	4770      	bx	lr

0801a41e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801a41e:	4770      	bx	lr

0801a420 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a420:	4770      	bx	lr

0801a422 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a422:	4770      	bx	lr

0801a424 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a424:	4770      	bx	lr

0801a426 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801a426:	4770      	bx	lr

0801a428 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a428:	4770      	bx	lr

0801a42a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a42a:	4770      	bx	lr

0801a42c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a42c:	4770      	bx	lr

0801a42e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a42e:	4770      	bx	lr

0801a430 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a430:	4770      	bx	lr

0801a432 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a432:	4770      	bx	lr

0801a434 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a434:	4770      	bx	lr

0801a436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a436:	4770      	bx	lr

0801a438 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a438:	4770      	bx	lr

0801a43a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a43a:	4770      	bx	lr

0801a43c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a43c:	4770      	bx	lr

0801a43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801a43e:	4770      	bx	lr

0801a440 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a440:	4770      	bx	lr

0801a442 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801a442:	4770      	bx	lr

0801a444 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801a444:	b508      	push	{r3, lr}
 801a446:	4b06      	ldr	r3, [pc, #24]	; (801a460 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801a448:	8818      	ldrh	r0, [r3, #0]
 801a44a:	b928      	cbnz	r0, 801a458 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801a44c:	4b05      	ldr	r3, [pc, #20]	; (801a464 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801a44e:	4a06      	ldr	r2, [pc, #24]	; (801a468 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801a450:	4806      	ldr	r0, [pc, #24]	; (801a46c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801a452:	21d7      	movs	r1, #215	; 0xd7
 801a454:	f009 f894 	bl	8023580 <__assert_func>
 801a458:	0040      	lsls	r0, r0, #1
 801a45a:	b280      	uxth	r0, r0
 801a45c:	bd08      	pop	{r3, pc}
 801a45e:	bf00      	nop
 801a460:	2002b082 	.word	0x2002b082
 801a464:	0802892d 	.word	0x0802892d
 801a468:	08028eb3 	.word	0x08028eb3
 801a46c:	0802896f 	.word	0x0802896f

0801a470 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a474:	b08d      	sub	sp, #52	; 0x34
 801a476:	460f      	mov	r7, r1
 801a478:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801a47c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801a480:	4616      	mov	r6, r2
 801a482:	f1b9 0f00 	cmp.w	r9, #0
 801a486:	d046      	beq.n	801a516 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801a488:	6810      	ldr	r0, [r2, #0]
 801a48a:	6851      	ldr	r1, [r2, #4]
 801a48c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801a654 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801a490:	ad08      	add	r5, sp, #32
 801a492:	c503      	stmia	r5!, {r0, r1}
 801a494:	6818      	ldr	r0, [r3, #0]
 801a496:	6859      	ldr	r1, [r3, #4]
 801a498:	ad0a      	add	r5, sp, #40	; 0x28
 801a49a:	c503      	stmia	r5!, {r0, r1}
 801a49c:	a808      	add	r0, sp, #32
 801a49e:	f7fb f925 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a4a2:	4631      	mov	r1, r6
 801a4a4:	a80a      	add	r0, sp, #40	; 0x28
 801a4a6:	f7fb f909 	bl	80156bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a4aa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801a4ae:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801a4b2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801a4b6:	f8d8 0000 	ldr.w	r0, [r8]
 801a4ba:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801a4be:	fb16 2103 	smlabb	r1, r6, r3, r2
 801a4c2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801a4c6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801a4ca:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 801a4ce:	440a      	add	r2, r1
 801a4d0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a4d4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801a4d8:	4413      	add	r3, r2
 801a4da:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a4de:	6803      	ldr	r3, [r0, #0]
 801a4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4e2:	4798      	blx	r3
 801a4e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a4e8:	d018      	beq.n	801a51c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801a4ea:	f010 0f04 	tst.w	r0, #4
 801a4ee:	d019      	beq.n	801a524 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801a4f0:	f8d8 0000 	ldr.w	r0, [r8]
 801a4f4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801a4f8:	6801      	ldr	r1, [r0, #0]
 801a4fa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801a4fe:	e9cd 9403 	strd	r9, r4, [sp, #12]
 801a502:	b2bf      	uxth	r7, r7
 801a504:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801a508:	9402      	str	r4, [sp, #8]
 801a50a:	b2ad      	uxth	r5, r5
 801a50c:	9701      	str	r7, [sp, #4]
 801a50e:	9500      	str	r5, [sp, #0]
 801a510:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801a512:	4631      	mov	r1, r6
 801a514:	47a0      	blx	r4
 801a516:	b00d      	add	sp, #52	; 0x34
 801a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a51c:	b914      	cbnz	r4, 801a524 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801a51e:	f010 0f01 	tst.w	r0, #1
 801a522:	e7e4      	b.n	801a4ee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801a524:	f8d8 0000 	ldr.w	r0, [r8]
 801a528:	6803      	ldr	r3, [r0, #0]
 801a52a:	6a1b      	ldr	r3, [r3, #32]
 801a52c:	4798      	blx	r3
 801a52e:	4a48      	ldr	r2, [pc, #288]	; (801a650 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 801a530:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801a534:	8814      	ldrh	r4, [r2, #0]
 801a536:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a53a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a53e:	fb01 3404 	mla	r4, r1, r4, r3
 801a542:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a546:	4692      	mov	sl, r2
 801a548:	d118      	bne.n	801a57c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 801a54a:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801a54e:	f04f 0900 	mov.w	r9, #0
 801a552:	f8d8 0000 	ldr.w	r0, [r8]
 801a556:	45b9      	cmp	r9, r7
 801a558:	6803      	ldr	r3, [r0, #0]
 801a55a:	da73      	bge.n	801a644 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 801a55c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801a55e:	4632      	mov	r2, r6
 801a560:	465b      	mov	r3, fp
 801a562:	4621      	mov	r1, r4
 801a564:	47a8      	blx	r5
 801a566:	f8ba 3000 	ldrh.w	r3, [sl]
 801a56a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a56e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801a572:	f109 0901 	add.w	r9, r9, #1
 801a576:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a57a:	e7ea      	b.n	801a552 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 801a57c:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 801a580:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 801a584:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801a588:	f04f 0b00 	mov.w	fp, #0
 801a58c:	fa1f f389 	uxth.w	r3, r9
 801a590:	fa1f f888 	uxth.w	r8, r8
 801a594:	9207      	str	r2, [sp, #28]
 801a596:	45bb      	cmp	fp, r7
 801a598:	da54      	bge.n	801a644 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 801a59a:	f04f 0e00 	mov.w	lr, #0
 801a59e:	45ae      	cmp	lr, r5
 801a5a0:	da41      	bge.n	801a626 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 801a5a2:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 801a5a6:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 801a5aa:	1208      	asrs	r0, r1, #8
 801a5ac:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801a5b0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a5b4:	fb10 f008 	smulbb	r0, r0, r8
 801a5b8:	ea4f 09e1 	mov.w	r9, r1, asr #3
 801a5bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a5c0:	00c9      	lsls	r1, r1, #3
 801a5c2:	fb0c 0c03 	mla	ip, ip, r3, r0
 801a5c6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a5ca:	10d0      	asrs	r0, r2, #3
 801a5cc:	b2c9      	uxtb	r1, r1
 801a5ce:	00d2      	lsls	r2, r2, #3
 801a5d0:	fa1f fc8c 	uxth.w	ip, ip
 801a5d4:	fb19 f908 	smulbb	r9, r9, r8
 801a5d8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801a5dc:	b2d2      	uxtb	r2, r2
 801a5de:	fb11 f108 	smulbb	r1, r1, r8
 801a5e2:	fb00 9003 	mla	r0, r0, r3, r9
 801a5e6:	fb02 1203 	mla	r2, r2, r3, r1
 801a5ea:	f10c 0901 	add.w	r9, ip, #1
 801a5ee:	b292      	uxth	r2, r2
 801a5f0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801a5f4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801a5f8:	f102 0c01 	add.w	ip, r2, #1
 801a5fc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a600:	b280      	uxth	r0, r0
 801a602:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a606:	ea49 0c02 	orr.w	ip, r9, r2
 801a60a:	f100 0901 	add.w	r9, r0, #1
 801a60e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801a612:	0940      	lsrs	r0, r0, #5
 801a614:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a618:	ea4c 0c00 	orr.w	ip, ip, r0
 801a61c:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 801a620:	f10e 0e01 	add.w	lr, lr, #1
 801a624:	e7bb      	b.n	801a59e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801a626:	9a07      	ldr	r2, [sp, #28]
 801a628:	8812      	ldrh	r2, [r2, #0]
 801a62a:	1b52      	subs	r2, r2, r5
 801a62c:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801a630:	4414      	add	r4, r2
 801a632:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801a636:	1b52      	subs	r2, r2, r5
 801a638:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801a63c:	4416      	add	r6, r2
 801a63e:	f10b 0b01 	add.w	fp, fp, #1
 801a642:	e7a8      	b.n	801a596 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 801a644:	4b03      	ldr	r3, [pc, #12]	; (801a654 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 801a646:	6818      	ldr	r0, [r3, #0]
 801a648:	6803      	ldr	r3, [r0, #0]
 801a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a64c:	4798      	blx	r3
 801a64e:	e762      	b.n	801a516 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801a650:	2002b082 	.word	0x2002b082
 801a654:	2002b088 	.word	0x2002b088

0801a658 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a658:	b510      	push	{r4, lr}
 801a65a:	2104      	movs	r1, #4
 801a65c:	4604      	mov	r4, r0
 801a65e:	f008 ff63 	bl	8023528 <_ZdlPvj>
 801a662:	4620      	mov	r0, r4
 801a664:	bd10      	pop	{r4, pc}

0801a666 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a666:	b510      	push	{r4, lr}
 801a668:	2104      	movs	r1, #4
 801a66a:	4604      	mov	r4, r0
 801a66c:	f008 ff5c 	bl	8023528 <_ZdlPvj>
 801a670:	4620      	mov	r0, r4
 801a672:	bd10      	pop	{r4, pc}

0801a674 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a674:	b510      	push	{r4, lr}
 801a676:	2104      	movs	r1, #4
 801a678:	4604      	mov	r4, r0
 801a67a:	f008 ff55 	bl	8023528 <_ZdlPvj>
 801a67e:	4620      	mov	r0, r4
 801a680:	bd10      	pop	{r4, pc}

0801a682 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a682:	b510      	push	{r4, lr}
 801a684:	2104      	movs	r1, #4
 801a686:	4604      	mov	r4, r0
 801a688:	f008 ff4e 	bl	8023528 <_ZdlPvj>
 801a68c:	4620      	mov	r0, r4
 801a68e:	bd10      	pop	{r4, pc}

0801a690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a690:	b510      	push	{r4, lr}
 801a692:	2104      	movs	r1, #4
 801a694:	4604      	mov	r4, r0
 801a696:	f008 ff47 	bl	8023528 <_ZdlPvj>
 801a69a:	4620      	mov	r0, r4
 801a69c:	bd10      	pop	{r4, pc}

0801a69e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a69e:	b510      	push	{r4, lr}
 801a6a0:	2104      	movs	r1, #4
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	f008 ff40 	bl	8023528 <_ZdlPvj>
 801a6a8:	4620      	mov	r0, r4
 801a6aa:	bd10      	pop	{r4, pc}

0801a6ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a6ac:	b510      	push	{r4, lr}
 801a6ae:	2104      	movs	r1, #4
 801a6b0:	4604      	mov	r4, r0
 801a6b2:	f008 ff39 	bl	8023528 <_ZdlPvj>
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	bd10      	pop	{r4, pc}

0801a6ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a6ba:	b510      	push	{r4, lr}
 801a6bc:	2104      	movs	r1, #4
 801a6be:	4604      	mov	r4, r0
 801a6c0:	f008 ff32 	bl	8023528 <_ZdlPvj>
 801a6c4:	4620      	mov	r0, r4
 801a6c6:	bd10      	pop	{r4, pc}

0801a6c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a6c8:	b510      	push	{r4, lr}
 801a6ca:	2104      	movs	r1, #4
 801a6cc:	4604      	mov	r4, r0
 801a6ce:	f008 ff2b 	bl	8023528 <_ZdlPvj>
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	bd10      	pop	{r4, pc}

0801a6d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a6d6:	b510      	push	{r4, lr}
 801a6d8:	2104      	movs	r1, #4
 801a6da:	4604      	mov	r4, r0
 801a6dc:	f008 ff24 	bl	8023528 <_ZdlPvj>
 801a6e0:	4620      	mov	r0, r4
 801a6e2:	bd10      	pop	{r4, pc}

0801a6e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a6e4:	b510      	push	{r4, lr}
 801a6e6:	2104      	movs	r1, #4
 801a6e8:	4604      	mov	r4, r0
 801a6ea:	f008 ff1d 	bl	8023528 <_ZdlPvj>
 801a6ee:	4620      	mov	r0, r4
 801a6f0:	bd10      	pop	{r4, pc}

0801a6f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a6f2:	b510      	push	{r4, lr}
 801a6f4:	2104      	movs	r1, #4
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	f008 ff16 	bl	8023528 <_ZdlPvj>
 801a6fc:	4620      	mov	r0, r4
 801a6fe:	bd10      	pop	{r4, pc}

0801a700 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a700:	b510      	push	{r4, lr}
 801a702:	2104      	movs	r1, #4
 801a704:	4604      	mov	r4, r0
 801a706:	f008 ff0f 	bl	8023528 <_ZdlPvj>
 801a70a:	4620      	mov	r0, r4
 801a70c:	bd10      	pop	{r4, pc}

0801a70e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a70e:	b510      	push	{r4, lr}
 801a710:	2104      	movs	r1, #4
 801a712:	4604      	mov	r4, r0
 801a714:	f008 ff08 	bl	8023528 <_ZdlPvj>
 801a718:	4620      	mov	r0, r4
 801a71a:	bd10      	pop	{r4, pc}

0801a71c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a71c:	b510      	push	{r4, lr}
 801a71e:	2104      	movs	r1, #4
 801a720:	4604      	mov	r4, r0
 801a722:	f008 ff01 	bl	8023528 <_ZdlPvj>
 801a726:	4620      	mov	r0, r4
 801a728:	bd10      	pop	{r4, pc}

0801a72a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a72a:	b510      	push	{r4, lr}
 801a72c:	2104      	movs	r1, #4
 801a72e:	4604      	mov	r4, r0
 801a730:	f008 fefa 	bl	8023528 <_ZdlPvj>
 801a734:	4620      	mov	r0, r4
 801a736:	bd10      	pop	{r4, pc}

0801a738 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a738:	b510      	push	{r4, lr}
 801a73a:	2104      	movs	r1, #4
 801a73c:	4604      	mov	r4, r0
 801a73e:	f008 fef3 	bl	8023528 <_ZdlPvj>
 801a742:	4620      	mov	r0, r4
 801a744:	bd10      	pop	{r4, pc}

0801a746 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a746:	b510      	push	{r4, lr}
 801a748:	2104      	movs	r1, #4
 801a74a:	4604      	mov	r4, r0
 801a74c:	f008 feec 	bl	8023528 <_ZdlPvj>
 801a750:	4620      	mov	r0, r4
 801a752:	bd10      	pop	{r4, pc}

0801a754 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a754:	b510      	push	{r4, lr}
 801a756:	2104      	movs	r1, #4
 801a758:	4604      	mov	r4, r0
 801a75a:	f008 fee5 	bl	8023528 <_ZdlPvj>
 801a75e:	4620      	mov	r0, r4
 801a760:	bd10      	pop	{r4, pc}

0801a762 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a762:	b510      	push	{r4, lr}
 801a764:	2104      	movs	r1, #4
 801a766:	4604      	mov	r4, r0
 801a768:	f008 fede 	bl	8023528 <_ZdlPvj>
 801a76c:	4620      	mov	r0, r4
 801a76e:	bd10      	pop	{r4, pc}

0801a770 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a770:	b510      	push	{r4, lr}
 801a772:	2104      	movs	r1, #4
 801a774:	4604      	mov	r4, r0
 801a776:	f008 fed7 	bl	8023528 <_ZdlPvj>
 801a77a:	4620      	mov	r0, r4
 801a77c:	bd10      	pop	{r4, pc}

0801a77e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a77e:	b510      	push	{r4, lr}
 801a780:	2104      	movs	r1, #4
 801a782:	4604      	mov	r4, r0
 801a784:	f008 fed0 	bl	8023528 <_ZdlPvj>
 801a788:	4620      	mov	r0, r4
 801a78a:	bd10      	pop	{r4, pc}

0801a78c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a78c:	b510      	push	{r4, lr}
 801a78e:	2104      	movs	r1, #4
 801a790:	4604      	mov	r4, r0
 801a792:	f008 fec9 	bl	8023528 <_ZdlPvj>
 801a796:	4620      	mov	r0, r4
 801a798:	bd10      	pop	{r4, pc}

0801a79a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a79a:	b510      	push	{r4, lr}
 801a79c:	2104      	movs	r1, #4
 801a79e:	4604      	mov	r4, r0
 801a7a0:	f008 fec2 	bl	8023528 <_ZdlPvj>
 801a7a4:	4620      	mov	r0, r4
 801a7a6:	bd10      	pop	{r4, pc}

0801a7a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a7a8:	b510      	push	{r4, lr}
 801a7aa:	2104      	movs	r1, #4
 801a7ac:	4604      	mov	r4, r0
 801a7ae:	f008 febb 	bl	8023528 <_ZdlPvj>
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	bd10      	pop	{r4, pc}

0801a7b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a7b6:	b510      	push	{r4, lr}
 801a7b8:	2104      	movs	r1, #4
 801a7ba:	4604      	mov	r4, r0
 801a7bc:	f008 feb4 	bl	8023528 <_ZdlPvj>
 801a7c0:	4620      	mov	r0, r4
 801a7c2:	bd10      	pop	{r4, pc}

0801a7c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a7c4:	b510      	push	{r4, lr}
 801a7c6:	2104      	movs	r1, #4
 801a7c8:	4604      	mov	r4, r0
 801a7ca:	f008 fead 	bl	8023528 <_ZdlPvj>
 801a7ce:	4620      	mov	r0, r4
 801a7d0:	bd10      	pop	{r4, pc}

0801a7d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a7d2:	b510      	push	{r4, lr}
 801a7d4:	2104      	movs	r1, #4
 801a7d6:	4604      	mov	r4, r0
 801a7d8:	f008 fea6 	bl	8023528 <_ZdlPvj>
 801a7dc:	4620      	mov	r0, r4
 801a7de:	bd10      	pop	{r4, pc}

0801a7e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e4:	460e      	mov	r6, r1
 801a7e6:	b08b      	sub	sp, #44	; 0x2c
 801a7e8:	4615      	mov	r5, r2
 801a7ea:	461c      	mov	r4, r3
 801a7ec:	b323      	cbz	r3, 801a838 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801a7ee:	4608      	mov	r0, r1
 801a7f0:	f7f8 f9f8 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7f4:	bb00      	cbnz	r0, 801a838 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801a7f6:	6830      	ldr	r0, [r6, #0]
 801a7f8:	6871      	ldr	r1, [r6, #4]
 801a7fa:	4e55      	ldr	r6, [pc, #340]	; (801a950 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 801a7fc:	ab08      	add	r3, sp, #32
 801a7fe:	c303      	stmia	r3!, {r0, r1}
 801a800:	a808      	add	r0, sp, #32
 801a802:	f7fa ff73 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a806:	6830      	ldr	r0, [r6, #0]
 801a808:	6803      	ldr	r3, [r0, #0]
 801a80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a80c:	4798      	blx	r3
 801a80e:	2cff      	cmp	r4, #255	; 0xff
 801a810:	d015      	beq.n	801a83e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801a812:	f010 0f08 	tst.w	r0, #8
 801a816:	d015      	beq.n	801a844 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 801a818:	6830      	ldr	r0, [r6, #0]
 801a81a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a81e:	6801      	ldr	r1, [r0, #0]
 801a820:	9402      	str	r4, [sp, #8]
 801a822:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801a826:	9401      	str	r4, [sp, #4]
 801a828:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801a82c:	9400      	str	r4, [sp, #0]
 801a82e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801a830:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a834:	4629      	mov	r1, r5
 801a836:	47a0      	blx	r4
 801a838:	b00b      	add	sp, #44	; 0x2c
 801a83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a83e:	f010 0f02 	tst.w	r0, #2
 801a842:	e7e8      	b.n	801a816 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801a844:	6830      	ldr	r0, [r6, #0]
 801a846:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801a84a:	6803      	ldr	r3, [r0, #0]
 801a84c:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801a850:	6a1b      	ldr	r3, [r3, #32]
 801a852:	4798      	blx	r3
 801a854:	4a3f      	ldr	r2, [pc, #252]	; (801a954 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 801a856:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801a85a:	8816      	ldrh	r6, [r2, #0]
 801a85c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a860:	2cff      	cmp	r4, #255	; 0xff
 801a862:	fb06 1303 	mla	r3, r6, r3, r1
 801a866:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a86a:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801a86e:	4616      	mov	r6, r2
 801a870:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 801a874:	d10a      	bne.n	801a88c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 801a876:	0049      	lsls	r1, r1, #1
 801a878:	2200      	movs	r2, #0
 801a87a:	454a      	cmp	r2, r9
 801a87c:	da62      	bge.n	801a944 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801a87e:	2300      	movs	r3, #0
 801a880:	4543      	cmp	r3, r8
 801a882:	da58      	bge.n	801a936 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x156>
 801a884:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801a888:	3301      	adds	r3, #1
 801a88a:	e7f9      	b.n	801a880 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 801a88c:	122b      	asrs	r3, r5, #8
 801a88e:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 801a892:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801a896:	b2a4      	uxth	r4, r4
 801a898:	4363      	muls	r3, r4
 801a89a:	9305      	str	r3, [sp, #20]
 801a89c:	f3c5 06cc 	ubfx	r6, r5, #3, #13
 801a8a0:	00eb      	lsls	r3, r5, #3
 801a8a2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a8a6:	b2db      	uxtb	r3, r3
 801a8a8:	0049      	lsls	r1, r1, #1
 801a8aa:	4366      	muls	r6, r4
 801a8ac:	4363      	muls	r3, r4
 801a8ae:	9106      	str	r1, [sp, #24]
 801a8b0:	f04f 0c00 	mov.w	ip, #0
 801a8b4:	b2bf      	uxth	r7, r7
 801a8b6:	9207      	str	r2, [sp, #28]
 801a8b8:	45cc      	cmp	ip, r9
 801a8ba:	da43      	bge.n	801a944 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801a8bc:	4682      	mov	sl, r0
 801a8be:	f04f 0e00 	mov.w	lr, #0
 801a8c2:	45c6      	cmp	lr, r8
 801a8c4:	da2d      	bge.n	801a922 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x142>
 801a8c6:	f8ba 2000 	ldrh.w	r2, [sl]
 801a8ca:	9905      	ldr	r1, [sp, #20]
 801a8cc:	1214      	asrs	r4, r2, #8
 801a8ce:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801a8d2:	fb14 f407 	smulbb	r4, r4, r7
 801a8d6:	440c      	add	r4, r1
 801a8d8:	10d1      	asrs	r1, r2, #3
 801a8da:	00d2      	lsls	r2, r2, #3
 801a8dc:	b2d2      	uxtb	r2, r2
 801a8de:	fb12 f207 	smulbb	r2, r2, r7
 801a8e2:	b2a4      	uxth	r4, r4
 801a8e4:	441a      	add	r2, r3
 801a8e6:	b292      	uxth	r2, r2
 801a8e8:	1c65      	adds	r5, r4, #1
 801a8ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a8ee:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801a8f2:	fb11 f107 	smulbb	r1, r1, r7
 801a8f6:	1c55      	adds	r5, r2, #1
 801a8f8:	4431      	add	r1, r6
 801a8fa:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801a8fe:	b289      	uxth	r1, r1
 801a900:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a904:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801a908:	4314      	orrs	r4, r2
 801a90a:	1c4a      	adds	r2, r1, #1
 801a90c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801a910:	0949      	lsrs	r1, r1, #5
 801a912:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a916:	430c      	orrs	r4, r1
 801a918:	f82a 4b02 	strh.w	r4, [sl], #2
 801a91c:	f10e 0e01 	add.w	lr, lr, #1
 801a920:	e7cf      	b.n	801a8c2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe2>
 801a922:	9a07      	ldr	r2, [sp, #28]
 801a924:	9906      	ldr	r1, [sp, #24]
 801a926:	8812      	ldrh	r2, [r2, #0]
 801a928:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 801a92c:	440a      	add	r2, r1
 801a92e:	4410      	add	r0, r2
 801a930:	f10c 0c01 	add.w	ip, ip, #1
 801a934:	e7c0      	b.n	801a8b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd8>
 801a936:	8833      	ldrh	r3, [r6, #0]
 801a938:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 801a93c:	440b      	add	r3, r1
 801a93e:	4418      	add	r0, r3
 801a940:	3201      	adds	r2, #1
 801a942:	e79a      	b.n	801a87a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 801a944:	4b02      	ldr	r3, [pc, #8]	; (801a950 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 801a946:	6818      	ldr	r0, [r3, #0]
 801a948:	6803      	ldr	r3, [r0, #0]
 801a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a94c:	4798      	blx	r3
 801a94e:	e773      	b.n	801a838 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801a950:	2002b088 	.word	0x2002b088
 801a954:	2002b082 	.word	0x2002b082

0801a958 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a95c:	4d9b      	ldr	r5, [pc, #620]	; (801abcc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801a95e:	4690      	mov	r8, r2
 801a960:	682a      	ldr	r2, [r5, #0]
 801a962:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801a966:	2a02      	cmp	r2, #2
 801a968:	b08f      	sub	sp, #60	; 0x3c
 801a96a:	4604      	mov	r4, r0
 801a96c:	4689      	mov	r9, r1
 801a96e:	d106      	bne.n	801a97e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801a970:	4b97      	ldr	r3, [pc, #604]	; (801abd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801a972:	4a98      	ldr	r2, [pc, #608]	; (801abd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801a974:	f240 21c2 	movw	r1, #706	; 0x2c2
 801a978:	4897      	ldr	r0, [pc, #604]	; (801abd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801a97a:	f008 fe01 	bl	8023580 <__assert_func>
 801a97e:	ae0e      	add	r6, sp, #56	; 0x38
 801a980:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801a984:	4630      	mov	r0, r6
 801a986:	f7fd facf 	bl	8017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a98a:	6823      	ldr	r3, [r4, #0]
 801a98c:	4607      	mov	r7, r0
 801a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a990:	4620      	mov	r0, r4
 801a992:	4798      	blx	r3
 801a994:	4287      	cmp	r7, r0
 801a996:	d004      	beq.n	801a9a2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801a998:	4b90      	ldr	r3, [pc, #576]	; (801abdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801a99a:	4a8e      	ldr	r2, [pc, #568]	; (801abd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801a99c:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 801a9a0:	e7ea      	b.n	801a978 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801a9a2:	4630      	mov	r0, r6
 801a9a4:	f7fd fa3c 	bl	8017e20 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a9a8:	4607      	mov	r7, r0
 801a9aa:	b920      	cbnz	r0, 801a9b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801a9ac:	4b8c      	ldr	r3, [pc, #560]	; (801abe0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801a9ae:	4a89      	ldr	r2, [pc, #548]	; (801abd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801a9b0:	f240 21c6 	movw	r1, #710	; 0x2c6
 801a9b4:	e7e0      	b.n	801a978 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801a9b6:	f8d8 0000 	ldr.w	r0, [r8]
 801a9ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a9be:	f9b8 a000 	ldrsh.w	sl, [r8]
 801a9c2:	ab06      	add	r3, sp, #24
 801a9c4:	c303      	stmia	r3!, {r0, r1}
 801a9c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a9ca:	f8d9 0000 	ldr.w	r0, [r9]
 801a9ce:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801a9d2:	ab08      	add	r3, sp, #32
 801a9d4:	c303      	stmia	r3!, {r0, r1}
 801a9d6:	4630      	mov	r0, r6
 801a9d8:	f7fd f91a 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a9dc:	4680      	mov	r8, r0
 801a9de:	4630      	mov	r0, r6
 801a9e0:	f7fd f950 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a9e4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801a9e8:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801a9ec:	f10d 0920 	add.w	r9, sp, #32
 801a9f0:	a806      	add	r0, sp, #24
 801a9f2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801a9f6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801a9fa:	f7fa fe77 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a9fe:	4648      	mov	r0, r9
 801aa00:	f7fa fe74 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa04:	a80a      	add	r0, sp, #40	; 0x28
 801aa06:	f7fa fe71 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa0a:	4e76      	ldr	r6, [pc, #472]	; (801abe4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801aa0c:	4b76      	ldr	r3, [pc, #472]	; (801abe8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801aa0e:	f9b6 2000 	ldrsh.w	r2, [r6]
 801aa12:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa16:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801aa1a:	2100      	movs	r1, #0
 801aa1c:	910c      	str	r1, [sp, #48]	; 0x30
 801aa1e:	4648      	mov	r0, r9
 801aa20:	a90c      	add	r1, sp, #48	; 0x30
 801aa22:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801aa26:	f7f8 f899 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 801aa2a:	4648      	mov	r0, r9
 801aa2c:	f7f8 f8da 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa30:	2800      	cmp	r0, #0
 801aa32:	f040 80bd 	bne.w	801abb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801aa36:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801aa3a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801aa3e:	4288      	cmp	r0, r1
 801aa40:	db37      	blt.n	801aab2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801aa42:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801aa46:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801aa4a:	429a      	cmp	r2, r3
 801aa4c:	db31      	blt.n	801aab2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801aa4e:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801aa52:	4460      	add	r0, ip
 801aa54:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801aa58:	4461      	add	r1, ip
 801aa5a:	b200      	sxth	r0, r0
 801aa5c:	b209      	sxth	r1, r1
 801aa5e:	4288      	cmp	r0, r1
 801aa60:	dc27      	bgt.n	801aab2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801aa62:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801aa66:	440a      	add	r2, r1
 801aa68:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801aa6c:	440b      	add	r3, r1
 801aa6e:	b212      	sxth	r2, r2
 801aa70:	b21b      	sxth	r3, r3
 801aa72:	429a      	cmp	r2, r3
 801aa74:	dc1d      	bgt.n	801aab2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801aa76:	6823      	ldr	r3, [r4, #0]
 801aa78:	4620      	mov	r0, r4
 801aa7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa7c:	4798      	blx	r3
 801aa7e:	4682      	mov	sl, r0
 801aa80:	6828      	ldr	r0, [r5, #0]
 801aa82:	6803      	ldr	r3, [r0, #0]
 801aa84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa86:	4798      	blx	r3
 801aa88:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801aa8c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801aa90:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801aa94:	1a9b      	subs	r3, r3, r2
 801aa96:	b29b      	uxth	r3, r3
 801aa98:	b21c      	sxth	r4, r3
 801aa9a:	2c00      	cmp	r4, #0
 801aa9c:	dc0e      	bgt.n	801aabc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801aa9e:	bf1f      	itttt	ne
 801aaa0:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801aaa4:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801aaa8:	189b      	addne	r3, r3, r2
 801aaaa:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801aaae:	463c      	mov	r4, r7
 801aab0:	e00a      	b.n	801aac8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 801aab2:	4b4e      	ldr	r3, [pc, #312]	; (801abec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801aab4:	4a47      	ldr	r2, [pc, #284]	; (801abd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801aab6:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 801aaba:	e75d      	b.n	801a978 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801aabc:	ebab 0303 	sub.w	r3, fp, r3
 801aac0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 801aac4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801aac8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801aacc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801aad0:	1a5b      	subs	r3, r3, r1
 801aad2:	b29b      	uxth	r3, r3
 801aad4:	b21a      	sxth	r2, r3
 801aad6:	2a00      	cmp	r2, #0
 801aad8:	dd4a      	ble.n	801ab70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 801aada:	fb02 f20b 	mul.w	r2, r2, fp
 801aade:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801aae2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801aae6:	1ad3      	subs	r3, r2, r3
 801aae8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801aaec:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	dd5d      	ble.n	801abb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801aaf4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801aaf8:	f1bc 0f00 	cmp.w	ip, #0
 801aafc:	dd58      	ble.n	801abb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801aafe:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ab02:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ab06:	fb0a f801 	mul.w	r8, sl, r1
 801ab0a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801ab0e:	4480      	add	r8, r0
 801ab10:	8830      	ldrh	r0, [r6, #0]
 801ab12:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801ab16:	42b3      	cmp	r3, r6
 801ab18:	bfa8      	it	ge
 801ab1a:	4633      	movge	r3, r6
 801ab1c:	1a82      	subs	r2, r0, r2
 801ab1e:	4293      	cmp	r3, r2
 801ab20:	bfa8      	it	ge
 801ab22:	4613      	movge	r3, r2
 801ab24:	4a30      	ldr	r2, [pc, #192]	; (801abe8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801ab26:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801ab2a:	8812      	ldrh	r2, [r2, #0]
 801ab2c:	4566      	cmp	r6, ip
 801ab2e:	eba2 0101 	sub.w	r1, r2, r1
 801ab32:	bfa8      	it	ge
 801ab34:	4666      	movge	r6, ip
 801ab36:	428e      	cmp	r6, r1
 801ab38:	4632      	mov	r2, r6
 801ab3a:	bfa8      	it	ge
 801ab3c:	460a      	movge	r2, r1
 801ab3e:	4298      	cmp	r0, r3
 801ab40:	9202      	str	r2, [sp, #8]
 801ab42:	d01e      	beq.n	801ab82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 801ab44:	005b      	lsls	r3, r3, #1
 801ab46:	9303      	str	r3, [sp, #12]
 801ab48:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801ab4c:	f04f 0900 	mov.w	r9, #0
 801ab50:	9b02      	ldr	r3, [sp, #8]
 801ab52:	454b      	cmp	r3, r9
 801ab54:	dd2c      	ble.n	801abb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801ab56:	6828      	ldr	r0, [r5, #0]
 801ab58:	6803      	ldr	r3, [r0, #0]
 801ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab5c:	4642      	mov	r2, r8
 801ab5e:	461e      	mov	r6, r3
 801ab60:	4621      	mov	r1, r4
 801ab62:	9b03      	ldr	r3, [sp, #12]
 801ab64:	47b0      	blx	r6
 801ab66:	44d0      	add	r8, sl
 801ab68:	445c      	add	r4, fp
 801ab6a:	f109 0901 	add.w	r9, r9, #1
 801ab6e:	e7ef      	b.n	801ab50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 801ab70:	bf1f      	itttt	ne
 801ab72:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801ab76:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 801ab7a:	189b      	addne	r3, r3, r2
 801ab7c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801ab80:	e7b4      	b.n	801aaec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 801ab82:	4558      	cmp	r0, fp
 801ab84:	d1de      	bne.n	801ab44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 801ab86:	6828      	ldr	r0, [r5, #0]
 801ab88:	6803      	ldr	r3, [r0, #0]
 801ab8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab8c:	4798      	blx	r3
 801ab8e:	07c3      	lsls	r3, r0, #31
 801ab90:	d512      	bpl.n	801abb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 801ab92:	6828      	ldr	r0, [r5, #0]
 801ab94:	9b02      	ldr	r3, [sp, #8]
 801ab96:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801ab9a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ab9e:	6803      	ldr	r3, [r0, #0]
 801aba0:	f8cd b000 	str.w	fp, [sp]
 801aba4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801aba6:	e899 0006 	ldmia.w	r9, {r1, r2}
 801abaa:	4623      	mov	r3, r4
 801abac:	47a8      	blx	r5
 801abae:	4607      	mov	r7, r0
 801abb0:	4638      	mov	r0, r7
 801abb2:	b00f      	add	sp, #60	; 0x3c
 801abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abb8:	6828      	ldr	r0, [r5, #0]
 801abba:	6803      	ldr	r3, [r0, #0]
 801abbc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801abbe:	9b02      	ldr	r3, [sp, #8]
 801abc0:	4642      	mov	r2, r8
 801abc2:	fb03 f30a 	mul.w	r3, r3, sl
 801abc6:	4621      	mov	r1, r4
 801abc8:	47a8      	blx	r5
 801abca:	e7f1      	b.n	801abb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801abcc:	2002b088 	.word	0x2002b088
 801abd0:	0802871f 	.word	0x0802871f
 801abd4:	08028f63 	.word	0x08028f63
 801abd8:	080287d3 	.word	0x080287d3
 801abdc:	08028805 	.word	0x08028805
 801abe0:	0802885a 	.word	0x0802885a
 801abe4:	2002b082 	.word	0x2002b082
 801abe8:	2002b084 	.word	0x2002b084
 801abec:	08028898 	.word	0x08028898

0801abf0 <_ZN8touchgfx8LCD16bppC1Ev>:
 801abf0:	2200      	movs	r2, #0
 801abf2:	4910      	ldr	r1, [pc, #64]	; (801ac34 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801abf4:	6042      	str	r2, [r0, #4]
 801abf6:	6001      	str	r1, [r0, #0]
 801abf8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801abfc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ac00:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ac04:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ac08:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ac0c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ac10:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ac14:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ac18:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801ac1c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801ac20:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801ac24:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801ac28:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801ac2c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801ac30:	4770      	bx	lr
 801ac32:	bf00      	nop
 801ac34:	08028bdc 	.word	0x08028bdc

0801ac38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac3c:	460c      	mov	r4, r1
 801ac3e:	b08d      	sub	sp, #52	; 0x34
 801ac40:	4682      	mov	sl, r0
 801ac42:	6808      	ldr	r0, [r1, #0]
 801ac44:	6849      	ldr	r1, [r1, #4]
 801ac46:	469b      	mov	fp, r3
 801ac48:	ab08      	add	r3, sp, #32
 801ac4a:	c303      	stmia	r3!, {r0, r1}
 801ac4c:	6810      	ldr	r0, [r2, #0]
 801ac4e:	6851      	ldr	r1, [r2, #4]
 801ac50:	ab0a      	add	r3, sp, #40	; 0x28
 801ac52:	c303      	stmia	r3!, {r0, r1}
 801ac54:	a808      	add	r0, sp, #32
 801ac56:	f7fa fd49 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac5a:	4621      	mov	r1, r4
 801ac5c:	a80a      	add	r0, sp, #40	; 0x28
 801ac5e:	f7fa fd2d 	bl	80156bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ac62:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ac66:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ac6a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ac6e:	4c60      	ldr	r4, [pc, #384]	; (801adf0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801ac70:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801ac74:	6820      	ldr	r0, [r4, #0]
 801ac76:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 801ac7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ac7e:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 801ac82:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ac86:	440a      	add	r2, r1
 801ac88:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ac8c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ac90:	4413      	add	r3, r2
 801ac92:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ac96:	6803      	ldr	r3, [r0, #0]
 801ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac9a:	4798      	blx	r3
 801ac9c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801aca0:	d119      	bne.n	801acd6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801aca2:	f010 0f20 	tst.w	r0, #32
 801aca6:	6820      	ldr	r0, [r4, #0]
 801aca8:	d018      	beq.n	801acdc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801acaa:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801acae:	6801      	ldr	r1, [r0, #0]
 801acb0:	9402      	str	r4, [sp, #8]
 801acb2:	fa1f f489 	uxth.w	r4, r9
 801acb6:	9401      	str	r4, [sp, #4]
 801acb8:	fa1f f488 	uxth.w	r4, r8
 801acbc:	f8cd b00c 	str.w	fp, [sp, #12]
 801acc0:	9400      	str	r4, [sp, #0]
 801acc2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801acc4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801acc8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801accc:	4651      	mov	r1, sl
 801acce:	47a0      	blx	r4
 801acd0:	b00d      	add	sp, #52	; 0x34
 801acd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801acda:	e7e4      	b.n	801aca6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801acdc:	6803      	ldr	r3, [r0, #0]
 801acde:	6a1b      	ldr	r3, [r3, #32]
 801ace0:	4798      	blx	r3
 801ace2:	4a44      	ldr	r2, [pc, #272]	; (801adf4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 801ace4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801ace8:	8813      	ldrh	r3, [r2, #0]
 801acea:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 801acee:	9207      	str	r2, [sp, #28]
 801acf0:	fb04 1303 	mla	r3, r4, r3, r1
 801acf4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801acf8:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 801acfc:	0099      	lsls	r1, r3, #2
 801acfe:	005b      	lsls	r3, r3, #1
 801ad00:	9106      	str	r1, [sp, #24]
 801ad02:	9305      	str	r3, [sp, #20]
 801ad04:	f04f 0c00 	mov.w	ip, #0
 801ad08:	45cc      	cmp	ip, r9
 801ad0a:	da6b      	bge.n	801ade4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	4543      	cmp	r3, r8
 801ad10:	da55      	bge.n	801adbe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 801ad12:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 801ad16:	0e25      	lsrs	r5, r4, #24
 801ad18:	d013      	beq.n	801ad42 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801ad1a:	2dff      	cmp	r5, #255	; 0xff
 801ad1c:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801ad20:	d111      	bne.n	801ad46 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801ad22:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ad26:	d10e      	bne.n	801ad46 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801ad28:	0962      	lsrs	r2, r4, #5
 801ad2a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801ad2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ad32:	f027 0707 	bic.w	r7, r7, #7
 801ad36:	4317      	orrs	r7, r2
 801ad38:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ad3c:	433c      	orrs	r4, r7
 801ad3e:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 801ad42:	3301      	adds	r3, #1
 801ad44:	e7e3      	b.n	801ad0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 801ad46:	fb0b f505 	mul.w	r5, fp, r5
 801ad4a:	1c6a      	adds	r2, r5, #1
 801ad4c:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 801ad50:	eb02 2225 	add.w	r2, r2, r5, asr #8
 801ad54:	1212      	asrs	r2, r2, #8
 801ad56:	fa1f fe82 	uxth.w	lr, r2
 801ad5a:	120e      	asrs	r6, r1, #8
 801ad5c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801ad60:	43d2      	mvns	r2, r2
 801ad62:	b2d2      	uxtb	r2, r2
 801ad64:	fb15 f50e 	smulbb	r5, r5, lr
 801ad68:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ad6c:	fb06 5602 	mla	r6, r6, r2, r5
 801ad70:	b2e4      	uxtb	r4, r4
 801ad72:	10cd      	asrs	r5, r1, #3
 801ad74:	00c9      	lsls	r1, r1, #3
 801ad76:	b2c9      	uxtb	r1, r1
 801ad78:	fb14 f40e 	smulbb	r4, r4, lr
 801ad7c:	fb01 4402 	mla	r4, r1, r2, r4
 801ad80:	b2ff      	uxtb	r7, r7
 801ad82:	b2b6      	uxth	r6, r6
 801ad84:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ad88:	b2a4      	uxth	r4, r4
 801ad8a:	fb17 f70e 	smulbb	r7, r7, lr
 801ad8e:	fb05 7702 	mla	r7, r5, r2, r7
 801ad92:	1c72      	adds	r2, r6, #1
 801ad94:	1c65      	adds	r5, r4, #1
 801ad96:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801ad9a:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801ad9e:	b2bf      	uxth	r7, r7
 801ada0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ada4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ada8:	432e      	orrs	r6, r5
 801adaa:	1c7d      	adds	r5, r7, #1
 801adac:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801adb0:	097f      	lsrs	r7, r7, #5
 801adb2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801adb6:	433e      	orrs	r6, r7
 801adb8:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 801adbc:	e7c1      	b.n	801ad42 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801adbe:	9b07      	ldr	r3, [sp, #28]
 801adc0:	9a05      	ldr	r2, [sp, #20]
 801adc2:	881b      	ldrh	r3, [r3, #0]
 801adc4:	eba3 0308 	sub.w	r3, r3, r8
 801adc8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801adcc:	4418      	add	r0, r3
 801adce:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801add2:	9a06      	ldr	r2, [sp, #24]
 801add4:	eba3 0308 	sub.w	r3, r3, r8
 801add8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801addc:	449a      	add	sl, r3
 801adde:	f10c 0c01 	add.w	ip, ip, #1
 801ade2:	e791      	b.n	801ad08 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801ade4:	4b02      	ldr	r3, [pc, #8]	; (801adf0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801ade6:	6818      	ldr	r0, [r3, #0]
 801ade8:	6803      	ldr	r3, [r0, #0]
 801adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adec:	4798      	blx	r3
 801adee:	e76f      	b.n	801acd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801adf0:	2002b088 	.word	0x2002b088
 801adf4:	2002b082 	.word	0x2002b082

0801adf8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801adf8:	b570      	push	{r4, r5, r6, lr}
 801adfa:	9d04      	ldr	r5, [sp, #16]
 801adfc:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801ae00:	460c      	mov	r4, r1
 801ae02:	4619      	mov	r1, r3
 801ae04:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ae08:	2a0c      	cmp	r2, #12
 801ae0a:	d820      	bhi.n	801ae4e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801ae0c:	e8df f002 	tbb	[pc, r2]
 801ae10:	18121807 	.word	0x18121807
 801ae14:	18181818 	.word	0x18181818
 801ae18:	18181818 	.word	0x18181818
 801ae1c:	18          	.byte	0x18
 801ae1d:	00          	.byte	0x00
 801ae1e:	6802      	ldr	r2, [r0, #0]
 801ae20:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801ae24:	6916      	ldr	r6, [r2, #16]
 801ae26:	462b      	mov	r3, r5
 801ae28:	460a      	mov	r2, r1
 801ae2a:	46b4      	mov	ip, r6
 801ae2c:	4621      	mov	r1, r4
 801ae2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae32:	4760      	bx	ip
 801ae34:	462a      	mov	r2, r5
 801ae36:	4620      	mov	r0, r4
 801ae38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae3c:	f7ff befc 	b.w	801ac38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ae40:	4b03      	ldr	r3, [pc, #12]	; (801ae50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801ae42:	4a04      	ldr	r2, [pc, #16]	; (801ae54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801ae44:	4804      	ldr	r0, [pc, #16]	; (801ae58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801ae46:	f240 21bb 	movw	r1, #699	; 0x2bb
 801ae4a:	f008 fb99 	bl	8023580 <__assert_func>
 801ae4e:	bd70      	pop	{r4, r5, r6, pc}
 801ae50:	080288f8 	.word	0x080288f8
 801ae54:	08028fe9 	.word	0x08028fe9
 801ae58:	080287d3 	.word	0x080287d3

0801ae5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ae5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae60:	b093      	sub	sp, #76	; 0x4c
 801ae62:	880f      	ldrh	r7, [r1, #0]
 801ae64:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801ae68:	4681      	mov	r9, r0
 801ae6a:	4688      	mov	r8, r1
 801ae6c:	4615      	mov	r5, r2
 801ae6e:	b12f      	cbz	r7, 801ae7c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801ae70:	4b71      	ldr	r3, [pc, #452]	; (801b038 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801ae72:	4a72      	ldr	r2, [pc, #456]	; (801b03c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801ae74:	4872      	ldr	r0, [pc, #456]	; (801b040 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801ae76:	21ec      	movs	r1, #236	; 0xec
 801ae78:	f008 fb82 	bl	8023580 <__assert_func>
 801ae7c:	6810      	ldr	r0, [r2, #0]
 801ae7e:	6851      	ldr	r1, [r2, #4]
 801ae80:	ac0e      	add	r4, sp, #56	; 0x38
 801ae82:	c403      	stmia	r4!, {r0, r1}
 801ae84:	6818      	ldr	r0, [r3, #0]
 801ae86:	6859      	ldr	r1, [r3, #4]
 801ae88:	ac10      	add	r4, sp, #64	; 0x40
 801ae8a:	c403      	stmia	r4!, {r0, r1}
 801ae8c:	a80e      	add	r0, sp, #56	; 0x38
 801ae8e:	f7fa fc2d 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ae92:	4629      	mov	r1, r5
 801ae94:	a810      	add	r0, sp, #64	; 0x40
 801ae96:	f7fa fc11 	bl	80156bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ae9a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ae9e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801aea2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801aea6:	4d67      	ldr	r5, [pc, #412]	; (801b044 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801aea8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801aeac:	6828      	ldr	r0, [r5, #0]
 801aeae:	4c66      	ldr	r4, [pc, #408]	; (801b048 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 801aeb0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aeb4:	4489      	add	r9, r1
 801aeb6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801aeba:	440a      	add	r2, r1
 801aebc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801aec0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801aec4:	4413      	add	r3, r2
 801aec6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801aeca:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801aece:	930a      	str	r3, [sp, #40]	; 0x28
 801aed0:	6803      	ldr	r3, [r0, #0]
 801aed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aed6:	4798      	blx	r3
 801aed8:	2801      	cmp	r0, #1
 801aeda:	d11d      	bne.n	801af18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 801aedc:	220b      	movs	r2, #11
 801aede:	9708      	str	r7, [sp, #32]
 801aee0:	9207      	str	r2, [sp, #28]
 801aee2:	8822      	ldrh	r2, [r4, #0]
 801aee4:	f8cd a010 	str.w	sl, [sp, #16]
 801aee8:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801aeec:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801aef0:	9203      	str	r2, [sp, #12]
 801aef2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801aef6:	9202      	str	r2, [sp, #8]
 801aef8:	fa1f f28b 	uxth.w	r2, fp
 801aefc:	9201      	str	r2, [sp, #4]
 801aefe:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801af02:	9200      	str	r2, [sp, #0]
 801af04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801af08:	6828      	ldr	r0, [r5, #0]
 801af0a:	4642      	mov	r2, r8
 801af0c:	4649      	mov	r1, r9
 801af0e:	f7f8 fd51 	bl	80139b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801af12:	b013      	add	sp, #76	; 0x4c
 801af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af18:	6828      	ldr	r0, [r5, #0]
 801af1a:	6803      	ldr	r3, [r0, #0]
 801af1c:	6a1b      	ldr	r3, [r3, #32]
 801af1e:	4798      	blx	r3
 801af20:	8823      	ldrh	r3, [r4, #0]
 801af22:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801af26:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801af2a:	fb01 2303 	mla	r3, r1, r3, r2
 801af2e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801af32:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801af36:	930b      	str	r3, [sp, #44]	; 0x2c
 801af38:	005b      	lsls	r3, r3, #1
 801af3a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801af3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af40:	429f      	cmp	r7, r3
 801af42:	da72      	bge.n	801b02a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 801af44:	2100      	movs	r1, #0
 801af46:	4559      	cmp	r1, fp
 801af48:	da5e      	bge.n	801b008 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801af4a:	f819 3001 	ldrb.w	r3, [r9, r1]
 801af4e:	2204      	movs	r2, #4
 801af50:	fb12 2303 	smlabb	r3, r2, r3, r2
 801af54:	f858 2003 	ldr.w	r2, [r8, r3]
 801af58:	0e15      	lsrs	r5, r2, #24
 801af5a:	d013      	beq.n	801af84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801af5c:	2dff      	cmp	r5, #255	; 0xff
 801af5e:	ea4f 2412 	mov.w	r4, r2, lsr #8
 801af62:	d111      	bne.n	801af88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801af64:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801af68:	d10e      	bne.n	801af88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801af6a:	0953      	lsrs	r3, r2, #5
 801af6c:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 801af70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801af74:	f024 0407 	bic.w	r4, r4, #7
 801af78:	431c      	orrs	r4, r3
 801af7a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801af7e:	4314      	orrs	r4, r2
 801af80:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 801af84:	3101      	adds	r1, #1
 801af86:	e7de      	b.n	801af46 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 801af88:	fb0a f505 	mul.w	r5, sl, r5
 801af8c:	1c6b      	adds	r3, r5, #1
 801af8e:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801af92:	eb03 2325 	add.w	r3, r3, r5, asr #8
 801af96:	121b      	asrs	r3, r3, #8
 801af98:	fa1f fe83 	uxth.w	lr, r3
 801af9c:	ea4f 262c 	mov.w	r6, ip, asr #8
 801afa0:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801afa4:	43db      	mvns	r3, r3
 801afa6:	b2db      	uxtb	r3, r3
 801afa8:	fb15 f50e 	smulbb	r5, r5, lr
 801afac:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801afb0:	fb06 5603 	mla	r6, r6, r3, r5
 801afb4:	b2d2      	uxtb	r2, r2
 801afb6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801afba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801afbe:	fa5f fc8c 	uxtb.w	ip, ip
 801afc2:	fb12 f20e 	smulbb	r2, r2, lr
 801afc6:	fb0c 2203 	mla	r2, ip, r3, r2
 801afca:	b2e4      	uxtb	r4, r4
 801afcc:	b2b6      	uxth	r6, r6
 801afce:	fb14 f40e 	smulbb	r4, r4, lr
 801afd2:	b292      	uxth	r2, r2
 801afd4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801afd8:	fb05 4503 	mla	r5, r5, r3, r4
 801afdc:	1c73      	adds	r3, r6, #1
 801afde:	1c54      	adds	r4, r2, #1
 801afe0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801afe4:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801afe8:	b2ad      	uxth	r5, r5
 801afea:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801afee:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801aff2:	4326      	orrs	r6, r4
 801aff4:	1c6c      	adds	r4, r5, #1
 801aff6:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 801affa:	0964      	lsrs	r4, r4, #5
 801affc:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801b000:	4326      	orrs	r6, r4
 801b002:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 801b006:	e7bd      	b.n	801af84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b00a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b00c:	881b      	ldrh	r3, [r3, #0]
 801b00e:	eba3 030b 	sub.w	r3, r3, fp
 801b012:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b016:	4418      	add	r0, r3
 801b018:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801b01c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b01e:	eba3 030b 	sub.w	r3, r3, fp
 801b022:	4413      	add	r3, r2
 801b024:	4499      	add	r9, r3
 801b026:	3701      	adds	r7, #1
 801b028:	e789      	b.n	801af3e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801b02a:	4b06      	ldr	r3, [pc, #24]	; (801b044 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801b02c:	6818      	ldr	r0, [r3, #0]
 801b02e:	6803      	ldr	r3, [r0, #0]
 801b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b032:	4798      	blx	r3
 801b034:	e76d      	b.n	801af12 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 801b036:	bf00      	nop
 801b038:	080286cf 	.word	0x080286cf
 801b03c:	08028dba 	.word	0x08028dba
 801b040:	080287d3 	.word	0x080287d3
 801b044:	2002b088 	.word	0x2002b088
 801b048:	2002b082 	.word	0x2002b082

0801b04c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801b04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b050:	4614      	mov	r4, r2
 801b052:	880a      	ldrh	r2, [r1, #0]
 801b054:	b093      	sub	sp, #76	; 0x4c
 801b056:	2a02      	cmp	r2, #2
 801b058:	4606      	mov	r6, r0
 801b05a:	4689      	mov	r9, r1
 801b05c:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 801b060:	d006      	beq.n	801b070 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801b062:	4b7a      	ldr	r3, [pc, #488]	; (801b24c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801b064:	4a7a      	ldr	r2, [pc, #488]	; (801b250 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801b066:	487b      	ldr	r0, [pc, #492]	; (801b254 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 801b068:	f44f 71a3 	mov.w	r1, #326	; 0x146
 801b06c:	f008 fa88 	bl	8023580 <__assert_func>
 801b070:	2f00      	cmp	r7, #0
 801b072:	d04b      	beq.n	801b10c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801b074:	6820      	ldr	r0, [r4, #0]
 801b076:	6861      	ldr	r1, [r4, #4]
 801b078:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 801b25c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 801b07c:	ad0e      	add	r5, sp, #56	; 0x38
 801b07e:	c503      	stmia	r5!, {r0, r1}
 801b080:	6818      	ldr	r0, [r3, #0]
 801b082:	6859      	ldr	r1, [r3, #4]
 801b084:	ad10      	add	r5, sp, #64	; 0x40
 801b086:	c503      	stmia	r5!, {r0, r1}
 801b088:	a80e      	add	r0, sp, #56	; 0x38
 801b08a:	f7fa fb2f 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b08e:	4621      	mov	r1, r4
 801b090:	a810      	add	r0, sp, #64	; 0x40
 801b092:	f7fa fb13 	bl	80156bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b096:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b09a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801b09e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801b0a2:	f8da 0000 	ldr.w	r0, [sl]
 801b0a6:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 801b0aa:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 801b0ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b0b2:	1874      	adds	r4, r6, r1
 801b0b4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801b0b8:	4e67      	ldr	r6, [pc, #412]	; (801b258 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 801b0ba:	440a      	add	r2, r1
 801b0bc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b0c0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b0c4:	4413      	add	r3, r2
 801b0c6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b0ca:	6803      	ldr	r3, [r0, #0]
 801b0cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b0d0:	4798      	blx	r3
 801b0d2:	2801      	cmp	r0, #1
 801b0d4:	d11d      	bne.n	801b112 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801b0d6:	2200      	movs	r2, #0
 801b0d8:	210b      	movs	r1, #11
 801b0da:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801b0de:	8831      	ldrh	r1, [r6, #0]
 801b0e0:	9704      	str	r7, [sp, #16]
 801b0e2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b0e6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801b0ea:	9203      	str	r2, [sp, #12]
 801b0ec:	fa1f f288 	uxth.w	r2, r8
 801b0f0:	9202      	str	r2, [sp, #8]
 801b0f2:	b2ad      	uxth	r5, r5
 801b0f4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b0f8:	9200      	str	r2, [sp, #0]
 801b0fa:	9501      	str	r5, [sp, #4]
 801b0fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b100:	f8da 0000 	ldr.w	r0, [sl]
 801b104:	464a      	mov	r2, r9
 801b106:	4621      	mov	r1, r4
 801b108:	f7f8 fc54 	bl	80139b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801b10c:	b013      	add	sp, #76	; 0x4c
 801b10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b112:	f8da 0000 	ldr.w	r0, [sl]
 801b116:	6803      	ldr	r3, [r0, #0]
 801b118:	6a1b      	ldr	r3, [r3, #32]
 801b11a:	4798      	blx	r3
 801b11c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b120:	8833      	ldrh	r3, [r6, #0]
 801b122:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b126:	fb01 2303 	mla	r3, r1, r3, r2
 801b12a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b12e:	2fff      	cmp	r7, #255	; 0xff
 801b130:	f109 0304 	add.w	r3, r9, #4
 801b134:	930a      	str	r3, [sp, #40]	; 0x28
 801b136:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801b13a:	d111      	bne.n	801b160 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 801b13c:	b212      	sxth	r2, r2
 801b13e:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 801b142:	2100      	movs	r1, #0
 801b144:	4541      	cmp	r1, r8
 801b146:	da7a      	bge.n	801b23e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801b148:	2300      	movs	r3, #0
 801b14a:	42ab      	cmp	r3, r5
 801b14c:	da6b      	bge.n	801b226 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 801b14e:	f814 c003 	ldrb.w	ip, [r4, r3]
 801b152:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b154:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 801b158:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 801b15c:	3301      	adds	r3, #1
 801b15e:	e7f4      	b.n	801b14a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 801b160:	b213      	sxth	r3, r2
 801b162:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801b166:	930b      	str	r3, [sp, #44]	; 0x2c
 801b168:	005b      	lsls	r3, r3, #1
 801b16a:	930c      	str	r3, [sp, #48]	; 0x30
 801b16c:	f04f 0900 	mov.w	r9, #0
 801b170:	b2ba      	uxth	r2, r7
 801b172:	fa1f fc8c 	uxth.w	ip, ip
 801b176:	960d      	str	r6, [sp, #52]	; 0x34
 801b178:	45c1      	cmp	r9, r8
 801b17a:	da60      	bge.n	801b23e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801b17c:	46a3      	mov	fp, r4
 801b17e:	4682      	mov	sl, r0
 801b180:	ebab 0304 	sub.w	r3, fp, r4
 801b184:	429d      	cmp	r5, r3
 801b186:	dd3e      	ble.n	801b206 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 801b188:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801b18c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b18e:	f8ba 1000 	ldrh.w	r1, [sl]
 801b192:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b196:	120e      	asrs	r6, r1, #8
 801b198:	121f      	asrs	r7, r3, #8
 801b19a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b19e:	fb16 f60c 	smulbb	r6, r6, ip
 801b1a2:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 801b1a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b1aa:	00c9      	lsls	r1, r1, #3
 801b1ac:	fb07 6702 	mla	r7, r7, r2, r6
 801b1b0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b1b4:	10de      	asrs	r6, r3, #3
 801b1b6:	b2c9      	uxtb	r1, r1
 801b1b8:	00db      	lsls	r3, r3, #3
 801b1ba:	fb1e fe0c 	smulbb	lr, lr, ip
 801b1be:	fb11 f10c 	smulbb	r1, r1, ip
 801b1c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b1c6:	b2db      	uxtb	r3, r3
 801b1c8:	b2bf      	uxth	r7, r7
 801b1ca:	fb06 e602 	mla	r6, r6, r2, lr
 801b1ce:	fb03 1302 	mla	r3, r3, r2, r1
 801b1d2:	b2b6      	uxth	r6, r6
 801b1d4:	b29b      	uxth	r3, r3
 801b1d6:	1c79      	adds	r1, r7, #1
 801b1d8:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801b1dc:	f106 0e01 	add.w	lr, r6, #1
 801b1e0:	1c59      	adds	r1, r3, #1
 801b1e2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b1e6:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801b1ea:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b1ee:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801b1f2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801b1f6:	430f      	orrs	r7, r1
 801b1f8:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801b1fc:	ea47 070e 	orr.w	r7, r7, lr
 801b200:	f82a 7b02 	strh.w	r7, [sl], #2
 801b204:	e7bc      	b.n	801b180 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 801b206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b208:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b20a:	881b      	ldrh	r3, [r3, #0]
 801b20c:	1b5b      	subs	r3, r3, r5
 801b20e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801b212:	4418      	add	r0, r3
 801b214:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801b218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b21a:	1b5b      	subs	r3, r3, r5
 801b21c:	440b      	add	r3, r1
 801b21e:	441c      	add	r4, r3
 801b220:	f109 0901 	add.w	r9, r9, #1
 801b224:	e7a8      	b.n	801b178 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 801b226:	8833      	ldrh	r3, [r6, #0]
 801b228:	1b5b      	subs	r3, r3, r5
 801b22a:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801b22e:	4418      	add	r0, r3
 801b230:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801b234:	1b5b      	subs	r3, r3, r5
 801b236:	4413      	add	r3, r2
 801b238:	441c      	add	r4, r3
 801b23a:	3101      	adds	r1, #1
 801b23c:	e782      	b.n	801b144 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 801b23e:	4b07      	ldr	r3, [pc, #28]	; (801b25c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 801b240:	6818      	ldr	r0, [r3, #0]
 801b242:	6803      	ldr	r3, [r0, #0]
 801b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b246:	4798      	blx	r3
 801b248:	e760      	b.n	801b10c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801b24a:	bf00      	nop
 801b24c:	0802858d 	.word	0x0802858d
 801b250:	08028c24 	.word	0x08028c24
 801b254:	080287d3 	.word	0x080287d3
 801b258:	2002b082 	.word	0x2002b082
 801b25c:	2002b088 	.word	0x2002b088

0801b260 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b264:	4616      	mov	r6, r2
 801b266:	880a      	ldrh	r2, [r1, #0]
 801b268:	b093      	sub	sp, #76	; 0x4c
 801b26a:	2a01      	cmp	r2, #1
 801b26c:	4681      	mov	r9, r0
 801b26e:	4688      	mov	r8, r1
 801b270:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801b274:	d006      	beq.n	801b284 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801b276:	4b6c      	ldr	r3, [pc, #432]	; (801b428 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801b278:	4a6c      	ldr	r2, [pc, #432]	; (801b42c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801b27a:	486d      	ldr	r0, [pc, #436]	; (801b430 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801b27c:	f240 11a1 	movw	r1, #417	; 0x1a1
 801b280:	f008 f97e 	bl	8023580 <__assert_func>
 801b284:	f1ba 0f00 	cmp.w	sl, #0
 801b288:	d04a      	beq.n	801b320 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b28a:	6830      	ldr	r0, [r6, #0]
 801b28c:	6871      	ldr	r1, [r6, #4]
 801b28e:	4d69      	ldr	r5, [pc, #420]	; (801b434 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801b290:	ac0e      	add	r4, sp, #56	; 0x38
 801b292:	c403      	stmia	r4!, {r0, r1}
 801b294:	6818      	ldr	r0, [r3, #0]
 801b296:	6859      	ldr	r1, [r3, #4]
 801b298:	ac10      	add	r4, sp, #64	; 0x40
 801b29a:	c403      	stmia	r4!, {r0, r1}
 801b29c:	a80e      	add	r0, sp, #56	; 0x38
 801b29e:	f7fa fa25 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b2a2:	4631      	mov	r1, r6
 801b2a4:	a810      	add	r0, sp, #64	; 0x40
 801b2a6:	f7fa fa09 	bl	80156bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b2aa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b2ae:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801b2b2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801b2b6:	6828      	ldr	r0, [r5, #0]
 801b2b8:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801b2bc:	4c5e      	ldr	r4, [pc, #376]	; (801b438 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801b2be:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b2c2:	4489      	add	r9, r1
 801b2c4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801b2c8:	440a      	add	r2, r1
 801b2ca:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b2ce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b2d2:	4413      	add	r3, r2
 801b2d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b2d8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801b2dc:	930a      	str	r3, [sp, #40]	; 0x28
 801b2de:	6803      	ldr	r3, [r0, #0]
 801b2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2e4:	4798      	blx	r3
 801b2e6:	2801      	cmp	r0, #1
 801b2e8:	d11d      	bne.n	801b326 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801b2ea:	220b      	movs	r2, #11
 801b2ec:	2100      	movs	r1, #0
 801b2ee:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801b2f2:	8822      	ldrh	r2, [r4, #0]
 801b2f4:	f8cd a010 	str.w	sl, [sp, #16]
 801b2f8:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801b2fc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801b300:	9203      	str	r2, [sp, #12]
 801b302:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801b306:	9202      	str	r2, [sp, #8]
 801b308:	b2b6      	uxth	r6, r6
 801b30a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b30e:	9200      	str	r2, [sp, #0]
 801b310:	9601      	str	r6, [sp, #4]
 801b312:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b316:	6828      	ldr	r0, [r5, #0]
 801b318:	4642      	mov	r2, r8
 801b31a:	4649      	mov	r1, r9
 801b31c:	f7f8 fb4a 	bl	80139b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801b320:	b013      	add	sp, #76	; 0x4c
 801b322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b326:	6828      	ldr	r0, [r5, #0]
 801b328:	6803      	ldr	r3, [r0, #0]
 801b32a:	6a1b      	ldr	r3, [r3, #32]
 801b32c:	4798      	blx	r3
 801b32e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b332:	8823      	ldrh	r3, [r4, #0]
 801b334:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b338:	940d      	str	r4, [sp, #52]	; 0x34
 801b33a:	fb01 2303 	mla	r3, r1, r3, r2
 801b33e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b342:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801b346:	930b      	str	r3, [sp, #44]	; 0x2c
 801b348:	ea6f 010a 	mvn.w	r1, sl
 801b34c:	005b      	lsls	r3, r3, #1
 801b34e:	930c      	str	r3, [sp, #48]	; 0x30
 801b350:	f04f 0e00 	mov.w	lr, #0
 801b354:	b2c9      	uxtb	r1, r1
 801b356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b358:	459e      	cmp	lr, r3
 801b35a:	da5f      	bge.n	801b41c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801b35c:	2700      	movs	r7, #0
 801b35e:	fa1f fb8a 	uxth.w	fp, sl
 801b362:	42b7      	cmp	r7, r6
 801b364:	da4a      	bge.n	801b3fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801b366:	f819 3007 	ldrb.w	r3, [r9, r7]
 801b36a:	2203      	movs	r2, #3
 801b36c:	2404      	movs	r4, #4
 801b36e:	fb12 4303 	smlabb	r3, r2, r3, r4
 801b372:	eb08 0403 	add.w	r4, r8, r3
 801b376:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b37a:	78a2      	ldrb	r2, [r4, #2]
 801b37c:	7865      	ldrb	r5, [r4, #1]
 801b37e:	f818 c003 	ldrb.w	ip, [r8, r3]
 801b382:	d10c      	bne.n	801b39e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 801b384:	4b2d      	ldr	r3, [pc, #180]	; (801b43c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801b386:	00ed      	lsls	r5, r5, #3
 801b388:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 801b38c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b390:	432a      	orrs	r2, r5
 801b392:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 801b396:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 801b39a:	3701      	adds	r7, #1
 801b39c:	e7e1      	b.n	801b362 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 801b39e:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 801b3a2:	121c      	asrs	r4, r3, #8
 801b3a4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801b3a8:	fb12 f20b 	smulbb	r2, r2, fp
 801b3ac:	fb04 2201 	mla	r2, r4, r1, r2
 801b3b0:	10dc      	asrs	r4, r3, #3
 801b3b2:	00db      	lsls	r3, r3, #3
 801b3b4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801b3b8:	b2db      	uxtb	r3, r3
 801b3ba:	fb15 f50b 	smulbb	r5, r5, fp
 801b3be:	fb1c fc0b 	smulbb	ip, ip, fp
 801b3c2:	b292      	uxth	r2, r2
 801b3c4:	fb04 5501 	mla	r5, r4, r1, r5
 801b3c8:	fb03 cc01 	mla	ip, r3, r1, ip
 801b3cc:	b2ad      	uxth	r5, r5
 801b3ce:	fa1f fc8c 	uxth.w	ip, ip
 801b3d2:	1c53      	adds	r3, r2, #1
 801b3d4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b3d8:	1c6c      	adds	r4, r5, #1
 801b3da:	f10c 0301 	add.w	r3, ip, #1
 801b3de:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b3e2:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 801b3e6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801b3ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b3ee:	096d      	lsrs	r5, r5, #5
 801b3f0:	ea42 020c 	orr.w	r2, r2, ip
 801b3f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b3f8:	432a      	orrs	r2, r5
 801b3fa:	e7cc      	b.n	801b396 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 801b3fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b400:	881b      	ldrh	r3, [r3, #0]
 801b402:	1b9b      	subs	r3, r3, r6
 801b404:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b408:	4418      	add	r0, r3
 801b40a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801b40e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b410:	1b9b      	subs	r3, r3, r6
 801b412:	4413      	add	r3, r2
 801b414:	4499      	add	r9, r3
 801b416:	f10e 0e01 	add.w	lr, lr, #1
 801b41a:	e79c      	b.n	801b356 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 801b41c:	4b05      	ldr	r3, [pc, #20]	; (801b434 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801b41e:	6818      	ldr	r0, [r3, #0]
 801b420:	6803      	ldr	r3, [r0, #0]
 801b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b424:	4798      	blx	r3
 801b426:	e77b      	b.n	801b320 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b428:	080285db 	.word	0x080285db
 801b42c:	08028cad 	.word	0x08028cad
 801b430:	080287d3 	.word	0x080287d3
 801b434:	2002b088 	.word	0x2002b088
 801b438:	2002b082 	.word	0x2002b082
 801b43c:	fffff800 	.word	0xfffff800

0801b440 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b440:	b430      	push	{r4, r5}
 801b442:	780d      	ldrb	r5, [r1, #0]
 801b444:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801b448:	2d01      	cmp	r5, #1
 801b44a:	d00a      	beq.n	801b462 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801b44c:	d305      	bcc.n	801b45a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801b44e:	2d02      	cmp	r5, #2
 801b450:	d10b      	bne.n	801b46a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801b452:	9402      	str	r4, [sp, #8]
 801b454:	bc30      	pop	{r4, r5}
 801b456:	f7ff bdf9 	b.w	801b04c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801b45a:	9402      	str	r4, [sp, #8]
 801b45c:	bc30      	pop	{r4, r5}
 801b45e:	f7ff bcfd 	b.w	801ae5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b462:	9402      	str	r4, [sp, #8]
 801b464:	bc30      	pop	{r4, r5}
 801b466:	f7ff befb 	b.w	801b260 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b46a:	bc30      	pop	{r4, r5}
 801b46c:	4770      	bx	lr
	...

0801b470 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b474:	4605      	mov	r5, r0
 801b476:	b089      	sub	sp, #36	; 0x24
 801b478:	6810      	ldr	r0, [r2, #0]
 801b47a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 801b47e:	460c      	mov	r4, r1
 801b480:	6851      	ldr	r1, [r2, #4]
 801b482:	ae04      	add	r6, sp, #16
 801b484:	c603      	stmia	r6!, {r0, r1}
 801b486:	6818      	ldr	r0, [r3, #0]
 801b488:	6859      	ldr	r1, [r3, #4]
 801b48a:	ae06      	add	r6, sp, #24
 801b48c:	4617      	mov	r7, r2
 801b48e:	c603      	stmia	r6!, {r0, r1}
 801b490:	a804      	add	r0, sp, #16
 801b492:	f7fa f92b 	bl	80156ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b496:	4639      	mov	r1, r7
 801b498:	a806      	add	r0, sp, #24
 801b49a:	f7fa f90f 	bl	80156bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b49e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801b4a2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b4a6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b4aa:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801b4ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b4b2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801b4b6:	440c      	add	r4, r1
 801b4b8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801b4bc:	440a      	add	r2, r1
 801b4be:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b4c2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b4c6:	4413      	add	r3, r2
 801b4c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b4cc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b4d0:	9300      	str	r3, [sp, #0]
 801b4d2:	4b80      	ldr	r3, [pc, #512]	; (801b6d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 801b4d4:	6818      	ldr	r0, [r3, #0]
 801b4d6:	6803      	ldr	r3, [r0, #0]
 801b4d8:	6a1b      	ldr	r3, [r3, #32]
 801b4da:	4798      	blx	r3
 801b4dc:	4b7e      	ldr	r3, [pc, #504]	; (801b6d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 801b4de:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 801b4e2:	881a      	ldrh	r2, [r3, #0]
 801b4e4:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801b4e8:	fb06 1202 	mla	r2, r6, r2, r1
 801b4ec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b4f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b4f4:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 801b4f8:	b212      	sxth	r2, r2
 801b4fa:	d117      	bne.n	801b52c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 801b4fc:	9201      	str	r2, [sp, #4]
 801b4fe:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801b502:	f04f 0a00 	mov.w	sl, #0
 801b506:	9302      	str	r3, [sp, #8]
 801b508:	9b00      	ldr	r3, [sp, #0]
 801b50a:	459a      	cmp	sl, r3
 801b50c:	f280 80d9 	bge.w	801b6c2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 801b510:	2100      	movs	r1, #0
 801b512:	4541      	cmp	r1, r8
 801b514:	f280 80c1 	bge.w	801b69a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 801b518:	5c63      	ldrb	r3, [r4, r1]
 801b51a:	b12b      	cbz	r3, 801b528 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 801b51c:	2bff      	cmp	r3, #255	; 0xff
 801b51e:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 801b522:	d176      	bne.n	801b612 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 801b524:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 801b528:	3101      	adds	r1, #1
 801b52a:	e7f2      	b.n	801b512 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 801b52c:	9202      	str	r2, [sp, #8]
 801b52e:	0052      	lsls	r2, r2, #1
 801b530:	9201      	str	r2, [sp, #4]
 801b532:	f04f 0b00 	mov.w	fp, #0
 801b536:	9303      	str	r3, [sp, #12]
 801b538:	9b00      	ldr	r3, [sp, #0]
 801b53a:	459b      	cmp	fp, r3
 801b53c:	f280 80c1 	bge.w	801b6c2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 801b540:	f04f 0c00 	mov.w	ip, #0
 801b544:	45c4      	cmp	ip, r8
 801b546:	da4f      	bge.n	801b5e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 801b548:	f814 300c 	ldrb.w	r3, [r4, ip]
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d048      	beq.n	801b5e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 801b550:	fb09 f303 	mul.w	r3, r9, r3
 801b554:	1c5a      	adds	r2, r3, #1
 801b556:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b55a:	121b      	asrs	r3, r3, #8
 801b55c:	d041      	beq.n	801b5e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 801b55e:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 801b562:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 801b566:	b29e      	uxth	r6, r3
 801b568:	1211      	asrs	r1, r2, #8
 801b56a:	43db      	mvns	r3, r3
 801b56c:	b2db      	uxtb	r3, r3
 801b56e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b572:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b576:	fb11 f103 	smulbb	r1, r1, r3
 801b57a:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801b57e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b582:	00d2      	lsls	r2, r2, #3
 801b584:	fb07 1706 	mla	r7, r7, r6, r1
 801b588:	b2d2      	uxtb	r2, r2
 801b58a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801b58e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b592:	fb12 f203 	smulbb	r2, r2, r3
 801b596:	fa5f fe8e 	uxtb.w	lr, lr
 801b59a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b59e:	fb0e 2206 	mla	r2, lr, r6, r2
 801b5a2:	fb1a fa03 	smulbb	sl, sl, r3
 801b5a6:	b2bf      	uxth	r7, r7
 801b5a8:	b292      	uxth	r2, r2
 801b5aa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b5ae:	fb01 a106 	mla	r1, r1, r6, sl
 801b5b2:	1c7b      	adds	r3, r7, #1
 801b5b4:	f102 0a01 	add.w	sl, r2, #1
 801b5b8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801b5bc:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 801b5c0:	b289      	uxth	r1, r1
 801b5c2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b5c6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b5ca:	ea47 070a 	orr.w	r7, r7, sl
 801b5ce:	f101 0a01 	add.w	sl, r1, #1
 801b5d2:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 801b5d6:	0949      	lsrs	r1, r1, #5
 801b5d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b5dc:	430f      	orrs	r7, r1
 801b5de:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 801b5e2:	f10c 0c01 	add.w	ip, ip, #1
 801b5e6:	e7ad      	b.n	801b544 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 801b5e8:	9b03      	ldr	r3, [sp, #12]
 801b5ea:	9a01      	ldr	r2, [sp, #4]
 801b5ec:	881b      	ldrh	r3, [r3, #0]
 801b5ee:	eba3 0308 	sub.w	r3, r3, r8
 801b5f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b5f6:	4418      	add	r0, r3
 801b5f8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b5fc:	eba3 0308 	sub.w	r3, r3, r8
 801b600:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801b604:	4415      	add	r5, r2
 801b606:	9a02      	ldr	r2, [sp, #8]
 801b608:	4413      	add	r3, r2
 801b60a:	441c      	add	r4, r3
 801b60c:	f10b 0b01 	add.w	fp, fp, #1
 801b610:	e792      	b.n	801b538 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 801b612:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 801b616:	b29f      	uxth	r7, r3
 801b618:	1216      	asrs	r6, r2, #8
 801b61a:	43db      	mvns	r3, r3
 801b61c:	b2db      	uxtb	r3, r3
 801b61e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b622:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b626:	fb16 f603 	smulbb	r6, r6, r3
 801b62a:	ea4f 09e2 	mov.w	r9, r2, asr #3
 801b62e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b632:	00d2      	lsls	r2, r2, #3
 801b634:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b638:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b63c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b640:	b2d2      	uxtb	r2, r2
 801b642:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b646:	fa1f fc8c 	uxth.w	ip, ip
 801b64a:	fb19 f903 	smulbb	r9, r9, r3
 801b64e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b652:	fa5f fe8e 	uxtb.w	lr, lr
 801b656:	fb12 f203 	smulbb	r2, r2, r3
 801b65a:	fb06 9607 	mla	r6, r6, r7, r9
 801b65e:	fb0e 2207 	mla	r2, lr, r7, r2
 801b662:	f10c 0901 	add.w	r9, ip, #1
 801b666:	b292      	uxth	r2, r2
 801b668:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801b66c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801b670:	f102 0c01 	add.w	ip, r2, #1
 801b674:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b678:	b2b6      	uxth	r6, r6
 801b67a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b67e:	ea49 0c02 	orr.w	ip, r9, r2
 801b682:	f106 0901 	add.w	r9, r6, #1
 801b686:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801b68a:	0976      	lsrs	r6, r6, #5
 801b68c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b690:	ea4c 0c06 	orr.w	ip, ip, r6
 801b694:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 801b698:	e746      	b.n	801b528 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 801b69a:	9b02      	ldr	r3, [sp, #8]
 801b69c:	881b      	ldrh	r3, [r3, #0]
 801b69e:	eba3 0308 	sub.w	r3, r3, r8
 801b6a2:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801b6a6:	4418      	add	r0, r3
 801b6a8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b6ac:	eba3 0308 	sub.w	r3, r3, r8
 801b6b0:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 801b6b4:	4415      	add	r5, r2
 801b6b6:	9a01      	ldr	r2, [sp, #4]
 801b6b8:	4413      	add	r3, r2
 801b6ba:	441c      	add	r4, r3
 801b6bc:	f10a 0a01 	add.w	sl, sl, #1
 801b6c0:	e722      	b.n	801b508 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 801b6c2:	4b04      	ldr	r3, [pc, #16]	; (801b6d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 801b6c4:	6818      	ldr	r0, [r3, #0]
 801b6c6:	6803      	ldr	r3, [r0, #0]
 801b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6ca:	4798      	blx	r3
 801b6cc:	b009      	add	sp, #36	; 0x24
 801b6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6d2:	bf00      	nop
 801b6d4:	2002b088 	.word	0x2002b088
 801b6d8:	2002b082 	.word	0x2002b082

0801b6dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6e0:	b089      	sub	sp, #36	; 0x24
 801b6e2:	4682      	mov	sl, r0
 801b6e4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801b6e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b6ea:	460d      	mov	r5, r1
 801b6ec:	4691      	mov	r9, r2
 801b6ee:	4698      	mov	r8, r3
 801b6f0:	b3ae      	cbz	r6, 801b75e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b6f2:	4608      	mov	r0, r1
 801b6f4:	f7fc fa8c 	bl	8017c10 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b6f8:	4607      	mov	r7, r0
 801b6fa:	4628      	mov	r0, r5
 801b6fc:	f7fc fac2 	bl	8017c84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b700:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b704:	4628      	mov	r0, r5
 801b706:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b70a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b70e:	f8ad 700c 	strh.w	r7, [sp, #12]
 801b712:	f7fc fc09 	bl	8017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b716:	b178      	cbz	r0, 801b738 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b718:	4628      	mov	r0, r5
 801b71a:	f7fc fc05 	bl	8017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b71e:	2802      	cmp	r0, #2
 801b720:	d00a      	beq.n	801b738 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b722:	4628      	mov	r0, r5
 801b724:	f7fc fc00 	bl	8017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b728:	280b      	cmp	r0, #11
 801b72a:	d005      	beq.n	801b738 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b72c:	4b69      	ldr	r3, [pc, #420]	; (801b8d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 801b72e:	4a6a      	ldr	r2, [pc, #424]	; (801b8d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 801b730:	486a      	ldr	r0, [pc, #424]	; (801b8dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801b732:	214f      	movs	r1, #79	; 0x4f
 801b734:	f007 ff24 	bl	8023580 <__assert_func>
 801b738:	4628      	mov	r0, r5
 801b73a:	f7fc fb71 	bl	8017e20 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b73e:	4607      	mov	r7, r0
 801b740:	4628      	mov	r0, r5
 801b742:	f7fc fb9f 	bl	8017e84 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b746:	4681      	mov	r9, r0
 801b748:	4628      	mov	r0, r5
 801b74a:	f7fc fbed 	bl	8017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b74e:	2802      	cmp	r0, #2
 801b750:	d108      	bne.n	801b764 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801b752:	4633      	mov	r3, r6
 801b754:	4622      	mov	r2, r4
 801b756:	a902      	add	r1, sp, #8
 801b758:	4638      	mov	r0, r7
 801b75a:	f7ff fa6d 	bl	801ac38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b75e:	b009      	add	sp, #36	; 0x24
 801b760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b764:	4628      	mov	r0, r5
 801b766:	f7fc fbdf 	bl	8017f28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b76a:	280b      	cmp	r0, #11
 801b76c:	d107      	bne.n	801b77e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801b76e:	9600      	str	r6, [sp, #0]
 801b770:	4623      	mov	r3, r4
 801b772:	aa02      	add	r2, sp, #8
 801b774:	4649      	mov	r1, r9
 801b776:	4638      	mov	r0, r7
 801b778:	f7ff fe62 	bl	801b440 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b77c:	e7ef      	b.n	801b75e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b77e:	4628      	mov	r0, r5
 801b780:	f7fc fb14 	bl	8017dac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b784:	b950      	cbnz	r0, 801b79c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801b786:	e9cd 6000 	strd	r6, r0, [sp]
 801b78a:	f8da 3000 	ldr.w	r3, [sl]
 801b78e:	aa02      	add	r2, sp, #8
 801b790:	691d      	ldr	r5, [r3, #16]
 801b792:	4639      	mov	r1, r7
 801b794:	4623      	mov	r3, r4
 801b796:	4650      	mov	r0, sl
 801b798:	47a8      	blx	r5
 801b79a:	e7e0      	b.n	801b75e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b79c:	f10d 0818 	add.w	r8, sp, #24
 801b7a0:	4629      	mov	r1, r5
 801b7a2:	4640      	mov	r0, r8
 801b7a4:	f7fc faa8 	bl	8017cf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b7a8:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b7ac:	ad04      	add	r5, sp, #16
 801b7ae:	e885 0003 	stmia.w	r5, {r0, r1}
 801b7b2:	4628      	mov	r0, r5
 801b7b4:	4621      	mov	r1, r4
 801b7b6:	f7f7 f9d1 	bl	8012b5c <_ZN8touchgfx4RectaNERKS0_>
 801b7ba:	4628      	mov	r0, r5
 801b7bc:	f7f7 fa12 	bl	8012be4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b7c0:	b138      	cbz	r0, 801b7d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 801b7c2:	9600      	str	r6, [sp, #0]
 801b7c4:	4623      	mov	r3, r4
 801b7c6:	aa02      	add	r2, sp, #8
 801b7c8:	4649      	mov	r1, r9
 801b7ca:	4638      	mov	r0, r7
 801b7cc:	f7ff fe50 	bl	801b470 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b7d0:	e7c5      	b.n	801b75e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b7d2:	e9cd 6000 	strd	r6, r0, [sp]
 801b7d6:	f8da 3000 	ldr.w	r3, [sl]
 801b7da:	aa02      	add	r2, sp, #8
 801b7dc:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801b7e0:	4639      	mov	r1, r7
 801b7e2:	462b      	mov	r3, r5
 801b7e4:	4650      	mov	r0, sl
 801b7e6:	47d8      	blx	fp
 801b7e8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b7ec:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b7f0:	4293      	cmp	r3, r2
 801b7f2:	dd13      	ble.n	801b81c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 801b7f4:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b7f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b7fc:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b800:	1a9b      	subs	r3, r3, r2
 801b802:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b806:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b80a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b80e:	9600      	str	r6, [sp, #0]
 801b810:	4643      	mov	r3, r8
 801b812:	aa02      	add	r2, sp, #8
 801b814:	4649      	mov	r1, r9
 801b816:	4638      	mov	r0, r7
 801b818:	f7ff fe2a 	bl	801b470 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b81c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b820:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b824:	4293      	cmp	r3, r2
 801b826:	dd13      	ble.n	801b850 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801b828:	1a9b      	subs	r3, r3, r2
 801b82a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b82e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b832:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b836:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b83a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b83e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b842:	9600      	str	r6, [sp, #0]
 801b844:	4643      	mov	r3, r8
 801b846:	aa02      	add	r2, sp, #8
 801b848:	4649      	mov	r1, r9
 801b84a:	4638      	mov	r0, r7
 801b84c:	f7ff fe10 	bl	801b470 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b850:	88a2      	ldrh	r2, [r4, #4]
 801b852:	8823      	ldrh	r3, [r4, #0]
 801b854:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b858:	4413      	add	r3, r2
 801b85a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b85e:	440a      	add	r2, r1
 801b860:	b29b      	uxth	r3, r3
 801b862:	b292      	uxth	r2, r2
 801b864:	b211      	sxth	r1, r2
 801b866:	b218      	sxth	r0, r3
 801b868:	4288      	cmp	r0, r1
 801b86a:	dd13      	ble.n	801b894 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 801b86c:	1a9b      	subs	r3, r3, r2
 801b86e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b872:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801b876:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b87a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b87e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b882:	9600      	str	r6, [sp, #0]
 801b884:	4643      	mov	r3, r8
 801b886:	aa02      	add	r2, sp, #8
 801b888:	4649      	mov	r1, r9
 801b88a:	4638      	mov	r0, r7
 801b88c:	f8ad 501a 	strh.w	r5, [sp, #26]
 801b890:	f7ff fdee 	bl	801b470 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b894:	88e2      	ldrh	r2, [r4, #6]
 801b896:	8863      	ldrh	r3, [r4, #2]
 801b898:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b89c:	4413      	add	r3, r2
 801b89e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b8a2:	440a      	add	r2, r1
 801b8a4:	b29b      	uxth	r3, r3
 801b8a6:	b292      	uxth	r2, r2
 801b8a8:	b211      	sxth	r1, r2
 801b8aa:	b218      	sxth	r0, r3
 801b8ac:	4288      	cmp	r0, r1
 801b8ae:	f77f af56 	ble.w	801b75e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b8b2:	f9b4 5000 	ldrsh.w	r5, [r4]
 801b8b6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b8ba:	f8ad 5018 	strh.w	r5, [sp, #24]
 801b8be:	1a9b      	subs	r3, r3, r2
 801b8c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b8c4:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b8c8:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b8cc:	9600      	str	r6, [sp, #0]
 801b8ce:	4643      	mov	r3, r8
 801b8d0:	e779      	b.n	801b7c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801b8d2:	bf00      	nop
 801b8d4:	08028629 	.word	0x08028629
 801b8d8:	08028d36 	.word	0x08028d36
 801b8dc:	080287d3 	.word	0x080287d3

0801b8e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801b8e0:	b508      	push	{r3, lr}
 801b8e2:	b180      	cbz	r0, 801b906 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801b8e4:	2902      	cmp	r1, #2
 801b8e6:	d014      	beq.n	801b912 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801b8e8:	2903      	cmp	r1, #3
 801b8ea:	d01d      	beq.n	801b928 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801b8ec:	2901      	cmp	r1, #1
 801b8ee:	d101      	bne.n	801b8f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801b8f0:	2001      	movs	r0, #1
 801b8f2:	bd08      	pop	{r3, pc}
 801b8f4:	4b0e      	ldr	r3, [pc, #56]	; (801b930 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b8f6:	8818      	ldrh	r0, [r3, #0]
 801b8f8:	b990      	cbnz	r0, 801b920 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b8fa:	4b0e      	ldr	r3, [pc, #56]	; (801b934 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801b8fc:	4a0e      	ldr	r2, [pc, #56]	; (801b938 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801b8fe:	480f      	ldr	r0, [pc, #60]	; (801b93c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801b900:	21d7      	movs	r1, #215	; 0xd7
 801b902:	f007 fe3d 	bl	8023580 <__assert_func>
 801b906:	2902      	cmp	r1, #2
 801b908:	d00e      	beq.n	801b928 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801b90a:	2903      	cmp	r1, #3
 801b90c:	d0f2      	beq.n	801b8f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801b90e:	2901      	cmp	r1, #1
 801b910:	d1ee      	bne.n	801b8f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801b912:	4b07      	ldr	r3, [pc, #28]	; (801b930 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b914:	8818      	ldrh	r0, [r3, #0]
 801b916:	2800      	cmp	r0, #0
 801b918:	d0ef      	beq.n	801b8fa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801b91a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b91e:	e7e8      	b.n	801b8f2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b920:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b924:	4240      	negs	r0, r0
 801b926:	e7e4      	b.n	801b8f2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b928:	f04f 30ff 	mov.w	r0, #4294967295
 801b92c:	e7e1      	b.n	801b8f2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b92e:	bf00      	nop
 801b930:	2002b082 	.word	0x2002b082
 801b934:	0802892d 	.word	0x0802892d
 801b938:	08028eb3 	.word	0x08028eb3
 801b93c:	0802896f 	.word	0x0802896f

0801b940 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801b940:	b508      	push	{r3, lr}
 801b942:	b180      	cbz	r0, 801b966 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801b944:	2902      	cmp	r1, #2
 801b946:	d014      	beq.n	801b972 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801b948:	2903      	cmp	r1, #3
 801b94a:	d018      	beq.n	801b97e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801b94c:	2901      	cmp	r1, #1
 801b94e:	d001      	beq.n	801b954 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801b950:	2001      	movs	r0, #1
 801b952:	e013      	b.n	801b97c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b954:	4b0e      	ldr	r3, [pc, #56]	; (801b990 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b956:	8818      	ldrh	r0, [r3, #0]
 801b958:	b970      	cbnz	r0, 801b978 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801b95a:	4b0e      	ldr	r3, [pc, #56]	; (801b994 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801b95c:	4a0e      	ldr	r2, [pc, #56]	; (801b998 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801b95e:	480f      	ldr	r0, [pc, #60]	; (801b99c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801b960:	21d7      	movs	r1, #215	; 0xd7
 801b962:	f007 fe0d 	bl	8023580 <__assert_func>
 801b966:	2902      	cmp	r1, #2
 801b968:	d009      	beq.n	801b97e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801b96a:	2903      	cmp	r1, #3
 801b96c:	d0f0      	beq.n	801b950 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801b96e:	2901      	cmp	r1, #1
 801b970:	d1f0      	bne.n	801b954 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801b972:	f04f 30ff 	mov.w	r0, #4294967295
 801b976:	e001      	b.n	801b97c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b978:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b97c:	bd08      	pop	{r3, pc}
 801b97e:	4b04      	ldr	r3, [pc, #16]	; (801b990 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b980:	8818      	ldrh	r0, [r3, #0]
 801b982:	2800      	cmp	r0, #0
 801b984:	d0e9      	beq.n	801b95a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801b986:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b98a:	4240      	negs	r0, r0
 801b98c:	e7f6      	b.n	801b97c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b98e:	bf00      	nop
 801b990:	2002b082 	.word	0x2002b082
 801b994:	0802892d 	.word	0x0802892d
 801b998:	08028eb3 	.word	0x08028eb3
 801b99c:	0802896f 	.word	0x0802896f

0801b9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9a4:	b097      	sub	sp, #92	; 0x5c
 801b9a6:	9109      	str	r1, [sp, #36]	; 0x24
 801b9a8:	a912      	add	r1, sp, #72	; 0x48
 801b9aa:	e881 000c 	stmia.w	r1, {r2, r3}
 801b9ae:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801b9b2:	9306      	str	r3, [sp, #24]
 801b9b4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801b9b8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801b9bc:	930e      	str	r3, [sp, #56]	; 0x38
 801b9be:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801b9c2:	930a      	str	r3, [sp, #40]	; 0x28
 801b9c4:	7b4b      	ldrb	r3, [r1, #13]
 801b9c6:	798f      	ldrb	r7, [r1, #6]
 801b9c8:	f9bd 4080 	ldrsh.w	r4, [sp, #128]	; 0x80
 801b9cc:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 801b9d0:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 801b9d4:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801b9d8:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801b9dc:	0158      	lsls	r0, r3, #5
 801b9de:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b9e2:	4338      	orrs	r0, r7
 801b9e4:	9008      	str	r0, [sp, #32]
 801b9e6:	f000 8149 	beq.w	801bc7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801b9ea:	011b      	lsls	r3, r3, #4
 801b9ec:	79c8      	ldrb	r0, [r1, #7]
 801b9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b9f2:	4303      	orrs	r3, r0
 801b9f4:	9307      	str	r3, [sp, #28]
 801b9f6:	f000 8141 	beq.w	801bc7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801b9fa:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	2e00      	cmp	r6, #0
 801ba02:	f000 80e5 	beq.w	801bbd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x230>
 801ba06:	1af6      	subs	r6, r6, r3
 801ba08:	b2b6      	uxth	r6, r6
 801ba0a:	0433      	lsls	r3, r6, #16
 801ba0c:	d502      	bpl.n	801ba14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ba0e:	1ba4      	subs	r4, r4, r6
 801ba10:	b224      	sxth	r4, r4
 801ba12:	2600      	movs	r6, #0
 801ba14:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ba18:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ba1c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801ba20:	428c      	cmp	r4, r1
 801ba22:	b28b      	uxth	r3, r1
 801ba24:	bfbf      	itttt	lt
 801ba26:	18f6      	addlt	r6, r6, r3
 801ba28:	1b34      	sublt	r4, r6, r4
 801ba2a:	b2a6      	uxthlt	r6, r4
 801ba2c:	460c      	movlt	r4, r1
 801ba2e:	8891      	ldrh	r1, [r2, #4]
 801ba30:	440b      	add	r3, r1
 801ba32:	b21b      	sxth	r3, r3
 801ba34:	930d      	str	r3, [sp, #52]	; 0x34
 801ba36:	88d3      	ldrh	r3, [r2, #6]
 801ba38:	9a06      	ldr	r2, [sp, #24]
 801ba3a:	449a      	add	sl, r3
 801ba3c:	fa0f f38a 	sxth.w	r3, sl
 801ba40:	930c      	str	r3, [sp, #48]	; 0x30
 801ba42:	4bb5      	ldr	r3, [pc, #724]	; (801bd18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801ba44:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801ba48:	f893 9000 	ldrb.w	r9, [r3]
 801ba4c:	f109 3cff 	add.w	ip, r9, #4294967295
 801ba50:	f1dc 0300 	rsbs	r3, ip, #0
 801ba54:	eb43 030c 	adc.w	r3, r3, ip
 801ba58:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba5a:	4621      	mov	r1, r4
 801ba5c:	465b      	mov	r3, fp
 801ba5e:	a812      	add	r0, sp, #72	; 0x48
 801ba60:	f7f9 fd1c 	bl	801549c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ba64:	4621      	mov	r1, r4
 801ba66:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801ba6a:	465b      	mov	r3, fp
 801ba6c:	9a06      	ldr	r2, [sp, #24]
 801ba6e:	a812      	add	r0, sp, #72	; 0x48
 801ba70:	f7f9 fd2c 	bl	80154cc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ba74:	a916      	add	r1, sp, #88	; 0x58
 801ba76:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ba7a:	a815      	add	r0, sp, #84	; 0x54
 801ba7c:	f7f9 fe08 	bl	8015690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ba80:	f1bb 0f00 	cmp.w	fp, #0
 801ba84:	f040 80a7 	bne.w	801bbd6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x236>
 801ba88:	f1b9 0f01 	cmp.w	r9, #1
 801ba8c:	f040 80ab 	bne.w	801bbe6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 801ba90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	f040 80f7 	bne.w	801bc86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e6>
 801ba98:	4ba0      	ldr	r3, [pc, #640]	; (801bd1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801ba9a:	6818      	ldr	r0, [r3, #0]
 801ba9c:	6803      	ldr	r3, [r0, #0]
 801ba9e:	6a1b      	ldr	r3, [r3, #32]
 801baa0:	4798      	blx	r3
 801baa2:	4a9f      	ldr	r2, [pc, #636]	; (801bd20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801baa4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801baa8:	8811      	ldrh	r1, [r2, #0]
 801baaa:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801baae:	fb01 2303 	mla	r3, r1, r3, r2
 801bab2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bab6:	f04f 0901 	mov.w	r9, #1
 801baba:	9307      	str	r3, [sp, #28]
 801babc:	fa09 f308 	lsl.w	r3, r9, r8
 801bac0:	3b01      	subs	r3, #1
 801bac2:	b2db      	uxtb	r3, r3
 801bac4:	45c8      	cmp	r8, r9
 801bac6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bac8:	f000 80df 	beq.w	801bc8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 801bacc:	f1b8 0f02 	cmp.w	r8, #2
 801bad0:	f000 8153 	beq.w	801bd7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3da>
 801bad4:	f1b8 0f04 	cmp.w	r8, #4
 801bad8:	f000 8146 	beq.w	801bd68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c8>
 801badc:	b906      	cbnz	r6, 801bae0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 801bade:	b175      	cbz	r5, 801bafe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 801bae0:	fb17 6305 	smlabb	r3, r7, r5, r6
 801bae4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bae6:	fb13 f308 	smulbb	r3, r3, r8
 801baea:	b29b      	uxth	r3, r3
 801baec:	ebaa 0a05 	sub.w	sl, sl, r5
 801baf0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801baf4:	9226      	str	r2, [sp, #152]	; 0x98
 801baf6:	fa1f fa8a 	uxth.w	sl, sl
 801bafa:	f003 0507 	and.w	r5, r3, #7
 801bafe:	4659      	mov	r1, fp
 801bb00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bb02:	f7ff feed 	bl	801b8e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801bb06:	4659      	mov	r1, fp
 801bb08:	9010      	str	r0, [sp, #64]	; 0x40
 801bb0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bb0c:	f7ff ff18 	bl	801b940 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801bb10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb12:	9a06      	ldr	r2, [sp, #24]
 801bb14:	1a9a      	subs	r2, r3, r2
 801bb16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb18:	1ba4      	subs	r4, r4, r6
 801bb1a:	1b1c      	subs	r4, r3, r4
 801bb1c:	9b08      	ldr	r3, [sp, #32]
 801bb1e:	4592      	cmp	sl, r2
 801bb20:	bfa8      	it	ge
 801bb22:	4692      	movge	sl, r2
 801bb24:	429c      	cmp	r4, r3
 801bb26:	bfd4      	ite	le
 801bb28:	ebc6 0604 	rsble	r6, r6, r4
 801bb2c:	ebc6 0603 	rsbgt	r6, r6, r3
 801bb30:	1bbf      	subs	r7, r7, r6
 801bb32:	fb08 f307 	mul.w	r3, r8, r7
 801bb36:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bb3a:	781a      	ldrb	r2, [r3, #0]
 801bb3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb3e:	1219      	asrs	r1, r3, #8
 801bb40:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 801bb44:	930c      	str	r3, [sp, #48]	; 0x30
 801bb46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb48:	f3c3 01cc 	ubfx	r1, r3, #3, #13
 801bb4c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 801bb50:	930d      	str	r3, [sp, #52]	; 0x34
 801bb52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb54:	00d9      	lsls	r1, r3, #3
 801bb56:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 801bb5a:	930e      	str	r3, [sp, #56]	; 0x38
 801bb5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb5e:	0059      	lsls	r1, r3, #1
 801bb60:	fb03 0016 	mls	r0, r3, r6, r0
 801bb64:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801bb68:	434b      	muls	r3, r1
 801bb6a:	9106      	str	r1, [sp, #24]
 801bb6c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bb6e:	412a      	asrs	r2, r5
 801bb70:	b289      	uxth	r1, r1
 801bb72:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801bb76:	b2d2      	uxtb	r2, r2
 801bb78:	9110      	str	r1, [sp, #64]	; 0x40
 801bb7a:	9311      	str	r3, [sp, #68]	; 0x44
 801bb7c:	f1ba 0f00 	cmp.w	sl, #0
 801bb80:	f340 80e4 	ble.w	801bd4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801bb84:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801bb88:	46b6      	mov	lr, r6
 801bb8a:	f1be 0f00 	cmp.w	lr, #0
 801bb8e:	f340 80c9 	ble.w	801bd24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801bb92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb94:	4013      	ands	r3, r2
 801bb96:	d009      	beq.n	801bbac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20c>
 801bb98:	fb13 f309 	smulbb	r3, r3, r9
 801bb9c:	2bfe      	cmp	r3, #254	; 0xfe
 801bb9e:	dd77      	ble.n	801bc90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 801bba0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bba2:	29ff      	cmp	r1, #255	; 0xff
 801bba4:	d174      	bne.n	801bc90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 801bba6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bba8:	f8ac 0000 	strh.w	r0, [ip]
 801bbac:	4445      	add	r5, r8
 801bbae:	b2ad      	uxth	r5, r5
 801bbb0:	2d07      	cmp	r5, #7
 801bbb2:	bf81      	itttt	hi
 801bbb4:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801bbb6:	785a      	ldrbhi	r2, [r3, #1]
 801bbb8:	3301      	addhi	r3, #1
 801bbba:	9326      	strhi	r3, [sp, #152]	; 0x98
 801bbbc:	9b06      	ldr	r3, [sp, #24]
 801bbbe:	bf9a      	itte	ls
 801bbc0:	fa42 f208 	asrls.w	r2, r2, r8
 801bbc4:	b2d2      	uxtbls	r2, r2
 801bbc6:	2500      	movhi	r5, #0
 801bbc8:	449c      	add	ip, r3
 801bbca:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bbce:	e7dc      	b.n	801bb8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 801bbd0:	441c      	add	r4, r3
 801bbd2:	b224      	sxth	r4, r4
 801bbd4:	e71e      	b.n	801ba14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801bbd6:	f1bb 0f01 	cmp.w	fp, #1
 801bbda:	f47f af59 	bne.w	801ba90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bbde:	f1b9 0f01 	cmp.w	r9, #1
 801bbe2:	f47f af55 	bne.w	801ba90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bbe6:	f8df 9134 	ldr.w	r9, [pc, #308]	; 801bd1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801bbea:	f8d9 0000 	ldr.w	r0, [r9]
 801bbee:	6803      	ldr	r3, [r0, #0]
 801bbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbf2:	4798      	blx	r3
 801bbf4:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801bbf8:	464a      	mov	r2, r9
 801bbfa:	d006      	beq.n	801bc0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 801bbfc:	f1b8 0f04 	cmp.w	r8, #4
 801bc00:	d13f      	bne.n	801bc82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801bc02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc04:	3300      	adds	r3, #0
 801bc06:	bf18      	it	ne
 801bc08:	2301      	movne	r3, #1
 801bc0a:	05c0      	lsls	r0, r0, #23
 801bc0c:	f140 80a7 	bpl.w	801bd5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 801bc10:	f1b8 0f08 	cmp.w	r8, #8
 801bc14:	f040 80a3 	bne.w	801bd5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	bf0c      	ite	eq
 801bc1c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801bc20:	2180      	movne	r1, #128	; 0x80
 801bc22:	2e00      	cmp	r6, #0
 801bc24:	f47f af34 	bne.w	801ba90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc28:	2d00      	cmp	r5, #0
 801bc2a:	f47f af31 	bne.w	801ba90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc2e:	9b08      	ldr	r3, [sp, #32]
 801bc30:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bc32:	18e3      	adds	r3, r4, r3
 801bc34:	4283      	cmp	r3, r0
 801bc36:	f73f af2b 	bgt.w	801ba90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc3a:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801bc3e:	4403      	add	r3, r0
 801bc40:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bc42:	4283      	cmp	r3, r0
 801bc44:	f73f af24 	bgt.w	801ba90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc48:	6810      	ldr	r0, [r2, #0]
 801bc4a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801bc4e:	6804      	ldr	r4, [r0, #0]
 801bc50:	9105      	str	r1, [sp, #20]
 801bc52:	f1b8 0f08 	cmp.w	r8, #8
 801bc56:	bf18      	it	ne
 801bc58:	3701      	addne	r7, #1
 801bc5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bc5c:	9104      	str	r1, [sp, #16]
 801bc5e:	bf18      	it	ne
 801bc60:	f027 0701 	bicne.w	r7, r7, #1
 801bc64:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bc66:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801bc6a:	bf18      	it	ne
 801bc6c:	b2bf      	uxthne	r7, r7
 801bc6e:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801bc72:	e9cd 7a00 	strd	r7, sl, [sp]
 801bc76:	9926      	ldr	r1, [sp, #152]	; 0x98
 801bc78:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801bc7a:	47a0      	blx	r4
 801bc7c:	b017      	add	sp, #92	; 0x5c
 801bc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc82:	2300      	movs	r3, #0
 801bc84:	e7c1      	b.n	801bc0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 801bc86:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bc88:	e70b      	b.n	801baa2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801bc8a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 801bc8e:	e725      	b.n	801badc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801bc90:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bc92:	f8bc 4000 	ldrh.w	r4, [ip]
 801bc96:	fb11 f303 	smulbb	r3, r1, r3
 801bc9a:	b29b      	uxth	r3, r3
 801bc9c:	1c59      	adds	r1, r3, #1
 801bc9e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801bca2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bca6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bca8:	b29f      	uxth	r7, r3
 801bcaa:	1220      	asrs	r0, r4, #8
 801bcac:	43db      	mvns	r3, r3
 801bcae:	b2db      	uxtb	r3, r3
 801bcb0:	fb11 f107 	smulbb	r1, r1, r7
 801bcb4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bcb8:	fb00 1003 	mla	r0, r0, r3, r1
 801bcbc:	b281      	uxth	r1, r0
 801bcbe:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bcc0:	9108      	str	r1, [sp, #32]
 801bcc2:	fb17 fb00 	smulbb	fp, r7, r0
 801bcc6:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bcc8:	10e1      	asrs	r1, r4, #3
 801bcca:	00e4      	lsls	r4, r4, #3
 801bccc:	fb17 f700 	smulbb	r7, r7, r0
 801bcd0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bcd4:	b2e4      	uxtb	r4, r4
 801bcd6:	fb01 b103 	mla	r1, r1, r3, fp
 801bcda:	fb04 7703 	mla	r7, r4, r3, r7
 801bcde:	9b08      	ldr	r3, [sp, #32]
 801bce0:	9808      	ldr	r0, [sp, #32]
 801bce2:	b2bf      	uxth	r7, r7
 801bce4:	3301      	adds	r3, #1
 801bce6:	f107 0b01 	add.w	fp, r7, #1
 801bcea:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801bcee:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801bcf2:	b289      	uxth	r1, r1
 801bcf4:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801bcf8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801bcfc:	ea40 000b 	orr.w	r0, r0, fp
 801bd00:	f101 0b01 	add.w	fp, r1, #1
 801bd04:	eb0b 2b11 	add.w	fp, fp, r1, lsr #8
 801bd08:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801bd0c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801bd10:	ea40 000b 	orr.w	r0, r0, fp
 801bd14:	e748      	b.n	801bba8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801bd16:	bf00      	nop
 801bd18:	2002b080 	.word	0x2002b080
 801bd1c:	2002b088 	.word	0x2002b088
 801bd20:	2002b082 	.word	0x2002b082
 801bd24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd26:	b153      	cbz	r3, 801bd3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801bd28:	441d      	add	r5, r3
 801bd2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bd2c:	b2ad      	uxth	r5, r5
 801bd2e:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 801bd32:	f005 0507 	and.w	r5, r5, #7
 801bd36:	781a      	ldrb	r2, [r3, #0]
 801bd38:	9326      	str	r3, [sp, #152]	; 0x98
 801bd3a:	412a      	asrs	r2, r5
 801bd3c:	b2d2      	uxtb	r2, r2
 801bd3e:	9b07      	ldr	r3, [sp, #28]
 801bd40:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bd42:	440b      	add	r3, r1
 801bd44:	9307      	str	r3, [sp, #28]
 801bd46:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bd4a:	e717      	b.n	801bb7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1dc>
 801bd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d194      	bne.n	801bc7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801bd52:	4b0b      	ldr	r3, [pc, #44]	; (801bd80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>)
 801bd54:	6818      	ldr	r0, [r3, #0]
 801bd56:	6803      	ldr	r3, [r0, #0]
 801bd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd5a:	4798      	blx	r3
 801bd5c:	e78e      	b.n	801bc7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	f43f ae96 	beq.w	801ba90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bd64:	2180      	movs	r1, #128	; 0x80
 801bd66:	e75c      	b.n	801bc22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 801bd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd6a:	b11b      	cbz	r3, 801bd74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 801bd6c:	07fb      	lsls	r3, r7, #31
 801bd6e:	d501      	bpl.n	801bd74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 801bd70:	3701      	adds	r7, #1
 801bd72:	b2bf      	uxth	r7, r7
 801bd74:	f04f 0911 	mov.w	r9, #17
 801bd78:	e6b0      	b.n	801badc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801bd7a:	f04f 0955 	mov.w	r9, #85	; 0x55
 801bd7e:	e6ad      	b.n	801badc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801bd80:	2002b088 	.word	0x2002b088

0801bd84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801bd84:	b538      	push	{r3, r4, r5, lr}
 801bd86:	4c15      	ldr	r4, [pc, #84]	; (801bddc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801bd88:	7823      	ldrb	r3, [r4, #0]
 801bd8a:	f3bf 8f5b 	dmb	ish
 801bd8e:	07da      	lsls	r2, r3, #31
 801bd90:	4605      	mov	r5, r0
 801bd92:	d40b      	bmi.n	801bdac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801bd94:	4620      	mov	r0, r4
 801bd96:	f007 fbc9 	bl	802352c <__cxa_guard_acquire>
 801bd9a:	b138      	cbz	r0, 801bdac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	f007 fbd1 	bl	8023544 <__cxa_guard_release>
 801bda2:	4a0f      	ldr	r2, [pc, #60]	; (801bde0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801bda4:	490f      	ldr	r1, [pc, #60]	; (801bde4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801bda6:	4810      	ldr	r0, [pc, #64]	; (801bde8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801bda8:	f007 fbb6 	bl	8023518 <__aeabi_atexit>
 801bdac:	4c0f      	ldr	r4, [pc, #60]	; (801bdec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801bdae:	7823      	ldrb	r3, [r4, #0]
 801bdb0:	f3bf 8f5b 	dmb	ish
 801bdb4:	07db      	lsls	r3, r3, #31
 801bdb6:	d40b      	bmi.n	801bdd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801bdb8:	4620      	mov	r0, r4
 801bdba:	f007 fbb7 	bl	802352c <__cxa_guard_acquire>
 801bdbe:	b138      	cbz	r0, 801bdd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	f007 fbbf 	bl	8023544 <__cxa_guard_release>
 801bdc6:	4a06      	ldr	r2, [pc, #24]	; (801bde0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801bdc8:	4909      	ldr	r1, [pc, #36]	; (801bdf0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801bdca:	480a      	ldr	r0, [pc, #40]	; (801bdf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801bdcc:	f007 fba4 	bl	8023518 <__aeabi_atexit>
 801bdd0:	4b05      	ldr	r3, [pc, #20]	; (801bde8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801bdd2:	612b      	str	r3, [r5, #16]
 801bdd4:	4b07      	ldr	r3, [pc, #28]	; (801bdf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801bdd6:	616b      	str	r3, [r5, #20]
 801bdd8:	bd38      	pop	{r3, r4, r5, pc}
 801bdda:	bf00      	nop
 801bddc:	2002b174 	.word	0x2002b174
 801bde0:	20000000 	.word	0x20000000
 801bde4:	0801a43f 	.word	0x0801a43f
 801bde8:	20000070 	.word	0x20000070
 801bdec:	2002b178 	.word	0x2002b178
 801bdf0:	0801a43d 	.word	0x0801a43d
 801bdf4:	20000074 	.word	0x20000074

0801bdf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801bdf8:	b538      	push	{r3, r4, r5, lr}
 801bdfa:	4c15      	ldr	r4, [pc, #84]	; (801be50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801bdfc:	7823      	ldrb	r3, [r4, #0]
 801bdfe:	f3bf 8f5b 	dmb	ish
 801be02:	07da      	lsls	r2, r3, #31
 801be04:	4605      	mov	r5, r0
 801be06:	d40b      	bmi.n	801be20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801be08:	4620      	mov	r0, r4
 801be0a:	f007 fb8f 	bl	802352c <__cxa_guard_acquire>
 801be0e:	b138      	cbz	r0, 801be20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801be10:	4620      	mov	r0, r4
 801be12:	f007 fb97 	bl	8023544 <__cxa_guard_release>
 801be16:	4a0f      	ldr	r2, [pc, #60]	; (801be54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801be18:	490f      	ldr	r1, [pc, #60]	; (801be58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801be1a:	4810      	ldr	r0, [pc, #64]	; (801be5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801be1c:	f007 fb7c 	bl	8023518 <__aeabi_atexit>
 801be20:	4c0f      	ldr	r4, [pc, #60]	; (801be60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801be22:	7823      	ldrb	r3, [r4, #0]
 801be24:	f3bf 8f5b 	dmb	ish
 801be28:	07db      	lsls	r3, r3, #31
 801be2a:	d40b      	bmi.n	801be44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801be2c:	4620      	mov	r0, r4
 801be2e:	f007 fb7d 	bl	802352c <__cxa_guard_acquire>
 801be32:	b138      	cbz	r0, 801be44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801be34:	4620      	mov	r0, r4
 801be36:	f007 fb85 	bl	8023544 <__cxa_guard_release>
 801be3a:	4a06      	ldr	r2, [pc, #24]	; (801be54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801be3c:	4909      	ldr	r1, [pc, #36]	; (801be64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801be3e:	480a      	ldr	r0, [pc, #40]	; (801be68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801be40:	f007 fb6a 	bl	8023518 <__aeabi_atexit>
 801be44:	4b05      	ldr	r3, [pc, #20]	; (801be5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801be46:	60ab      	str	r3, [r5, #8]
 801be48:	4b07      	ldr	r3, [pc, #28]	; (801be68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801be4a:	60eb      	str	r3, [r5, #12]
 801be4c:	bd38      	pop	{r3, r4, r5, pc}
 801be4e:	bf00      	nop
 801be50:	2002b14c 	.word	0x2002b14c
 801be54:	20000000 	.word	0x20000000
 801be58:	0801a443 	.word	0x0801a443
 801be5c:	20000048 	.word	0x20000048
 801be60:	2002b150 	.word	0x2002b150
 801be64:	0801a441 	.word	0x0801a441
 801be68:	2000004c 	.word	0x2000004c

0801be6c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801be6c:	b510      	push	{r4, lr}
 801be6e:	4604      	mov	r4, r0
 801be70:	f7ff ff88 	bl	801bd84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801be74:	4620      	mov	r0, r4
 801be76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be7a:	f7ff bfbd 	b.w	801bdf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801be80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801be80:	b538      	push	{r3, r4, r5, lr}
 801be82:	4c15      	ldr	r4, [pc, #84]	; (801bed8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801be84:	7823      	ldrb	r3, [r4, #0]
 801be86:	f3bf 8f5b 	dmb	ish
 801be8a:	07da      	lsls	r2, r3, #31
 801be8c:	4605      	mov	r5, r0
 801be8e:	d40b      	bmi.n	801bea8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801be90:	4620      	mov	r0, r4
 801be92:	f007 fb4b 	bl	802352c <__cxa_guard_acquire>
 801be96:	b138      	cbz	r0, 801bea8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801be98:	4620      	mov	r0, r4
 801be9a:	f007 fb53 	bl	8023544 <__cxa_guard_release>
 801be9e:	4a0f      	ldr	r2, [pc, #60]	; (801bedc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bea0:	490f      	ldr	r1, [pc, #60]	; (801bee0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bea2:	4810      	ldr	r0, [pc, #64]	; (801bee4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bea4:	f007 fb38 	bl	8023518 <__aeabi_atexit>
 801bea8:	4c0f      	ldr	r4, [pc, #60]	; (801bee8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801beaa:	7823      	ldrb	r3, [r4, #0]
 801beac:	f3bf 8f5b 	dmb	ish
 801beb0:	07db      	lsls	r3, r3, #31
 801beb2:	d40b      	bmi.n	801becc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801beb4:	4620      	mov	r0, r4
 801beb6:	f007 fb39 	bl	802352c <__cxa_guard_acquire>
 801beba:	b138      	cbz	r0, 801becc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bebc:	4620      	mov	r0, r4
 801bebe:	f007 fb41 	bl	8023544 <__cxa_guard_release>
 801bec2:	4a06      	ldr	r2, [pc, #24]	; (801bedc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bec4:	4909      	ldr	r1, [pc, #36]	; (801beec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bec6:	480a      	ldr	r0, [pc, #40]	; (801bef0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bec8:	f007 fb26 	bl	8023518 <__aeabi_atexit>
 801becc:	4b05      	ldr	r3, [pc, #20]	; (801bee4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bece:	622b      	str	r3, [r5, #32]
 801bed0:	4b07      	ldr	r3, [pc, #28]	; (801bef0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bed2:	626b      	str	r3, [r5, #36]	; 0x24
 801bed4:	bd38      	pop	{r3, r4, r5, pc}
 801bed6:	bf00      	nop
 801bed8:	2002b17c 	.word	0x2002b17c
 801bedc:	20000000 	.word	0x20000000
 801bee0:	0801a437 	.word	0x0801a437
 801bee4:	20000078 	.word	0x20000078
 801bee8:	2002b180 	.word	0x2002b180
 801beec:	0801a435 	.word	0x0801a435
 801bef0:	2000007c 	.word	0x2000007c

0801bef4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bef4:	b538      	push	{r3, r4, r5, lr}
 801bef6:	4c15      	ldr	r4, [pc, #84]	; (801bf4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bef8:	7823      	ldrb	r3, [r4, #0]
 801befa:	f3bf 8f5b 	dmb	ish
 801befe:	07da      	lsls	r2, r3, #31
 801bf00:	4605      	mov	r5, r0
 801bf02:	d40b      	bmi.n	801bf1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bf04:	4620      	mov	r0, r4
 801bf06:	f007 fb11 	bl	802352c <__cxa_guard_acquire>
 801bf0a:	b138      	cbz	r0, 801bf1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	f007 fb19 	bl	8023544 <__cxa_guard_release>
 801bf12:	4a0f      	ldr	r2, [pc, #60]	; (801bf50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bf14:	490f      	ldr	r1, [pc, #60]	; (801bf54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bf16:	4810      	ldr	r0, [pc, #64]	; (801bf58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bf18:	f007 fafe 	bl	8023518 <__aeabi_atexit>
 801bf1c:	4c0f      	ldr	r4, [pc, #60]	; (801bf5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bf1e:	7823      	ldrb	r3, [r4, #0]
 801bf20:	f3bf 8f5b 	dmb	ish
 801bf24:	07db      	lsls	r3, r3, #31
 801bf26:	d40b      	bmi.n	801bf40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bf28:	4620      	mov	r0, r4
 801bf2a:	f007 faff 	bl	802352c <__cxa_guard_acquire>
 801bf2e:	b138      	cbz	r0, 801bf40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bf30:	4620      	mov	r0, r4
 801bf32:	f007 fb07 	bl	8023544 <__cxa_guard_release>
 801bf36:	4a06      	ldr	r2, [pc, #24]	; (801bf50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bf38:	4909      	ldr	r1, [pc, #36]	; (801bf60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801bf3a:	480a      	ldr	r0, [pc, #40]	; (801bf64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bf3c:	f007 faec 	bl	8023518 <__aeabi_atexit>
 801bf40:	4b05      	ldr	r3, [pc, #20]	; (801bf58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bf42:	61ab      	str	r3, [r5, #24]
 801bf44:	4b07      	ldr	r3, [pc, #28]	; (801bf64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bf46:	61eb      	str	r3, [r5, #28]
 801bf48:	bd38      	pop	{r3, r4, r5, pc}
 801bf4a:	bf00      	nop
 801bf4c:	2002b154 	.word	0x2002b154
 801bf50:	20000000 	.word	0x20000000
 801bf54:	0801a43b 	.word	0x0801a43b
 801bf58:	20000050 	.word	0x20000050
 801bf5c:	2002b158 	.word	0x2002b158
 801bf60:	0801a439 	.word	0x0801a439
 801bf64:	20000054 	.word	0x20000054

0801bf68 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801bf68:	b510      	push	{r4, lr}
 801bf6a:	4604      	mov	r4, r0
 801bf6c:	f7ff ff88 	bl	801be80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801bf70:	4620      	mov	r0, r4
 801bf72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf76:	f7ff bfbd 	b.w	801bef4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801bf7c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801bf7c:	b538      	push	{r3, r4, r5, lr}
 801bf7e:	4c15      	ldr	r4, [pc, #84]	; (801bfd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801bf80:	7823      	ldrb	r3, [r4, #0]
 801bf82:	f3bf 8f5b 	dmb	ish
 801bf86:	07da      	lsls	r2, r3, #31
 801bf88:	4605      	mov	r5, r0
 801bf8a:	d40b      	bmi.n	801bfa4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	f007 facd 	bl	802352c <__cxa_guard_acquire>
 801bf92:	b138      	cbz	r0, 801bfa4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bf94:	4620      	mov	r0, r4
 801bf96:	f007 fad5 	bl	8023544 <__cxa_guard_release>
 801bf9a:	4a0f      	ldr	r2, [pc, #60]	; (801bfd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bf9c:	490f      	ldr	r1, [pc, #60]	; (801bfdc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801bf9e:	4810      	ldr	r0, [pc, #64]	; (801bfe0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bfa0:	f007 faba 	bl	8023518 <__aeabi_atexit>
 801bfa4:	4c0f      	ldr	r4, [pc, #60]	; (801bfe4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801bfa6:	7823      	ldrb	r3, [r4, #0]
 801bfa8:	f3bf 8f5b 	dmb	ish
 801bfac:	07db      	lsls	r3, r3, #31
 801bfae:	d40b      	bmi.n	801bfc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	f007 fabb 	bl	802352c <__cxa_guard_acquire>
 801bfb6:	b138      	cbz	r0, 801bfc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bfb8:	4620      	mov	r0, r4
 801bfba:	f007 fac3 	bl	8023544 <__cxa_guard_release>
 801bfbe:	4a06      	ldr	r2, [pc, #24]	; (801bfd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bfc0:	4909      	ldr	r1, [pc, #36]	; (801bfe8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801bfc2:	480a      	ldr	r0, [pc, #40]	; (801bfec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bfc4:	f007 faa8 	bl	8023518 <__aeabi_atexit>
 801bfc8:	4b05      	ldr	r3, [pc, #20]	; (801bfe0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bfca:	632b      	str	r3, [r5, #48]	; 0x30
 801bfcc:	4b07      	ldr	r3, [pc, #28]	; (801bfec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bfce:	636b      	str	r3, [r5, #52]	; 0x34
 801bfd0:	bd38      	pop	{r3, r4, r5, pc}
 801bfd2:	bf00      	nop
 801bfd4:	2002b18c 	.word	0x2002b18c
 801bfd8:	20000000 	.word	0x20000000
 801bfdc:	0801a42f 	.word	0x0801a42f
 801bfe0:	20000088 	.word	0x20000088
 801bfe4:	2002b190 	.word	0x2002b190
 801bfe8:	0801a42d 	.word	0x0801a42d
 801bfec:	2000008c 	.word	0x2000008c

0801bff0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801bff0:	b538      	push	{r3, r4, r5, lr}
 801bff2:	4c15      	ldr	r4, [pc, #84]	; (801c048 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801bff4:	7823      	ldrb	r3, [r4, #0]
 801bff6:	f3bf 8f5b 	dmb	ish
 801bffa:	07da      	lsls	r2, r3, #31
 801bffc:	4605      	mov	r5, r0
 801bffe:	d40b      	bmi.n	801c018 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c000:	4620      	mov	r0, r4
 801c002:	f007 fa93 	bl	802352c <__cxa_guard_acquire>
 801c006:	b138      	cbz	r0, 801c018 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c008:	4620      	mov	r0, r4
 801c00a:	f007 fa9b 	bl	8023544 <__cxa_guard_release>
 801c00e:	4a0f      	ldr	r2, [pc, #60]	; (801c04c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c010:	490f      	ldr	r1, [pc, #60]	; (801c050 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c012:	4810      	ldr	r0, [pc, #64]	; (801c054 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c014:	f007 fa80 	bl	8023518 <__aeabi_atexit>
 801c018:	4c0f      	ldr	r4, [pc, #60]	; (801c058 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c01a:	7823      	ldrb	r3, [r4, #0]
 801c01c:	f3bf 8f5b 	dmb	ish
 801c020:	07db      	lsls	r3, r3, #31
 801c022:	d40b      	bmi.n	801c03c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c024:	4620      	mov	r0, r4
 801c026:	f007 fa81 	bl	802352c <__cxa_guard_acquire>
 801c02a:	b138      	cbz	r0, 801c03c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c02c:	4620      	mov	r0, r4
 801c02e:	f007 fa89 	bl	8023544 <__cxa_guard_release>
 801c032:	4a06      	ldr	r2, [pc, #24]	; (801c04c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c034:	4909      	ldr	r1, [pc, #36]	; (801c05c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c036:	480a      	ldr	r0, [pc, #40]	; (801c060 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c038:	f007 fa6e 	bl	8023518 <__aeabi_atexit>
 801c03c:	4b05      	ldr	r3, [pc, #20]	; (801c054 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c03e:	62ab      	str	r3, [r5, #40]	; 0x28
 801c040:	4b07      	ldr	r3, [pc, #28]	; (801c060 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c042:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c044:	bd38      	pop	{r3, r4, r5, pc}
 801c046:	bf00      	nop
 801c048:	2002b15c 	.word	0x2002b15c
 801c04c:	20000000 	.word	0x20000000
 801c050:	0801a433 	.word	0x0801a433
 801c054:	20000058 	.word	0x20000058
 801c058:	2002b160 	.word	0x2002b160
 801c05c:	0801a431 	.word	0x0801a431
 801c060:	2000005c 	.word	0x2000005c

0801c064 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c064:	b510      	push	{r4, lr}
 801c066:	4604      	mov	r4, r0
 801c068:	f7ff ff88 	bl	801bf7c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c06c:	4620      	mov	r0, r4
 801c06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c072:	f7ff bfbd 	b.w	801bff0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c078 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801c078:	b538      	push	{r3, r4, r5, lr}
 801c07a:	4c15      	ldr	r4, [pc, #84]	; (801c0d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801c07c:	7823      	ldrb	r3, [r4, #0]
 801c07e:	f3bf 8f5b 	dmb	ish
 801c082:	07da      	lsls	r2, r3, #31
 801c084:	4605      	mov	r5, r0
 801c086:	d40b      	bmi.n	801c0a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801c088:	4620      	mov	r0, r4
 801c08a:	f007 fa4f 	bl	802352c <__cxa_guard_acquire>
 801c08e:	b138      	cbz	r0, 801c0a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801c090:	4620      	mov	r0, r4
 801c092:	f007 fa57 	bl	8023544 <__cxa_guard_release>
 801c096:	4a0f      	ldr	r2, [pc, #60]	; (801c0d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801c098:	490f      	ldr	r1, [pc, #60]	; (801c0d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801c09a:	4810      	ldr	r0, [pc, #64]	; (801c0dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801c09c:	f007 fa3c 	bl	8023518 <__aeabi_atexit>
 801c0a0:	4c0f      	ldr	r4, [pc, #60]	; (801c0e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801c0a2:	7823      	ldrb	r3, [r4, #0]
 801c0a4:	f3bf 8f5b 	dmb	ish
 801c0a8:	07db      	lsls	r3, r3, #31
 801c0aa:	d40b      	bmi.n	801c0c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	f007 fa3d 	bl	802352c <__cxa_guard_acquire>
 801c0b2:	b138      	cbz	r0, 801c0c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	f007 fa45 	bl	8023544 <__cxa_guard_release>
 801c0ba:	4a06      	ldr	r2, [pc, #24]	; (801c0d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801c0bc:	4909      	ldr	r1, [pc, #36]	; (801c0e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801c0be:	480a      	ldr	r0, [pc, #40]	; (801c0e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801c0c0:	f007 fa2a 	bl	8023518 <__aeabi_atexit>
 801c0c4:	4b05      	ldr	r3, [pc, #20]	; (801c0dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801c0c6:	652b      	str	r3, [r5, #80]	; 0x50
 801c0c8:	4b07      	ldr	r3, [pc, #28]	; (801c0e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801c0ca:	656b      	str	r3, [r5, #84]	; 0x54
 801c0cc:	bd38      	pop	{r3, r4, r5, pc}
 801c0ce:	bf00      	nop
 801c0d0:	2002b194 	.word	0x2002b194
 801c0d4:	20000000 	.word	0x20000000
 801c0d8:	0801a41f 	.word	0x0801a41f
 801c0dc:	20000090 	.word	0x20000090
 801c0e0:	2002b198 	.word	0x2002b198
 801c0e4:	0801a41d 	.word	0x0801a41d
 801c0e8:	20000094 	.word	0x20000094

0801c0ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801c0ec:	b538      	push	{r3, r4, r5, lr}
 801c0ee:	4c15      	ldr	r4, [pc, #84]	; (801c144 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801c0f0:	7823      	ldrb	r3, [r4, #0]
 801c0f2:	f3bf 8f5b 	dmb	ish
 801c0f6:	07da      	lsls	r2, r3, #31
 801c0f8:	4605      	mov	r5, r0
 801c0fa:	d40b      	bmi.n	801c114 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801c0fc:	4620      	mov	r0, r4
 801c0fe:	f007 fa15 	bl	802352c <__cxa_guard_acquire>
 801c102:	b138      	cbz	r0, 801c114 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801c104:	4620      	mov	r0, r4
 801c106:	f007 fa1d 	bl	8023544 <__cxa_guard_release>
 801c10a:	4a0f      	ldr	r2, [pc, #60]	; (801c148 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801c10c:	490f      	ldr	r1, [pc, #60]	; (801c14c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801c10e:	4810      	ldr	r0, [pc, #64]	; (801c150 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801c110:	f007 fa02 	bl	8023518 <__aeabi_atexit>
 801c114:	4c0f      	ldr	r4, [pc, #60]	; (801c154 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801c116:	7823      	ldrb	r3, [r4, #0]
 801c118:	f3bf 8f5b 	dmb	ish
 801c11c:	07db      	lsls	r3, r3, #31
 801c11e:	d40b      	bmi.n	801c138 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801c120:	4620      	mov	r0, r4
 801c122:	f007 fa03 	bl	802352c <__cxa_guard_acquire>
 801c126:	b138      	cbz	r0, 801c138 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801c128:	4620      	mov	r0, r4
 801c12a:	f007 fa0b 	bl	8023544 <__cxa_guard_release>
 801c12e:	4a06      	ldr	r2, [pc, #24]	; (801c148 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801c130:	4909      	ldr	r1, [pc, #36]	; (801c158 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801c132:	480a      	ldr	r0, [pc, #40]	; (801c15c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801c134:	f007 f9f0 	bl	8023518 <__aeabi_atexit>
 801c138:	4b05      	ldr	r3, [pc, #20]	; (801c150 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801c13a:	64ab      	str	r3, [r5, #72]	; 0x48
 801c13c:	4b07      	ldr	r3, [pc, #28]	; (801c15c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801c13e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c140:	bd38      	pop	{r3, r4, r5, pc}
 801c142:	bf00      	nop
 801c144:	2002b19c 	.word	0x2002b19c
 801c148:	20000000 	.word	0x20000000
 801c14c:	0801a423 	.word	0x0801a423
 801c150:	20000098 	.word	0x20000098
 801c154:	2002b1a0 	.word	0x2002b1a0
 801c158:	0801a421 	.word	0x0801a421
 801c15c:	2000009c 	.word	0x2000009c

0801c160 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801c160:	b538      	push	{r3, r4, r5, lr}
 801c162:	4c15      	ldr	r4, [pc, #84]	; (801c1b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801c164:	7823      	ldrb	r3, [r4, #0]
 801c166:	f3bf 8f5b 	dmb	ish
 801c16a:	07da      	lsls	r2, r3, #31
 801c16c:	4605      	mov	r5, r0
 801c16e:	d40b      	bmi.n	801c188 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801c170:	4620      	mov	r0, r4
 801c172:	f007 f9db 	bl	802352c <__cxa_guard_acquire>
 801c176:	b138      	cbz	r0, 801c188 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801c178:	4620      	mov	r0, r4
 801c17a:	f007 f9e3 	bl	8023544 <__cxa_guard_release>
 801c17e:	4a0f      	ldr	r2, [pc, #60]	; (801c1bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c180:	490f      	ldr	r1, [pc, #60]	; (801c1c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801c182:	4810      	ldr	r0, [pc, #64]	; (801c1c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c184:	f007 f9c8 	bl	8023518 <__aeabi_atexit>
 801c188:	4c0f      	ldr	r4, [pc, #60]	; (801c1c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801c18a:	7823      	ldrb	r3, [r4, #0]
 801c18c:	f3bf 8f5b 	dmb	ish
 801c190:	07db      	lsls	r3, r3, #31
 801c192:	d40b      	bmi.n	801c1ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801c194:	4620      	mov	r0, r4
 801c196:	f007 f9c9 	bl	802352c <__cxa_guard_acquire>
 801c19a:	b138      	cbz	r0, 801c1ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801c19c:	4620      	mov	r0, r4
 801c19e:	f007 f9d1 	bl	8023544 <__cxa_guard_release>
 801c1a2:	4a06      	ldr	r2, [pc, #24]	; (801c1bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c1a4:	4909      	ldr	r1, [pc, #36]	; (801c1cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801c1a6:	480a      	ldr	r0, [pc, #40]	; (801c1d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c1a8:	f007 f9b6 	bl	8023518 <__aeabi_atexit>
 801c1ac:	4b05      	ldr	r3, [pc, #20]	; (801c1c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c1ae:	642b      	str	r3, [r5, #64]	; 0x40
 801c1b0:	4b07      	ldr	r3, [pc, #28]	; (801c1d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c1b2:	646b      	str	r3, [r5, #68]	; 0x44
 801c1b4:	bd38      	pop	{r3, r4, r5, pc}
 801c1b6:	bf00      	nop
 801c1b8:	2002b164 	.word	0x2002b164
 801c1bc:	20000000 	.word	0x20000000
 801c1c0:	0801a427 	.word	0x0801a427
 801c1c4:	20000060 	.word	0x20000060
 801c1c8:	2002b168 	.word	0x2002b168
 801c1cc:	0801a425 	.word	0x0801a425
 801c1d0:	20000064 	.word	0x20000064

0801c1d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801c1d4:	b538      	push	{r3, r4, r5, lr}
 801c1d6:	4c15      	ldr	r4, [pc, #84]	; (801c22c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801c1d8:	7823      	ldrb	r3, [r4, #0]
 801c1da:	f3bf 8f5b 	dmb	ish
 801c1de:	07da      	lsls	r2, r3, #31
 801c1e0:	4605      	mov	r5, r0
 801c1e2:	d40b      	bmi.n	801c1fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c1e4:	4620      	mov	r0, r4
 801c1e6:	f007 f9a1 	bl	802352c <__cxa_guard_acquire>
 801c1ea:	b138      	cbz	r0, 801c1fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	f007 f9a9 	bl	8023544 <__cxa_guard_release>
 801c1f2:	4a0f      	ldr	r2, [pc, #60]	; (801c230 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c1f4:	490f      	ldr	r1, [pc, #60]	; (801c234 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801c1f6:	4810      	ldr	r0, [pc, #64]	; (801c238 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c1f8:	f007 f98e 	bl	8023518 <__aeabi_atexit>
 801c1fc:	4c0f      	ldr	r4, [pc, #60]	; (801c23c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801c1fe:	7823      	ldrb	r3, [r4, #0]
 801c200:	f3bf 8f5b 	dmb	ish
 801c204:	07db      	lsls	r3, r3, #31
 801c206:	d40b      	bmi.n	801c220 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c208:	4620      	mov	r0, r4
 801c20a:	f007 f98f 	bl	802352c <__cxa_guard_acquire>
 801c20e:	b138      	cbz	r0, 801c220 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c210:	4620      	mov	r0, r4
 801c212:	f007 f997 	bl	8023544 <__cxa_guard_release>
 801c216:	4a06      	ldr	r2, [pc, #24]	; (801c230 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c218:	4909      	ldr	r1, [pc, #36]	; (801c240 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801c21a:	480a      	ldr	r0, [pc, #40]	; (801c244 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c21c:	f007 f97c 	bl	8023518 <__aeabi_atexit>
 801c220:	4b05      	ldr	r3, [pc, #20]	; (801c238 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c222:	63ab      	str	r3, [r5, #56]	; 0x38
 801c224:	4b07      	ldr	r3, [pc, #28]	; (801c244 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c226:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c228:	bd38      	pop	{r3, r4, r5, pc}
 801c22a:	bf00      	nop
 801c22c:	2002b184 	.word	0x2002b184
 801c230:	20000000 	.word	0x20000000
 801c234:	0801a42b 	.word	0x0801a42b
 801c238:	20000080 	.word	0x20000080
 801c23c:	2002b188 	.word	0x2002b188
 801c240:	0801a429 	.word	0x0801a429
 801c244:	20000084 	.word	0x20000084

0801c248 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801c248:	b510      	push	{r4, lr}
 801c24a:	4604      	mov	r4, r0
 801c24c:	f7ff ff14 	bl	801c078 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801c250:	4620      	mov	r0, r4
 801c252:	f7ff ff85 	bl	801c160 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801c256:	4620      	mov	r0, r4
 801c258:	f7ff ff48 	bl	801c0ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801c25c:	4620      	mov	r0, r4
 801c25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c262:	f7ff bfb7 	b.w	801c1d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801c268 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c268:	b538      	push	{r3, r4, r5, lr}
 801c26a:	4c15      	ldr	r4, [pc, #84]	; (801c2c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c26c:	7823      	ldrb	r3, [r4, #0]
 801c26e:	f3bf 8f5b 	dmb	ish
 801c272:	07da      	lsls	r2, r3, #31
 801c274:	4605      	mov	r5, r0
 801c276:	d40b      	bmi.n	801c290 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c278:	4620      	mov	r0, r4
 801c27a:	f007 f957 	bl	802352c <__cxa_guard_acquire>
 801c27e:	b138      	cbz	r0, 801c290 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c280:	4620      	mov	r0, r4
 801c282:	f007 f95f 	bl	8023544 <__cxa_guard_release>
 801c286:	4a0f      	ldr	r2, [pc, #60]	; (801c2c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c288:	490f      	ldr	r1, [pc, #60]	; (801c2c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c28a:	4810      	ldr	r0, [pc, #64]	; (801c2cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c28c:	f007 f944 	bl	8023518 <__aeabi_atexit>
 801c290:	4c0f      	ldr	r4, [pc, #60]	; (801c2d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c292:	7823      	ldrb	r3, [r4, #0]
 801c294:	f3bf 8f5b 	dmb	ish
 801c298:	07db      	lsls	r3, r3, #31
 801c29a:	d40b      	bmi.n	801c2b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c29c:	4620      	mov	r0, r4
 801c29e:	f007 f945 	bl	802352c <__cxa_guard_acquire>
 801c2a2:	b138      	cbz	r0, 801c2b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	f007 f94d 	bl	8023544 <__cxa_guard_release>
 801c2aa:	4a06      	ldr	r2, [pc, #24]	; (801c2c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c2ac:	4909      	ldr	r1, [pc, #36]	; (801c2d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c2ae:	480a      	ldr	r0, [pc, #40]	; (801c2d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c2b0:	f007 f932 	bl	8023518 <__aeabi_atexit>
 801c2b4:	4b05      	ldr	r3, [pc, #20]	; (801c2cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c2b6:	662b      	str	r3, [r5, #96]	; 0x60
 801c2b8:	4b07      	ldr	r3, [pc, #28]	; (801c2d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c2ba:	666b      	str	r3, [r5, #100]	; 0x64
 801c2bc:	bd38      	pop	{r3, r4, r5, pc}
 801c2be:	bf00      	nop
 801c2c0:	2002b16c 	.word	0x2002b16c
 801c2c4:	20000000 	.word	0x20000000
 801c2c8:	0801a417 	.word	0x0801a417
 801c2cc:	20000068 	.word	0x20000068
 801c2d0:	2002b170 	.word	0x2002b170
 801c2d4:	0801a415 	.word	0x0801a415
 801c2d8:	2000006c 	.word	0x2000006c

0801c2dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c2dc:	b538      	push	{r3, r4, r5, lr}
 801c2de:	4c15      	ldr	r4, [pc, #84]	; (801c334 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c2e0:	7823      	ldrb	r3, [r4, #0]
 801c2e2:	f3bf 8f5b 	dmb	ish
 801c2e6:	07da      	lsls	r2, r3, #31
 801c2e8:	4605      	mov	r5, r0
 801c2ea:	d40b      	bmi.n	801c304 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	f007 f91d 	bl	802352c <__cxa_guard_acquire>
 801c2f2:	b138      	cbz	r0, 801c304 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c2f4:	4620      	mov	r0, r4
 801c2f6:	f007 f925 	bl	8023544 <__cxa_guard_release>
 801c2fa:	4a0f      	ldr	r2, [pc, #60]	; (801c338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c2fc:	490f      	ldr	r1, [pc, #60]	; (801c33c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c2fe:	4810      	ldr	r0, [pc, #64]	; (801c340 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c300:	f007 f90a 	bl	8023518 <__aeabi_atexit>
 801c304:	4c0f      	ldr	r4, [pc, #60]	; (801c344 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c306:	7823      	ldrb	r3, [r4, #0]
 801c308:	f3bf 8f5b 	dmb	ish
 801c30c:	07db      	lsls	r3, r3, #31
 801c30e:	d40b      	bmi.n	801c328 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c310:	4620      	mov	r0, r4
 801c312:	f007 f90b 	bl	802352c <__cxa_guard_acquire>
 801c316:	b138      	cbz	r0, 801c328 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c318:	4620      	mov	r0, r4
 801c31a:	f007 f913 	bl	8023544 <__cxa_guard_release>
 801c31e:	4a06      	ldr	r2, [pc, #24]	; (801c338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c320:	4909      	ldr	r1, [pc, #36]	; (801c348 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c322:	480a      	ldr	r0, [pc, #40]	; (801c34c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c324:	f007 f8f8 	bl	8023518 <__aeabi_atexit>
 801c328:	4b05      	ldr	r3, [pc, #20]	; (801c340 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c32a:	65ab      	str	r3, [r5, #88]	; 0x58
 801c32c:	4b07      	ldr	r3, [pc, #28]	; (801c34c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c32e:	65eb      	str	r3, [r5, #92]	; 0x5c
 801c330:	bd38      	pop	{r3, r4, r5, pc}
 801c332:	bf00      	nop
 801c334:	2002b144 	.word	0x2002b144
 801c338:	20000000 	.word	0x20000000
 801c33c:	0801a41b 	.word	0x0801a41b
 801c340:	20000040 	.word	0x20000040
 801c344:	2002b148 	.word	0x2002b148
 801c348:	0801a419 	.word	0x0801a419
 801c34c:	20000044 	.word	0x20000044

0801c350 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801c350:	b510      	push	{r4, lr}
 801c352:	4604      	mov	r4, r0
 801c354:	f7ff ff88 	bl	801c268 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c358:	4620      	mov	r0, r4
 801c35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c35e:	f7ff bfbd 	b.w	801c2dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c364 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c364:	b538      	push	{r3, r4, r5, lr}
 801c366:	4c15      	ldr	r4, [pc, #84]	; (801c3bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c368:	7823      	ldrb	r3, [r4, #0]
 801c36a:	f3bf 8f5b 	dmb	ish
 801c36e:	07da      	lsls	r2, r3, #31
 801c370:	4605      	mov	r5, r0
 801c372:	d40b      	bmi.n	801c38c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c374:	4620      	mov	r0, r4
 801c376:	f007 f8d9 	bl	802352c <__cxa_guard_acquire>
 801c37a:	b138      	cbz	r0, 801c38c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c37c:	4620      	mov	r0, r4
 801c37e:	f007 f8e1 	bl	8023544 <__cxa_guard_release>
 801c382:	4a0f      	ldr	r2, [pc, #60]	; (801c3c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c384:	490f      	ldr	r1, [pc, #60]	; (801c3c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c386:	4810      	ldr	r0, [pc, #64]	; (801c3c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c388:	f007 f8c6 	bl	8023518 <__aeabi_atexit>
 801c38c:	4c0f      	ldr	r4, [pc, #60]	; (801c3cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c38e:	7823      	ldrb	r3, [r4, #0]
 801c390:	f3bf 8f5b 	dmb	ish
 801c394:	07db      	lsls	r3, r3, #31
 801c396:	d40b      	bmi.n	801c3b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c398:	4620      	mov	r0, r4
 801c39a:	f007 f8c7 	bl	802352c <__cxa_guard_acquire>
 801c39e:	b138      	cbz	r0, 801c3b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c3a0:	4620      	mov	r0, r4
 801c3a2:	f007 f8cf 	bl	8023544 <__cxa_guard_release>
 801c3a6:	4a06      	ldr	r2, [pc, #24]	; (801c3c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c3a8:	4909      	ldr	r1, [pc, #36]	; (801c3d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c3aa:	480a      	ldr	r0, [pc, #40]	; (801c3d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c3ac:	f007 f8b4 	bl	8023518 <__aeabi_atexit>
 801c3b0:	4b05      	ldr	r3, [pc, #20]	; (801c3c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c3b2:	672b      	str	r3, [r5, #112]	; 0x70
 801c3b4:	4b07      	ldr	r3, [pc, #28]	; (801c3d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c3b6:	676b      	str	r3, [r5, #116]	; 0x74
 801c3b8:	bd38      	pop	{r3, r4, r5, pc}
 801c3ba:	bf00      	nop
 801c3bc:	2002b13c 	.word	0x2002b13c
 801c3c0:	20000000 	.word	0x20000000
 801c3c4:	0801a40f 	.word	0x0801a40f
 801c3c8:	20000038 	.word	0x20000038
 801c3cc:	2002b140 	.word	0x2002b140
 801c3d0:	0801a40d 	.word	0x0801a40d
 801c3d4:	2000003c 	.word	0x2000003c

0801c3d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c3d8:	b538      	push	{r3, r4, r5, lr}
 801c3da:	4c15      	ldr	r4, [pc, #84]	; (801c430 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c3dc:	7823      	ldrb	r3, [r4, #0]
 801c3de:	f3bf 8f5b 	dmb	ish
 801c3e2:	07da      	lsls	r2, r3, #31
 801c3e4:	4605      	mov	r5, r0
 801c3e6:	d40b      	bmi.n	801c400 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c3e8:	4620      	mov	r0, r4
 801c3ea:	f007 f89f 	bl	802352c <__cxa_guard_acquire>
 801c3ee:	b138      	cbz	r0, 801c400 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	f007 f8a7 	bl	8023544 <__cxa_guard_release>
 801c3f6:	4a0f      	ldr	r2, [pc, #60]	; (801c434 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c3f8:	490f      	ldr	r1, [pc, #60]	; (801c438 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c3fa:	4810      	ldr	r0, [pc, #64]	; (801c43c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c3fc:	f007 f88c 	bl	8023518 <__aeabi_atexit>
 801c400:	4c0f      	ldr	r4, [pc, #60]	; (801c440 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c402:	7823      	ldrb	r3, [r4, #0]
 801c404:	f3bf 8f5b 	dmb	ish
 801c408:	07db      	lsls	r3, r3, #31
 801c40a:	d40b      	bmi.n	801c424 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c40c:	4620      	mov	r0, r4
 801c40e:	f007 f88d 	bl	802352c <__cxa_guard_acquire>
 801c412:	b138      	cbz	r0, 801c424 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c414:	4620      	mov	r0, r4
 801c416:	f007 f895 	bl	8023544 <__cxa_guard_release>
 801c41a:	4a06      	ldr	r2, [pc, #24]	; (801c434 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c41c:	4909      	ldr	r1, [pc, #36]	; (801c444 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c41e:	480a      	ldr	r0, [pc, #40]	; (801c448 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c420:	f007 f87a 	bl	8023518 <__aeabi_atexit>
 801c424:	4b05      	ldr	r3, [pc, #20]	; (801c43c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c426:	66ab      	str	r3, [r5, #104]	; 0x68
 801c428:	4b07      	ldr	r3, [pc, #28]	; (801c448 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c42a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801c42c:	bd38      	pop	{r3, r4, r5, pc}
 801c42e:	bf00      	nop
 801c430:	2002b134 	.word	0x2002b134
 801c434:	20000000 	.word	0x20000000
 801c438:	0801a413 	.word	0x0801a413
 801c43c:	20000030 	.word	0x20000030
 801c440:	2002b138 	.word	0x2002b138
 801c444:	0801a411 	.word	0x0801a411
 801c448:	20000034 	.word	0x20000034

0801c44c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801c44c:	b510      	push	{r4, lr}
 801c44e:	4604      	mov	r4, r0
 801c450:	f7ff ff88 	bl	801c364 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c454:	4620      	mov	r0, r4
 801c456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c45a:	f7ff bfbd 	b.w	801c3d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801c45e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801c45e:	b510      	push	{r4, lr}
 801c460:	4604      	mov	r4, r0
 801c462:	f7ff fff3 	bl	801c44c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801c466:	4620      	mov	r0, r4
 801c468:	f7ff ff72 	bl	801c350 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801c46c:	4620      	mov	r0, r4
 801c46e:	f7ff fdf9 	bl	801c064 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801c472:	4620      	mov	r0, r4
 801c474:	f7ff fcfa 	bl	801be6c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801c478:	4620      	mov	r0, r4
 801c47a:	f7ff fd75 	bl	801bf68 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801c47e:	4620      	mov	r0, r4
 801c480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c484:	f7ff bee0 	b.w	801c248 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801c488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801c488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c48c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801c490:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801c494:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801c498:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801c49c:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801c4a0:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801c4a4:	8808      	ldrh	r0, [r1, #0]
 801c4a6:	fb0e 4708 	mla	r7, lr, r8, r4
 801c4aa:	f1be 0f00 	cmp.w	lr, #0
 801c4ae:	eb02 0a07 	add.w	sl, r2, r7
 801c4b2:	db37      	blt.n	801c524 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801c4b4:	45f3      	cmp	fp, lr
 801c4b6:	dd35      	ble.n	801c524 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801c4b8:	2c00      	cmp	r4, #0
 801c4ba:	db31      	blt.n	801c520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801c4bc:	45a0      	cmp	r8, r4
 801c4be:	dd2f      	ble.n	801c520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801c4c0:	5dd2      	ldrb	r2, [r2, r7]
 801c4c2:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801c4c6:	1c62      	adds	r2, r4, #1
 801c4c8:	d42f      	bmi.n	801c52a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801c4ca:	4590      	cmp	r8, r2
 801c4cc:	dd2d      	ble.n	801c52a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801c4ce:	b366      	cbz	r6, 801c52a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801c4d0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c4d4:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801c4d8:	f11e 0e01 	adds.w	lr, lr, #1
 801c4dc:	d429      	bmi.n	801c532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801c4de:	45f3      	cmp	fp, lr
 801c4e0:	dd27      	ble.n	801c532 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801c4e2:	f1bc 0f00 	cmp.w	ip, #0
 801c4e6:	f000 80a0 	beq.w	801c62a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801c4ea:	2c00      	cmp	r4, #0
 801c4ec:	db1f      	blt.n	801c52e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c4ee:	45a0      	cmp	r8, r4
 801c4f0:	dd1d      	ble.n	801c52e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c4f2:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801c4f6:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801c4fa:	3401      	adds	r4, #1
 801c4fc:	d41c      	bmi.n	801c538 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801c4fe:	45a0      	cmp	r8, r4
 801c500:	dd1a      	ble.n	801c538 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801c502:	b1de      	cbz	r6, 801c53c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801c504:	44d0      	add	r8, sl
 801c506:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c50a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801c50e:	2e0f      	cmp	r6, #15
 801c510:	d915      	bls.n	801c53e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801c512:	4b49      	ldr	r3, [pc, #292]	; (801c638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801c514:	4a49      	ldr	r2, [pc, #292]	; (801c63c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801c516:	484a      	ldr	r0, [pc, #296]	; (801c640 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801c518:	f240 3155 	movw	r1, #853	; 0x355
 801c51c:	f007 f830 	bl	8023580 <__assert_func>
 801c520:	4681      	mov	r9, r0
 801c522:	e7d0      	b.n	801c4c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801c524:	4607      	mov	r7, r0
 801c526:	4681      	mov	r9, r0
 801c528:	e7d6      	b.n	801c4d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801c52a:	4607      	mov	r7, r0
 801c52c:	e7d4      	b.n	801c4d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801c52e:	4686      	mov	lr, r0
 801c530:	e7e3      	b.n	801c4fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801c532:	4603      	mov	r3, r0
 801c534:	4686      	mov	lr, r0
 801c536:	e7ea      	b.n	801c50e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801c538:	4603      	mov	r3, r0
 801c53a:	e7e8      	b.n	801c50e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801c53c:	4603      	mov	r3, r0
 801c53e:	f1bc 0f0f 	cmp.w	ip, #15
 801c542:	d8e6      	bhi.n	801c512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801c544:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801c548:	fb16 f80c 	smulbb	r8, r6, ip
 801c54c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c550:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801c554:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c558:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801c55c:	ea44 0909 	orr.w	r9, r4, r9
 801c560:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c564:	f1cc 0410 	rsb	r4, ip, #16
 801c568:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c56c:	1ba4      	subs	r4, r4, r6
 801c56e:	041a      	lsls	r2, r3, #16
 801c570:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801c574:	ea4a 0707 	orr.w	r7, sl, r7
 801c578:	4377      	muls	r7, r6
 801c57a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c57e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801c582:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c586:	fb04 7409 	mla	r4, r4, r9, r7
 801c58a:	4313      	orrs	r3, r2
 801c58c:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801c590:	fb08 4303 	mla	r3, r8, r3, r4
 801c594:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c598:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801c59c:	4322      	orrs	r2, r4
 801c59e:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801c5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801c5a6:	0d53      	lsrs	r3, r2, #21
 801c5a8:	0952      	lsrs	r2, r2, #5
 801c5aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c5ae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c5b2:	431a      	orrs	r2, r3
 801c5b4:	b293      	uxth	r3, r2
 801c5b6:	b2af      	uxth	r7, r5
 801c5b8:	1202      	asrs	r2, r0, #8
 801c5ba:	43ed      	mvns	r5, r5
 801c5bc:	b2ed      	uxtb	r5, r5
 801c5be:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c5c2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c5c6:	fb12 f205 	smulbb	r2, r2, r5
 801c5ca:	10c6      	asrs	r6, r0, #3
 801c5cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c5d0:	fb0c 2c07 	mla	ip, ip, r7, r2
 801c5d4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c5d8:	10da      	asrs	r2, r3, #3
 801c5da:	fb16 f605 	smulbb	r6, r6, r5
 801c5de:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c5e2:	fb02 6207 	mla	r2, r2, r7, r6
 801c5e6:	b296      	uxth	r6, r2
 801c5e8:	00c2      	lsls	r2, r0, #3
 801c5ea:	00dc      	lsls	r4, r3, #3
 801c5ec:	b2d2      	uxtb	r2, r2
 801c5ee:	b2e4      	uxtb	r4, r4
 801c5f0:	fb12 f205 	smulbb	r2, r2, r5
 801c5f4:	fb04 2207 	mla	r2, r4, r7, r2
 801c5f8:	fa1f fc8c 	uxth.w	ip, ip
 801c5fc:	b292      	uxth	r2, r2
 801c5fe:	f10c 0301 	add.w	r3, ip, #1
 801c602:	1c50      	adds	r0, r2, #1
 801c604:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801c608:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c60c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c610:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801c614:	4313      	orrs	r3, r2
 801c616:	1c72      	adds	r2, r6, #1
 801c618:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801c61c:	0952      	lsrs	r2, r2, #5
 801c61e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c622:	4313      	orrs	r3, r2
 801c624:	800b      	strh	r3, [r1, #0]
 801c626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c62a:	2e0f      	cmp	r6, #15
 801c62c:	f63f af71 	bhi.w	801c512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801c630:	4603      	mov	r3, r0
 801c632:	4686      	mov	lr, r0
 801c634:	e786      	b.n	801c544 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801c636:	bf00      	nop
 801c638:	080288e7 	.word	0x080288e7
 801c63c:	08028eee 	.word	0x08028eee
 801c640:	0802896f 	.word	0x0802896f

0801c644 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c648:	ed2d 8b08 	vpush	{d8-d11}
 801c64c:	b09b      	sub	sp, #108	; 0x6c
 801c64e:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 801c652:	9309      	str	r3, [sp, #36]	; 0x24
 801c654:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801c658:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 801c65a:	930a      	str	r3, [sp, #40]	; 0x28
 801c65c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801c660:	930e      	str	r3, [sp, #56]	; 0x38
 801c662:	910d      	str	r1, [sp, #52]	; 0x34
 801c664:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801c668:	9018      	str	r0, [sp, #96]	; 0x60
 801c66a:	6870      	ldr	r0, [r6, #4]
 801c66c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c66e:	fb00 1303 	mla	r3, r0, r3, r1
 801c672:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801c674:	6831      	ldr	r1, [r6, #0]
 801c676:	6856      	ldr	r6, [r2, #4]
 801c678:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801c67c:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 801c680:	6813      	ldr	r3, [r2, #0]
 801c682:	930c      	str	r3, [sp, #48]	; 0x30
 801c684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c686:	43db      	mvns	r3, r3
 801c688:	b2db      	uxtb	r3, r3
 801c68a:	eeb0 aa40 	vmov.f32	s20, s0
 801c68e:	eef0 9a60 	vmov.f32	s19, s1
 801c692:	eeb0 9a41 	vmov.f32	s18, s2
 801c696:	eeb0 8a62 	vmov.f32	s16, s5
 801c69a:	eef0 8a43 	vmov.f32	s17, s6
 801c69e:	eef0 ba44 	vmov.f32	s23, s8
 801c6a2:	eeb0 ba64 	vmov.f32	s22, s9
 801c6a6:	eef0 aa45 	vmov.f32	s21, s10
 801c6aa:	3604      	adds	r6, #4
 801c6ac:	930b      	str	r3, [sp, #44]	; 0x2c
 801c6ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	dc03      	bgt.n	801c6bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c6b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	f340 8215 	ble.w	801cae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	f340 8102 	ble.w	801c8c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801c6c4:	ea5f 4229 	movs.w	r2, r9, asr #16
 801c6c8:	ea4f 4328 	mov.w	r3, r8, asr #16
 801c6cc:	d42c      	bmi.n	801c728 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c6ce:	1c51      	adds	r1, r2, #1
 801c6d0:	428c      	cmp	r4, r1
 801c6d2:	dd2c      	ble.n	801c72e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	db2a      	blt.n	801c72e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801c6d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c6da:	1c59      	adds	r1, r3, #1
 801c6dc:	4288      	cmp	r0, r1
 801c6de:	dd26      	ble.n	801c72e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801c6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c6e4:	3b01      	subs	r3, #1
 801c6e6:	fb02 9203 	mla	r2, r2, r3, r9
 801c6ea:	1412      	asrs	r2, r2, #16
 801c6ec:	d429      	bmi.n	801c742 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c6ee:	3201      	adds	r2, #1
 801c6f0:	4294      	cmp	r4, r2
 801c6f2:	dd26      	ble.n	801c742 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c6f4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801c6f6:	fb02 8303 	mla	r3, r2, r3, r8
 801c6fa:	141b      	asrs	r3, r3, #16
 801c6fc:	d421      	bmi.n	801c742 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c6fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c700:	3301      	adds	r3, #1
 801c702:	429a      	cmp	r2, r3
 801c704:	dd1d      	ble.n	801c742 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c706:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c70a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801c70e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801c712:	9312      	str	r3, [sp, #72]	; 0x48
 801c714:	f1be 0f00 	cmp.w	lr, #0
 801c718:	f300 8138 	bgt.w	801c98c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 801c71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c71e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c722:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801c726:	e0d1      	b.n	801c8cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 801c728:	1c51      	adds	r1, r2, #1
 801c72a:	f040 80c3 	bne.w	801c8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801c72e:	42a2      	cmp	r2, r4
 801c730:	f280 80c0 	bge.w	801c8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801c734:	1c5f      	adds	r7, r3, #1
 801c736:	f2c0 80bd 	blt.w	801c8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801c73a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c73c:	4293      	cmp	r3, r2
 801c73e:	f280 80b9 	bge.w	801c8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801c742:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c746:	4657      	mov	r7, sl
 801c748:	f1bb 0f00 	cmp.w	fp, #0
 801c74c:	dde6      	ble.n	801c71c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c74e:	ea5f 4229 	movs.w	r2, r9, asr #16
 801c752:	ea4f 4328 	mov.w	r3, r8, asr #16
 801c756:	f3c9 3003 	ubfx	r0, r9, #12, #4
 801c75a:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801c75e:	f100 80fc 	bmi.w	801c95a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 801c762:	f102 0c01 	add.w	ip, r2, #1
 801c766:	4564      	cmp	r4, ip
 801c768:	f340 80f9 	ble.w	801c95e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	f2c0 80f6 	blt.w	801c95e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801c772:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c774:	f103 0c01 	add.w	ip, r3, #1
 801c778:	4565      	cmp	r5, ip
 801c77a:	f340 80f0 	ble.w	801c95e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 801c77e:	fb03 2304 	mla	r3, r3, r4, r2
 801c782:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c786:	441a      	add	r2, r3
 801c788:	5ceb      	ldrb	r3, [r5, r3]
 801c78a:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 801c78e:	2800      	cmp	r0, #0
 801c790:	f000 80db 	beq.w	801c94a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 801c794:	7853      	ldrb	r3, [r2, #1]
 801c796:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c79a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c79c:	b141      	cbz	r1, 801c7b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801c79e:	1913      	adds	r3, r2, r4
 801c7a0:	5d12      	ldrb	r2, [r2, r4]
 801c7a2:	785b      	ldrb	r3, [r3, #1]
 801c7a4:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801c7a8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c7ac:	9210      	str	r2, [sp, #64]	; 0x40
 801c7ae:	9314      	str	r3, [sp, #80]	; 0x50
 801c7b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c7b2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c7b4:	fb10 f201 	smulbb	r2, r0, r1
 801c7b8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c7bc:	10d2      	asrs	r2, r2, #3
 801c7be:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c7c2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c7c6:	ea4c 0c03 	orr.w	ip, ip, r3
 801c7ca:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 801c7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801c7d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c7d2:	041b      	lsls	r3, r3, #16
 801c7d4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c7d8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c7dc:	432b      	orrs	r3, r5
 801c7de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c7e0:	4353      	muls	r3, r2
 801c7e2:	fb05 330c 	mla	r3, r5, ip, r3
 801c7e6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c7ea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c7ee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c7f2:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c7f6:	f1c1 0c10 	rsb	ip, r1, #16
 801c7fa:	ebac 0c00 	sub.w	ip, ip, r0
 801c7fe:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c802:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c806:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c808:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c80a:	0418      	lsls	r0, r3, #16
 801c80c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c810:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c814:	4318      	orrs	r0, r3
 801c816:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c81a:	fb02 c200 	mla	r2, r2, r0, ip
 801c81e:	0d53      	lsrs	r3, r2, #21
 801c820:	0952      	lsrs	r2, r2, #5
 801c822:	f8b7 c000 	ldrh.w	ip, [r7]
 801c826:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c82a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c82e:	431a      	orrs	r2, r3
 801c830:	b292      	uxth	r2, r2
 801c832:	ea4f 212c 	mov.w	r1, ip, asr #8
 801c836:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c83a:	1210      	asrs	r0, r2, #8
 801c83c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c840:	fb11 f105 	smulbb	r1, r1, r5
 801c844:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801c848:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c84c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c850:	fb00 1003 	mla	r0, r0, r3, r1
 801c854:	fa5f fc8c 	uxtb.w	ip, ip
 801c858:	10d1      	asrs	r1, r2, #3
 801c85a:	00d2      	lsls	r2, r2, #3
 801c85c:	fb1c fc05 	smulbb	ip, ip, r5
 801c860:	b2d2      	uxtb	r2, r2
 801c862:	fb02 c203 	mla	r2, r2, r3, ip
 801c866:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c86a:	b280      	uxth	r0, r0
 801c86c:	b292      	uxth	r2, r2
 801c86e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c872:	fb1e fe05 	smulbb	lr, lr, r5
 801c876:	fb01 e103 	mla	r1, r1, r3, lr
 801c87a:	f102 0c01 	add.w	ip, r2, #1
 801c87e:	1c43      	adds	r3, r0, #1
 801c880:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c884:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c888:	b289      	uxth	r1, r1
 801c88a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c88e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801c892:	4313      	orrs	r3, r2
 801c894:	1c4a      	adds	r2, r1, #1
 801c896:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c89a:	0949      	lsrs	r1, r1, #5
 801c89c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c8a0:	430b      	orrs	r3, r1
 801c8a2:	803b      	strh	r3, [r7, #0]
 801c8a4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801c8a6:	4499      	add	r9, r3
 801c8a8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c8aa:	3702      	adds	r7, #2
 801c8ac:	4498      	add	r8, r3
 801c8ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c8b2:	e749      	b.n	801c748 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c8b4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801c8b6:	4499      	add	r9, r3
 801c8b8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c8ba:	4498      	add	r8, r3
 801c8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8be:	3b01      	subs	r3, #1
 801c8c0:	9309      	str	r3, [sp, #36]	; 0x24
 801c8c2:	f10a 0a02 	add.w	sl, sl, #2
 801c8c6:	e6f9      	b.n	801c6bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c8c8:	f47f af0a 	bne.w	801c6e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c8cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	f340 8109 	ble.w	801cae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801c8d4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c8d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c8dc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c8e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c8e2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c8e6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c8ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c8ee:	eef0 6a48 	vmov.f32	s13, s16
 801c8f2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c8f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8fa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c8fe:	ee16 9a90 	vmov	r9, s13
 801c902:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c906:	eef0 6a68 	vmov.f32	s13, s17
 801c90a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c90e:	ee18 2a10 	vmov	r2, s16
 801c912:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c916:	fb92 f3f3 	sdiv	r3, r2, r3
 801c91a:	ee18 2a90 	vmov	r2, s17
 801c91e:	932f      	str	r3, [sp, #188]	; 0xbc
 801c920:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c922:	fb92 f3f3 	sdiv	r3, r2, r3
 801c926:	9330      	str	r3, [sp, #192]	; 0xc0
 801c928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c92a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c92c:	3b01      	subs	r3, #1
 801c92e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c932:	930d      	str	r3, [sp, #52]	; 0x34
 801c934:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c936:	bf08      	it	eq
 801c938:	4613      	moveq	r3, r2
 801c93a:	ee16 8a90 	vmov	r8, s13
 801c93e:	9309      	str	r3, [sp, #36]	; 0x24
 801c940:	eef0 8a67 	vmov.f32	s17, s15
 801c944:	eeb0 8a47 	vmov.f32	s16, s14
 801c948:	e6b1      	b.n	801c6ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c94a:	2900      	cmp	r1, #0
 801c94c:	f43f af30 	beq.w	801c7b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801c950:	5d13      	ldrb	r3, [r2, r4]
 801c952:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c956:	9310      	str	r3, [sp, #64]	; 0x40
 801c958:	e72a      	b.n	801c7b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801c95a:	1c55      	adds	r5, r2, #1
 801c95c:	d1a2      	bne.n	801c8a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801c95e:	4294      	cmp	r4, r2
 801c960:	dda0      	ble.n	801c8a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801c962:	1c5d      	adds	r5, r3, #1
 801c964:	db9e      	blt.n	801c8a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801c966:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c968:	429d      	cmp	r5, r3
 801c96a:	dd9b      	ble.n	801c8a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801c96c:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801c970:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c974:	9202      	str	r2, [sp, #8]
 801c976:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801c97a:	e9cd 4300 	strd	r4, r3, [sp]
 801c97e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c980:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c982:	4633      	mov	r3, r6
 801c984:	4639      	mov	r1, r7
 801c986:	f7ff fd7f 	bl	801c488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801c98a:	e78b      	b.n	801c8a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801c98c:	ea4f 4329 	mov.w	r3, r9, asr #16
 801c990:	ea4f 4228 	mov.w	r2, r8, asr #16
 801c994:	fb04 3202 	mla	r2, r4, r2, r3
 801c998:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c99c:	4413      	add	r3, r2
 801c99e:	5c8a      	ldrb	r2, [r1, r2]
 801c9a0:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 801c9a4:	f3c8 3003 	ubfx	r0, r8, #12, #4
 801c9a8:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 801c9ac:	f1bc 0f00 	cmp.w	ip, #0
 801c9b0:	f000 8091 	beq.w	801cad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 801c9b4:	785a      	ldrb	r2, [r3, #1]
 801c9b6:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801c9ba:	9215      	str	r2, [sp, #84]	; 0x54
 801c9bc:	b140      	cbz	r0, 801c9d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801c9be:	191a      	adds	r2, r3, r4
 801c9c0:	5d1b      	ldrb	r3, [r3, r4]
 801c9c2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c9c6:	9311      	str	r3, [sp, #68]	; 0x44
 801c9c8:	7853      	ldrb	r3, [r2, #1]
 801c9ca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c9ce:	9316      	str	r3, [sp, #88]	; 0x58
 801c9d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c9d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c9d4:	fb1c f200 	smulbb	r2, ip, r0
 801c9d8:	041f      	lsls	r7, r3, #16
 801c9da:	10d2      	asrs	r2, r2, #3
 801c9dc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c9e0:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801c9e4:	431f      	orrs	r7, r3
 801c9e6:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801c9ea:	9319      	str	r3, [sp, #100]	; 0x64
 801c9ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c9ee:	041b      	lsls	r3, r3, #16
 801c9f0:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801c9f4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c9f8:	ea43 030b 	orr.w	r3, r3, fp
 801c9fc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801c9fe:	4353      	muls	r3, r2
 801ca00:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ca04:	fb05 3707 	mla	r7, r5, r7, r3
 801ca08:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ca0c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801ca10:	ea43 0b01 	orr.w	fp, r3, r1
 801ca14:	f1c0 0110 	rsb	r1, r0, #16
 801ca18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ca1a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ca1c:	eba1 0c0c 	sub.w	ip, r1, ip
 801ca20:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ca24:	fb0c 770b 	mla	r7, ip, fp, r7
 801ca28:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ca2c:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801ca30:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ca34:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ca38:	ea4c 0c0b 	orr.w	ip, ip, fp
 801ca3c:	fb02 770c 	mla	r7, r2, ip, r7
 801ca40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ca42:	0d79      	lsrs	r1, r7, #21
 801ca44:	8812      	ldrh	r2, [r2, #0]
 801ca46:	097f      	lsrs	r7, r7, #5
 801ca48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ca4c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ca50:	430f      	orrs	r7, r1
 801ca52:	1211      	asrs	r1, r2, #8
 801ca54:	b2bb      	uxth	r3, r7
 801ca56:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ca5a:	fb11 f105 	smulbb	r1, r1, r5
 801ca5e:	1218      	asrs	r0, r3, #8
 801ca60:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ca62:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ca66:	fb00 1005 	mla	r0, r0, r5, r1
 801ca6a:	10d7      	asrs	r7, r2, #3
 801ca6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ca6e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ca72:	fb17 f705 	smulbb	r7, r7, r5
 801ca76:	10d9      	asrs	r1, r3, #3
 801ca78:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ca7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ca7e:	fb01 7105 	mla	r1, r1, r5, r7
 801ca82:	00d2      	lsls	r2, r2, #3
 801ca84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ca86:	b2d2      	uxtb	r2, r2
 801ca88:	fb12 f205 	smulbb	r2, r2, r5
 801ca8c:	00db      	lsls	r3, r3, #3
 801ca8e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ca90:	b2db      	uxtb	r3, r3
 801ca92:	b280      	uxth	r0, r0
 801ca94:	fb03 2305 	mla	r3, r3, r5, r2
 801ca98:	b29b      	uxth	r3, r3
 801ca9a:	b289      	uxth	r1, r1
 801ca9c:	1c42      	adds	r2, r0, #1
 801ca9e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801caa2:	1c4f      	adds	r7, r1, #1
 801caa4:	1c5a      	adds	r2, r3, #1
 801caa6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801caaa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801caae:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cab2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cab6:	0949      	lsrs	r1, r1, #5
 801cab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801caba:	4310      	orrs	r0, r2
 801cabc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cac0:	4308      	orrs	r0, r1
 801cac2:	f823 0b02 	strh.w	r0, [r3], #2
 801cac6:	930f      	str	r3, [sp, #60]	; 0x3c
 801cac8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801caca:	4499      	add	r9, r3
 801cacc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cace:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cad2:	4498      	add	r8, r3
 801cad4:	e61e      	b.n	801c714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801cad6:	2800      	cmp	r0, #0
 801cad8:	f43f af7a 	beq.w	801c9d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801cadc:	5d1b      	ldrb	r3, [r3, r4]
 801cade:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801cae2:	9311      	str	r3, [sp, #68]	; 0x44
 801cae4:	e774      	b.n	801c9d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801cae6:	b01b      	add	sp, #108	; 0x6c
 801cae8:	ecbd 8b08 	vpop	{d8-d11}
 801caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801caf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801caf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801caf4:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801caf8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801cafc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801cb00:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801cb04:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801cb08:	8808      	ldrh	r0, [r1, #0]
 801cb0a:	fb06 570e 	mla	r7, r6, lr, r5
 801cb0e:	2e00      	cmp	r6, #0
 801cb10:	eb02 0807 	add.w	r8, r2, r7
 801cb14:	db38      	blt.n	801cb88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801cb16:	45b1      	cmp	r9, r6
 801cb18:	dd36      	ble.n	801cb88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801cb1a:	2d00      	cmp	r5, #0
 801cb1c:	db32      	blt.n	801cb84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801cb1e:	45ae      	cmp	lr, r5
 801cb20:	dd30      	ble.n	801cb84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801cb22:	5dd2      	ldrb	r2, [r2, r7]
 801cb24:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801cb28:	1c6a      	adds	r2, r5, #1
 801cb2a:	d430      	bmi.n	801cb8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801cb2c:	4596      	cmp	lr, r2
 801cb2e:	dd2e      	ble.n	801cb8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801cb30:	b36c      	cbz	r4, 801cb8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801cb32:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cb36:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801cb3a:	3601      	adds	r6, #1
 801cb3c:	d42b      	bmi.n	801cb96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801cb3e:	45b1      	cmp	r9, r6
 801cb40:	dd29      	ble.n	801cb96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801cb42:	f1bc 0f00 	cmp.w	ip, #0
 801cb46:	d028      	beq.n	801cb9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801cb48:	2d00      	cmp	r5, #0
 801cb4a:	db22      	blt.n	801cb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801cb4c:	45ae      	cmp	lr, r5
 801cb4e:	dd20      	ble.n	801cb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801cb50:	f818 600e 	ldrb.w	r6, [r8, lr]
 801cb54:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801cb58:	3501      	adds	r5, #1
 801cb5a:	d407      	bmi.n	801cb6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801cb5c:	45ae      	cmp	lr, r5
 801cb5e:	dd05      	ble.n	801cb6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801cb60:	b134      	cbz	r4, 801cb70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801cb62:	44c6      	add	lr, r8
 801cb64:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801cb68:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801cb6c:	2c0f      	cmp	r4, #15
 801cb6e:	d802      	bhi.n	801cb76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801cb70:	f1bc 0f0f 	cmp.w	ip, #15
 801cb74:	d914      	bls.n	801cba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801cb76:	4b26      	ldr	r3, [pc, #152]	; (801cc10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801cb78:	4a26      	ldr	r2, [pc, #152]	; (801cc14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801cb7a:	4827      	ldr	r0, [pc, #156]	; (801cc18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801cb7c:	f240 3155 	movw	r1, #853	; 0x355
 801cb80:	f006 fcfe 	bl	8023580 <__assert_func>
 801cb84:	4607      	mov	r7, r0
 801cb86:	e7cf      	b.n	801cb28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801cb88:	4602      	mov	r2, r0
 801cb8a:	4607      	mov	r7, r0
 801cb8c:	e7d5      	b.n	801cb3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801cb8e:	4602      	mov	r2, r0
 801cb90:	e7d3      	b.n	801cb3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801cb92:	4606      	mov	r6, r0
 801cb94:	e7e0      	b.n	801cb58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801cb96:	4606      	mov	r6, r0
 801cb98:	e7e8      	b.n	801cb6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801cb9a:	2c0f      	cmp	r4, #15
 801cb9c:	d8eb      	bhi.n	801cb76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801cb9e:	4606      	mov	r6, r0
 801cba0:	043d      	lsls	r5, r7, #16
 801cba2:	fb14 f30c 	smulbb	r3, r4, ip
 801cba6:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801cbaa:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801cbae:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801cbb2:	10db      	asrs	r3, r3, #3
 801cbb4:	432f      	orrs	r7, r5
 801cbb6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801cbba:	f1cc 0510 	rsb	r5, ip, #16
 801cbbe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801cbc2:	1b2d      	subs	r5, r5, r4
 801cbc4:	ea4e 0202 	orr.w	r2, lr, r2
 801cbc8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801cbcc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801cbd0:	4354      	muls	r4, r2
 801cbd2:	fb05 4507 	mla	r5, r5, r7, r4
 801cbd6:	0404      	lsls	r4, r0, #16
 801cbd8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801cbdc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cbe0:	4320      	orrs	r0, r4
 801cbe2:	fb03 5400 	mla	r4, r3, r0, r5
 801cbe6:	0430      	lsls	r0, r6, #16
 801cbe8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801cbec:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801cbf0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801cbf4:	4330      	orrs	r0, r6
 801cbf6:	fb03 4000 	mla	r0, r3, r0, r4
 801cbfa:	0d43      	lsrs	r3, r0, #21
 801cbfc:	0940      	lsrs	r0, r0, #5
 801cbfe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cc02:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cc06:	4318      	orrs	r0, r3
 801cc08:	8008      	strh	r0, [r1, #0]
 801cc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc0e:	bf00      	nop
 801cc10:	080288e7 	.word	0x080288e7
 801cc14:	08028eee 	.word	0x08028eee
 801cc18:	0802896f 	.word	0x0802896f

0801cc1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc20:	ed2d 8b0a 	vpush	{d8-d12}
 801cc24:	b095      	sub	sp, #84	; 0x54
 801cc26:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 801cc2a:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 801cc2c:	9306      	str	r3, [sp, #24]
 801cc2e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801cc32:	9109      	str	r1, [sp, #36]	; 0x24
 801cc34:	9307      	str	r3, [sp, #28]
 801cc36:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801cc3a:	9012      	str	r0, [sp, #72]	; 0x48
 801cc3c:	6878      	ldr	r0, [r7, #4]
 801cc3e:	9211      	str	r2, [sp, #68]	; 0x44
 801cc40:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801cc42:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801cc46:	fb00 1303 	mla	r3, r0, r3, r1
 801cc4a:	6839      	ldr	r1, [r7, #0]
 801cc4c:	6857      	ldr	r7, [r2, #4]
 801cc4e:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 801cc52:	6813      	ldr	r3, [r2, #0]
 801cc54:	9308      	str	r3, [sp, #32]
 801cc56:	eeb0 aa40 	vmov.f32	s20, s0
 801cc5a:	eef0 9a60 	vmov.f32	s19, s1
 801cc5e:	eeb0 9a41 	vmov.f32	s18, s2
 801cc62:	eeb0 8a62 	vmov.f32	s16, s5
 801cc66:	eef0 8a43 	vmov.f32	s17, s6
 801cc6a:	eeb0 ca44 	vmov.f32	s24, s8
 801cc6e:	eef0 ba64 	vmov.f32	s23, s9
 801cc72:	eeb0 ba45 	vmov.f32	s22, s10
 801cc76:	3704      	adds	r7, #4
 801cc78:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801cc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	dc03      	bgt.n	801cc8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cc82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	f340 819a 	ble.w	801cfbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801cc8a:	9b06      	ldr	r3, [sp, #24]
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	f340 80c4 	ble.w	801ce1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801cc92:	ea5f 4229 	movs.w	r2, r9, asr #16
 801cc96:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cc9a:	d429      	bmi.n	801ccf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801cc9c:	1c51      	adds	r1, r2, #1
 801cc9e:	428c      	cmp	r4, r1
 801cca0:	dd29      	ble.n	801ccf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	db27      	blt.n	801ccf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801cca6:	9807      	ldr	r0, [sp, #28]
 801cca8:	1c59      	adds	r1, r3, #1
 801ccaa:	4288      	cmp	r0, r1
 801ccac:	dd23      	ble.n	801ccf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801ccae:	9b06      	ldr	r3, [sp, #24]
 801ccb0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ccb2:	3b01      	subs	r3, #1
 801ccb4:	fb02 9203 	mla	r2, r2, r3, r9
 801ccb8:	1412      	asrs	r2, r2, #16
 801ccba:	d425      	bmi.n	801cd08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801ccbc:	3201      	adds	r2, #1
 801ccbe:	4294      	cmp	r4, r2
 801ccc0:	dd22      	ble.n	801cd08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801ccc2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ccc4:	fb02 6303 	mla	r3, r2, r3, r6
 801ccc8:	141b      	asrs	r3, r3, #16
 801ccca:	d41d      	bmi.n	801cd08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801cccc:	9a07      	ldr	r2, [sp, #28]
 801ccce:	3301      	adds	r3, #1
 801ccd0:	429a      	cmp	r2, r3
 801ccd2:	dd19      	ble.n	801cd08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801ccd4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ccd8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801ccdc:	f1b8 0f00 	cmp.w	r8, #0
 801cce0:	f300 80f8 	bgt.w	801ced4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801cce4:	9b06      	ldr	r3, [sp, #24]
 801cce6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ccea:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801ccee:	e096      	b.n	801ce1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801ccf0:	1c51      	adds	r1, r2, #1
 801ccf2:	f040 8088 	bne.w	801ce06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801ccf6:	42a2      	cmp	r2, r4
 801ccf8:	f280 8085 	bge.w	801ce06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801ccfc:	1c5a      	adds	r2, r3, #1
 801ccfe:	f2c0 8082 	blt.w	801ce06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801cd02:	9a07      	ldr	r2, [sp, #28]
 801cd04:	4293      	cmp	r3, r2
 801cd06:	da7e      	bge.n	801ce06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801cd08:	f8dd b018 	ldr.w	fp, [sp, #24]
 801cd0c:	46d0      	mov	r8, sl
 801cd0e:	f1bb 0f00 	cmp.w	fp, #0
 801cd12:	dde7      	ble.n	801cce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cd14:	ea5f 4229 	movs.w	r2, r9, asr #16
 801cd18:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cd1c:	f3c9 3003 	ubfx	r0, r9, #12, #4
 801cd20:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cd24:	f100 80c0 	bmi.w	801cea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801cd28:	f102 0c01 	add.w	ip, r2, #1
 801cd2c:	4564      	cmp	r4, ip
 801cd2e:	f340 80bd 	ble.w	801ceac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	f2c0 80ba 	blt.w	801ceac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801cd38:	9d07      	ldr	r5, [sp, #28]
 801cd3a:	f103 0c01 	add.w	ip, r3, #1
 801cd3e:	4565      	cmp	r5, ip
 801cd40:	f340 80b4 	ble.w	801ceac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801cd44:	fb03 2304 	mla	r3, r3, r4, r2
 801cd48:	9d08      	ldr	r5, [sp, #32]
 801cd4a:	9a08      	ldr	r2, [sp, #32]
 801cd4c:	441a      	add	r2, r3
 801cd4e:	5ceb      	ldrb	r3, [r5, r3]
 801cd50:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 801cd54:	2800      	cmp	r0, #0
 801cd56:	f000 809f 	beq.w	801ce98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 801cd5a:	7853      	ldrb	r3, [r2, #1]
 801cd5c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cd60:	930d      	str	r3, [sp, #52]	; 0x34
 801cd62:	b141      	cbz	r1, 801cd76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801cd64:	1913      	adds	r3, r2, r4
 801cd66:	5d12      	ldrb	r2, [r2, r4]
 801cd68:	785b      	ldrb	r3, [r3, #1]
 801cd6a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801cd6e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cd72:	920a      	str	r2, [sp, #40]	; 0x28
 801cd74:	930e      	str	r3, [sp, #56]	; 0x38
 801cd76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd78:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801cd7a:	fb10 f201 	smulbb	r2, r0, r1
 801cd7e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cd82:	10d2      	asrs	r2, r2, #3
 801cd84:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cd88:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cd8c:	ea4c 0c03 	orr.w	ip, ip, r3
 801cd90:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 801cd94:	930c      	str	r3, [sp, #48]	; 0x30
 801cd96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd98:	041b      	lsls	r3, r3, #16
 801cd9a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801cd9e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cda2:	432b      	orrs	r3, r5
 801cda4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cda6:	4353      	muls	r3, r2
 801cda8:	fb05 330c 	mla	r3, r5, ip, r3
 801cdac:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801cdb0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cdb4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801cdb8:	ea4c 0e0e 	orr.w	lr, ip, lr
 801cdbc:	f1c1 0c10 	rsb	ip, r1, #16
 801cdc0:	ebac 0c00 	sub.w	ip, ip, r0
 801cdc4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801cdc8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801cdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdce:	0418      	lsls	r0, r3, #16
 801cdd0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801cdd4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cdd8:	4318      	orrs	r0, r3
 801cdda:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801cdde:	fb02 c200 	mla	r2, r2, r0, ip
 801cde2:	0d53      	lsrs	r3, r2, #21
 801cde4:	0952      	lsrs	r2, r2, #5
 801cde6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cdea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801cdee:	431a      	orrs	r2, r3
 801cdf0:	f8a8 2000 	strh.w	r2, [r8]
 801cdf4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cdf6:	4499      	add	r9, r3
 801cdf8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cdfa:	f108 0802 	add.w	r8, r8, #2
 801cdfe:	441e      	add	r6, r3
 801ce00:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ce04:	e783      	b.n	801cd0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801ce06:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ce08:	4499      	add	r9, r3
 801ce0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ce0c:	441e      	add	r6, r3
 801ce0e:	9b06      	ldr	r3, [sp, #24]
 801ce10:	3b01      	subs	r3, #1
 801ce12:	9306      	str	r3, [sp, #24]
 801ce14:	f10a 0a02 	add.w	sl, sl, #2
 801ce18:	e737      	b.n	801cc8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ce1a:	f47f af48 	bne.w	801ccae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ce1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	f340 80cc 	ble.w	801cfbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801ce26:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801ce2a:	ee79 9aab 	vadd.f32	s19, s19, s23
 801ce2e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801ce32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ce34:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ce38:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ce3c:	eef0 6a48 	vmov.f32	s13, s16
 801ce40:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ce44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ce48:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ce4c:	ee16 9a90 	vmov	r9, s13
 801ce50:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ce54:	eef0 6a68 	vmov.f32	s13, s17
 801ce58:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ce5c:	ee18 2a10 	vmov	r2, s16
 801ce60:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ce64:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce68:	ee18 2a90 	vmov	r2, s17
 801ce6c:	932b      	str	r3, [sp, #172]	; 0xac
 801ce6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ce70:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce74:	932c      	str	r3, [sp, #176]	; 0xb0
 801ce76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ce7a:	3b01      	subs	r3, #1
 801ce7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ce80:	9309      	str	r3, [sp, #36]	; 0x24
 801ce82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ce84:	bf08      	it	eq
 801ce86:	4613      	moveq	r3, r2
 801ce88:	ee16 6a90 	vmov	r6, s13
 801ce8c:	9306      	str	r3, [sp, #24]
 801ce8e:	eef0 8a67 	vmov.f32	s17, s15
 801ce92:	eeb0 8a47 	vmov.f32	s16, s14
 801ce96:	e6f1      	b.n	801cc7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ce98:	2900      	cmp	r1, #0
 801ce9a:	f43f af6c 	beq.w	801cd76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801ce9e:	5d13      	ldrb	r3, [r2, r4]
 801cea0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cea4:	930a      	str	r3, [sp, #40]	; 0x28
 801cea6:	e766      	b.n	801cd76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801cea8:	1c55      	adds	r5, r2, #1
 801ceaa:	d1a3      	bne.n	801cdf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801ceac:	4294      	cmp	r4, r2
 801ceae:	dda1      	ble.n	801cdf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801ceb0:	1c5d      	adds	r5, r3, #1
 801ceb2:	db9f      	blt.n	801cdf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801ceb4:	9d07      	ldr	r5, [sp, #28]
 801ceb6:	429d      	cmp	r5, r3
 801ceb8:	dd9c      	ble.n	801cdf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801ceba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cec2:	e9cd 4500 	strd	r4, r5, [sp]
 801cec6:	463b      	mov	r3, r7
 801cec8:	9a08      	ldr	r2, [sp, #32]
 801ceca:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cecc:	4641      	mov	r1, r8
 801cece:	f7ff fe0f 	bl	801caf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ced2:	e78f      	b.n	801cdf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801ced4:	ea4f 4329 	mov.w	r3, r9, asr #16
 801ced8:	1432      	asrs	r2, r6, #16
 801ceda:	fb04 3202 	mla	r2, r4, r2, r3
 801cede:	9908      	ldr	r1, [sp, #32]
 801cee0:	9b08      	ldr	r3, [sp, #32]
 801cee2:	4413      	add	r3, r2
 801cee4:	5c8a      	ldrb	r2, [r1, r2]
 801cee6:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 801ceea:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ceee:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 801cef2:	f1be 0f00 	cmp.w	lr, #0
 801cef6:	d05b      	beq.n	801cfb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 801cef8:	785a      	ldrb	r2, [r3, #1]
 801cefa:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801cefe:	920f      	str	r2, [sp, #60]	; 0x3c
 801cf00:	b140      	cbz	r0, 801cf14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801cf02:	191a      	adds	r2, r3, r4
 801cf04:	5d1b      	ldrb	r3, [r3, r4]
 801cf06:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cf0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cf0c:	7853      	ldrb	r3, [r2, #1]
 801cf0e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cf12:	9310      	str	r3, [sp, #64]	; 0x40
 801cf14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cf16:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801cf18:	fb1e f200 	smulbb	r2, lr, r0
 801cf1c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cf20:	10d2      	asrs	r2, r2, #3
 801cf22:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cf26:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cf2a:	ea4c 0c03 	orr.w	ip, ip, r3
 801cf2e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801cf32:	9313      	str	r3, [sp, #76]	; 0x4c
 801cf34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf36:	041b      	lsls	r3, r3, #16
 801cf38:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801cf3c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cf40:	ea43 030b 	orr.w	r3, r3, fp
 801cf44:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cf46:	4353      	muls	r3, r2
 801cf48:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cf4c:	fb05 3c0c 	mla	ip, r5, ip, r3
 801cf50:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cf54:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801cf58:	ea43 0b01 	orr.w	fp, r3, r1
 801cf5c:	f1c0 0110 	rsb	r1, r0, #16
 801cf60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf62:	eba1 0e0e 	sub.w	lr, r1, lr
 801cf66:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801cf6a:	fb0e cc0b 	mla	ip, lr, fp, ip
 801cf6e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801cf72:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801cf76:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cf7a:	ea4b 0e0e 	orr.w	lr, fp, lr
 801cf7e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801cf82:	fb02 cc0e 	mla	ip, r2, lr, ip
 801cf86:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801cf8a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cf8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cf92:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801cf96:	ea43 0c0c 	orr.w	ip, r3, ip
 801cf9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf9c:	f823 cb02 	strh.w	ip, [r3], #2
 801cfa0:	930c      	str	r3, [sp, #48]	; 0x30
 801cfa2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cfa4:	4499      	add	r9, r3
 801cfa6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cfa8:	f108 38ff 	add.w	r8, r8, #4294967295
 801cfac:	441e      	add	r6, r3
 801cfae:	e695      	b.n	801ccdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 801cfb0:	2800      	cmp	r0, #0
 801cfb2:	d0af      	beq.n	801cf14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801cfb4:	5d1b      	ldrb	r3, [r3, r4]
 801cfb6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cfba:	930b      	str	r3, [sp, #44]	; 0x2c
 801cfbc:	e7aa      	b.n	801cf14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801cfbe:	b015      	add	sp, #84	; 0x54
 801cfc0:	ecbd 8b0a 	vpop	{d8-d12}
 801cfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cfc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfcc:	468b      	mov	fp, r1
 801cfce:	8809      	ldrh	r1, [r1, #0]
 801cfd0:	b089      	sub	sp, #36	; 0x24
 801cfd2:	10cd      	asrs	r5, r1, #3
 801cfd4:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801cfd8:	ea4f 2921 	mov.w	r9, r1, asr #8
 801cfdc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cfe0:	00c9      	lsls	r1, r1, #3
 801cfe2:	9500      	str	r5, [sp, #0]
 801cfe4:	b2c9      	uxtb	r1, r1
 801cfe6:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801cfea:	9101      	str	r1, [sp, #4]
 801cfec:	9900      	ldr	r1, [sp, #0]
 801cfee:	9202      	str	r2, [sp, #8]
 801cff0:	fb04 650e 	mla	r5, r4, lr, r6
 801cff4:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801cff8:	eb02 0805 	add.w	r8, r2, r5
 801cffc:	0209      	lsls	r1, r1, #8
 801cffe:	9a01      	ldr	r2, [sp, #4]
 801d000:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801d004:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801d008:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801d00c:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801d010:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801d014:	4311      	orrs	r1, r2
 801d016:	2c00      	cmp	r4, #0
 801d018:	9107      	str	r1, [sp, #28]
 801d01a:	db43      	blt.n	801d0a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801d01c:	45a2      	cmp	sl, r4
 801d01e:	dd41      	ble.n	801d0a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801d020:	2e00      	cmp	r6, #0
 801d022:	db3d      	blt.n	801d0a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801d024:	45b6      	cmp	lr, r6
 801d026:	dd3b      	ble.n	801d0a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801d028:	9a02      	ldr	r2, [sp, #8]
 801d02a:	5d55      	ldrb	r5, [r2, r5]
 801d02c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d030:	441d      	add	r5, r3
 801d032:	1c72      	adds	r2, r6, #1
 801d034:	d439      	bmi.n	801d0aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801d036:	4596      	cmp	lr, r2
 801d038:	dd37      	ble.n	801d0aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801d03a:	2f00      	cmp	r7, #0
 801d03c:	d035      	beq.n	801d0aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801d03e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d042:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d046:	4419      	add	r1, r3
 801d048:	3401      	adds	r4, #1
 801d04a:	d432      	bmi.n	801d0b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801d04c:	45a2      	cmp	sl, r4
 801d04e:	dd30      	ble.n	801d0b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801d050:	b378      	cbz	r0, 801d0b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801d052:	2e00      	cmp	r6, #0
 801d054:	db2b      	blt.n	801d0ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801d056:	45b6      	cmp	lr, r6
 801d058:	dd29      	ble.n	801d0ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801d05a:	f818 400e 	ldrb.w	r4, [r8, lr]
 801d05e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d062:	441c      	add	r4, r3
 801d064:	3601      	adds	r6, #1
 801d066:	d427      	bmi.n	801d0b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801d068:	45b6      	cmp	lr, r6
 801d06a:	dd25      	ble.n	801d0b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801d06c:	b327      	cbz	r7, 801d0b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801d06e:	44c6      	add	lr, r8
 801d070:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d074:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d078:	4413      	add	r3, r2
 801d07a:	782a      	ldrb	r2, [r5, #0]
 801d07c:	9202      	str	r2, [sp, #8]
 801d07e:	780a      	ldrb	r2, [r1, #0]
 801d080:	9203      	str	r2, [sp, #12]
 801d082:	7822      	ldrb	r2, [r4, #0]
 801d084:	9204      	str	r2, [sp, #16]
 801d086:	2f0f      	cmp	r7, #15
 801d088:	781a      	ldrb	r2, [r3, #0]
 801d08a:	9205      	str	r2, [sp, #20]
 801d08c:	d801      	bhi.n	801d092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 801d08e:	280f      	cmp	r0, #15
 801d090:	d914      	bls.n	801d0bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 801d092:	4b3f      	ldr	r3, [pc, #252]	; (801d190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 801d094:	4a3f      	ldr	r2, [pc, #252]	; (801d194 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801d096:	4840      	ldr	r0, [pc, #256]	; (801d198 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801d098:	f240 3173 	movw	r1, #883	; 0x373
 801d09c:	f006 fa70 	bl	8023580 <__assert_func>
 801d0a0:	ad07      	add	r5, sp, #28
 801d0a2:	e7c6      	b.n	801d032 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 801d0a4:	a907      	add	r1, sp, #28
 801d0a6:	460d      	mov	r5, r1
 801d0a8:	e7ce      	b.n	801d048 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801d0aa:	a907      	add	r1, sp, #28
 801d0ac:	e7cc      	b.n	801d048 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801d0ae:	ac07      	add	r4, sp, #28
 801d0b0:	e7d8      	b.n	801d064 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 801d0b2:	ab07      	add	r3, sp, #28
 801d0b4:	461c      	mov	r4, r3
 801d0b6:	e7e0      	b.n	801d07a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801d0b8:	ab07      	add	r3, sp, #28
 801d0ba:	e7de      	b.n	801d07a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801d0bc:	b2ba      	uxth	r2, r7
 801d0be:	b280      	uxth	r0, r0
 801d0c0:	fb02 fa00 	mul.w	sl, r2, r0
 801d0c4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d0c8:	0112      	lsls	r2, r2, #4
 801d0ca:	b280      	uxth	r0, r0
 801d0cc:	f891 8002 	ldrb.w	r8, [r1, #2]
 801d0d0:	7849      	ldrb	r1, [r1, #1]
 801d0d2:	78ae      	ldrb	r6, [r5, #2]
 801d0d4:	786d      	ldrb	r5, [r5, #1]
 801d0d6:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801d0da:	eba2 020a 	sub.w	r2, r2, sl
 801d0de:	b292      	uxth	r2, r2
 801d0e0:	ebae 0e00 	sub.w	lr, lr, r0
 801d0e4:	fa1f fe8e 	uxth.w	lr, lr
 801d0e8:	4351      	muls	r1, r2
 801d0ea:	fb02 f808 	mul.w	r8, r2, r8
 801d0ee:	fb0e 8806 	mla	r8, lr, r6, r8
 801d0f2:	fb0e 1505 	mla	r5, lr, r5, r1
 801d0f6:	78a6      	ldrb	r6, [r4, #2]
 801d0f8:	7861      	ldrb	r1, [r4, #1]
 801d0fa:	fa1f f78c 	uxth.w	r7, ip
 801d0fe:	fb00 8806 	mla	r8, r0, r6, r8
 801d102:	fb00 5501 	mla	r5, r0, r1, r5
 801d106:	789e      	ldrb	r6, [r3, #2]
 801d108:	7859      	ldrb	r1, [r3, #1]
 801d10a:	9b00      	ldr	r3, [sp, #0]
 801d10c:	ea6f 0c0c 	mvn.w	ip, ip
 801d110:	fa5f fc8c 	uxtb.w	ip, ip
 801d114:	fb0a 5101 	mla	r1, sl, r1, r5
 801d118:	fb13 f50c 	smulbb	r5, r3, ip
 801d11c:	9b03      	ldr	r3, [sp, #12]
 801d11e:	435a      	muls	r2, r3
 801d120:	9b02      	ldr	r3, [sp, #8]
 801d122:	fb0e 2203 	mla	r2, lr, r3, r2
 801d126:	9b04      	ldr	r3, [sp, #16]
 801d128:	fb00 2003 	mla	r0, r0, r3, r2
 801d12c:	9b05      	ldr	r3, [sp, #20]
 801d12e:	fb0a 8606 	mla	r6, sl, r6, r8
 801d132:	fb0a 0a03 	mla	sl, sl, r3, r0
 801d136:	9b01      	ldr	r3, [sp, #4]
 801d138:	fb19 f90c 	smulbb	r9, r9, ip
 801d13c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801d140:	fb13 fc0c 	smulbb	ip, r3, ip
 801d144:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d148:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d14c:	fb06 9607 	mla	r6, r6, r7, r9
 801d150:	fb01 5107 	mla	r1, r1, r7, r5
 801d154:	fb0a c707 	mla	r7, sl, r7, ip
 801d158:	b2b6      	uxth	r6, r6
 801d15a:	b289      	uxth	r1, r1
 801d15c:	b2bf      	uxth	r7, r7
 801d15e:	f106 0901 	add.w	r9, r6, #1
 801d162:	f107 0c01 	add.w	ip, r7, #1
 801d166:	1c4d      	adds	r5, r1, #1
 801d168:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801d16c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d170:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801d174:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d178:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d17c:	0949      	lsrs	r1, r1, #5
 801d17e:	433e      	orrs	r6, r7
 801d180:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d184:	430e      	orrs	r6, r1
 801d186:	f8ab 6000 	strh.w	r6, [fp]
 801d18a:	b009      	add	sp, #36	; 0x24
 801d18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d190:	080288e7 	.word	0x080288e7
 801d194:	08028e45 	.word	0x08028e45
 801d198:	0802896f 	.word	0x0802896f

0801d19c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1a0:	ed2d 8b08 	vpush	{d8-d11}
 801d1a4:	b097      	sub	sp, #92	; 0x5c
 801d1a6:	eeb0 aa40 	vmov.f32	s20, s0
 801d1aa:	9309      	str	r3, [sp, #36]	; 0x24
 801d1ac:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801d1b0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801d1b2:	930b      	str	r3, [sp, #44]	; 0x2c
 801d1b4:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801d1b8:	9310      	str	r3, [sp, #64]	; 0x40
 801d1ba:	910f      	str	r1, [sp, #60]	; 0x3c
 801d1bc:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801d1c0:	9015      	str	r0, [sp, #84]	; 0x54
 801d1c2:	6860      	ldr	r0, [r4, #4]
 801d1c4:	9213      	str	r2, [sp, #76]	; 0x4c
 801d1c6:	fb00 1303 	mla	r3, r0, r3, r1
 801d1ca:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801d1cc:	6821      	ldr	r1, [r4, #0]
 801d1ce:	6854      	ldr	r4, [r2, #4]
 801d1d0:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 801d1d4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801d1d8:	930a      	str	r3, [sp, #40]	; 0x28
 801d1da:	6813      	ldr	r3, [r2, #0]
 801d1dc:	930e      	str	r3, [sp, #56]	; 0x38
 801d1de:	1d23      	adds	r3, r4, #4
 801d1e0:	9308      	str	r3, [sp, #32]
 801d1e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1e4:	43db      	mvns	r3, r3
 801d1e6:	b2db      	uxtb	r3, r3
 801d1e8:	eef0 9a60 	vmov.f32	s19, s1
 801d1ec:	eeb0 9a41 	vmov.f32	s18, s2
 801d1f0:	eeb0 8a62 	vmov.f32	s16, s5
 801d1f4:	eef0 8a43 	vmov.f32	s17, s6
 801d1f8:	eef0 ba44 	vmov.f32	s23, s8
 801d1fc:	eeb0 ba64 	vmov.f32	s22, s9
 801d200:	eef0 aa45 	vmov.f32	s21, s10
 801d204:	930c      	str	r3, [sp, #48]	; 0x30
 801d206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d208:	2b00      	cmp	r3, #0
 801d20a:	dc03      	bgt.n	801d214 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801d20c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d20e:	2b00      	cmp	r3, #0
 801d210:	f340 825c 	ble.w	801d6cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801d214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d216:	2b00      	cmp	r3, #0
 801d218:	f340 8127 	ble.w	801d46a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 801d21c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d21e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d220:	1412      	asrs	r2, r2, #16
 801d222:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d226:	d430      	bmi.n	801d28a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801d228:	1c51      	adds	r1, r2, #1
 801d22a:	428d      	cmp	r5, r1
 801d22c:	dd30      	ble.n	801d290 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801d22e:	2b00      	cmp	r3, #0
 801d230:	db2e      	blt.n	801d290 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801d232:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d234:	1c59      	adds	r1, r3, #1
 801d236:	4288      	cmp	r0, r1
 801d238:	dd2a      	ble.n	801d290 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801d23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d23c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d23e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801d240:	3b01      	subs	r3, #1
 801d242:	fb02 1203 	mla	r2, r2, r3, r1
 801d246:	1412      	asrs	r2, r2, #16
 801d248:	d42c      	bmi.n	801d2a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801d24a:	3201      	adds	r2, #1
 801d24c:	4295      	cmp	r5, r2
 801d24e:	dd29      	ble.n	801d2a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801d250:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801d252:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d254:	fb02 1303 	mla	r3, r2, r3, r1
 801d258:	141b      	asrs	r3, r3, #16
 801d25a:	d423      	bmi.n	801d2a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801d25c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d25e:	3301      	adds	r3, #1
 801d260:	429a      	cmp	r2, r3
 801d262:	dd1f      	ble.n	801d2a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801d264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d266:	9311      	str	r3, [sp, #68]	; 0x44
 801d268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d26a:	930d      	str	r3, [sp, #52]	; 0x34
 801d26c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d270:	9312      	str	r3, [sp, #72]	; 0x48
 801d272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d274:	2b00      	cmp	r3, #0
 801d276:	f300 8161 	bgt.w	801d53c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801d27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d27c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d27e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d282:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d286:	930a      	str	r3, [sp, #40]	; 0x28
 801d288:	e0f1      	b.n	801d46e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801d28a:	1c51      	adds	r1, r2, #1
 801d28c:	f040 80de 	bne.w	801d44c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d290:	42aa      	cmp	r2, r5
 801d292:	f280 80db 	bge.w	801d44c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d296:	1c5f      	adds	r7, r3, #1
 801d298:	f2c0 80d8 	blt.w	801d44c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d29c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d29e:	4293      	cmp	r3, r2
 801d2a0:	f280 80d4 	bge.w	801d44c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2a6:	9311      	str	r3, [sp, #68]	; 0x44
 801d2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2aa:	930d      	str	r3, [sp, #52]	; 0x34
 801d2ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	dde3      	ble.n	801d27a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801d2b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d2b4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801d2b6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d2b8:	141a      	asrs	r2, r3, #16
 801d2ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d2bc:	1400      	asrs	r0, r0, #16
 801d2be:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d2c2:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801d2c6:	f100 8120 	bmi.w	801d50a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 801d2ca:	1c46      	adds	r6, r0, #1
 801d2cc:	42b5      	cmp	r5, r6
 801d2ce:	f340 811e 	ble.w	801d50e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801d2d2:	2a00      	cmp	r2, #0
 801d2d4:	f2c0 811b 	blt.w	801d50e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801d2d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d2da:	1c56      	adds	r6, r2, #1
 801d2dc:	42b7      	cmp	r7, r6
 801d2de:	f340 8116 	ble.w	801d50e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801d2e2:	fb02 0005 	mla	r0, r2, r5, r0
 801d2e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d2e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d2ea:	9c08      	ldr	r4, [sp, #32]
 801d2ec:	4402      	add	r2, r0
 801d2ee:	5c30      	ldrb	r0, [r6, r0]
 801d2f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d2f4:	9014      	str	r0, [sp, #80]	; 0x50
 801d2f6:	1826      	adds	r6, r4, r0
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	f000 80f7 	beq.w	801d4ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801d2fe:	f892 e001 	ldrb.w	lr, [r2, #1]
 801d302:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d306:	44a6      	add	lr, r4
 801d308:	2900      	cmp	r1, #0
 801d30a:	f000 80f8 	beq.w	801d4fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 801d30e:	1950      	adds	r0, r2, r5
 801d310:	5d52      	ldrb	r2, [r2, r5]
 801d312:	7840      	ldrb	r0, [r0, #1]
 801d314:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d318:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d31c:	4422      	add	r2, r4
 801d31e:	4420      	add	r0, r4
 801d320:	b29b      	uxth	r3, r3
 801d322:	b289      	uxth	r1, r1
 801d324:	fb03 fa01 	mul.w	sl, r3, r1
 801d328:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801d32c:	011b      	lsls	r3, r3, #4
 801d32e:	b289      	uxth	r1, r1
 801d330:	f89e c002 	ldrb.w	ip, [lr, #2]
 801d334:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d338:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d33a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d33c:	f8b7 8000 	ldrh.w	r8, [r7]
 801d340:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 801d344:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801d348:	eba3 030a 	sub.w	r3, r3, sl
 801d34c:	b29b      	uxth	r3, r3
 801d34e:	eba9 0901 	sub.w	r9, r9, r1
 801d352:	fa1f f989 	uxth.w	r9, r9
 801d356:	fb03 fc0c 	mul.w	ip, r3, ip
 801d35a:	fb09 cc0b 	mla	ip, r9, fp, ip
 801d35e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d362:	fb01 cc0b 	mla	ip, r1, fp, ip
 801d366:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d36a:	fb0a cc0b 	mla	ip, sl, fp, ip
 801d36e:	ea4f 2b28 	mov.w	fp, r8, asr #8
 801d372:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d376:	fb1b fb04 	smulbb	fp, fp, r4
 801d37a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d37e:	fb0c bc07 	mla	ip, ip, r7, fp
 801d382:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d386:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801d38a:	f89e e000 	ldrb.w	lr, [lr]
 801d38e:	435e      	muls	r6, r3
 801d390:	fb09 660b 	mla	r6, r9, fp, r6
 801d394:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d398:	fb01 660b 	mla	r6, r1, fp, r6
 801d39c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d3a0:	fb0a 660b 	mla	r6, sl, fp, r6
 801d3a4:	ea4f 0be8 	mov.w	fp, r8, asr #3
 801d3a8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d3ac:	fb1b fb04 	smulbb	fp, fp, r4
 801d3b0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d3b4:	fb06 b607 	mla	r6, r6, r7, fp
 801d3b8:	b2b4      	uxth	r4, r6
 801d3ba:	9412      	str	r4, [sp, #72]	; 0x48
 801d3bc:	9e08      	ldr	r6, [sp, #32]
 801d3be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d3c0:	f816 b004 	ldrb.w	fp, [r6, r4]
 801d3c4:	fb03 f30e 	mul.w	r3, r3, lr
 801d3c8:	f892 e000 	ldrb.w	lr, [r2]
 801d3cc:	fb09 330b 	mla	r3, r9, fp, r3
 801d3d0:	fb01 330e 	mla	r3, r1, lr, r3
 801d3d4:	f890 e000 	ldrb.w	lr, [r0]
 801d3d8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d3dc:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801d3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3e2:	fa5f f888 	uxtb.w	r8, r8
 801d3e6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d3ea:	fb18 f803 	smulbb	r8, r8, r3
 801d3ee:	fb0e 8807 	mla	r8, lr, r7, r8
 801d3f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d3f4:	fa1f fc8c 	uxth.w	ip, ip
 801d3f8:	fa1f f888 	uxth.w	r8, r8
 801d3fc:	f103 0b01 	add.w	fp, r3, #1
 801d400:	f10c 0201 	add.w	r2, ip, #1
 801d404:	f108 0e01 	add.w	lr, r8, #1
 801d408:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 801d40c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d410:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 801d414:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d418:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 801d41c:	0976      	lsrs	r6, r6, #5
 801d41e:	ea4c 0c08 	orr.w	ip, ip, r8
 801d422:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d428:	ea4c 0606 	orr.w	r6, ip, r6
 801d42c:	801e      	strh	r6, [r3, #0]
 801d42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d430:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d432:	3302      	adds	r3, #2
 801d434:	930d      	str	r3, [sp, #52]	; 0x34
 801d436:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d438:	4413      	add	r3, r2
 801d43a:	9329      	str	r3, [sp, #164]	; 0xa4
 801d43c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801d43e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d440:	4413      	add	r3, r2
 801d442:	932a      	str	r3, [sp, #168]	; 0xa8
 801d444:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d446:	3b01      	subs	r3, #1
 801d448:	9311      	str	r3, [sp, #68]	; 0x44
 801d44a:	e72f      	b.n	801d2ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801d44c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d44e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d450:	4413      	add	r3, r2
 801d452:	9329      	str	r3, [sp, #164]	; 0xa4
 801d454:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801d456:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d458:	4413      	add	r3, r2
 801d45a:	932a      	str	r3, [sp, #168]	; 0xa8
 801d45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d45e:	3b01      	subs	r3, #1
 801d460:	9309      	str	r3, [sp, #36]	; 0x24
 801d462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d464:	3302      	adds	r3, #2
 801d466:	930a      	str	r3, [sp, #40]	; 0x28
 801d468:	e6d4      	b.n	801d214 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801d46a:	f47f aee6 	bne.w	801d23a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801d46e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d470:	2b00      	cmp	r3, #0
 801d472:	f340 812b 	ble.w	801d6cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801d476:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d47a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d47e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d482:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d484:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d488:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d48c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d490:	eef0 6a48 	vmov.f32	s13, s16
 801d494:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d498:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d49c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d4a0:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801d4a4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d4a8:	eef0 6a68 	vmov.f32	s13, s17
 801d4ac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d4b0:	ee18 2a10 	vmov	r2, s16
 801d4b4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d4b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4bc:	ee18 2a90 	vmov	r2, s17
 801d4c0:	932b      	str	r3, [sp, #172]	; 0xac
 801d4c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d4c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4c8:	932c      	str	r3, [sp, #176]	; 0xb0
 801d4ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d4cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d4ce:	3b01      	subs	r3, #1
 801d4d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801d4d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d4d8:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801d4dc:	bf08      	it	eq
 801d4de:	4613      	moveq	r3, r2
 801d4e0:	9309      	str	r3, [sp, #36]	; 0x24
 801d4e2:	eef0 8a67 	vmov.f32	s17, s15
 801d4e6:	eeb0 8a47 	vmov.f32	s16, s14
 801d4ea:	e68c      	b.n	801d206 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d4ec:	b151      	cbz	r1, 801d504 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 801d4ee:	5d52      	ldrb	r2, [r2, r5]
 801d4f0:	9808      	ldr	r0, [sp, #32]
 801d4f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d4f6:	4402      	add	r2, r0
 801d4f8:	4630      	mov	r0, r6
 801d4fa:	46b6      	mov	lr, r6
 801d4fc:	e710      	b.n	801d320 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801d4fe:	4630      	mov	r0, r6
 801d500:	4632      	mov	r2, r6
 801d502:	e70d      	b.n	801d320 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801d504:	4630      	mov	r0, r6
 801d506:	4632      	mov	r2, r6
 801d508:	e7f7      	b.n	801d4fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 801d50a:	1c46      	adds	r6, r0, #1
 801d50c:	d18f      	bne.n	801d42e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d50e:	4285      	cmp	r5, r0
 801d510:	dd8d      	ble.n	801d42e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d512:	1c54      	adds	r4, r2, #1
 801d514:	db8b      	blt.n	801d42e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d516:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d518:	4294      	cmp	r4, r2
 801d51a:	dd88      	ble.n	801d42e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d51c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801d520:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d524:	9002      	str	r0, [sp, #8]
 801d526:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d52a:	e9cd 5300 	strd	r5, r3, [sp]
 801d52e:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 801d532:	9b08      	ldr	r3, [sp, #32]
 801d534:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d536:	f7ff fd47 	bl	801cfc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801d53a:	e778      	b.n	801d42e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d53c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d53e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d540:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d542:	1410      	asrs	r0, r2, #16
 801d544:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d548:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d54a:	1412      	asrs	r2, r2, #16
 801d54c:	fb05 2000 	mla	r0, r5, r0, r2
 801d550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d552:	f814 a000 	ldrb.w	sl, [r4, r0]
 801d556:	4402      	add	r2, r0
 801d558:	9808      	ldr	r0, [sp, #32]
 801d55a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801d55e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d562:	eb00 060a 	add.w	r6, r0, sl
 801d566:	2b00      	cmp	r3, #0
 801d568:	f000 80a1 	beq.w	801d6ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 801d56c:	f892 c001 	ldrb.w	ip, [r2, #1]
 801d570:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d574:	4484      	add	ip, r0
 801d576:	2900      	cmp	r1, #0
 801d578:	f000 80a2 	beq.w	801d6c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801d57c:	1950      	adds	r0, r2, r5
 801d57e:	5d52      	ldrb	r2, [r2, r5]
 801d580:	7840      	ldrb	r0, [r0, #1]
 801d582:	9c08      	ldr	r4, [sp, #32]
 801d584:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d588:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d58c:	4422      	add	r2, r4
 801d58e:	4420      	add	r0, r4
 801d590:	b29b      	uxth	r3, r3
 801d592:	b289      	uxth	r1, r1
 801d594:	fb03 f901 	mul.w	r9, r3, r1
 801d598:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d59c:	011b      	lsls	r3, r3, #4
 801d59e:	b289      	uxth	r1, r1
 801d5a0:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801d5a4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d5a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5aa:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801d5ae:	eba3 0309 	sub.w	r3, r3, r9
 801d5b2:	b29b      	uxth	r3, r3
 801d5b4:	eba8 0801 	sub.w	r8, r8, r1
 801d5b8:	fa1f f888 	uxth.w	r8, r8
 801d5bc:	435f      	muls	r7, r3
 801d5be:	fb08 770b 	mla	r7, r8, fp, r7
 801d5c2:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d5c6:	f8b4 e000 	ldrh.w	lr, [r4]
 801d5ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d5cc:	fb01 770b 	mla	r7, r1, fp, r7
 801d5d0:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d5d4:	fb09 770b 	mla	r7, r9, fp, r7
 801d5d8:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801d5dc:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d5e0:	fb1b fb04 	smulbb	fp, fp, r4
 801d5e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d5e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d5ea:	fb07 b704 	mla	r7, r7, r4, fp
 801d5ee:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d5f2:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801d5f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d5f8:	f89c c000 	ldrb.w	ip, [ip]
 801d5fc:	435e      	muls	r6, r3
 801d5fe:	fb08 660b 	mla	r6, r8, fp, r6
 801d602:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d606:	fb01 660b 	mla	r6, r1, fp, r6
 801d60a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d60e:	fb09 660b 	mla	r6, r9, fp, r6
 801d612:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801d616:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d61a:	fb1b fb04 	smulbb	fp, fp, r4
 801d61e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d620:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d624:	fb06 b604 	mla	r6, r6, r4, fp
 801d628:	9c08      	ldr	r4, [sp, #32]
 801d62a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801d62e:	fb03 f30c 	mul.w	r3, r3, ip
 801d632:	f892 c000 	ldrb.w	ip, [r2]
 801d636:	fb08 330a 	mla	r3, r8, sl, r3
 801d63a:	fb01 330c 	mla	r3, r1, ip, r3
 801d63e:	f890 c000 	ldrb.w	ip, [r0]
 801d642:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d646:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d64c:	fa5f fe8e 	uxtb.w	lr, lr
 801d650:	fb1e fe03 	smulbb	lr, lr, r3
 801d654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d656:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d65a:	fb0c ec03 	mla	ip, ip, r3, lr
 801d65e:	b2bf      	uxth	r7, r7
 801d660:	b2b6      	uxth	r6, r6
 801d662:	fa1f fc8c 	uxth.w	ip, ip
 801d666:	1c7b      	adds	r3, r7, #1
 801d668:	f10c 0201 	add.w	r2, ip, #1
 801d66c:	f106 0b01 	add.w	fp, r6, #1
 801d670:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d674:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801d678:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801d67c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d680:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d684:	0976      	lsrs	r6, r6, #5
 801d686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d688:	4317      	orrs	r7, r2
 801d68a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d68e:	4337      	orrs	r7, r6
 801d690:	f823 7b02 	strh.w	r7, [r3], #2
 801d694:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d696:	930d      	str	r3, [sp, #52]	; 0x34
 801d698:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d69a:	4413      	add	r3, r2
 801d69c:	9329      	str	r3, [sp, #164]	; 0xa4
 801d69e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801d6a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d6a2:	4413      	add	r3, r2
 801d6a4:	932a      	str	r3, [sp, #168]	; 0xa8
 801d6a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d6a8:	3b01      	subs	r3, #1
 801d6aa:	9311      	str	r3, [sp, #68]	; 0x44
 801d6ac:	e5e1      	b.n	801d272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801d6ae:	b151      	cbz	r1, 801d6c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 801d6b0:	5d52      	ldrb	r2, [r2, r5]
 801d6b2:	9808      	ldr	r0, [sp, #32]
 801d6b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6b8:	4402      	add	r2, r0
 801d6ba:	4630      	mov	r0, r6
 801d6bc:	46b4      	mov	ip, r6
 801d6be:	e767      	b.n	801d590 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801d6c0:	4630      	mov	r0, r6
 801d6c2:	4632      	mov	r2, r6
 801d6c4:	e764      	b.n	801d590 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801d6c6:	4630      	mov	r0, r6
 801d6c8:	4632      	mov	r2, r6
 801d6ca:	e7f7      	b.n	801d6bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 801d6cc:	b017      	add	sp, #92	; 0x5c
 801d6ce:	ecbd 8b08 	vpop	{d8-d11}
 801d6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d6d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6dc:	880e      	ldrh	r6, [r1, #0]
 801d6de:	b085      	sub	sp, #20
 801d6e0:	0230      	lsls	r0, r6, #8
 801d6e2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801d6e6:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801d6ea:	0170      	lsls	r0, r6, #5
 801d6ec:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801d6f0:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801d6f4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801d6f8:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801d6fc:	00f6      	lsls	r6, r6, #3
 801d6fe:	ea4b 0000 	orr.w	r0, fp, r0
 801d702:	b2f6      	uxtb	r6, r6
 801d704:	4691      	mov	r9, r2
 801d706:	fb05 7a0c 	mla	sl, r5, ip, r7
 801d70a:	4306      	orrs	r6, r0
 801d70c:	2d00      	cmp	r5, #0
 801d70e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801d712:	9603      	str	r6, [sp, #12]
 801d714:	eb09 0e0a 	add.w	lr, r9, sl
 801d718:	db42      	blt.n	801d7a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801d71a:	45a8      	cmp	r8, r5
 801d71c:	dd40      	ble.n	801d7a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801d71e:	2f00      	cmp	r7, #0
 801d720:	db3c      	blt.n	801d79c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801d722:	45bc      	cmp	ip, r7
 801d724:	dd3a      	ble.n	801d79c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801d726:	f819 600a 	ldrb.w	r6, [r9, sl]
 801d72a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d72e:	441e      	add	r6, r3
 801d730:	1c78      	adds	r0, r7, #1
 801d732:	d438      	bmi.n	801d7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801d734:	4584      	cmp	ip, r0
 801d736:	dd36      	ble.n	801d7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801d738:	b3aa      	cbz	r2, 801d7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801d73a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801d73e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d742:	4418      	add	r0, r3
 801d744:	3501      	adds	r5, #1
 801d746:	d432      	bmi.n	801d7ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801d748:	45a8      	cmp	r8, r5
 801d74a:	dd30      	ble.n	801d7ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801d74c:	b37c      	cbz	r4, 801d7ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801d74e:	2f00      	cmp	r7, #0
 801d750:	db2b      	blt.n	801d7aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801d752:	45bc      	cmp	ip, r7
 801d754:	dd29      	ble.n	801d7aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801d756:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801d75a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d75e:	441d      	add	r5, r3
 801d760:	3701      	adds	r7, #1
 801d762:	d427      	bmi.n	801d7b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801d764:	45bc      	cmp	ip, r7
 801d766:	dd25      	ble.n	801d7b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801d768:	b322      	cbz	r2, 801d7b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801d76a:	44f4      	add	ip, lr
 801d76c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801d770:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d774:	443b      	add	r3, r7
 801d776:	781f      	ldrb	r7, [r3, #0]
 801d778:	f896 a000 	ldrb.w	sl, [r6]
 801d77c:	f890 b000 	ldrb.w	fp, [r0]
 801d780:	f895 9000 	ldrb.w	r9, [r5]
 801d784:	9700      	str	r7, [sp, #0]
 801d786:	2a0f      	cmp	r2, #15
 801d788:	d801      	bhi.n	801d78e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 801d78a:	2c0f      	cmp	r4, #15
 801d78c:	d914      	bls.n	801d7b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 801d78e:	4b2c      	ldr	r3, [pc, #176]	; (801d840 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 801d790:	4a2c      	ldr	r2, [pc, #176]	; (801d844 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801d792:	482d      	ldr	r0, [pc, #180]	; (801d848 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801d794:	f240 3173 	movw	r1, #883	; 0x373
 801d798:	f005 fef2 	bl	8023580 <__assert_func>
 801d79c:	ae03      	add	r6, sp, #12
 801d79e:	e7c7      	b.n	801d730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 801d7a0:	a803      	add	r0, sp, #12
 801d7a2:	4606      	mov	r6, r0
 801d7a4:	e7ce      	b.n	801d744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801d7a6:	a803      	add	r0, sp, #12
 801d7a8:	e7cc      	b.n	801d744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801d7aa:	ad03      	add	r5, sp, #12
 801d7ac:	e7d8      	b.n	801d760 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 801d7ae:	ab03      	add	r3, sp, #12
 801d7b0:	461d      	mov	r5, r3
 801d7b2:	e7e0      	b.n	801d776 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801d7b4:	ab03      	add	r3, sp, #12
 801d7b6:	e7de      	b.n	801d776 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801d7b8:	b292      	uxth	r2, r2
 801d7ba:	b2a4      	uxth	r4, r4
 801d7bc:	fb02 f804 	mul.w	r8, r2, r4
 801d7c0:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801d7c4:	0112      	lsls	r2, r2, #4
 801d7c6:	b2a4      	uxth	r4, r4
 801d7c8:	f890 e002 	ldrb.w	lr, [r0, #2]
 801d7cc:	78b7      	ldrb	r7, [r6, #2]
 801d7ce:	7840      	ldrb	r0, [r0, #1]
 801d7d0:	7876      	ldrb	r6, [r6, #1]
 801d7d2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801d7d6:	eba2 0208 	sub.w	r2, r2, r8
 801d7da:	b292      	uxth	r2, r2
 801d7dc:	ebac 0c04 	sub.w	ip, ip, r4
 801d7e0:	fa1f fc8c 	uxth.w	ip, ip
 801d7e4:	fb02 fe0e 	mul.w	lr, r2, lr
 801d7e8:	fb0c ee07 	mla	lr, ip, r7, lr
 801d7ec:	78af      	ldrb	r7, [r5, #2]
 801d7ee:	fb04 ee07 	mla	lr, r4, r7, lr
 801d7f2:	789f      	ldrb	r7, [r3, #2]
 801d7f4:	785b      	ldrb	r3, [r3, #1]
 801d7f6:	fb08 e707 	mla	r7, r8, r7, lr
 801d7fa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d7fe:	fb02 fe0b 	mul.w	lr, r2, fp
 801d802:	4342      	muls	r2, r0
 801d804:	7868      	ldrb	r0, [r5, #1]
 801d806:	9701      	str	r7, [sp, #4]
 801d808:	fb0c ee0a 	mla	lr, ip, sl, lr
 801d80c:	9f00      	ldr	r7, [sp, #0]
 801d80e:	fb0c 2206 	mla	r2, ip, r6, r2
 801d812:	fb04 ee09 	mla	lr, r4, r9, lr
 801d816:	fb04 2400 	mla	r4, r4, r0, r2
 801d81a:	fb08 ee07 	mla	lr, r8, r7, lr
 801d81e:	9f01      	ldr	r7, [sp, #4]
 801d820:	fb08 4803 	mla	r8, r8, r3, r4
 801d824:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d828:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d82c:	ea47 070e 	orr.w	r7, r7, lr
 801d830:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d834:	ea47 0708 	orr.w	r7, r7, r8
 801d838:	800f      	strh	r7, [r1, #0]
 801d83a:	b005      	add	sp, #20
 801d83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d840:	080288e7 	.word	0x080288e7
 801d844:	08028e45 	.word	0x08028e45
 801d848:	0802896f 	.word	0x0802896f

0801d84c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d850:	ed2d 8b0a 	vpush	{d8-d12}
 801d854:	b091      	sub	sp, #68	; 0x44
 801d856:	eeb0 aa40 	vmov.f32	s20, s0
 801d85a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d85c:	9307      	str	r3, [sp, #28]
 801d85e:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 801d862:	910c      	str	r1, [sp, #48]	; 0x30
 801d864:	9309      	str	r3, [sp, #36]	; 0x24
 801d866:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d86a:	900f      	str	r0, [sp, #60]	; 0x3c
 801d86c:	6860      	ldr	r0, [r4, #4]
 801d86e:	920e      	str	r2, [sp, #56]	; 0x38
 801d870:	fb00 1303 	mla	r3, r0, r3, r1
 801d874:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801d876:	6821      	ldr	r1, [r4, #0]
 801d878:	6854      	ldr	r4, [r2, #4]
 801d87a:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 801d87e:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 801d882:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801d886:	9308      	str	r3, [sp, #32]
 801d888:	6813      	ldr	r3, [r2, #0]
 801d88a:	930a      	str	r3, [sp, #40]	; 0x28
 801d88c:	eef0 9a60 	vmov.f32	s19, s1
 801d890:	eeb0 9a41 	vmov.f32	s18, s2
 801d894:	eeb0 8a62 	vmov.f32	s16, s5
 801d898:	eef0 8a43 	vmov.f32	s17, s6
 801d89c:	eeb0 ca44 	vmov.f32	s24, s8
 801d8a0:	eef0 ba64 	vmov.f32	s23, s9
 801d8a4:	eeb0 ba45 	vmov.f32	s22, s10
 801d8a8:	3404      	adds	r4, #4
 801d8aa:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801d8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	dc03      	bgt.n	801d8bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801d8b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	f340 81cb 	ble.w	801dc52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801d8bc:	9b07      	ldr	r3, [sp, #28]
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	f340 80dd 	ble.w	801da7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 801d8c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d8c6:	1412      	asrs	r2, r2, #16
 801d8c8:	ea4f 432b 	mov.w	r3, fp, asr #16
 801d8cc:	d42c      	bmi.n	801d928 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801d8ce:	1c51      	adds	r1, r2, #1
 801d8d0:	428d      	cmp	r5, r1
 801d8d2:	dd2c      	ble.n	801d92e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	db2a      	blt.n	801d92e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d8d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d8da:	1c59      	adds	r1, r3, #1
 801d8dc:	4288      	cmp	r0, r1
 801d8de:	dd26      	ble.n	801d92e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d8e0:	9b07      	ldr	r3, [sp, #28]
 801d8e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801d8e4:	9925      	ldr	r1, [sp, #148]	; 0x94
 801d8e6:	3b01      	subs	r3, #1
 801d8e8:	fb02 1203 	mla	r2, r2, r3, r1
 801d8ec:	1412      	asrs	r2, r2, #16
 801d8ee:	d428      	bmi.n	801d942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801d8f0:	3201      	adds	r2, #1
 801d8f2:	4295      	cmp	r5, r2
 801d8f4:	dd25      	ble.n	801d942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801d8f6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d8f8:	fb02 b303 	mla	r3, r2, r3, fp
 801d8fc:	141b      	asrs	r3, r3, #16
 801d8fe:	d420      	bmi.n	801d942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801d900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d902:	3301      	adds	r3, #1
 801d904:	429a      	cmp	r2, r3
 801d906:	dd1c      	ble.n	801d942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801d908:	9b07      	ldr	r3, [sp, #28]
 801d90a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d90c:	9b08      	ldr	r3, [sp, #32]
 801d90e:	930d      	str	r3, [sp, #52]	; 0x34
 801d910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d912:	2b00      	cmp	r3, #0
 801d914:	f300 8116 	bgt.w	801db44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801d918:	9b07      	ldr	r3, [sp, #28]
 801d91a:	9a08      	ldr	r2, [sp, #32]
 801d91c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d920:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d924:	9308      	str	r3, [sp, #32]
 801d926:	e0ac      	b.n	801da82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 801d928:	1c51      	adds	r1, r2, #1
 801d92a:	f040 809b 	bne.w	801da64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801d92e:	42aa      	cmp	r2, r5
 801d930:	f280 8098 	bge.w	801da64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801d934:	1c5a      	adds	r2, r3, #1
 801d936:	f2c0 8095 	blt.w	801da64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801d93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d93c:	4293      	cmp	r3, r2
 801d93e:	f280 8091 	bge.w	801da64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801d942:	9b07      	ldr	r3, [sp, #28]
 801d944:	930d      	str	r3, [sp, #52]	; 0x34
 801d946:	9b08      	ldr	r3, [sp, #32]
 801d948:	930b      	str	r3, [sp, #44]	; 0x2c
 801d94a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	dde3      	ble.n	801d918 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801d950:	9825      	ldr	r0, [sp, #148]	; 0x94
 801d952:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d954:	1400      	asrs	r0, r0, #16
 801d956:	ea4f 422b 	mov.w	r2, fp, asr #16
 801d95a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d95e:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801d962:	f100 80d9 	bmi.w	801db18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801d966:	1c46      	adds	r6, r0, #1
 801d968:	42b5      	cmp	r5, r6
 801d96a:	f340 80d7 	ble.w	801db1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801d96e:	2a00      	cmp	r2, #0
 801d970:	f2c0 80d4 	blt.w	801db1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801d974:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d976:	1c56      	adds	r6, r2, #1
 801d978:	42b7      	cmp	r7, r6
 801d97a:	f340 80cf 	ble.w	801db1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801d97e:	fb02 0005 	mla	r0, r2, r5, r0
 801d982:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d986:	4402      	add	r2, r0
 801d988:	5c30      	ldrb	r0, [r6, r0]
 801d98a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801d98e:	eb04 0c08 	add.w	ip, r4, r8
 801d992:	2b00      	cmp	r3, #0
 801d994:	f000 80b2 	beq.w	801dafc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d998:	7856      	ldrb	r6, [r2, #1]
 801d99a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d99e:	4426      	add	r6, r4
 801d9a0:	2900      	cmp	r1, #0
 801d9a2:	f000 80b3 	beq.w	801db0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801d9a6:	1950      	adds	r0, r2, r5
 801d9a8:	5d52      	ldrb	r2, [r2, r5]
 801d9aa:	7840      	ldrb	r0, [r0, #1]
 801d9ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d9b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d9b4:	4422      	add	r2, r4
 801d9b6:	4420      	add	r0, r4
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	b289      	uxth	r1, r1
 801d9bc:	fb03 f901 	mul.w	r9, r3, r1
 801d9c0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d9c4:	011b      	lsls	r3, r3, #4
 801d9c6:	b289      	uxth	r1, r1
 801d9c8:	78b7      	ldrb	r7, [r6, #2]
 801d9ca:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d9ce:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d9d2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d9d6:	eba3 0309 	sub.w	r3, r3, r9
 801d9da:	b29b      	uxth	r3, r3
 801d9dc:	ebae 0e01 	sub.w	lr, lr, r1
 801d9e0:	fa1f fe8e 	uxth.w	lr, lr
 801d9e4:	435f      	muls	r7, r3
 801d9e6:	fb0e 770a 	mla	r7, lr, sl, r7
 801d9ea:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d9ee:	fb01 770a 	mla	r7, r1, sl, r7
 801d9f2:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d9f6:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d9fa:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d9fe:	f896 8000 	ldrb.w	r8, [r6]
 801da02:	7876      	ldrb	r6, [r6, #1]
 801da04:	fb03 f808 	mul.w	r8, r3, r8
 801da08:	fb0e 8807 	mla	r8, lr, r7, r8
 801da0c:	7817      	ldrb	r7, [r2, #0]
 801da0e:	fb01 8807 	mla	r8, r1, r7, r8
 801da12:	7807      	ldrb	r7, [r0, #0]
 801da14:	fb09 8707 	mla	r7, r9, r7, r8
 801da18:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801da1c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801da20:	ea4a 0707 	orr.w	r7, sl, r7
 801da24:	4373      	muls	r3, r6
 801da26:	f892 a001 	ldrb.w	sl, [r2, #1]
 801da2a:	fb0e 330c 	mla	r3, lr, ip, r3
 801da2e:	fb01 310a 	mla	r1, r1, sl, r3
 801da32:	f890 a001 	ldrb.w	sl, [r0, #1]
 801da36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da38:	fb09 1a0a 	mla	sl, r9, sl, r1
 801da3c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801da40:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801da44:	ea47 070a 	orr.w	r7, r7, sl
 801da48:	801f      	strh	r7, [r3, #0]
 801da4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801da4e:	3302      	adds	r3, #2
 801da50:	930b      	str	r3, [sp, #44]	; 0x2c
 801da52:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801da54:	4413      	add	r3, r2
 801da56:	9325      	str	r3, [sp, #148]	; 0x94
 801da58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801da5a:	449b      	add	fp, r3
 801da5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da5e:	3b01      	subs	r3, #1
 801da60:	930d      	str	r3, [sp, #52]	; 0x34
 801da62:	e772      	b.n	801d94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801da64:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801da66:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801da68:	4413      	add	r3, r2
 801da6a:	9325      	str	r3, [sp, #148]	; 0x94
 801da6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801da6e:	449b      	add	fp, r3
 801da70:	9b07      	ldr	r3, [sp, #28]
 801da72:	3b01      	subs	r3, #1
 801da74:	9307      	str	r3, [sp, #28]
 801da76:	9b08      	ldr	r3, [sp, #32]
 801da78:	3302      	adds	r3, #2
 801da7a:	9308      	str	r3, [sp, #32]
 801da7c:	e71e      	b.n	801d8bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801da7e:	f47f af2f 	bne.w	801d8e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801da82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da84:	2b00      	cmp	r3, #0
 801da86:	f340 80e4 	ble.w	801dc52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801da8a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801da8e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801da92:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801da96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801da98:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801da9c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801daa0:	eef0 6a48 	vmov.f32	s13, s16
 801daa4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801daa8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801daac:	ee37 8a48 	vsub.f32	s16, s14, s16
 801dab0:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801dab4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801dab8:	eef0 6a68 	vmov.f32	s13, s17
 801dabc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801dac0:	ee18 2a10 	vmov	r2, s16
 801dac4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801dac8:	fb92 f3f3 	sdiv	r3, r2, r3
 801dacc:	ee18 2a90 	vmov	r2, s17
 801dad0:	9327      	str	r3, [sp, #156]	; 0x9c
 801dad2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dad4:	fb92 f3f3 	sdiv	r3, r2, r3
 801dad8:	9328      	str	r3, [sp, #160]	; 0xa0
 801dada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dadc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dade:	3b01      	subs	r3, #1
 801dae0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dae4:	930c      	str	r3, [sp, #48]	; 0x30
 801dae6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dae8:	bf08      	it	eq
 801daea:	4613      	moveq	r3, r2
 801daec:	ee16 ba90 	vmov	fp, s13
 801daf0:	9307      	str	r3, [sp, #28]
 801daf2:	eef0 8a67 	vmov.f32	s17, s15
 801daf6:	eeb0 8a47 	vmov.f32	s16, s14
 801dafa:	e6d8      	b.n	801d8ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801dafc:	b149      	cbz	r1, 801db12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801dafe:	5d52      	ldrb	r2, [r2, r5]
 801db00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db04:	4422      	add	r2, r4
 801db06:	4660      	mov	r0, ip
 801db08:	4666      	mov	r6, ip
 801db0a:	e755      	b.n	801d9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801db0c:	4660      	mov	r0, ip
 801db0e:	4662      	mov	r2, ip
 801db10:	e752      	b.n	801d9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801db12:	4660      	mov	r0, ip
 801db14:	4662      	mov	r2, ip
 801db16:	e7f7      	b.n	801db08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801db18:	1c47      	adds	r7, r0, #1
 801db1a:	d196      	bne.n	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801db1c:	4285      	cmp	r5, r0
 801db1e:	dd94      	ble.n	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801db20:	1c56      	adds	r6, r2, #1
 801db22:	db92      	blt.n	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801db24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801db26:	4296      	cmp	r6, r2
 801db28:	dd8f      	ble.n	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801db2a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801db2e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801db32:	e9cd 5600 	strd	r5, r6, [sp]
 801db36:	4623      	mov	r3, r4
 801db38:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 801db3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801db3e:	f7ff fdcb 	bl	801d6d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801db42:	e782      	b.n	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801db44:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801db46:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801db48:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801db4a:	1412      	asrs	r2, r2, #16
 801db4c:	ea4f 402b 	mov.w	r0, fp, asr #16
 801db50:	fb05 2000 	mla	r0, r5, r0, r2
 801db54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801db56:	f816 8000 	ldrb.w	r8, [r6, r0]
 801db5a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801db5e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801db62:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801db66:	4402      	add	r2, r0
 801db68:	eb04 0c08 	add.w	ip, r4, r8
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d062      	beq.n	801dc36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 801db70:	7856      	ldrb	r6, [r2, #1]
 801db72:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db76:	4426      	add	r6, r4
 801db78:	2900      	cmp	r1, #0
 801db7a:	d064      	beq.n	801dc46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801db7c:	1950      	adds	r0, r2, r5
 801db7e:	5d52      	ldrb	r2, [r2, r5]
 801db80:	7840      	ldrb	r0, [r0, #1]
 801db82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801db8a:	4422      	add	r2, r4
 801db8c:	4420      	add	r0, r4
 801db8e:	b29b      	uxth	r3, r3
 801db90:	b289      	uxth	r1, r1
 801db92:	fb03 f901 	mul.w	r9, r3, r1
 801db96:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801db9a:	011b      	lsls	r3, r3, #4
 801db9c:	b289      	uxth	r1, r1
 801db9e:	78b7      	ldrb	r7, [r6, #2]
 801dba0:	f89c a002 	ldrb.w	sl, [ip, #2]
 801dba4:	f89c c001 	ldrb.w	ip, [ip, #1]
 801dba8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801dbac:	eba3 0309 	sub.w	r3, r3, r9
 801dbb0:	b29b      	uxth	r3, r3
 801dbb2:	ebae 0e01 	sub.w	lr, lr, r1
 801dbb6:	fa1f fe8e 	uxth.w	lr, lr
 801dbba:	435f      	muls	r7, r3
 801dbbc:	fb0e 770a 	mla	r7, lr, sl, r7
 801dbc0:	f892 a002 	ldrb.w	sl, [r2, #2]
 801dbc4:	fb01 770a 	mla	r7, r1, sl, r7
 801dbc8:	f890 a002 	ldrb.w	sl, [r0, #2]
 801dbcc:	fb09 7a0a 	mla	sl, r9, sl, r7
 801dbd0:	f814 7008 	ldrb.w	r7, [r4, r8]
 801dbd4:	f896 8000 	ldrb.w	r8, [r6]
 801dbd8:	7876      	ldrb	r6, [r6, #1]
 801dbda:	fb03 f808 	mul.w	r8, r3, r8
 801dbde:	fb0e 8807 	mla	r8, lr, r7, r8
 801dbe2:	7817      	ldrb	r7, [r2, #0]
 801dbe4:	fb01 8807 	mla	r8, r1, r7, r8
 801dbe8:	7807      	ldrb	r7, [r0, #0]
 801dbea:	fb09 8707 	mla	r7, r9, r7, r8
 801dbee:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801dbf2:	4373      	muls	r3, r6
 801dbf4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801dbf8:	7856      	ldrb	r6, [r2, #1]
 801dbfa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801dbfc:	ea4a 0707 	orr.w	r7, sl, r7
 801dc00:	fb0e 330c 	mla	r3, lr, ip, r3
 801dc04:	f890 a001 	ldrb.w	sl, [r0, #1]
 801dc08:	fb01 3306 	mla	r3, r1, r6, r3
 801dc0c:	fb09 3a0a 	mla	sl, r9, sl, r3
 801dc10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dc14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc16:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dc1a:	ea47 070a 	orr.w	r7, r7, sl
 801dc1e:	f823 7b02 	strh.w	r7, [r3], #2
 801dc22:	930d      	str	r3, [sp, #52]	; 0x34
 801dc24:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dc26:	4413      	add	r3, r2
 801dc28:	9325      	str	r3, [sp, #148]	; 0x94
 801dc2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc2c:	449b      	add	fp, r3
 801dc2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc30:	3b01      	subs	r3, #1
 801dc32:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc34:	e66c      	b.n	801d910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801dc36:	b149      	cbz	r1, 801dc4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 801dc38:	5d52      	ldrb	r2, [r2, r5]
 801dc3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dc3e:	4422      	add	r2, r4
 801dc40:	4660      	mov	r0, ip
 801dc42:	4666      	mov	r6, ip
 801dc44:	e7a3      	b.n	801db8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801dc46:	4660      	mov	r0, ip
 801dc48:	4662      	mov	r2, ip
 801dc4a:	e7a0      	b.n	801db8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801dc4c:	4660      	mov	r0, ip
 801dc4e:	4662      	mov	r2, ip
 801dc50:	e7f7      	b.n	801dc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801dc52:	b011      	add	sp, #68	; 0x44
 801dc54:	ecbd 8b0a 	vpop	{d8-d12}
 801dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801dc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc60:	8808      	ldrh	r0, [r1, #0]
 801dc62:	b085      	sub	sp, #20
 801dc64:	1206      	asrs	r6, r0, #8
 801dc66:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801dc6a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dc6e:	9600      	str	r6, [sp, #0]
 801dc70:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801dc74:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801dc78:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801dc7c:	10c6      	asrs	r6, r0, #3
 801dc7e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dc82:	9601      	str	r6, [sp, #4]
 801dc84:	00c0      	lsls	r0, r0, #3
 801dc86:	fb04 560c 	mla	r6, r4, ip, r5
 801dc8a:	b2c0      	uxtb	r0, r0
 801dc8c:	4692      	mov	sl, r2
 801dc8e:	eb02 0e06 	add.w	lr, r2, r6
 801dc92:	9a00      	ldr	r2, [sp, #0]
 801dc94:	9002      	str	r0, [sp, #8]
 801dc96:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801dc9a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801dc9e:	9a01      	ldr	r2, [sp, #4]
 801dca0:	2c00      	cmp	r4, #0
 801dca2:	4698      	mov	r8, r3
 801dca4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801dca8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801dcac:	db3e      	blt.n	801dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801dcae:	45a1      	cmp	r9, r4
 801dcb0:	dd3c      	ble.n	801dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801dcb2:	2d00      	cmp	r5, #0
 801dcb4:	db38      	blt.n	801dd28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801dcb6:	45ac      	cmp	ip, r5
 801dcb8:	dd36      	ble.n	801dd28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801dcba:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801dcbe:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801dcc2:	1c6e      	adds	r6, r5, #1
 801dcc4:	d435      	bmi.n	801dd32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801dcc6:	45b4      	cmp	ip, r6
 801dcc8:	dd33      	ble.n	801dd32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801dcca:	b393      	cbz	r3, 801dd32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801dccc:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801dcd0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801dcd4:	3401      	adds	r4, #1
 801dcd6:	d430      	bmi.n	801dd3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801dcd8:	45a1      	cmp	r9, r4
 801dcda:	dd2e      	ble.n	801dd3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801dcdc:	b36f      	cbz	r7, 801dd3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801dcde:	2d00      	cmp	r5, #0
 801dce0:	db29      	blt.n	801dd36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801dce2:	45ac      	cmp	ip, r5
 801dce4:	dd27      	ble.n	801dd36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801dce6:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801dcea:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801dcee:	3501      	adds	r5, #1
 801dcf0:	d407      	bmi.n	801dd02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801dcf2:	45ac      	cmp	ip, r5
 801dcf4:	dd05      	ble.n	801dd02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801dcf6:	b123      	cbz	r3, 801dd02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801dcf8:	44f4      	add	ip, lr
 801dcfa:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801dcfe:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801dd02:	2b0f      	cmp	r3, #15
 801dd04:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801dd08:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801dd0c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801dd10:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801dd14:	d801      	bhi.n	801dd1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801dd16:	2f0f      	cmp	r7, #15
 801dd18:	d911      	bls.n	801dd3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 801dd1a:	4b7f      	ldr	r3, [pc, #508]	; (801df18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 801dd1c:	4a7f      	ldr	r2, [pc, #508]	; (801df1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 801dd1e:	4880      	ldr	r0, [pc, #512]	; (801df20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801dd20:	f240 3173 	movw	r1, #883	; 0x373
 801dd24:	f005 fc2c 	bl	8023580 <__assert_func>
 801dd28:	4602      	mov	r2, r0
 801dd2a:	e7ca      	b.n	801dcc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 801dd2c:	4606      	mov	r6, r0
 801dd2e:	4602      	mov	r2, r0
 801dd30:	e7d0      	b.n	801dcd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801dd32:	4606      	mov	r6, r0
 801dd34:	e7ce      	b.n	801dcd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801dd36:	4604      	mov	r4, r0
 801dd38:	e7d9      	b.n	801dcee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 801dd3a:	4604      	mov	r4, r0
 801dd3c:	e7e1      	b.n	801dd02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801dd3e:	b29b      	uxth	r3, r3
 801dd40:	b2bf      	uxth	r7, r7
 801dd42:	fb03 fe07 	mul.w	lr, r3, r7
 801dd46:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801dd4a:	011b      	lsls	r3, r3, #4
 801dd4c:	eba3 0c0e 	sub.w	ip, r3, lr
 801dd50:	b2bf      	uxth	r7, r7
 801dd52:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801dd56:	fa1f fc8c 	uxth.w	ip, ip
 801dd5a:	1bed      	subs	r5, r5, r7
 801dd5c:	b2ad      	uxth	r5, r5
 801dd5e:	fb0c f30a 	mul.w	r3, ip, sl
 801dd62:	fb05 330b 	mla	r3, r5, fp, r3
 801dd66:	fb07 3309 	mla	r3, r7, r9, r3
 801dd6a:	fb0e 3308 	mla	r3, lr, r8, r3
 801dd6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dd72:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801dd76:	9303      	str	r3, [sp, #12]
 801dd78:	d018      	beq.n	801ddac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 801dd7a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801dd7e:	fb0b f303 	mul.w	r3, fp, r3
 801dd82:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dd86:	fb0b fb02 	mul.w	fp, fp, r2
 801dd8a:	0a1a      	lsrs	r2, r3, #8
 801dd8c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dd90:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801dd94:	441a      	add	r2, r3
 801dd96:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801dd9a:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801dd9e:	0a12      	lsrs	r2, r2, #8
 801dda0:	0a1b      	lsrs	r3, r3, #8
 801dda2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dda6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ddaa:	431a      	orrs	r2, r3
 801ddac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ddb0:	d019      	beq.n	801dde6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 801ddb2:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801ddb6:	fb0a fb0b 	mul.w	fp, sl, fp
 801ddba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ddbe:	fb0a fa06 	mul.w	sl, sl, r6
 801ddc2:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801ddc6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ddca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ddce:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801ddd2:	445e      	add	r6, fp
 801ddd4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ddd8:	0a36      	lsrs	r6, r6, #8
 801ddda:	0a1b      	lsrs	r3, r3, #8
 801dddc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dde0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dde4:	431e      	orrs	r6, r3
 801dde6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ddea:	d019      	beq.n	801de20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 801ddec:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801ddf0:	fb09 fa0a 	mul.w	sl, r9, sl
 801ddf4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ddf8:	fb09 f904 	mul.w	r9, r9, r4
 801ddfc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801de00:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801de04:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801de08:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801de0c:	4454      	add	r4, sl
 801de0e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801de12:	0a24      	lsrs	r4, r4, #8
 801de14:	0a1b      	lsrs	r3, r3, #8
 801de16:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801de1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801de1e:	431c      	orrs	r4, r3
 801de20:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801de24:	d019      	beq.n	801de5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 801de26:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801de2a:	fb08 f909 	mul.w	r9, r8, r9
 801de2e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801de32:	fb08 f800 	mul.w	r8, r8, r0
 801de36:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801de3a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801de3e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801de42:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801de46:	4448      	add	r0, r9
 801de48:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801de4c:	0a00      	lsrs	r0, r0, #8
 801de4e:	0a1b      	lsrs	r3, r3, #8
 801de50:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801de54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801de58:	4318      	orrs	r0, r3
 801de5a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801de5e:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801de62:	fb0c f808 	mul.w	r8, ip, r8
 801de66:	fb05 8803 	mla	r8, r5, r3, r8
 801de6a:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801de6e:	fb07 8803 	mla	r8, r7, r3, r8
 801de72:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801de76:	fb0e 8303 	mla	r3, lr, r3, r8
 801de7a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801de7e:	fb0c f606 	mul.w	r6, ip, r6
 801de82:	0a1b      	lsrs	r3, r3, #8
 801de84:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801de88:	fb05 6202 	mla	r2, r5, r2, r6
 801de8c:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801de90:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801de94:	fb07 2703 	mla	r7, r7, r3, r2
 801de98:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801de9c:	b295      	uxth	r5, r2
 801de9e:	9a03      	ldr	r2, [sp, #12]
 801dea0:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801dea4:	436a      	muls	r2, r5
 801dea6:	fb0e 7303 	mla	r3, lr, r3, r7
 801deaa:	1c50      	adds	r0, r2, #1
 801deac:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801deb0:	0a1b      	lsrs	r3, r3, #8
 801deb2:	9a00      	ldr	r2, [sp, #0]
 801deb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801deb8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801debc:	ea48 0303 	orr.w	r3, r8, r3
 801dec0:	b2c0      	uxtb	r0, r0
 801dec2:	fb12 f200 	smulbb	r2, r2, r0
 801dec6:	0c1e      	lsrs	r6, r3, #16
 801dec8:	fb06 2605 	mla	r6, r6, r5, r2
 801decc:	9a01      	ldr	r2, [sp, #4]
 801dece:	f3c3 2407 	ubfx	r4, r3, #8, #8
 801ded2:	fb12 f200 	smulbb	r2, r2, r0
 801ded6:	fb04 2205 	mla	r2, r4, r5, r2
 801deda:	b294      	uxth	r4, r2
 801dedc:	9a02      	ldr	r2, [sp, #8]
 801dede:	b2db      	uxtb	r3, r3
 801dee0:	fb12 f200 	smulbb	r2, r2, r0
 801dee4:	fb03 2205 	mla	r2, r3, r5, r2
 801dee8:	b2b6      	uxth	r6, r6
 801deea:	b292      	uxth	r2, r2
 801deec:	1c73      	adds	r3, r6, #1
 801deee:	1c50      	adds	r0, r2, #1
 801def0:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801def4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801def8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801defc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801df00:	4313      	orrs	r3, r2
 801df02:	1c62      	adds	r2, r4, #1
 801df04:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801df08:	0952      	lsrs	r2, r2, #5
 801df0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801df0e:	4313      	orrs	r3, r2
 801df10:	800b      	strh	r3, [r1, #0]
 801df12:	b005      	add	sp, #20
 801df14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df18:	080288e7 	.word	0x080288e7
 801df1c:	08028e45 	.word	0x08028e45
 801df20:	0802896f 	.word	0x0802896f

0801df24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801df24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df28:	ed2d 8b08 	vpush	{d8-d11}
 801df2c:	b09b      	sub	sp, #108	; 0x6c
 801df2e:	eeb0 aa40 	vmov.f32	s20, s0
 801df32:	9309      	str	r3, [sp, #36]	; 0x24
 801df34:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801df38:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801df3a:	9311      	str	r3, [sp, #68]	; 0x44
 801df3c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801df40:	9114      	str	r1, [sp, #80]	; 0x50
 801df42:	9317      	str	r3, [sp, #92]	; 0x5c
 801df44:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801df48:	9019      	str	r0, [sp, #100]	; 0x64
 801df4a:	6868      	ldr	r0, [r5, #4]
 801df4c:	9218      	str	r2, [sp, #96]	; 0x60
 801df4e:	fb00 1303 	mla	r3, r0, r3, r1
 801df52:	6829      	ldr	r1, [r5, #0]
 801df54:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801df56:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801df5a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801df5e:	930c      	str	r3, [sp, #48]	; 0x30
 801df60:	6813      	ldr	r3, [r2, #0]
 801df62:	9313      	str	r3, [sp, #76]	; 0x4c
 801df64:	6853      	ldr	r3, [r2, #4]
 801df66:	3304      	adds	r3, #4
 801df68:	eef0 9a60 	vmov.f32	s19, s1
 801df6c:	eeb0 9a41 	vmov.f32	s18, s2
 801df70:	eeb0 8a62 	vmov.f32	s16, s5
 801df74:	eef0 8a43 	vmov.f32	s17, s6
 801df78:	eef0 ba44 	vmov.f32	s23, s8
 801df7c:	eeb0 ba64 	vmov.f32	s22, s9
 801df80:	eef0 aa45 	vmov.f32	s21, s10
 801df84:	9308      	str	r3, [sp, #32]
 801df86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801df88:	2b00      	cmp	r3, #0
 801df8a:	dc03      	bgt.n	801df94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801df8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801df8e:	2b00      	cmp	r3, #0
 801df90:	f340 8363 	ble.w	801e65a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 801df94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df96:	2b00      	cmp	r3, #0
 801df98:	f340 81ad 	ble.w	801e2f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 801df9c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801df9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801dfa0:	1412      	asrs	r2, r2, #16
 801dfa2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dfa6:	d42f      	bmi.n	801e008 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801dfa8:	1c51      	adds	r1, r2, #1
 801dfaa:	428c      	cmp	r4, r1
 801dfac:	dd2f      	ble.n	801e00e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	db2d      	blt.n	801e00e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801dfb2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dfb4:	1c59      	adds	r1, r3, #1
 801dfb6:	4288      	cmp	r0, r1
 801dfb8:	dd29      	ble.n	801e00e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801dfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfbc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801dfbe:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801dfc0:	3b01      	subs	r3, #1
 801dfc2:	fb02 1203 	mla	r2, r2, r3, r1
 801dfc6:	1412      	asrs	r2, r2, #16
 801dfc8:	d42b      	bmi.n	801e022 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801dfca:	3201      	adds	r2, #1
 801dfcc:	4294      	cmp	r4, r2
 801dfce:	dd28      	ble.n	801e022 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801dfd0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801dfd2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801dfd4:	fb02 1303 	mla	r3, r2, r3, r1
 801dfd8:	141b      	asrs	r3, r3, #16
 801dfda:	d422      	bmi.n	801e022 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801dfdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dfde:	3301      	adds	r3, #1
 801dfe0:	429a      	cmp	r2, r3
 801dfe2:	dd1e      	ble.n	801e022 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801dfe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfe6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801dfea:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801dfee:	9312      	str	r3, [sp, #72]	; 0x48
 801dff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	f300 81ea 	bgt.w	801e3cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 801dff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dffc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e000:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e004:	930c      	str	r3, [sp, #48]	; 0x30
 801e006:	e178      	b.n	801e2fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 801e008:	1c51      	adds	r1, r2, #1
 801e00a:	f040 8165 	bne.w	801e2d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801e00e:	42a2      	cmp	r2, r4
 801e010:	f280 8162 	bge.w	801e2d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801e014:	1c5f      	adds	r7, r3, #1
 801e016:	f2c0 815f 	blt.w	801e2d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801e01a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e01c:	4293      	cmp	r3, r2
 801e01e:	f280 815b 	bge.w	801e2d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801e022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e024:	9316      	str	r3, [sp, #88]	; 0x58
 801e026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e028:	9312      	str	r3, [sp, #72]	; 0x48
 801e02a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801e02e:	9315      	str	r3, [sp, #84]	; 0x54
 801e030:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e032:	2b00      	cmp	r3, #0
 801e034:	dde0      	ble.n	801dff8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801e036:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e038:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e03a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801e03e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801e040:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e044:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e046:	1412      	asrs	r2, r2, #16
 801e048:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e04c:	f100 81a5 	bmi.w	801e39a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 801e050:	1c55      	adds	r5, r2, #1
 801e052:	42ac      	cmp	r4, r5
 801e054:	f340 81a3 	ble.w	801e39e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801e058:	2b00      	cmp	r3, #0
 801e05a:	f2c0 81a0 	blt.w	801e39e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801e05e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801e060:	1c5d      	adds	r5, r3, #1
 801e062:	42af      	cmp	r7, r5
 801e064:	f340 819b 	ble.w	801e39e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801e068:	fb03 2304 	mla	r3, r3, r4, r2
 801e06c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e06e:	18d5      	adds	r5, r2, r3
 801e070:	5cd3      	ldrb	r3, [r2, r3]
 801e072:	9a08      	ldr	r2, [sp, #32]
 801e074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e078:	0e1f      	lsrs	r7, r3, #24
 801e07a:	2800      	cmp	r0, #0
 801e07c:	f000 817c 	beq.w	801e378 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801e080:	786a      	ldrb	r2, [r5, #1]
 801e082:	9e08      	ldr	r6, [sp, #32]
 801e084:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801e088:	920d      	str	r2, [sp, #52]	; 0x34
 801e08a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801e08e:	2900      	cmp	r1, #0
 801e090:	f000 817d 	beq.w	801e38e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 801e094:	192a      	adds	r2, r5, r4
 801e096:	5d2d      	ldrb	r5, [r5, r4]
 801e098:	7852      	ldrb	r2, [r2, #1]
 801e09a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801e09e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801e0a2:	950a      	str	r5, [sp, #40]	; 0x28
 801e0a4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e0a8:	920e      	str	r2, [sp, #56]	; 0x38
 801e0aa:	0e15      	lsrs	r5, r2, #24
 801e0ac:	b280      	uxth	r0, r0
 801e0ae:	b289      	uxth	r1, r1
 801e0b0:	fb00 fa01 	mul.w	sl, r0, r1
 801e0b4:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801e0b8:	0100      	lsls	r0, r0, #4
 801e0ba:	eba0 080a 	sub.w	r8, r0, sl
 801e0be:	b289      	uxth	r1, r1
 801e0c0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801e0c4:	fa1f f888 	uxth.w	r8, r8
 801e0c8:	1a52      	subs	r2, r2, r1
 801e0ca:	b292      	uxth	r2, r2
 801e0cc:	fb08 f00e 	mul.w	r0, r8, lr
 801e0d0:	fb02 0007 	mla	r0, r2, r7, r0
 801e0d4:	fb01 0009 	mla	r0, r1, r9, r0
 801e0d8:	fb0a 0005 	mla	r0, sl, r5, r0
 801e0dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e0e0:	2800      	cmp	r0, #0
 801e0e2:	f000 80ea 	beq.w	801e2ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801e0e6:	2fff      	cmp	r7, #255	; 0xff
 801e0e8:	d01a      	beq.n	801e120 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 801e0ea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e0ee:	fb07 fc0c 	mul.w	ip, r7, ip
 801e0f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e0f6:	435f      	muls	r7, r3
 801e0f8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e0fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e100:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e104:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801e108:	4463      	add	r3, ip
 801e10a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801e10e:	0a1b      	lsrs	r3, r3, #8
 801e110:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801e114:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e118:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801e11c:	ea43 030b 	orr.w	r3, r3, fp
 801e120:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e124:	d01e      	beq.n	801e164 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801e126:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e128:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801e12c:	fb0e fb0b 	mul.w	fp, lr, fp
 801e130:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801e134:	fb0e fe07 	mul.w	lr, lr, r7
 801e138:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e13c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e140:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e144:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801e148:	44dc      	add	ip, fp
 801e14a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801e14e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e152:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e156:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e15a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e15e:	ea4c 060e 	orr.w	r6, ip, lr
 801e162:	960d      	str	r6, [sp, #52]	; 0x34
 801e164:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e168:	d01e      	beq.n	801e1a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801e16a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e16c:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801e170:	fb09 fe0e 	mul.w	lr, r9, lr
 801e174:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801e178:	fb09 f907 	mul.w	r9, r9, r7
 801e17c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e180:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e184:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e188:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801e18c:	44f4      	add	ip, lr
 801e18e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e192:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e196:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e19a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e19e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e1a2:	ea4c 0609 	orr.w	r6, ip, r9
 801e1a6:	960a      	str	r6, [sp, #40]	; 0x28
 801e1a8:	2dff      	cmp	r5, #255	; 0xff
 801e1aa:	d01c      	beq.n	801e1e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 801e1ac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801e1ae:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801e1b2:	fb05 fe0e 	mul.w	lr, r5, lr
 801e1b6:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801e1ba:	437d      	muls	r5, r7
 801e1bc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e1c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e1c4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e1c8:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801e1cc:	44f4      	add	ip, lr
 801e1ce:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801e1d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e1d6:	0a2d      	lsrs	r5, r5, #8
 801e1d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e1dc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e1e0:	ea4c 0505 	orr.w	r5, ip, r5
 801e1e4:	950e      	str	r5, [sp, #56]	; 0x38
 801e1e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e1e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e1ea:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e1ee:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e1f2:	fb08 f505 	mul.w	r5, r8, r5
 801e1f6:	fb02 5507 	mla	r5, r2, r7, r5
 801e1fa:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801e1fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801e200:	fb01 5507 	mla	r5, r1, r7, r5
 801e204:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801e208:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e20a:	fb0a 5507 	mla	r5, sl, r7, r5
 801e20e:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801e212:	fb08 f807 	mul.w	r8, r8, r7
 801e216:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e21a:	fb02 8303 	mla	r3, r2, r3, r8
 801e21e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e220:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801e222:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e228:	fb01 330c 	mla	r3, r1, ip, r3
 801e22c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801e230:	fb0a 3a01 	mla	sl, sl, r1, r3
 801e234:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e236:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e238:	881f      	ldrh	r7, [r3, #0]
 801e23a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e23c:	0a2d      	lsrs	r5, r5, #8
 801e23e:	4343      	muls	r3, r0
 801e240:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e244:	1c58      	adds	r0, r3, #1
 801e246:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e24a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e24e:	ea45 050a 	orr.w	r5, r5, sl
 801e252:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e256:	0c29      	lsrs	r1, r5, #16
 801e258:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e25c:	123b      	asrs	r3, r7, #8
 801e25e:	b2c0      	uxtb	r0, r0
 801e260:	fb11 f102 	smulbb	r1, r1, r2
 801e264:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e268:	fb03 1300 	mla	r3, r3, r0, r1
 801e26c:	b299      	uxth	r1, r3
 801e26e:	10fa      	asrs	r2, r7, #3
 801e270:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e274:	fb13 f306 	smulbb	r3, r3, r6
 801e278:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e27c:	fb02 3200 	mla	r2, r2, r0, r3
 801e280:	b2ed      	uxtb	r5, r5
 801e282:	00fb      	lsls	r3, r7, #3
 801e284:	b2db      	uxtb	r3, r3
 801e286:	fb15 f506 	smulbb	r5, r5, r6
 801e28a:	fb03 5500 	mla	r5, r3, r0, r5
 801e28e:	b292      	uxth	r2, r2
 801e290:	b2ad      	uxth	r5, r5
 801e292:	1c4b      	adds	r3, r1, #1
 801e294:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e298:	1c68      	adds	r0, r5, #1
 801e29a:	1c51      	adds	r1, r2, #1
 801e29c:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 801e2a0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e2a4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e2a8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e2ac:	0952      	lsrs	r2, r2, #5
 801e2ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e2b2:	432b      	orrs	r3, r5
 801e2b4:	4313      	orrs	r3, r2
 801e2b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2b8:	8013      	strh	r3, [r2, #0]
 801e2ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e2bc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e2be:	3302      	adds	r3, #2
 801e2c0:	9312      	str	r3, [sp, #72]	; 0x48
 801e2c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e2c4:	4413      	add	r3, r2
 801e2c6:	932d      	str	r3, [sp, #180]	; 0xb4
 801e2c8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e2ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e2cc:	4413      	add	r3, r2
 801e2ce:	932e      	str	r3, [sp, #184]	; 0xb8
 801e2d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e2d2:	3b01      	subs	r3, #1
 801e2d4:	9316      	str	r3, [sp, #88]	; 0x58
 801e2d6:	e6ab      	b.n	801e030 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e2d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e2da:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e2dc:	4413      	add	r3, r2
 801e2de:	932d      	str	r3, [sp, #180]	; 0xb4
 801e2e0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e2e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e2e4:	4413      	add	r3, r2
 801e2e6:	932e      	str	r3, [sp, #184]	; 0xb8
 801e2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2ea:	3b01      	subs	r3, #1
 801e2ec:	9309      	str	r3, [sp, #36]	; 0x24
 801e2ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2f0:	3302      	adds	r3, #2
 801e2f2:	930c      	str	r3, [sp, #48]	; 0x30
 801e2f4:	e64e      	b.n	801df94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801e2f6:	f47f ae60 	bne.w	801dfba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801e2fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	f340 81ac 	ble.w	801e65a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 801e302:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e30a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e30e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e310:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e314:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e318:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e31c:	eef0 6a48 	vmov.f32	s13, s16
 801e320:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e324:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e328:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e32c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801e330:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e334:	eef0 6a68 	vmov.f32	s13, s17
 801e338:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e33c:	ee18 2a10 	vmov	r2, s16
 801e340:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e344:	fb92 f3f3 	sdiv	r3, r2, r3
 801e348:	ee18 2a90 	vmov	r2, s17
 801e34c:	932f      	str	r3, [sp, #188]	; 0xbc
 801e34e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e350:	fb92 f3f3 	sdiv	r3, r2, r3
 801e354:	9330      	str	r3, [sp, #192]	; 0xc0
 801e356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e358:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e35a:	3b01      	subs	r3, #1
 801e35c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e360:	9314      	str	r3, [sp, #80]	; 0x50
 801e362:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e364:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801e368:	bf08      	it	eq
 801e36a:	4613      	moveq	r3, r2
 801e36c:	9309      	str	r3, [sp, #36]	; 0x24
 801e36e:	eef0 8a67 	vmov.f32	s17, s15
 801e372:	eeb0 8a47 	vmov.f32	s16, s14
 801e376:	e606      	b.n	801df86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801e378:	b161      	cbz	r1, 801e394 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801e37a:	5d2a      	ldrb	r2, [r5, r4]
 801e37c:	9d08      	ldr	r5, [sp, #32]
 801e37e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e382:	920a      	str	r2, [sp, #40]	; 0x28
 801e384:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801e388:	25ff      	movs	r5, #255	; 0xff
 801e38a:	46ae      	mov	lr, r5
 801e38c:	e68e      	b.n	801e0ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 801e38e:	25ff      	movs	r5, #255	; 0xff
 801e390:	46a9      	mov	r9, r5
 801e392:	e68b      	b.n	801e0ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 801e394:	25ff      	movs	r5, #255	; 0xff
 801e396:	46a9      	mov	r9, r5
 801e398:	e7f7      	b.n	801e38a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801e39a:	1c56      	adds	r6, r2, #1
 801e39c:	d18d      	bne.n	801e2ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801e39e:	4294      	cmp	r4, r2
 801e3a0:	dd8b      	ble.n	801e2ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801e3a2:	1c5d      	adds	r5, r3, #1
 801e3a4:	db89      	blt.n	801e2ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801e3a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e3a8:	429d      	cmp	r5, r3
 801e3aa:	dd86      	ble.n	801e2ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801e3ac:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801e3b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801e3b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e3b4:	9202      	str	r2, [sp, #8]
 801e3b6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e3ba:	e9cd 4300 	strd	r4, r3, [sp]
 801e3be:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 801e3c2:	9b08      	ldr	r3, [sp, #32]
 801e3c4:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e3c6:	f7ff fc49 	bl	801dc5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801e3ca:	e776      	b.n	801e2ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801e3cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e3ce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e3d0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e3d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e3d6:	1412      	asrs	r2, r2, #16
 801e3d8:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801e3dc:	141b      	asrs	r3, r3, #16
 801e3de:	fb04 2303 	mla	r3, r4, r3, r2
 801e3e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e3e4:	18d5      	adds	r5, r2, r3
 801e3e6:	5cd3      	ldrb	r3, [r2, r3]
 801e3e8:	9a08      	ldr	r2, [sp, #32]
 801e3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e3ee:	0e1e      	lsrs	r6, r3, #24
 801e3f0:	2900      	cmp	r1, #0
 801e3f2:	f000 8121 	beq.w	801e638 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801e3f6:	786a      	ldrb	r2, [r5, #1]
 801e3f8:	9f08      	ldr	r7, [sp, #32]
 801e3fa:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801e3fe:	920f      	str	r2, [sp, #60]	; 0x3c
 801e400:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801e404:	2800      	cmp	r0, #0
 801e406:	f000 8122 	beq.w	801e64e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 801e40a:	192a      	adds	r2, r5, r4
 801e40c:	5d2d      	ldrb	r5, [r5, r4]
 801e40e:	7852      	ldrb	r2, [r2, #1]
 801e410:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801e414:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801e418:	950b      	str	r5, [sp, #44]	; 0x2c
 801e41a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e41e:	9210      	str	r2, [sp, #64]	; 0x40
 801e420:	0e15      	lsrs	r5, r2, #24
 801e422:	b289      	uxth	r1, r1
 801e424:	b280      	uxth	r0, r0
 801e426:	fb01 f900 	mul.w	r9, r1, r0
 801e42a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e42e:	0109      	lsls	r1, r1, #4
 801e430:	eba1 0e09 	sub.w	lr, r1, r9
 801e434:	b280      	uxth	r0, r0
 801e436:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801e43a:	fa1f fe8e 	uxth.w	lr, lr
 801e43e:	1a12      	subs	r2, r2, r0
 801e440:	b292      	uxth	r2, r2
 801e442:	fb0e f10c 	mul.w	r1, lr, ip
 801e446:	fb02 1106 	mla	r1, r2, r6, r1
 801e44a:	fb00 1108 	mla	r1, r0, r8, r1
 801e44e:	fb09 1105 	mla	r1, r9, r5, r1
 801e452:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e456:	2900      	cmp	r1, #0
 801e458:	f000 80e0 	beq.w	801e61c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 801e45c:	2eff      	cmp	r6, #255	; 0xff
 801e45e:	d016      	beq.n	801e48e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 801e460:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e464:	4377      	muls	r7, r6
 801e466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e46a:	435e      	muls	r6, r3
 801e46c:	0a3b      	lsrs	r3, r7, #8
 801e46e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e472:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e476:	443b      	add	r3, r7
 801e478:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801e47c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801e480:	0a1b      	lsrs	r3, r3, #8
 801e482:	0a3f      	lsrs	r7, r7, #8
 801e484:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e488:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e48c:	433b      	orrs	r3, r7
 801e48e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e492:	d01d      	beq.n	801e4d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 801e494:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e496:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e498:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e49c:	fb0c f606 	mul.w	r6, ip, r6
 801e4a0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e4a4:	fb0c fc07 	mul.w	ip, ip, r7
 801e4a8:	0a37      	lsrs	r7, r6, #8
 801e4aa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e4ae:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e4b2:	4437      	add	r7, r6
 801e4b4:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801e4b8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801e4bc:	0a3f      	lsrs	r7, r7, #8
 801e4be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e4c2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e4c6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e4ca:	ea47 060c 	orr.w	r6, r7, ip
 801e4ce:	960f      	str	r6, [sp, #60]	; 0x3c
 801e4d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e4d4:	d01d      	beq.n	801e512 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 801e4d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801e4d8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e4dc:	fb08 fc0c 	mul.w	ip, r8, ip
 801e4e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e4e4:	fb08 f806 	mul.w	r8, r8, r6
 801e4e8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801e4ec:	f508 7680 	add.w	r6, r8, #256	; 0x100
 801e4f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e4f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e4f8:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 801e4fc:	4467      	add	r7, ip
 801e4fe:	0a3f      	lsrs	r7, r7, #8
 801e500:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e504:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e508:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e50c:	ea47 0608 	orr.w	r6, r7, r8
 801e510:	960b      	str	r6, [sp, #44]	; 0x2c
 801e512:	2dff      	cmp	r5, #255	; 0xff
 801e514:	d01a      	beq.n	801e54c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 801e516:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e518:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e51c:	fb05 fc0c 	mul.w	ip, r5, ip
 801e520:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e524:	4375      	muls	r5, r6
 801e526:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801e52a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e52e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e532:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801e536:	4467      	add	r7, ip
 801e538:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e53c:	0a3f      	lsrs	r7, r7, #8
 801e53e:	0a2d      	lsrs	r5, r5, #8
 801e540:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e544:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e548:	433d      	orrs	r5, r7
 801e54a:	9510      	str	r5, [sp, #64]	; 0x40
 801e54c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e54e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e552:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801e556:	fb0e f505 	mul.w	r5, lr, r5
 801e55a:	fb02 5506 	mla	r5, r2, r6, r5
 801e55e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801e560:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e564:	fb00 5506 	mla	r5, r0, r6, r5
 801e568:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e56a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e56e:	fb09 5506 	mla	r5, r9, r6, r5
 801e572:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e574:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e578:	fb0e fe06 	mul.w	lr, lr, r6
 801e57c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e580:	fb02 e303 	mla	r3, r2, r3, lr
 801e584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e586:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e58a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e58c:	fb00 3307 	mla	r3, r0, r7, r3
 801e590:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e594:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e598:	fb01 f10b 	mul.w	r1, r1, fp
 801e59c:	0a2d      	lsrs	r5, r5, #8
 801e59e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e5a2:	f8ba 0000 	ldrh.w	r0, [sl]
 801e5a6:	1c4b      	adds	r3, r1, #1
 801e5a8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e5ac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e5b0:	ea45 050c 	orr.w	r5, r5, ip
 801e5b4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e5b8:	1202      	asrs	r2, r0, #8
 801e5ba:	0c2b      	lsrs	r3, r5, #16
 801e5bc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e5c0:	b2c9      	uxtb	r1, r1
 801e5c2:	fb13 f30b 	smulbb	r3, r3, fp
 801e5c6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e5ca:	fb02 3201 	mla	r2, r2, r1, r3
 801e5ce:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801e5d2:	10c3      	asrs	r3, r0, #3
 801e5d4:	b2ed      	uxtb	r5, r5
 801e5d6:	00c0      	lsls	r0, r0, #3
 801e5d8:	b2c0      	uxtb	r0, r0
 801e5da:	fb15 f50b 	smulbb	r5, r5, fp
 801e5de:	fb00 5001 	mla	r0, r0, r1, r5
 801e5e2:	b292      	uxth	r2, r2
 801e5e4:	fb16 f60b 	smulbb	r6, r6, fp
 801e5e8:	b280      	uxth	r0, r0
 801e5ea:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e5ee:	fb03 6301 	mla	r3, r3, r1, r6
 801e5f2:	1c51      	adds	r1, r2, #1
 801e5f4:	1c46      	adds	r6, r0, #1
 801e5f6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e5fa:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801e5fe:	b29b      	uxth	r3, r3
 801e600:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e604:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801e608:	4332      	orrs	r2, r6
 801e60a:	1c5e      	adds	r6, r3, #1
 801e60c:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e610:	095b      	lsrs	r3, r3, #5
 801e612:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e616:	431a      	orrs	r2, r3
 801e618:	f8aa 2000 	strh.w	r2, [sl]
 801e61c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e61e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e620:	4413      	add	r3, r2
 801e622:	932d      	str	r3, [sp, #180]	; 0xb4
 801e624:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e626:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e628:	4413      	add	r3, r2
 801e62a:	932e      	str	r3, [sp, #184]	; 0xb8
 801e62c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e62e:	3b01      	subs	r3, #1
 801e630:	f10a 0a02 	add.w	sl, sl, #2
 801e634:	9312      	str	r3, [sp, #72]	; 0x48
 801e636:	e4db      	b.n	801dff0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801e638:	b160      	cbz	r0, 801e654 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801e63a:	5d2a      	ldrb	r2, [r5, r4]
 801e63c:	9d08      	ldr	r5, [sp, #32]
 801e63e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e642:	920b      	str	r2, [sp, #44]	; 0x2c
 801e644:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e648:	25ff      	movs	r5, #255	; 0xff
 801e64a:	46ac      	mov	ip, r5
 801e64c:	e6e9      	b.n	801e422 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 801e64e:	25ff      	movs	r5, #255	; 0xff
 801e650:	46a8      	mov	r8, r5
 801e652:	e6e6      	b.n	801e422 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 801e654:	25ff      	movs	r5, #255	; 0xff
 801e656:	46a8      	mov	r8, r5
 801e658:	e7f7      	b.n	801e64a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 801e65a:	b01b      	add	sp, #108	; 0x6c
 801e65c:	ecbd 8b08 	vpop	{d8-d11}
 801e660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e664 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e668:	8808      	ldrh	r0, [r1, #0]
 801e66a:	b085      	sub	sp, #20
 801e66c:	1206      	asrs	r6, r0, #8
 801e66e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801e672:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e676:	9600      	str	r6, [sp, #0]
 801e678:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801e67c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801e680:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801e684:	10c6      	asrs	r6, r0, #3
 801e686:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e68a:	9601      	str	r6, [sp, #4]
 801e68c:	00c0      	lsls	r0, r0, #3
 801e68e:	fb04 560c 	mla	r6, r4, ip, r5
 801e692:	b2c0      	uxtb	r0, r0
 801e694:	4692      	mov	sl, r2
 801e696:	eb02 0e06 	add.w	lr, r2, r6
 801e69a:	9a00      	ldr	r2, [sp, #0]
 801e69c:	9002      	str	r0, [sp, #8]
 801e69e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e6a2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e6a6:	9a01      	ldr	r2, [sp, #4]
 801e6a8:	2c00      	cmp	r4, #0
 801e6aa:	4698      	mov	r8, r3
 801e6ac:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801e6b0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e6b4:	db3e      	blt.n	801e734 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801e6b6:	45a1      	cmp	r9, r4
 801e6b8:	dd3c      	ble.n	801e734 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801e6ba:	2d00      	cmp	r5, #0
 801e6bc:	db38      	blt.n	801e730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801e6be:	45ac      	cmp	ip, r5
 801e6c0:	dd36      	ble.n	801e730 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801e6c2:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801e6c6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801e6ca:	1c6e      	adds	r6, r5, #1
 801e6cc:	d435      	bmi.n	801e73a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801e6ce:	45b4      	cmp	ip, r6
 801e6d0:	dd33      	ble.n	801e73a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801e6d2:	b393      	cbz	r3, 801e73a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801e6d4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801e6d8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801e6dc:	3401      	adds	r4, #1
 801e6de:	d430      	bmi.n	801e742 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801e6e0:	45a1      	cmp	r9, r4
 801e6e2:	dd2e      	ble.n	801e742 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801e6e4:	b36f      	cbz	r7, 801e742 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801e6e6:	2d00      	cmp	r5, #0
 801e6e8:	db29      	blt.n	801e73e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801e6ea:	45ac      	cmp	ip, r5
 801e6ec:	dd27      	ble.n	801e73e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801e6ee:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801e6f2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801e6f6:	3501      	adds	r5, #1
 801e6f8:	d407      	bmi.n	801e70a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801e6fa:	45ac      	cmp	ip, r5
 801e6fc:	dd05      	ble.n	801e70a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801e6fe:	b123      	cbz	r3, 801e70a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801e700:	44f4      	add	ip, lr
 801e702:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801e706:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801e70a:	2b0f      	cmp	r3, #15
 801e70c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801e710:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e714:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e718:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801e71c:	d801      	bhi.n	801e722 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 801e71e:	2f0f      	cmp	r7, #15
 801e720:	d911      	bls.n	801e746 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801e722:	4b79      	ldr	r3, [pc, #484]	; (801e908 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 801e724:	4a79      	ldr	r2, [pc, #484]	; (801e90c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 801e726:	487a      	ldr	r0, [pc, #488]	; (801e910 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801e728:	f240 3173 	movw	r1, #883	; 0x373
 801e72c:	f004 ff28 	bl	8023580 <__assert_func>
 801e730:	4602      	mov	r2, r0
 801e732:	e7ca      	b.n	801e6ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 801e734:	4606      	mov	r6, r0
 801e736:	4602      	mov	r2, r0
 801e738:	e7d0      	b.n	801e6dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801e73a:	4606      	mov	r6, r0
 801e73c:	e7ce      	b.n	801e6dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801e73e:	4604      	mov	r4, r0
 801e740:	e7d9      	b.n	801e6f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 801e742:	4604      	mov	r4, r0
 801e744:	e7e1      	b.n	801e70a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801e746:	b29b      	uxth	r3, r3
 801e748:	b2bf      	uxth	r7, r7
 801e74a:	fb03 fe07 	mul.w	lr, r3, r7
 801e74e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801e752:	011b      	lsls	r3, r3, #4
 801e754:	eba3 0c0e 	sub.w	ip, r3, lr
 801e758:	b2bf      	uxth	r7, r7
 801e75a:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801e75e:	fa1f fc8c 	uxth.w	ip, ip
 801e762:	1bed      	subs	r5, r5, r7
 801e764:	b2ad      	uxth	r5, r5
 801e766:	fb0c f30a 	mul.w	r3, ip, sl
 801e76a:	fb05 330b 	mla	r3, r5, fp, r3
 801e76e:	fb07 3309 	mla	r3, r7, r9, r3
 801e772:	fb0e 3308 	mla	r3, lr, r8, r3
 801e776:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e77a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e77e:	9303      	str	r3, [sp, #12]
 801e780:	d018      	beq.n	801e7b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 801e782:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e786:	fb0b f303 	mul.w	r3, fp, r3
 801e78a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e78e:	fb0b fb02 	mul.w	fp, fp, r2
 801e792:	0a1a      	lsrs	r2, r3, #8
 801e794:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e798:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e79c:	441a      	add	r2, r3
 801e79e:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801e7a2:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801e7a6:	0a12      	lsrs	r2, r2, #8
 801e7a8:	0a1b      	lsrs	r3, r3, #8
 801e7aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e7ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e7b2:	431a      	orrs	r2, r3
 801e7b4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e7b8:	d019      	beq.n	801e7ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 801e7ba:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801e7be:	fb0a fb0b 	mul.w	fp, sl, fp
 801e7c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e7c6:	fb0a fa06 	mul.w	sl, sl, r6
 801e7ca:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801e7ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e7d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e7d6:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801e7da:	445e      	add	r6, fp
 801e7dc:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801e7e0:	0a36      	lsrs	r6, r6, #8
 801e7e2:	0a1b      	lsrs	r3, r3, #8
 801e7e4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e7e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e7ec:	431e      	orrs	r6, r3
 801e7ee:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e7f2:	d019      	beq.n	801e828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 801e7f4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801e7f8:	fb09 fa0a 	mul.w	sl, r9, sl
 801e7fc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e800:	fb09 f904 	mul.w	r9, r9, r4
 801e804:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801e808:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e80c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e810:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801e814:	4454      	add	r4, sl
 801e816:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801e81a:	0a24      	lsrs	r4, r4, #8
 801e81c:	0a1b      	lsrs	r3, r3, #8
 801e81e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e826:	431c      	orrs	r4, r3
 801e828:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e82c:	d019      	beq.n	801e862 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 801e82e:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801e832:	fb08 f909 	mul.w	r9, r8, r9
 801e836:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e83a:	fb08 f800 	mul.w	r8, r8, r0
 801e83e:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801e842:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e846:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801e84a:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801e84e:	4448      	add	r0, r9
 801e850:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801e854:	0a00      	lsrs	r0, r0, #8
 801e856:	0a1b      	lsrs	r3, r3, #8
 801e858:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e85c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e860:	4318      	orrs	r0, r3
 801e862:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e866:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e86a:	fb0c f808 	mul.w	r8, ip, r8
 801e86e:	fb05 8803 	mla	r8, r5, r3, r8
 801e872:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801e876:	fb07 8803 	mla	r8, r7, r3, r8
 801e87a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801e87e:	fb0e 8303 	mla	r3, lr, r3, r8
 801e882:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e886:	0a1b      	lsrs	r3, r3, #8
 801e888:	fb0c f606 	mul.w	r6, ip, r6
 801e88c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e890:	fb05 6202 	mla	r2, r5, r2, r6
 801e894:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801e898:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801e89c:	fb07 2703 	mla	r7, r7, r3, r2
 801e8a0:	9a03      	ldr	r2, [sp, #12]
 801e8a2:	9c02      	ldr	r4, [sp, #8]
 801e8a4:	9d01      	ldr	r5, [sp, #4]
 801e8a6:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801e8aa:	fb0e 7303 	mla	r3, lr, r3, r7
 801e8ae:	43d0      	mvns	r0, r2
 801e8b0:	9a00      	ldr	r2, [sp, #0]
 801e8b2:	b2c0      	uxtb	r0, r0
 801e8b4:	0a1b      	lsrs	r3, r3, #8
 801e8b6:	4342      	muls	r2, r0
 801e8b8:	4344      	muls	r4, r0
 801e8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e8be:	ea48 0303 	orr.w	r3, r8, r3
 801e8c2:	4345      	muls	r5, r0
 801e8c4:	4620      	mov	r0, r4
 801e8c6:	1c54      	adds	r4, r2, #1
 801e8c8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e8cc:	0c1a      	lsrs	r2, r3, #16
 801e8ce:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801e8d2:	4a10      	ldr	r2, [pc, #64]	; (801e914 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 801e8d4:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 801e8d8:	1c44      	adds	r4, r0, #1
 801e8da:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801e8de:	b2d8      	uxtb	r0, r3
 801e8e0:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801e8e4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 801e8e8:	1c68      	adds	r0, r5, #1
 801e8ea:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 801e8ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e8f2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e8f6:	00db      	lsls	r3, r3, #3
 801e8f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e8fc:	4313      	orrs	r3, r2
 801e8fe:	800b      	strh	r3, [r1, #0]
 801e900:	b005      	add	sp, #20
 801e902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e906:	bf00      	nop
 801e908:	080288e7 	.word	0x080288e7
 801e90c:	08028e45 	.word	0x08028e45
 801e910:	0802896f 	.word	0x0802896f
 801e914:	fffff800 	.word	0xfffff800

0801e918 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e91c:	ed2d 8b08 	vpush	{d8-d11}
 801e920:	b097      	sub	sp, #92	; 0x5c
 801e922:	eeb0 aa40 	vmov.f32	s20, s0
 801e926:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801e928:	9307      	str	r3, [sp, #28]
 801e92a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801e92e:	9112      	str	r1, [sp, #72]	; 0x48
 801e930:	930f      	str	r3, [sp, #60]	; 0x3c
 801e932:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e936:	9015      	str	r0, [sp, #84]	; 0x54
 801e938:	6868      	ldr	r0, [r5, #4]
 801e93a:	9214      	str	r2, [sp, #80]	; 0x50
 801e93c:	fb00 1303 	mla	r3, r0, r3, r1
 801e940:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801e942:	6829      	ldr	r1, [r5, #0]
 801e944:	6855      	ldr	r5, [r2, #4]
 801e946:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801e94a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e94e:	930a      	str	r3, [sp, #40]	; 0x28
 801e950:	6813      	ldr	r3, [r2, #0]
 801e952:	9311      	str	r3, [sp, #68]	; 0x44
 801e954:	eef0 9a60 	vmov.f32	s19, s1
 801e958:	eeb0 9a41 	vmov.f32	s18, s2
 801e95c:	eeb0 8a62 	vmov.f32	s16, s5
 801e960:	eef0 8a43 	vmov.f32	s17, s6
 801e964:	eef0 ba44 	vmov.f32	s23, s8
 801e968:	eeb0 ba64 	vmov.f32	s22, s9
 801e96c:	eef0 aa45 	vmov.f32	s21, s10
 801e970:	3504      	adds	r5, #4
 801e972:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e974:	2b00      	cmp	r3, #0
 801e976:	dc03      	bgt.n	801e980 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801e978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	f340 834d 	ble.w	801f01a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 801e980:	9b07      	ldr	r3, [sp, #28]
 801e982:	2b00      	cmp	r3, #0
 801e984:	f340 819c 	ble.w	801ecc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 801e988:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e98a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e98c:	1412      	asrs	r2, r2, #16
 801e98e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e992:	d42d      	bmi.n	801e9f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e994:	1c51      	adds	r1, r2, #1
 801e996:	428c      	cmp	r4, r1
 801e998:	dd2d      	ble.n	801e9f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	db2b      	blt.n	801e9f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e99e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e9a0:	1c59      	adds	r1, r3, #1
 801e9a2:	4288      	cmp	r0, r1
 801e9a4:	dd27      	ble.n	801e9f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e9a6:	9b07      	ldr	r3, [sp, #28]
 801e9a8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e9aa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e9ac:	3b01      	subs	r3, #1
 801e9ae:	fb02 1203 	mla	r2, r2, r3, r1
 801e9b2:	1412      	asrs	r2, r2, #16
 801e9b4:	d429      	bmi.n	801ea0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e9b6:	3201      	adds	r2, #1
 801e9b8:	4294      	cmp	r4, r2
 801e9ba:	dd26      	ble.n	801ea0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e9bc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e9be:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e9c0:	fb02 1303 	mla	r3, r2, r3, r1
 801e9c4:	141b      	asrs	r3, r3, #16
 801e9c6:	d420      	bmi.n	801ea0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e9c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e9ca:	3301      	adds	r3, #1
 801e9cc:	429a      	cmp	r2, r3
 801e9ce:	dd1c      	ble.n	801ea0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e9d0:	9b07      	ldr	r3, [sp, #28]
 801e9d2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801e9d6:	9310      	str	r3, [sp, #64]	; 0x40
 801e9d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	f300 81da 	bgt.w	801ed94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 801e9e0:	9b07      	ldr	r3, [sp, #28]
 801e9e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e9e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e9e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e9ec:	930a      	str	r3, [sp, #40]	; 0x28
 801e9ee:	e169      	b.n	801ecc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801e9f0:	1c51      	adds	r1, r2, #1
 801e9f2:	f040 8156 	bne.w	801eca2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801e9f6:	42a2      	cmp	r2, r4
 801e9f8:	f280 8153 	bge.w	801eca2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801e9fc:	1c5a      	adds	r2, r3, #1
 801e9fe:	f2c0 8150 	blt.w	801eca2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801ea02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea04:	4293      	cmp	r3, r2
 801ea06:	f280 814c 	bge.w	801eca2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801ea0a:	9b07      	ldr	r3, [sp, #28]
 801ea0c:	9313      	str	r3, [sp, #76]	; 0x4c
 801ea0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea10:	9310      	str	r3, [sp, #64]	; 0x40
 801ea12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	dde3      	ble.n	801e9e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801ea18:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ea1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ea1c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ea20:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ea22:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801ea26:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ea28:	1412      	asrs	r2, r2, #16
 801ea2a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ea2e:	f100 8198 	bmi.w	801ed62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 801ea32:	1c56      	adds	r6, r2, #1
 801ea34:	42b4      	cmp	r4, r6
 801ea36:	f340 8196 	ble.w	801ed66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801ea3a:	2b00      	cmp	r3, #0
 801ea3c:	f2c0 8193 	blt.w	801ed66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801ea40:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ea42:	1c5e      	adds	r6, r3, #1
 801ea44:	42b7      	cmp	r7, r6
 801ea46:	f340 818e 	ble.w	801ed66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801ea4a:	fb03 2304 	mla	r3, r3, r4, r2
 801ea4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea50:	18d6      	adds	r6, r2, r3
 801ea52:	5cd3      	ldrb	r3, [r2, r3]
 801ea54:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801ea58:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ea5c:	2900      	cmp	r1, #0
 801ea5e:	f000 8170 	beq.w	801ed42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 801ea62:	7872      	ldrb	r2, [r6, #1]
 801ea64:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ea68:	920b      	str	r2, [sp, #44]	; 0x2c
 801ea6a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ea6e:	2800      	cmp	r0, #0
 801ea70:	f000 8171 	beq.w	801ed56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 801ea74:	1932      	adds	r2, r6, r4
 801ea76:	5d36      	ldrb	r6, [r6, r4]
 801ea78:	7852      	ldrb	r2, [r2, #1]
 801ea7a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801ea7e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ea82:	9608      	str	r6, [sp, #32]
 801ea84:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ea88:	920c      	str	r2, [sp, #48]	; 0x30
 801ea8a:	0e16      	lsrs	r6, r2, #24
 801ea8c:	b289      	uxth	r1, r1
 801ea8e:	b280      	uxth	r0, r0
 801ea90:	fb01 fb00 	mul.w	fp, r1, r0
 801ea94:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801ea98:	0109      	lsls	r1, r1, #4
 801ea9a:	eba1 090b 	sub.w	r9, r1, fp
 801ea9e:	b280      	uxth	r0, r0
 801eaa0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801eaa4:	fa1f f989 	uxth.w	r9, r9
 801eaa8:	1a12      	subs	r2, r2, r0
 801eaaa:	b292      	uxth	r2, r2
 801eaac:	fb09 f108 	mul.w	r1, r9, r8
 801eab0:	fb02 110c 	mla	r1, r2, ip, r1
 801eab4:	fb00 110a 	mla	r1, r0, sl, r1
 801eab8:	fb0b 1106 	mla	r1, fp, r6, r1
 801eabc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801eac0:	2900      	cmp	r1, #0
 801eac2:	f000 80df 	beq.w	801ec84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801eac6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801eaca:	d01b      	beq.n	801eb04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 801eacc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ead0:	fb0c fe0e 	mul.w	lr, ip, lr
 801ead4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ead8:	fb0c fc03 	mul.w	ip, ip, r3
 801eadc:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801eae0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eae4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801eae8:	4473      	add	r3, lr
 801eaea:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801eaee:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801eaf2:	0a1b      	lsrs	r3, r3, #8
 801eaf4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eaf8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eafc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801eb00:	ea43 030e 	orr.w	r3, r3, lr
 801eb04:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801eb08:	d01e      	beq.n	801eb48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 801eb0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801eb0c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801eb10:	fb08 fc0c 	mul.w	ip, r8, ip
 801eb14:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801eb18:	fb08 f80e 	mul.w	r8, r8, lr
 801eb1c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801eb20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb24:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801eb28:	44e6      	add	lr, ip
 801eb2a:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801eb2e:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801eb32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb36:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801eb3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb3e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801eb42:	ea4e 0708 	orr.w	r7, lr, r8
 801eb46:	970b      	str	r7, [sp, #44]	; 0x2c
 801eb48:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801eb4c:	d01e      	beq.n	801eb8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb4e:	9f08      	ldr	r7, [sp, #32]
 801eb50:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801eb54:	fb0a f808 	mul.w	r8, sl, r8
 801eb58:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801eb5c:	fb0a fa0c 	mul.w	sl, sl, ip
 801eb60:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801eb64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb68:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801eb6c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eb70:	44c6      	add	lr, r8
 801eb72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eb76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eb86:	ea4e 070a 	orr.w	r7, lr, sl
 801eb8a:	9708      	str	r7, [sp, #32]
 801eb8c:	2eff      	cmp	r6, #255	; 0xff
 801eb8e:	d01d      	beq.n	801ebcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801eb90:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801eb92:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801eb96:	fb06 f808 	mul.w	r8, r6, r8
 801eb9a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801eb9e:	fb06 f60c 	mul.w	r6, r6, ip
 801eba2:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801eba6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ebaa:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801ebae:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ebb2:	44c6      	add	lr, r8
 801ebb4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ebb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ebbc:	0a36      	lsrs	r6, r6, #8
 801ebbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ebc2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ebc6:	ea4e 0606 	orr.w	r6, lr, r6
 801ebca:	960c      	str	r6, [sp, #48]	; 0x30
 801ebcc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801ebce:	9f08      	ldr	r7, [sp, #32]
 801ebd0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ebd4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ebd8:	fb09 f606 	mul.w	r6, r9, r6
 801ebdc:	fb02 660c 	mla	r6, r2, ip, r6
 801ebe0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801ebe4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ebe6:	fb00 660c 	mla	r6, r0, ip, r6
 801ebea:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801ebee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ebf0:	fb0b 660c 	mla	r6, fp, ip, r6
 801ebf4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801ebf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ebfc:	fb09 f90c 	mul.w	r9, r9, ip
 801ec00:	fb02 9303 	mla	r3, r2, r3, r9
 801ec04:	9a08      	ldr	r2, [sp, #32]
 801ec06:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801ec0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ec0c:	fb00 330e 	mla	r3, r0, lr, r3
 801ec10:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801ec14:	fb0b 3b00 	mla	fp, fp, r0, r3
 801ec18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec1a:	881b      	ldrh	r3, [r3, #0]
 801ec1c:	43c9      	mvns	r1, r1
 801ec1e:	1218      	asrs	r0, r3, #8
 801ec20:	b2c9      	uxtb	r1, r1
 801ec22:	10da      	asrs	r2, r3, #3
 801ec24:	0a36      	lsrs	r6, r6, #8
 801ec26:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ec2a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ec2e:	00db      	lsls	r3, r3, #3
 801ec30:	4348      	muls	r0, r1
 801ec32:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ec36:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ec3a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ec3e:	b2db      	uxtb	r3, r3
 801ec40:	434b      	muls	r3, r1
 801ec42:	ea46 060b 	orr.w	r6, r6, fp
 801ec46:	434a      	muls	r2, r1
 801ec48:	1c41      	adds	r1, r0, #1
 801ec4a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801ec4e:	0c30      	lsrs	r0, r6, #16
 801ec50:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801ec54:	494e      	ldr	r1, [pc, #312]	; (801ed90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 801ec56:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 801ec5a:	1c59      	adds	r1, r3, #1
 801ec5c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ec60:	b2f3      	uxtb	r3, r6
 801ec62:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ec66:	1c51      	adds	r1, r2, #1
 801ec68:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ec6c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ec70:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801ec74:	00f6      	lsls	r6, r6, #3
 801ec76:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 801ec7a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ec7e:	431e      	orrs	r6, r3
 801ec80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec82:	801e      	strh	r6, [r3, #0]
 801ec84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec86:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ec88:	3302      	adds	r3, #2
 801ec8a:	9310      	str	r3, [sp, #64]	; 0x40
 801ec8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ec8e:	4413      	add	r3, r2
 801ec90:	9329      	str	r3, [sp, #164]	; 0xa4
 801ec92:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ec94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ec96:	4413      	add	r3, r2
 801ec98:	932a      	str	r3, [sp, #168]	; 0xa8
 801ec9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ec9c:	3b01      	subs	r3, #1
 801ec9e:	9313      	str	r3, [sp, #76]	; 0x4c
 801eca0:	e6b7      	b.n	801ea12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801eca2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eca4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801eca6:	4413      	add	r3, r2
 801eca8:	9329      	str	r3, [sp, #164]	; 0xa4
 801ecaa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ecac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ecae:	4413      	add	r3, r2
 801ecb0:	932a      	str	r3, [sp, #168]	; 0xa8
 801ecb2:	9b07      	ldr	r3, [sp, #28]
 801ecb4:	3b01      	subs	r3, #1
 801ecb6:	9307      	str	r3, [sp, #28]
 801ecb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecba:	3302      	adds	r3, #2
 801ecbc:	930a      	str	r3, [sp, #40]	; 0x28
 801ecbe:	e65f      	b.n	801e980 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801ecc0:	f47f ae71 	bne.w	801e9a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801ecc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	f340 81a7 	ble.w	801f01a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 801eccc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ecd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ecd4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ecd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ecda:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ecde:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ece2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ece6:	eef0 6a48 	vmov.f32	s13, s16
 801ecea:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ecee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecf2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ecf6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801ecfa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ecfe:	eef0 6a68 	vmov.f32	s13, s17
 801ed02:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ed06:	ee18 2a10 	vmov	r2, s16
 801ed0a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ed0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed12:	ee18 2a90 	vmov	r2, s17
 801ed16:	932b      	str	r3, [sp, #172]	; 0xac
 801ed18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed1e:	932c      	str	r3, [sp, #176]	; 0xb0
 801ed20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ed22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed24:	3b01      	subs	r3, #1
 801ed26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed2a:	9312      	str	r3, [sp, #72]	; 0x48
 801ed2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed2e:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801ed32:	bf08      	it	eq
 801ed34:	4613      	moveq	r3, r2
 801ed36:	9307      	str	r3, [sp, #28]
 801ed38:	eef0 8a67 	vmov.f32	s17, s15
 801ed3c:	eeb0 8a47 	vmov.f32	s16, s14
 801ed40:	e617      	b.n	801e972 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801ed42:	b158      	cbz	r0, 801ed5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 801ed44:	5d32      	ldrb	r2, [r6, r4]
 801ed46:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ed4a:	9208      	str	r2, [sp, #32]
 801ed4c:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801ed50:	26ff      	movs	r6, #255	; 0xff
 801ed52:	46b0      	mov	r8, r6
 801ed54:	e69a      	b.n	801ea8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801ed56:	26ff      	movs	r6, #255	; 0xff
 801ed58:	46b2      	mov	sl, r6
 801ed5a:	e697      	b.n	801ea8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801ed5c:	26ff      	movs	r6, #255	; 0xff
 801ed5e:	46b2      	mov	sl, r6
 801ed60:	e7f7      	b.n	801ed52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801ed62:	1c57      	adds	r7, r2, #1
 801ed64:	d18e      	bne.n	801ec84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801ed66:	4294      	cmp	r4, r2
 801ed68:	dd8c      	ble.n	801ec84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801ed6a:	1c5e      	adds	r6, r3, #1
 801ed6c:	db8a      	blt.n	801ec84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801ed6e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ed70:	429e      	cmp	r6, r3
 801ed72:	dd87      	ble.n	801ec84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801ed74:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801ed78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ed7c:	e9cd 4600 	strd	r4, r6, [sp]
 801ed80:	462b      	mov	r3, r5
 801ed82:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 801ed86:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ed88:	f7ff fc6c 	bl	801e664 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801ed8c:	e77a      	b.n	801ec84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801ed8e:	bf00      	nop
 801ed90:	fffff800 	.word	0xfffff800
 801ed94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ed96:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ed98:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ed9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ed9e:	1409      	asrs	r1, r1, #16
 801eda0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801eda4:	141b      	asrs	r3, r3, #16
 801eda6:	fb04 1303 	mla	r3, r4, r3, r1
 801edaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801edac:	18ce      	adds	r6, r1, r3
 801edae:	5ccb      	ldrb	r3, [r1, r3]
 801edb0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801edb4:	0e1f      	lsrs	r7, r3, #24
 801edb6:	2a00      	cmp	r2, #0
 801edb8:	f000 811f 	beq.w	801effa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 801edbc:	7871      	ldrb	r1, [r6, #1]
 801edbe:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801edc2:	910d      	str	r1, [sp, #52]	; 0x34
 801edc4:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801edc8:	2800      	cmp	r0, #0
 801edca:	f000 8120 	beq.w	801f00e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 801edce:	1931      	adds	r1, r6, r4
 801edd0:	5d36      	ldrb	r6, [r6, r4]
 801edd2:	7849      	ldrb	r1, [r1, #1]
 801edd4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801edd8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801eddc:	9609      	str	r6, [sp, #36]	; 0x24
 801edde:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801ede2:	910e      	str	r1, [sp, #56]	; 0x38
 801ede4:	0e0e      	lsrs	r6, r1, #24
 801ede6:	b292      	uxth	r2, r2
 801ede8:	b280      	uxth	r0, r0
 801edea:	fb02 fa00 	mul.w	sl, r2, r0
 801edee:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801edf2:	0112      	lsls	r2, r2, #4
 801edf4:	eba2 080a 	sub.w	r8, r2, sl
 801edf8:	b280      	uxth	r0, r0
 801edfa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801edfe:	fa1f f888 	uxth.w	r8, r8
 801ee02:	1a09      	subs	r1, r1, r0
 801ee04:	b289      	uxth	r1, r1
 801ee06:	fb08 f20e 	mul.w	r2, r8, lr
 801ee0a:	fb01 2207 	mla	r2, r1, r7, r2
 801ee0e:	fb00 2209 	mla	r2, r0, r9, r2
 801ee12:	fb0a 2206 	mla	r2, sl, r6, r2
 801ee16:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ee1a:	9213      	str	r2, [sp, #76]	; 0x4c
 801ee1c:	2a00      	cmp	r2, #0
 801ee1e:	f000 80de 	beq.w	801efde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 801ee22:	2fff      	cmp	r7, #255	; 0xff
 801ee24:	d01a      	beq.n	801ee5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 801ee26:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ee2a:	fb07 fc0c 	mul.w	ip, r7, ip
 801ee2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee32:	435f      	muls	r7, r3
 801ee34:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ee38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ee3c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ee40:	4463      	add	r3, ip
 801ee42:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801ee46:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801ee4a:	0a1b      	lsrs	r3, r3, #8
 801ee4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ee54:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ee58:	ea43 030c 	orr.w	r3, r3, ip
 801ee5c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ee60:	d01f      	beq.n	801eea2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 801ee62:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ee64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ee66:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ee6a:	fb0e f707 	mul.w	r7, lr, r7
 801ee6e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ee72:	fb0e fe0c 	mul.w	lr, lr, ip
 801ee76:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee7e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ee82:	44bc      	add	ip, r7
 801ee84:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ee88:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ee8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee98:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ee9c:	ea4c 020e 	orr.w	r2, ip, lr
 801eea0:	920d      	str	r2, [sp, #52]	; 0x34
 801eea2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801eea6:	d01e      	beq.n	801eee6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 801eea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eeaa:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801eeae:	fb09 fe0e 	mul.w	lr, r9, lr
 801eeb2:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801eeb6:	fb09 f907 	mul.w	r9, r9, r7
 801eeba:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801eebe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eec2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801eec6:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801eeca:	44f4      	add	ip, lr
 801eecc:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801eed0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eed4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eed8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eedc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801eee0:	ea4c 0209 	orr.w	r2, ip, r9
 801eee4:	9209      	str	r2, [sp, #36]	; 0x24
 801eee6:	2eff      	cmp	r6, #255	; 0xff
 801eee8:	d01c      	beq.n	801ef24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 801eeea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eeec:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801eef0:	fb06 fe0e 	mul.w	lr, r6, lr
 801eef4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801eef8:	437e      	muls	r6, r7
 801eefa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801eefe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef02:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ef06:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801ef0a:	44f4      	add	ip, lr
 801ef0c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ef10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef14:	0a36      	lsrs	r6, r6, #8
 801ef16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef1a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ef1e:	ea4c 0206 	orr.w	r2, ip, r6
 801ef22:	920e      	str	r2, [sp, #56]	; 0x38
 801ef24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ef26:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801ef2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef2c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ef30:	fb08 f606 	mul.w	r6, r8, r6
 801ef34:	fb01 6607 	mla	r6, r1, r7, r6
 801ef38:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801ef3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef3e:	fb00 6607 	mla	r6, r0, r7, r6
 801ef42:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801ef46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ef48:	fb0a 6607 	mla	r6, sl, r7, r6
 801ef4c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801ef50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef52:	fb08 f807 	mul.w	r8, r8, r7
 801ef56:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ef5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ef5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef60:	fb01 8303 	mla	r3, r1, r3, r8
 801ef64:	fb00 330c 	mla	r3, r0, ip, r3
 801ef68:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801ef6c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801ef70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ef72:	f8bb 3000 	ldrh.w	r3, [fp]
 801ef76:	43d2      	mvns	r2, r2
 801ef78:	1218      	asrs	r0, r3, #8
 801ef7a:	b2d2      	uxtb	r2, r2
 801ef7c:	0a36      	lsrs	r6, r6, #8
 801ef7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ef82:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ef86:	4350      	muls	r0, r2
 801ef88:	10d9      	asrs	r1, r3, #3
 801ef8a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ef8e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ef92:	00db      	lsls	r3, r3, #3
 801ef94:	ea46 060e 	orr.w	r6, r6, lr
 801ef98:	1c47      	adds	r7, r0, #1
 801ef9a:	b2db      	uxtb	r3, r3
 801ef9c:	4353      	muls	r3, r2
 801ef9e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801efa2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801efa6:	0c37      	lsrs	r7, r6, #16
 801efa8:	4351      	muls	r1, r2
 801efaa:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801efae:	4a1d      	ldr	r2, [pc, #116]	; (801f024 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 801efb0:	1c5f      	adds	r7, r3, #1
 801efb2:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801efb6:	b2f7      	uxtb	r7, r6
 801efb8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801efbc:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801efc0:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801efc4:	1c4b      	adds	r3, r1, #1
 801efc6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801efca:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801efce:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801efd2:	00f6      	lsls	r6, r6, #3
 801efd4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801efd8:	4330      	orrs	r0, r6
 801efda:	f8ab 0000 	strh.w	r0, [fp]
 801efde:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801efe0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801efe2:	4413      	add	r3, r2
 801efe4:	9329      	str	r3, [sp, #164]	; 0xa4
 801efe6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801efe8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801efea:	4413      	add	r3, r2
 801efec:	932a      	str	r3, [sp, #168]	; 0xa8
 801efee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eff0:	3b01      	subs	r3, #1
 801eff2:	f10b 0b02 	add.w	fp, fp, #2
 801eff6:	9310      	str	r3, [sp, #64]	; 0x40
 801eff8:	e4ee      	b.n	801e9d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 801effa:	b158      	cbz	r0, 801f014 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 801effc:	5d31      	ldrb	r1, [r6, r4]
 801effe:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801f002:	9109      	str	r1, [sp, #36]	; 0x24
 801f004:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801f008:	26ff      	movs	r6, #255	; 0xff
 801f00a:	46b6      	mov	lr, r6
 801f00c:	e6eb      	b.n	801ede6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 801f00e:	26ff      	movs	r6, #255	; 0xff
 801f010:	46b1      	mov	r9, r6
 801f012:	e6e8      	b.n	801ede6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 801f014:	26ff      	movs	r6, #255	; 0xff
 801f016:	46b1      	mov	r9, r6
 801f018:	e7f7      	b.n	801f00a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 801f01a:	b017      	add	sp, #92	; 0x5c
 801f01c:	ecbd 8b08 	vpop	{d8-d11}
 801f020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f024:	fffff800 	.word	0xfffff800

0801f028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f02c:	b087      	sub	sp, #28
 801f02e:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 801f032:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 801f036:	9105      	str	r1, [sp, #20]
 801f038:	fb00 e604 	mla	r6, r0, r4, lr
 801f03c:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 801f040:	9102      	str	r1, [sp, #8]
 801f042:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 801f046:	9103      	str	r1, [sp, #12]
 801f048:	9905      	ldr	r1, [sp, #20]
 801f04a:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 801f04e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801f052:	8809      	ldrh	r1, [r1, #0]
 801f054:	2800      	cmp	r0, #0
 801f056:	eb03 0a06 	add.w	sl, r3, r6
 801f05a:	f2c0 80ca 	blt.w	801f1f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 801f05e:	4287      	cmp	r7, r0
 801f060:	f340 80c7 	ble.w	801f1f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 801f064:	f1be 0f00 	cmp.w	lr, #0
 801f068:	f2c0 80bf 	blt.w	801f1ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 801f06c:	4574      	cmp	r4, lr
 801f06e:	f340 80bc 	ble.w	801f1ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 801f072:	f813 c006 	ldrb.w	ip, [r3, r6]
 801f076:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 801f07a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f07e:	d01c      	beq.n	801f0ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 801f080:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 801f084:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801f088:	4372      	muls	r2, r6
 801f08a:	f64f 081f 	movw	r8, #63519	; 0xf81f
 801f08e:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 801f092:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f096:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801f09a:	fb0c f609 	mul.w	r6, ip, r9
 801f09e:	eb03 0902 	add.w	r9, r3, r2
 801f0a2:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 801f0a6:	f106 0820 	add.w	r8, r6, #32
 801f0aa:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801f0ae:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f0b2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f0b6:	ea49 0908 	orr.w	r9, r9, r8
 801f0ba:	fa1f f989 	uxth.w	r9, r9
 801f0be:	f11e 0301 	adds.w	r3, lr, #1
 801f0c2:	f100 809b 	bmi.w	801f1fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 801f0c6:	429c      	cmp	r4, r3
 801f0c8:	f340 8098 	ble.w	801f1fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 801f0cc:	2d00      	cmp	r5, #0
 801f0ce:	f000 8095 	beq.w	801f1fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 801f0d2:	f89a 6001 	ldrb.w	r6, [sl, #1]
 801f0d6:	9b03      	ldr	r3, [sp, #12]
 801f0d8:	2eff      	cmp	r6, #255	; 0xff
 801f0da:	885b      	ldrh	r3, [r3, #2]
 801f0dc:	d01b      	beq.n	801f116 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 801f0de:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801f0e2:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801f0e6:	fb08 f202 	mul.w	r2, r8, r2
 801f0ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f0ee:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f0f2:	fb06 f803 	mul.w	r8, r6, r3
 801f0f6:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801f0fa:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801f0fe:	441a      	add	r2, r3
 801f100:	f108 0320 	add.w	r3, r8, #32
 801f104:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f108:	0a1b      	lsrs	r3, r3, #8
 801f10a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801f10e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f112:	ea4b 0303 	orr.w	r3, fp, r3
 801f116:	b29b      	uxth	r3, r3
 801f118:	9301      	str	r3, [sp, #4]
 801f11a:	3001      	adds	r0, #1
 801f11c:	d474      	bmi.n	801f208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801f11e:	4287      	cmp	r7, r0
 801f120:	dd72      	ble.n	801f208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801f122:	9a02      	ldr	r2, [sp, #8]
 801f124:	2a00      	cmp	r2, #0
 801f126:	f000 8121 	beq.w	801f36c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 801f12a:	f1be 0f00 	cmp.w	lr, #0
 801f12e:	db68      	blt.n	801f202 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 801f130:	4574      	cmp	r4, lr
 801f132:	dd66      	ble.n	801f202 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 801f134:	f81a 7004 	ldrb.w	r7, [sl, r4]
 801f138:	9a03      	ldr	r2, [sp, #12]
 801f13a:	2fff      	cmp	r7, #255	; 0xff
 801f13c:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801f140:	d01c      	beq.n	801f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 801f142:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 801f146:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801f14a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f14e:	fb07 fb00 	mul.w	fp, r7, r0
 801f152:	fb08 f802 	mul.w	r8, r8, r2
 801f156:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801f15a:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 801f15e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f162:	4490      	add	r8, r2
 801f164:	f10b 0220 	add.w	r2, fp, #32
 801f168:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 801f16c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f170:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 801f174:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f178:	ea40 000b 	orr.w	r0, r0, fp
 801f17c:	b280      	uxth	r0, r0
 801f17e:	f11e 0e01 	adds.w	lr, lr, #1
 801f182:	d446      	bmi.n	801f212 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 801f184:	4574      	cmp	r4, lr
 801f186:	dd44      	ble.n	801f212 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 801f188:	2d00      	cmp	r5, #0
 801f18a:	d045      	beq.n	801f218 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 801f18c:	1c62      	adds	r2, r4, #1
 801f18e:	9b03      	ldr	r3, [sp, #12]
 801f190:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f194:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f198:	2cff      	cmp	r4, #255	; 0xff
 801f19a:	d01c      	beq.n	801f1d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 801f19c:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 801f1a0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f1a4:	fb08 fe0e 	mul.w	lr, r8, lr
 801f1a8:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 801f1ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f1b0:	fb04 f802 	mul.w	r8, r4, r2
 801f1b4:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 801f1b8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f1bc:	4472      	add	r2, lr
 801f1be:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 801f1c2:	f108 0a20 	add.w	sl, r8, #32
 801f1c6:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 801f1ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f1d2:	ea42 020a 	orr.w	r2, r2, sl
 801f1d6:	b292      	uxth	r2, r2
 801f1d8:	2d0f      	cmp	r5, #15
 801f1da:	d91f      	bls.n	801f21c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 801f1dc:	4b67      	ldr	r3, [pc, #412]	; (801f37c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 801f1de:	4a68      	ldr	r2, [pc, #416]	; (801f380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 801f1e0:	4868      	ldr	r0, [pc, #416]	; (801f384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 801f1e2:	f240 3173 	movw	r1, #883	; 0x373
 801f1e6:	f004 f9cb 	bl	8023580 <__assert_func>
 801f1ea:	4689      	mov	r9, r1
 801f1ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801f1f0:	e765      	b.n	801f0be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 801f1f2:	26ff      	movs	r6, #255	; 0xff
 801f1f4:	9101      	str	r1, [sp, #4]
 801f1f6:	4689      	mov	r9, r1
 801f1f8:	46b4      	mov	ip, r6
 801f1fa:	e78e      	b.n	801f11a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 801f1fc:	9101      	str	r1, [sp, #4]
 801f1fe:	26ff      	movs	r6, #255	; 0xff
 801f200:	e78b      	b.n	801f11a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 801f202:	4608      	mov	r0, r1
 801f204:	27ff      	movs	r7, #255	; 0xff
 801f206:	e7ba      	b.n	801f17e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 801f208:	24ff      	movs	r4, #255	; 0xff
 801f20a:	460a      	mov	r2, r1
 801f20c:	4608      	mov	r0, r1
 801f20e:	4627      	mov	r7, r4
 801f210:	e7e2      	b.n	801f1d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801f212:	460a      	mov	r2, r1
 801f214:	24ff      	movs	r4, #255	; 0xff
 801f216:	e7df      	b.n	801f1d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801f218:	460a      	mov	r2, r1
 801f21a:	24ff      	movs	r4, #255	; 0xff
 801f21c:	9b02      	ldr	r3, [sp, #8]
 801f21e:	2b0f      	cmp	r3, #15
 801f220:	d8dc      	bhi.n	801f1dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 801f222:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801f226:	fa1f f885 	uxth.w	r8, r5
 801f22a:	fb08 fa0e 	mul.w	sl, r8, lr
 801f22e:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801f232:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 801f236:	9303      	str	r3, [sp, #12]
 801f238:	fa1f f38e 	uxth.w	r3, lr
 801f23c:	9304      	str	r3, [sp, #16]
 801f23e:	ea4f 4809 	mov.w	r8, r9, lsl #16
 801f242:	9b02      	ldr	r3, [sp, #8]
 801f244:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f248:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801f24c:	fb15 fe03 	smulbb	lr, r5, r3
 801f250:	ea48 0809 	orr.w	r8, r8, r9
 801f254:	f1c3 0910 	rsb	r9, r3, #16
 801f258:	9b01      	ldr	r3, [sp, #4]
 801f25a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801f25e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f262:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f266:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f26a:	eba9 0905 	sub.w	r9, r9, r5
 801f26e:	ea4b 0303 	orr.w	r3, fp, r3
 801f272:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801f276:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801f27a:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 801f27e:	436b      	muls	r3, r5
 801f280:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f284:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f288:	ea4b 0202 	orr.w	r2, fp, r2
 801f28c:	fb09 3308 	mla	r3, r9, r8, r3
 801f290:	fb0e 3302 	mla	r3, lr, r2, r3
 801f294:	0402      	lsls	r2, r0, #16
 801f296:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f29a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f29e:	4310      	orrs	r0, r2
 801f2a0:	9a02      	ldr	r2, [sp, #8]
 801f2a2:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801f2a6:	fb0e 3e00 	mla	lr, lr, r0, r3
 801f2aa:	9803      	ldr	r0, [sp, #12]
 801f2ac:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 801f2b0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801f2b4:	9804      	ldr	r0, [sp, #16]
 801f2b6:	1a2d      	subs	r5, r5, r0
 801f2b8:	9803      	ldr	r0, [sp, #12]
 801f2ba:	eba0 000a 	sub.w	r0, r0, sl
 801f2be:	b280      	uxth	r0, r0
 801f2c0:	b2ad      	uxth	r5, r5
 801f2c2:	4346      	muls	r6, r0
 801f2c4:	9804      	ldr	r0, [sp, #16]
 801f2c6:	fb0c 6605 	mla	r6, ip, r5, r6
 801f2ca:	fb00 6707 	mla	r7, r0, r7, r6
 801f2ce:	fb0a 7404 	mla	r4, sl, r4, r7
 801f2d2:	b292      	uxth	r2, r2
 801f2d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f2d8:	4354      	muls	r4, r2
 801f2da:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801f2de:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f2e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f2e6:	f104 0a01 	add.w	sl, r4, #1
 801f2ea:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f2ee:	ea43 0e0e 	orr.w	lr, r3, lr
 801f2f2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f2f6:	fa1f f38e 	uxth.w	r3, lr
 801f2fa:	1208      	asrs	r0, r1, #8
 801f2fc:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 801f300:	b2e4      	uxtb	r4, r4
 801f302:	121d      	asrs	r5, r3, #8
 801f304:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f308:	fb10 f004 	smulbb	r0, r0, r4
 801f30c:	10ce      	asrs	r6, r1, #3
 801f30e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f312:	00c9      	lsls	r1, r1, #3
 801f314:	fb05 0502 	mla	r5, r5, r2, r0
 801f318:	b2c9      	uxtb	r1, r1
 801f31a:	10d8      	asrs	r0, r3, #3
 801f31c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f320:	00db      	lsls	r3, r3, #3
 801f322:	fb16 f604 	smulbb	r6, r6, r4
 801f326:	b2db      	uxtb	r3, r3
 801f328:	fb11 f404 	smulbb	r4, r1, r4
 801f32c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f330:	fb00 6002 	mla	r0, r0, r2, r6
 801f334:	fb03 4202 	mla	r2, r3, r2, r4
 801f338:	b2ad      	uxth	r5, r5
 801f33a:	b292      	uxth	r2, r2
 801f33c:	1c6b      	adds	r3, r5, #1
 801f33e:	1c51      	adds	r1, r2, #1
 801f340:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801f344:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f348:	b280      	uxth	r0, r0
 801f34a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f34e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f352:	4313      	orrs	r3, r2
 801f354:	1c42      	adds	r2, r0, #1
 801f356:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f35a:	0940      	lsrs	r0, r0, #5
 801f35c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f360:	9a05      	ldr	r2, [sp, #20]
 801f362:	4303      	orrs	r3, r0
 801f364:	8013      	strh	r3, [r2, #0]
 801f366:	b007      	add	sp, #28
 801f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f36c:	2d0f      	cmp	r5, #15
 801f36e:	f63f af35 	bhi.w	801f1dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 801f372:	24ff      	movs	r4, #255	; 0xff
 801f374:	460a      	mov	r2, r1
 801f376:	4608      	mov	r0, r1
 801f378:	4627      	mov	r7, r4
 801f37a:	e752      	b.n	801f222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 801f37c:	080288e7 	.word	0x080288e7
 801f380:	08028e45 	.word	0x08028e45
 801f384:	0802896f 	.word	0x0802896f

0801f388 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f38c:	ed2d 8b08 	vpush	{d8-d11}
 801f390:	b099      	sub	sp, #100	; 0x64
 801f392:	eeb0 aa40 	vmov.f32	s20, s0
 801f396:	9308      	str	r3, [sp, #32]
 801f398:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801f39c:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 801f39e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3a0:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801f3a4:	9314      	str	r3, [sp, #80]	; 0x50
 801f3a6:	9113      	str	r1, [sp, #76]	; 0x4c
 801f3a8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801f3ac:	9017      	str	r0, [sp, #92]	; 0x5c
 801f3ae:	6870      	ldr	r0, [r6, #4]
 801f3b0:	9216      	str	r2, [sp, #88]	; 0x58
 801f3b2:	fb00 1303 	mla	r3, r0, r3, r1
 801f3b6:	6831      	ldr	r1, [r6, #0]
 801f3b8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801f3ba:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 801f3be:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f3c2:	9309      	str	r3, [sp, #36]	; 0x24
 801f3c4:	6813      	ldr	r3, [r2, #0]
 801f3c6:	930c      	str	r3, [sp, #48]	; 0x30
 801f3c8:	6853      	ldr	r3, [r2, #4]
 801f3ca:	930d      	str	r3, [sp, #52]	; 0x34
 801f3cc:	006b      	lsls	r3, r5, #1
 801f3ce:	9312      	str	r3, [sp, #72]	; 0x48
 801f3d0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801f3d4:	930a      	str	r3, [sp, #40]	; 0x28
 801f3d6:	eef0 9a60 	vmov.f32	s19, s1
 801f3da:	eeb0 9a41 	vmov.f32	s18, s2
 801f3de:	eeb0 8a62 	vmov.f32	s16, s5
 801f3e2:	eef0 8a43 	vmov.f32	s17, s6
 801f3e6:	eef0 ba44 	vmov.f32	s23, s8
 801f3ea:	eeb0 ba64 	vmov.f32	s22, s9
 801f3ee:	eef0 aa45 	vmov.f32	s21, s10
 801f3f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	dc03      	bgt.n	801f400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801f3f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	f340 83bf 	ble.w	801fb7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 801f400:	9b08      	ldr	r3, [sp, #32]
 801f402:	2b00      	cmp	r3, #0
 801f404:	f340 81cb 	ble.w	801f79e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 801f408:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f40a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f40c:	1412      	asrs	r2, r2, #16
 801f40e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f412:	d42f      	bmi.n	801f474 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801f414:	1c51      	adds	r1, r2, #1
 801f416:	428d      	cmp	r5, r1
 801f418:	dd2f      	ble.n	801f47a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	db2d      	blt.n	801f47a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f41e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f420:	1c59      	adds	r1, r3, #1
 801f422:	4288      	cmp	r0, r1
 801f424:	dd29      	ble.n	801f47a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f426:	9b08      	ldr	r3, [sp, #32]
 801f428:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f42a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801f42c:	3b01      	subs	r3, #1
 801f42e:	fb02 1203 	mla	r2, r2, r3, r1
 801f432:	1412      	asrs	r2, r2, #16
 801f434:	d42b      	bmi.n	801f48e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801f436:	3201      	adds	r2, #1
 801f438:	4295      	cmp	r5, r2
 801f43a:	dd28      	ble.n	801f48e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801f43c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f43e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f440:	fb02 1303 	mla	r3, r2, r3, r1
 801f444:	141b      	asrs	r3, r3, #16
 801f446:	d422      	bmi.n	801f48e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801f448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f44a:	3301      	adds	r3, #1
 801f44c:	429a      	cmp	r2, r3
 801f44e:	dd1e      	ble.n	801f48e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801f450:	9b08      	ldr	r3, [sp, #32]
 801f452:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f456:	9315      	str	r3, [sp, #84]	; 0x54
 801f458:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f45c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f45e:	2b00      	cmp	r3, #0
 801f460:	f300 8217 	bgt.w	801f892 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 801f464:	9b08      	ldr	r3, [sp, #32]
 801f466:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f46c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f470:	9309      	str	r3, [sp, #36]	; 0x24
 801f472:	e196      	b.n	801f7a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801f474:	1c57      	adds	r7, r2, #1
 801f476:	f040 8183 	bne.w	801f780 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801f47a:	42aa      	cmp	r2, r5
 801f47c:	f280 8180 	bge.w	801f780 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801f480:	1c5e      	adds	r6, r3, #1
 801f482:	f2c0 817d 	blt.w	801f780 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801f486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f488:	4293      	cmp	r3, r2
 801f48a:	f280 8179 	bge.w	801f780 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801f48e:	9b08      	ldr	r3, [sp, #32]
 801f490:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f492:	9315      	str	r3, [sp, #84]	; 0x54
 801f494:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	dde2      	ble.n	801f464 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801f49e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f4a0:	1419      	asrs	r1, r3, #16
 801f4a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f4a4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f4a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f4aa:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f4ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f4b0:	141b      	asrs	r3, r3, #16
 801f4b2:	f100 81d3 	bmi.w	801f85c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f4b6:	1c58      	adds	r0, r3, #1
 801f4b8:	4285      	cmp	r5, r0
 801f4ba:	f340 81d1 	ble.w	801f860 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801f4be:	2900      	cmp	r1, #0
 801f4c0:	f2c0 81ce 	blt.w	801f860 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801f4c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f4c6:	1c48      	adds	r0, r1, #1
 801f4c8:	4284      	cmp	r4, r0
 801f4ca:	f340 81c9 	ble.w	801f860 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801f4ce:	fb01 3105 	mla	r1, r1, r5, r3
 801f4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f4d4:	fa1f fe82 	uxth.w	lr, r2
 801f4d8:	eb03 0a01 	add.w	sl, r3, r1
 801f4dc:	ea4f 100e 	mov.w	r0, lr, lsl #4
 801f4e0:	f813 9001 	ldrb.w	r9, [r3, r1]
 801f4e4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f4e8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f4ec:	b29b      	uxth	r3, r3
 801f4ee:	f1bc 0f00 	cmp.w	ip, #0
 801f4f2:	f000 8195 	beq.w	801f820 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 801f4f6:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801f4fa:	940e      	str	r4, [sp, #56]	; 0x38
 801f4fc:	eb0a 0b05 	add.w	fp, sl, r5
 801f500:	fa1f fa8c 	uxth.w	sl, ip
 801f504:	fb0a fe0e 	mul.w	lr, sl, lr
 801f508:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f50c:	fa1f fa8a 	uxth.w	sl, sl
 801f510:	eba0 000e 	sub.w	r0, r0, lr
 801f514:	eba3 030a 	sub.w	r3, r3, sl
 801f518:	b280      	uxth	r0, r0
 801f51a:	fb08 f000 	mul.w	r0, r8, r0
 801f51e:	b29b      	uxth	r3, r3
 801f520:	fb09 0303 	mla	r3, r9, r3, r0
 801f524:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f526:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f52a:	940f      	str	r4, [sp, #60]	; 0x3c
 801f52c:	fb0a 3300 	mla	r3, sl, r0, r3
 801f530:	fb0e 3304 	mla	r3, lr, r4, r3
 801f534:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f538:	2b00      	cmp	r3, #0
 801f53a:	f000 8114 	beq.w	801f766 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801f53e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f540:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f542:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f546:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f54a:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 801f54e:	f000 816c 	beq.w	801f82a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801f552:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801f556:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f55a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f55e:	fb09 f101 	mul.w	r1, r9, r1
 801f562:	fb0a fe0e 	mul.w	lr, sl, lr
 801f566:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f56a:	f101 0b20 	add.w	fp, r1, #32
 801f56e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f572:	44ce      	add	lr, r9
 801f574:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 801f578:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f57c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f580:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f584:	ea4e 0909 	orr.w	r9, lr, r9
 801f588:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f58c:	8841      	ldrh	r1, [r0, #2]
 801f58e:	d019      	beq.n	801f5c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801f590:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f594:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801f598:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f59c:	fb0a fe0e 	mul.w	lr, sl, lr
 801f5a0:	fb08 f801 	mul.w	r8, r8, r1
 801f5a4:	f108 0b20 	add.w	fp, r8, #32
 801f5a8:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 801f5ac:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f5b0:	448e      	add	lr, r1
 801f5b2:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 801f5b6:	0a09      	lsrs	r1, r1, #8
 801f5b8:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 801f5bc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f5c0:	ea4a 0101 	orr.w	r1, sl, r1
 801f5c4:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f5c8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f5cc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f5d0:	ea4e 0909 	orr.w	r9, lr, r9
 801f5d4:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 801f5d8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f5dc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f5e0:	ea4e 0e01 	orr.w	lr, lr, r1
 801f5e4:	f1bc 0f00 	cmp.w	ip, #0
 801f5e8:	f000 8121 	beq.w	801f82e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 801f5ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f5ee:	eb00 0801 	add.w	r8, r0, r1
 801f5f2:	5a41      	ldrh	r1, [r0, r1]
 801f5f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f5f6:	28ff      	cmp	r0, #255	; 0xff
 801f5f8:	d019      	beq.n	801f62e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f5fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f5fc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f600:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f604:	fb04 fb01 	mul.w	fp, r4, r1
 801f608:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801f60c:	fb0a fa00 	mul.w	sl, sl, r0
 801f610:	f10b 0020 	add.w	r0, fp, #32
 801f614:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801f618:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801f61c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801f620:	4451      	add	r1, sl
 801f622:	0a00      	lsrs	r0, r0, #8
 801f624:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f628:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f62c:	4301      	orrs	r1, r0
 801f62e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f630:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801f634:	2cff      	cmp	r4, #255	; 0xff
 801f636:	d01a      	beq.n	801f66e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 801f638:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 801f63c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f640:	fb04 fb00 	mul.w	fp, r4, r0
 801f644:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801f648:	fb0a fa08 	mul.w	sl, sl, r8
 801f64c:	f10b 0820 	add.w	r8, fp, #32
 801f650:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 801f654:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 801f658:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801f65c:	4450      	add	r0, sl
 801f65e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f662:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f666:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f66a:	ea40 0008 	orr.w	r0, r0, r8
 801f66e:	fb1c f802 	smulbb	r8, ip, r2
 801f672:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801f676:	f1cc 0a10 	rsb	sl, ip, #16
 801f67a:	ebaa 0a02 	sub.w	sl, sl, r2
 801f67e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f682:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 801f686:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 801f68a:	fb0e f202 	mul.w	r2, lr, r2
 801f68e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f692:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 801f696:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f69a:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801f69e:	fb09 220a 	mla	r2, r9, sl, r2
 801f6a2:	ea4b 0101 	orr.w	r1, fp, r1
 801f6a6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f6aa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f6ae:	fb0c 2201 	mla	r2, ip, r1, r2
 801f6b2:	ea4e 0000 	orr.w	r0, lr, r0
 801f6b6:	fb08 2800 	mla	r8, r8, r0, r2
 801f6ba:	ea4f 5258 	mov.w	r2, r8, lsr #21
 801f6be:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f6c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f6c6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801f6ca:	ea42 0808 	orr.w	r8, r2, r8
 801f6ce:	fa1f f288 	uxth.w	r2, r8
 801f6d2:	2bff      	cmp	r3, #255	; 0xff
 801f6d4:	d103      	bne.n	801f6de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f6d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f6d8:	29ff      	cmp	r1, #255	; 0xff
 801f6da:	f000 80bd 	beq.w	801f858 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 801f6de:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f6e0:	f8b7 c000 	ldrh.w	ip, [r7]
 801f6e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f6e6:	434b      	muls	r3, r1
 801f6e8:	f103 0e01 	add.w	lr, r3, #1
 801f6ec:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 801f6f0:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 801f6f4:	ea4f 202c 	mov.w	r0, ip, asr #8
 801f6f8:	fa5f fe8e 	uxtb.w	lr, lr
 801f6fc:	1213      	asrs	r3, r2, #8
 801f6fe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f702:	fb10 f00e 	smulbb	r0, r0, lr
 801f706:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f70a:	fb03 0301 	mla	r3, r3, r1, r0
 801f70e:	b298      	uxth	r0, r3
 801f710:	ea4f 03ec 	mov.w	r3, ip, asr #3
 801f714:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f718:	10d1      	asrs	r1, r2, #3
 801f71a:	fa5f fc8c 	uxtb.w	ip, ip
 801f71e:	00d2      	lsls	r2, r2, #3
 801f720:	fb1c fc0e 	smulbb	ip, ip, lr
 801f724:	b2d2      	uxtb	r2, r2
 801f726:	fb02 c204 	mla	r2, r2, r4, ip
 801f72a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f72e:	fb13 f30e 	smulbb	r3, r3, lr
 801f732:	b292      	uxth	r2, r2
 801f734:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f738:	fb01 3104 	mla	r1, r1, r4, r3
 801f73c:	f102 0c01 	add.w	ip, r2, #1
 801f740:	1c43      	adds	r3, r0, #1
 801f742:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f746:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f74a:	b289      	uxth	r1, r1
 801f74c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f750:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f754:	4313      	orrs	r3, r2
 801f756:	1c4a      	adds	r2, r1, #1
 801f758:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f75c:	0949      	lsrs	r1, r1, #5
 801f75e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f762:	430b      	orrs	r3, r1
 801f764:	803b      	strh	r3, [r7, #0]
 801f766:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f768:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f76a:	4413      	add	r3, r2
 801f76c:	932b      	str	r3, [sp, #172]	; 0xac
 801f76e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f770:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f772:	441a      	add	r2, r3
 801f774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f776:	922c      	str	r2, [sp, #176]	; 0xb0
 801f778:	3b01      	subs	r3, #1
 801f77a:	3702      	adds	r7, #2
 801f77c:	9315      	str	r3, [sp, #84]	; 0x54
 801f77e:	e68b      	b.n	801f498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f780:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f782:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f784:	4413      	add	r3, r2
 801f786:	932b      	str	r3, [sp, #172]	; 0xac
 801f788:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f78a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f78c:	441a      	add	r2, r3
 801f78e:	9b08      	ldr	r3, [sp, #32]
 801f790:	922c      	str	r2, [sp, #176]	; 0xb0
 801f792:	3b01      	subs	r3, #1
 801f794:	9308      	str	r3, [sp, #32]
 801f796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f798:	3302      	adds	r3, #2
 801f79a:	9309      	str	r3, [sp, #36]	; 0x24
 801f79c:	e630      	b.n	801f400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801f79e:	f47f ae42 	bne.w	801f426 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801f7a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	f340 81ea 	ble.w	801fb7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 801f7aa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f7ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f7b2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f7b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f7bc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f7c0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f7c4:	eef0 6a48 	vmov.f32	s13, s16
 801f7c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f7cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f7d0:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f7d4:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801f7d8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f7dc:	eef0 6a68 	vmov.f32	s13, s17
 801f7e0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f7e4:	ee18 2a10 	vmov	r2, s16
 801f7e8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f7ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7f0:	ee18 2a90 	vmov	r2, s17
 801f7f4:	932d      	str	r3, [sp, #180]	; 0xb4
 801f7f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7fc:	932e      	str	r3, [sp, #184]	; 0xb8
 801f7fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f800:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f802:	3b01      	subs	r3, #1
 801f804:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f808:	9313      	str	r3, [sp, #76]	; 0x4c
 801f80a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f80c:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 801f810:	bf08      	it	eq
 801f812:	4613      	moveq	r3, r2
 801f814:	9308      	str	r3, [sp, #32]
 801f816:	eef0 8a67 	vmov.f32	s17, s15
 801f81a:	eeb0 8a47 	vmov.f32	s16, s14
 801f81e:	e5e8      	b.n	801f3f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f820:	fb08 f000 	mul.w	r0, r8, r0
 801f824:	fb09 0303 	mla	r3, r9, r3, r0
 801f828:	e684      	b.n	801f534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 801f82a:	4689      	mov	r9, r1
 801f82c:	e6ac      	b.n	801f588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f82e:	f1c2 0010 	rsb	r0, r2, #16
 801f832:	fb0e f202 	mul.w	r2, lr, r2
 801f836:	fb09 2900 	mla	r9, r9, r0, r2
 801f83a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f83e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f842:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f846:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f84a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f84e:	ea42 0909 	orr.w	r9, r2, r9
 801f852:	fa1f f289 	uxth.w	r2, r9
 801f856:	e73c      	b.n	801f6d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801f858:	803a      	strh	r2, [r7, #0]
 801f85a:	e784      	b.n	801f766 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801f85c:	1c5c      	adds	r4, r3, #1
 801f85e:	d182      	bne.n	801f766 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801f860:	429d      	cmp	r5, r3
 801f862:	dd80      	ble.n	801f766 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801f864:	1c48      	adds	r0, r1, #1
 801f866:	f6ff af7e 	blt.w	801f766 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801f86a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f86c:	4288      	cmp	r0, r1
 801f86e:	f77f af7a 	ble.w	801f766 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801f872:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f874:	9302      	str	r3, [sp, #8]
 801f876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f878:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801f87c:	e9cd c005 	strd	ip, r0, [sp, #20]
 801f880:	e9cd 5300 	strd	r5, r3, [sp]
 801f884:	4639      	mov	r1, r7
 801f886:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801f88a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f88c:	f7ff fbcc 	bl	801f028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801f890:	e769      	b.n	801f766 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801f892:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f894:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f898:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f89a:	141f      	asrs	r7, r3, #16
 801f89c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801f8a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f8a2:	141b      	asrs	r3, r3, #16
 801f8a4:	fb05 3707 	mla	r7, r5, r7, r3
 801f8a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8aa:	fa1f fc82 	uxth.w	ip, r2
 801f8ae:	eb03 0a07 	add.w	sl, r3, r7
 801f8b2:	ea4f 110c 	mov.w	r1, ip, lsl #4
 801f8b6:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f8ba:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f8be:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 801f8c2:	b29b      	uxth	r3, r3
 801f8c4:	2800      	cmp	r0, #0
 801f8c6:	f000 813f 	beq.w	801fb48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 801f8ca:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801f8ce:	9410      	str	r4, [sp, #64]	; 0x40
 801f8d0:	eb0a 0b05 	add.w	fp, sl, r5
 801f8d4:	fa1f fa80 	uxth.w	sl, r0
 801f8d8:	fb0a fc0c 	mul.w	ip, sl, ip
 801f8dc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f8e0:	fa1f fa8a 	uxth.w	sl, sl
 801f8e4:	eba1 010c 	sub.w	r1, r1, ip
 801f8e8:	eba3 030a 	sub.w	r3, r3, sl
 801f8ec:	b289      	uxth	r1, r1
 801f8ee:	fb08 f101 	mul.w	r1, r8, r1
 801f8f2:	b29b      	uxth	r3, r3
 801f8f4:	fb09 1303 	mla	r3, r9, r3, r1
 801f8f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f8fa:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f8fe:	9411      	str	r4, [sp, #68]	; 0x44
 801f900:	fb0a 3301 	mla	r3, sl, r1, r3
 801f904:	fb0c 3304 	mla	r3, ip, r4, r3
 801f908:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	f000 810d 	beq.w	801fb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 801f912:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f914:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f916:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f91a:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801f91e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f922:	f000 8116 	beq.w	801fb52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 801f926:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f92a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f92e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f932:	fb09 f707 	mul.w	r7, r9, r7
 801f936:	fb0a fc0c 	mul.w	ip, sl, ip
 801f93a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f93e:	f107 0b20 	add.w	fp, r7, #32
 801f942:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f946:	44cc      	add	ip, r9
 801f948:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f94c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f950:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f954:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f958:	ea4c 0909 	orr.w	r9, ip, r9
 801f95c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f960:	884f      	ldrh	r7, [r1, #2]
 801f962:	d019      	beq.n	801f998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 801f964:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f968:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f96c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f970:	fb08 f807 	mul.w	r8, r8, r7
 801f974:	fb0a fc0c 	mul.w	ip, sl, ip
 801f978:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f97c:	f108 0b20 	add.w	fp, r8, #32
 801f980:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f984:	44bc      	add	ip, r7
 801f986:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f98a:	0a3f      	lsrs	r7, r7, #8
 801f98c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f990:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f994:	ea4c 0707 	orr.w	r7, ip, r7
 801f998:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f99c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f9a0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f9a4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f9a8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f9ac:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f9b0:	ea4c 0909 	orr.w	r9, ip, r9
 801f9b4:	ea4a 0707 	orr.w	r7, sl, r7
 801f9b8:	2800      	cmp	r0, #0
 801f9ba:	f000 80cc 	beq.w	801fb56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 801f9be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f9c0:	eb01 0c04 	add.w	ip, r1, r4
 801f9c4:	f831 8004 	ldrh.w	r8, [r1, r4]
 801f9c8:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f9ca:	29ff      	cmp	r1, #255	; 0xff
 801f9cc:	d01a      	beq.n	801fa04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 801f9ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f9d0:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 801f9d4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f9d8:	fb04 fb08 	mul.w	fp, r4, r8
 801f9dc:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801f9e0:	fb0a fa01 	mul.w	sl, sl, r1
 801f9e4:	f10b 0120 	add.w	r1, fp, #32
 801f9e8:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 801f9ec:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 801f9f0:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801f9f4:	44d0      	add	r8, sl
 801f9f6:	0a09      	lsrs	r1, r1, #8
 801f9f8:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 801f9fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fa00:	ea48 0801 	orr.w	r8, r8, r1
 801fa04:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fa06:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801fa0a:	2cff      	cmp	r4, #255	; 0xff
 801fa0c:	d01a      	beq.n	801fa44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 801fa0e:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 801fa12:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fa16:	fb04 fb01 	mul.w	fp, r4, r1
 801fa1a:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801fa1e:	fb0a fa0c 	mul.w	sl, sl, ip
 801fa22:	f10b 0c20 	add.w	ip, fp, #32
 801fa26:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801fa2a:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 801fa2e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801fa32:	4451      	add	r1, sl
 801fa34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa38:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801fa3c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801fa40:	ea41 010c 	orr.w	r1, r1, ip
 801fa44:	fb10 fc02 	smulbb	ip, r0, r2
 801fa48:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801fa4c:	f1c0 0a10 	rsb	sl, r0, #16
 801fa50:	ebaa 0a02 	sub.w	sl, sl, r2
 801fa54:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 801fa58:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801fa5c:	437a      	muls	r2, r7
 801fa5e:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 801fa62:	040f      	lsls	r7, r1, #16
 801fa64:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fa68:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801fa6c:	fb09 220a 	mla	r2, r9, sl, r2
 801fa70:	ea4b 0808 	orr.w	r8, fp, r8
 801fa74:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 801fa78:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801fa7c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fa80:	fb00 2208 	mla	r2, r0, r8, r2
 801fa84:	4339      	orrs	r1, r7
 801fa86:	fb0c 2201 	mla	r2, ip, r1, r2
 801fa8a:	ea4f 5952 	mov.w	r9, r2, lsr #21
 801fa8e:	0952      	lsrs	r2, r2, #5
 801fa90:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fa94:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fa98:	ea49 0202 	orr.w	r2, r9, r2
 801fa9c:	2bff      	cmp	r3, #255	; 0xff
 801fa9e:	b292      	uxth	r2, r2
 801faa0:	d102      	bne.n	801faa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 801faa2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801faa4:	29ff      	cmp	r1, #255	; 0xff
 801faa6:	d067      	beq.n	801fb78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 801faa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801faaa:	f8be 0000 	ldrh.w	r0, [lr]
 801faae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fab0:	434b      	muls	r3, r1
 801fab2:	1c59      	adds	r1, r3, #1
 801fab4:	eb01 2323 	add.w	r3, r1, r3, asr #8
 801fab8:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801fabc:	1201      	asrs	r1, r0, #8
 801fabe:	b2db      	uxtb	r3, r3
 801fac0:	1217      	asrs	r7, r2, #8
 801fac2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fac6:	fb11 f103 	smulbb	r1, r1, r3
 801faca:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 801face:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fad2:	00c0      	lsls	r0, r0, #3
 801fad4:	fb07 1704 	mla	r7, r7, r4, r1
 801fad8:	b2c0      	uxtb	r0, r0
 801fada:	10d1      	asrs	r1, r2, #3
 801fadc:	00d2      	lsls	r2, r2, #3
 801fade:	fb10 f003 	smulbb	r0, r0, r3
 801fae2:	b2d2      	uxtb	r2, r2
 801fae4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fae8:	fb02 0204 	mla	r2, r2, r4, r0
 801faec:	fb1c fc03 	smulbb	ip, ip, r3
 801faf0:	b2bf      	uxth	r7, r7
 801faf2:	b292      	uxth	r2, r2
 801faf4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801faf8:	fb01 c104 	mla	r1, r1, r4, ip
 801fafc:	1c7b      	adds	r3, r7, #1
 801fafe:	f102 0c01 	add.w	ip, r2, #1
 801fb02:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fb06:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801fb0a:	b289      	uxth	r1, r1
 801fb0c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fb10:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fb14:	ea47 070c 	orr.w	r7, r7, ip
 801fb18:	f101 0c01 	add.w	ip, r1, #1
 801fb1c:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801fb20:	0949      	lsrs	r1, r1, #5
 801fb22:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fb26:	430f      	orrs	r7, r1
 801fb28:	f8ae 7000 	strh.w	r7, [lr]
 801fb2c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fb2e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fb30:	4413      	add	r3, r2
 801fb32:	932b      	str	r3, [sp, #172]	; 0xac
 801fb34:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fb36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb38:	441a      	add	r2, r3
 801fb3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fb3c:	922c      	str	r2, [sp, #176]	; 0xb0
 801fb3e:	3b01      	subs	r3, #1
 801fb40:	f10e 0e02 	add.w	lr, lr, #2
 801fb44:	9315      	str	r3, [sp, #84]	; 0x54
 801fb46:	e489      	b.n	801f45c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801fb48:	fb08 f101 	mul.w	r1, r8, r1
 801fb4c:	fb09 1303 	mla	r3, r9, r3, r1
 801fb50:	e6da      	b.n	801f908 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 801fb52:	46b9      	mov	r9, r7
 801fb54:	e702      	b.n	801f95c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 801fb56:	f1c2 0110 	rsb	r1, r2, #16
 801fb5a:	437a      	muls	r2, r7
 801fb5c:	fb09 2901 	mla	r9, r9, r1, r2
 801fb60:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fb64:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801fb68:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801fb6c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fb70:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fb74:	4302      	orrs	r2, r0
 801fb76:	e791      	b.n	801fa9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801fb78:	f8ae 2000 	strh.w	r2, [lr]
 801fb7c:	e7d6      	b.n	801fb2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 801fb7e:	b019      	add	sp, #100	; 0x64
 801fb80:	ecbd 8b08 	vpop	{d8-d11}
 801fb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb8c:	b087      	sub	sp, #28
 801fb8e:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 801fb92:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 801fb96:	9105      	str	r1, [sp, #20]
 801fb98:	fb00 e604 	mla	r6, r0, r4, lr
 801fb9c:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 801fba0:	9102      	str	r1, [sp, #8]
 801fba2:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 801fba6:	9103      	str	r1, [sp, #12]
 801fba8:	9905      	ldr	r1, [sp, #20]
 801fbaa:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 801fbae:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801fbb2:	8809      	ldrh	r1, [r1, #0]
 801fbb4:	2800      	cmp	r0, #0
 801fbb6:	eb02 0a06 	add.w	sl, r2, r6
 801fbba:	f2c0 80ca 	blt.w	801fd52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 801fbbe:	4287      	cmp	r7, r0
 801fbc0:	f340 80c7 	ble.w	801fd52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 801fbc4:	f1be 0f00 	cmp.w	lr, #0
 801fbc8:	f2c0 80bf 	blt.w	801fd4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 801fbcc:	4574      	cmp	r4, lr
 801fbce:	f340 80bc 	ble.w	801fd4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 801fbd2:	f812 c006 	ldrb.w	ip, [r2, r6]
 801fbd6:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 801fbda:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fbde:	d01c      	beq.n	801fc1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 801fbe0:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 801fbe4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801fbe8:	4372      	muls	r2, r6
 801fbea:	f64f 081f 	movw	r8, #63519	; 0xf81f
 801fbee:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 801fbf2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fbf6:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801fbfa:	fb0c f609 	mul.w	r6, ip, r9
 801fbfe:	eb03 0902 	add.w	r9, r3, r2
 801fc02:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 801fc06:	f106 0820 	add.w	r8, r6, #32
 801fc0a:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801fc0e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fc12:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fc16:	ea49 0908 	orr.w	r9, r9, r8
 801fc1a:	fa1f f989 	uxth.w	r9, r9
 801fc1e:	f11e 0301 	adds.w	r3, lr, #1
 801fc22:	f100 809b 	bmi.w	801fd5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801fc26:	429c      	cmp	r4, r3
 801fc28:	f340 8098 	ble.w	801fd5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801fc2c:	2d00      	cmp	r5, #0
 801fc2e:	f000 8095 	beq.w	801fd5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801fc32:	f89a 6001 	ldrb.w	r6, [sl, #1]
 801fc36:	9b03      	ldr	r3, [sp, #12]
 801fc38:	2eff      	cmp	r6, #255	; 0xff
 801fc3a:	885b      	ldrh	r3, [r3, #2]
 801fc3c:	d01b      	beq.n	801fc76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 801fc3e:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801fc42:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801fc46:	fb08 f202 	mul.w	r2, r8, r2
 801fc4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fc4e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801fc52:	fb06 f803 	mul.w	r8, r6, r3
 801fc56:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801fc5a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801fc5e:	441a      	add	r2, r3
 801fc60:	f108 0320 	add.w	r3, r8, #32
 801fc64:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801fc68:	0a1b      	lsrs	r3, r3, #8
 801fc6a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801fc6e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fc72:	ea4b 0303 	orr.w	r3, fp, r3
 801fc76:	b29b      	uxth	r3, r3
 801fc78:	9301      	str	r3, [sp, #4]
 801fc7a:	3001      	adds	r0, #1
 801fc7c:	d474      	bmi.n	801fd68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801fc7e:	4287      	cmp	r7, r0
 801fc80:	dd72      	ble.n	801fd68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801fc82:	9a02      	ldr	r2, [sp, #8]
 801fc84:	2a00      	cmp	r2, #0
 801fc86:	f000 8111 	beq.w	801feac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 801fc8a:	f1be 0f00 	cmp.w	lr, #0
 801fc8e:	db68      	blt.n	801fd62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 801fc90:	4574      	cmp	r4, lr
 801fc92:	dd66      	ble.n	801fd62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 801fc94:	f81a 7004 	ldrb.w	r7, [sl, r4]
 801fc98:	9a03      	ldr	r2, [sp, #12]
 801fc9a:	2fff      	cmp	r7, #255	; 0xff
 801fc9c:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801fca0:	d01c      	beq.n	801fcdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 801fca2:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 801fca6:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801fcaa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fcae:	fb07 fb00 	mul.w	fp, r7, r0
 801fcb2:	fb08 f802 	mul.w	r8, r8, r2
 801fcb6:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801fcba:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 801fcbe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fcc2:	4490      	add	r8, r2
 801fcc4:	f10b 0220 	add.w	r2, fp, #32
 801fcc8:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 801fccc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801fcd0:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 801fcd4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801fcd8:	ea40 000b 	orr.w	r0, r0, fp
 801fcdc:	b280      	uxth	r0, r0
 801fcde:	f11e 0e01 	adds.w	lr, lr, #1
 801fce2:	d446      	bmi.n	801fd72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 801fce4:	4574      	cmp	r4, lr
 801fce6:	dd44      	ble.n	801fd72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 801fce8:	2d00      	cmp	r5, #0
 801fcea:	d045      	beq.n	801fd78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 801fcec:	1c62      	adds	r2, r4, #1
 801fcee:	9b03      	ldr	r3, [sp, #12]
 801fcf0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801fcf4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801fcf8:	2cff      	cmp	r4, #255	; 0xff
 801fcfa:	d01c      	beq.n	801fd36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 801fcfc:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 801fd00:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fd04:	fb08 fe0e 	mul.w	lr, r8, lr
 801fd08:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 801fd0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fd10:	fb04 f802 	mul.w	r8, r4, r2
 801fd14:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 801fd18:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801fd1c:	4472      	add	r2, lr
 801fd1e:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 801fd22:	f108 0a20 	add.w	sl, r8, #32
 801fd26:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 801fd2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd2e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fd32:	ea42 020a 	orr.w	r2, r2, sl
 801fd36:	b292      	uxth	r2, r2
 801fd38:	2d0f      	cmp	r5, #15
 801fd3a:	d91f      	bls.n	801fd7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 801fd3c:	4b5f      	ldr	r3, [pc, #380]	; (801febc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 801fd3e:	4a60      	ldr	r2, [pc, #384]	; (801fec0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 801fd40:	4860      	ldr	r0, [pc, #384]	; (801fec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 801fd42:	f240 3173 	movw	r1, #883	; 0x373
 801fd46:	f003 fc1b 	bl	8023580 <__assert_func>
 801fd4a:	4689      	mov	r9, r1
 801fd4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801fd50:	e765      	b.n	801fc1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 801fd52:	26ff      	movs	r6, #255	; 0xff
 801fd54:	9101      	str	r1, [sp, #4]
 801fd56:	4689      	mov	r9, r1
 801fd58:	46b4      	mov	ip, r6
 801fd5a:	e78e      	b.n	801fc7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 801fd5c:	9101      	str	r1, [sp, #4]
 801fd5e:	26ff      	movs	r6, #255	; 0xff
 801fd60:	e78b      	b.n	801fc7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 801fd62:	4608      	mov	r0, r1
 801fd64:	27ff      	movs	r7, #255	; 0xff
 801fd66:	e7ba      	b.n	801fcde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 801fd68:	24ff      	movs	r4, #255	; 0xff
 801fd6a:	460a      	mov	r2, r1
 801fd6c:	4608      	mov	r0, r1
 801fd6e:	4627      	mov	r7, r4
 801fd70:	e7e2      	b.n	801fd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801fd72:	460a      	mov	r2, r1
 801fd74:	24ff      	movs	r4, #255	; 0xff
 801fd76:	e7df      	b.n	801fd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801fd78:	460a      	mov	r2, r1
 801fd7a:	24ff      	movs	r4, #255	; 0xff
 801fd7c:	9b02      	ldr	r3, [sp, #8]
 801fd7e:	2b0f      	cmp	r3, #15
 801fd80:	d8dc      	bhi.n	801fd3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 801fd82:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801fd86:	fa1f f885 	uxth.w	r8, r5
 801fd8a:	fb08 fa0e 	mul.w	sl, r8, lr
 801fd8e:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801fd92:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 801fd96:	9303      	str	r3, [sp, #12]
 801fd98:	fa1f f38e 	uxth.w	r3, lr
 801fd9c:	9304      	str	r3, [sp, #16]
 801fd9e:	ea4f 4809 	mov.w	r8, r9, lsl #16
 801fda2:	9b02      	ldr	r3, [sp, #8]
 801fda4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801fda8:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801fdac:	fb15 fe03 	smulbb	lr, r5, r3
 801fdb0:	ea48 0809 	orr.w	r8, r8, r9
 801fdb4:	f1c3 0910 	rsb	r9, r3, #16
 801fdb8:	9b01      	ldr	r3, [sp, #4]
 801fdba:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801fdbe:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801fdc2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fdc6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fdca:	eba9 0905 	sub.w	r9, r9, r5
 801fdce:	ea4b 0303 	orr.w	r3, fp, r3
 801fdd2:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801fdd6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801fdda:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 801fdde:	436b      	muls	r3, r5
 801fde0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fde4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fde8:	ea4b 0202 	orr.w	r2, fp, r2
 801fdec:	fb09 3308 	mla	r3, r9, r8, r3
 801fdf0:	fb0e 3302 	mla	r3, lr, r2, r3
 801fdf4:	0402      	lsls	r2, r0, #16
 801fdf6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fdfa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fdfe:	4310      	orrs	r0, r2
 801fe00:	9a02      	ldr	r2, [sp, #8]
 801fe02:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801fe06:	9a03      	ldr	r2, [sp, #12]
 801fe08:	fb0e 3e00 	mla	lr, lr, r0, r3
 801fe0c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801fe10:	9a04      	ldr	r2, [sp, #16]
 801fe12:	1a80      	subs	r0, r0, r2
 801fe14:	9a03      	ldr	r2, [sp, #12]
 801fe16:	eba2 020a 	sub.w	r2, r2, sl
 801fe1a:	b292      	uxth	r2, r2
 801fe1c:	b280      	uxth	r0, r0
 801fe1e:	4356      	muls	r6, r2
 801fe20:	9a04      	ldr	r2, [sp, #16]
 801fe22:	fb0c 6600 	mla	r6, ip, r0, r6
 801fe26:	fb02 6707 	mla	r7, r2, r7, r6
 801fe2a:	fb0a 7404 	mla	r4, sl, r4, r7
 801fe2e:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801fe32:	1208      	asrs	r0, r1, #8
 801fe34:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fe38:	ea6f 2424 	mvn.w	r4, r4, asr #8
 801fe3c:	b2e4      	uxtb	r4, r4
 801fe3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fe42:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fe46:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fe4a:	4360      	muls	r0, r4
 801fe4c:	ea43 0e0e 	orr.w	lr, r3, lr
 801fe50:	fa1f f38e 	uxth.w	r3, lr
 801fe54:	1c42      	adds	r2, r0, #1
 801fe56:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801fe5a:	1218      	asrs	r0, r3, #8
 801fe5c:	10cd      	asrs	r5, r1, #3
 801fe5e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fe62:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801fe66:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fe6a:	4a17      	ldr	r2, [pc, #92]	; (801fec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 801fe6c:	4365      	muls	r5, r4
 801fe6e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801fe72:	1c6a      	adds	r2, r5, #1
 801fe74:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801fe78:	00c9      	lsls	r1, r1, #3
 801fe7a:	10da      	asrs	r2, r3, #3
 801fe7c:	b2c9      	uxtb	r1, r1
 801fe7e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fe82:	434c      	muls	r4, r1
 801fe84:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801fe88:	1c61      	adds	r1, r4, #1
 801fe8a:	00d2      	lsls	r2, r2, #3
 801fe8c:	00db      	lsls	r3, r3, #3
 801fe8e:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 801fe92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fe96:	b2db      	uxtb	r3, r3
 801fe98:	4302      	orrs	r2, r0
 801fe9a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801fe9e:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 801fea2:	9a05      	ldr	r2, [sp, #20]
 801fea4:	8013      	strh	r3, [r2, #0]
 801fea6:	b007      	add	sp, #28
 801fea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feac:	2d0f      	cmp	r5, #15
 801feae:	f63f af45 	bhi.w	801fd3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 801feb2:	24ff      	movs	r4, #255	; 0xff
 801feb4:	460a      	mov	r2, r1
 801feb6:	4608      	mov	r0, r1
 801feb8:	4627      	mov	r7, r4
 801feba:	e762      	b.n	801fd82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 801febc:	080288e7 	.word	0x080288e7
 801fec0:	08028e45 	.word	0x08028e45
 801fec4:	0802896f 	.word	0x0802896f
 801fec8:	fffff800 	.word	0xfffff800

0801fecc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed0:	ed2d 8b08 	vpush	{d8-d11}
 801fed4:	b095      	sub	sp, #84	; 0x54
 801fed6:	eeb0 aa40 	vmov.f32	s20, s0
 801feda:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801fedc:	9306      	str	r3, [sp, #24]
 801fede:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801fee2:	9110      	str	r1, [sp, #64]	; 0x40
 801fee4:	9308      	str	r3, [sp, #32]
 801fee6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801feea:	9013      	str	r0, [sp, #76]	; 0x4c
 801feec:	6870      	ldr	r0, [r6, #4]
 801feee:	9212      	str	r2, [sp, #72]	; 0x48
 801fef0:	fb00 1303 	mla	r3, r0, r3, r1
 801fef4:	6831      	ldr	r1, [r6, #0]
 801fef6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fef8:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801fefc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801ff00:	9307      	str	r3, [sp, #28]
 801ff02:	6813      	ldr	r3, [r2, #0]
 801ff04:	9309      	str	r3, [sp, #36]	; 0x24
 801ff06:	6853      	ldr	r3, [r2, #4]
 801ff08:	930a      	str	r3, [sp, #40]	; 0x28
 801ff0a:	006b      	lsls	r3, r5, #1
 801ff0c:	eef0 9a60 	vmov.f32	s19, s1
 801ff10:	eeb0 9a41 	vmov.f32	s18, s2
 801ff14:	eeb0 8a62 	vmov.f32	s16, s5
 801ff18:	eef0 8a43 	vmov.f32	s17, s6
 801ff1c:	eef0 ba44 	vmov.f32	s23, s8
 801ff20:	eeb0 ba64 	vmov.f32	s22, s9
 801ff24:	eef0 aa45 	vmov.f32	s21, s10
 801ff28:	930f      	str	r3, [sp, #60]	; 0x3c
 801ff2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	dc03      	bgt.n	801ff38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ff30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	f340 83a3 	ble.w	802067e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 801ff38:	9b06      	ldr	r3, [sp, #24]
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	f340 81bc 	ble.w	80202b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 801ff40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ff42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ff44:	1412      	asrs	r2, r2, #16
 801ff46:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ff4a:	d42f      	bmi.n	801ffac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801ff4c:	1c51      	adds	r1, r2, #1
 801ff4e:	428d      	cmp	r5, r1
 801ff50:	dd2f      	ble.n	801ffb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	db2d      	blt.n	801ffb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801ff56:	9808      	ldr	r0, [sp, #32]
 801ff58:	1c59      	adds	r1, r3, #1
 801ff5a:	4288      	cmp	r0, r1
 801ff5c:	dd29      	ble.n	801ffb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801ff5e:	9b06      	ldr	r3, [sp, #24]
 801ff60:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ff62:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801ff64:	3b01      	subs	r3, #1
 801ff66:	fb02 1203 	mla	r2, r2, r3, r1
 801ff6a:	1412      	asrs	r2, r2, #16
 801ff6c:	d42b      	bmi.n	801ffc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ff6e:	3201      	adds	r2, #1
 801ff70:	4295      	cmp	r5, r2
 801ff72:	dd28      	ble.n	801ffc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ff74:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ff76:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ff78:	fb02 1303 	mla	r3, r2, r3, r1
 801ff7c:	141b      	asrs	r3, r3, #16
 801ff7e:	d422      	bmi.n	801ffc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ff80:	9a08      	ldr	r2, [sp, #32]
 801ff82:	3301      	adds	r3, #1
 801ff84:	429a      	cmp	r2, r3
 801ff86:	dd1e      	ble.n	801ffc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ff88:	9b06      	ldr	r3, [sp, #24]
 801ff8a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801ff8e:	9311      	str	r3, [sp, #68]	; 0x44
 801ff90:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801ff94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	f300 8208 	bgt.w	80203ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 801ff9c:	9b06      	ldr	r3, [sp, #24]
 801ff9e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ffa2:	9b07      	ldr	r3, [sp, #28]
 801ffa4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ffa8:	9307      	str	r3, [sp, #28]
 801ffaa:	e187      	b.n	80202bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 801ffac:	1c57      	adds	r7, r2, #1
 801ffae:	f040 8174 	bne.w	802029a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ffb2:	42aa      	cmp	r2, r5
 801ffb4:	f280 8171 	bge.w	802029a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ffb8:	1c5e      	adds	r6, r3, #1
 801ffba:	f2c0 816e 	blt.w	802029a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ffbe:	9a08      	ldr	r2, [sp, #32]
 801ffc0:	4293      	cmp	r3, r2
 801ffc2:	f280 816a 	bge.w	802029a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ffc6:	9b06      	ldr	r3, [sp, #24]
 801ffc8:	9f07      	ldr	r7, [sp, #28]
 801ffca:	9311      	str	r3, [sp, #68]	; 0x44
 801ffcc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801ffd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	dde2      	ble.n	801ff9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801ffd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ffd8:	1419      	asrs	r1, r3, #16
 801ffda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ffdc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ffe0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ffe2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801ffe6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ffe8:	141b      	asrs	r3, r3, #16
 801ffea:	f100 81c4 	bmi.w	8020376 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 801ffee:	1c58      	adds	r0, r3, #1
 801fff0:	4285      	cmp	r5, r0
 801fff2:	f340 81c2 	ble.w	802037a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801fff6:	2900      	cmp	r1, #0
 801fff8:	f2c0 81bf 	blt.w	802037a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801fffc:	9c08      	ldr	r4, [sp, #32]
 801fffe:	1c48      	adds	r0, r1, #1
 8020000:	4284      	cmp	r4, r0
 8020002:	f340 81ba 	ble.w	802037a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8020006:	fb01 3105 	mla	r1, r1, r5, r3
 802000a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802000c:	fa1f fe82 	uxth.w	lr, r2
 8020010:	eb03 0a01 	add.w	sl, r3, r1
 8020014:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8020018:	f813 9001 	ldrb.w	r9, [r3, r1]
 802001c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020020:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8020024:	b29b      	uxth	r3, r3
 8020026:	f1bc 0f00 	cmp.w	ip, #0
 802002a:	f000 8186 	beq.w	802033a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 802002e:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8020032:	940b      	str	r4, [sp, #44]	; 0x2c
 8020034:	eb0a 0b05 	add.w	fp, sl, r5
 8020038:	fa1f fa8c 	uxth.w	sl, ip
 802003c:	fb0a fe0e 	mul.w	lr, sl, lr
 8020040:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8020044:	fa1f fa8a 	uxth.w	sl, sl
 8020048:	eba0 000e 	sub.w	r0, r0, lr
 802004c:	eba3 030a 	sub.w	r3, r3, sl
 8020050:	b280      	uxth	r0, r0
 8020052:	fb08 f000 	mul.w	r0, r8, r0
 8020056:	b29b      	uxth	r3, r3
 8020058:	fb09 0303 	mla	r3, r9, r3, r0
 802005c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802005e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020062:	940c      	str	r4, [sp, #48]	; 0x30
 8020064:	fb0a 3300 	mla	r3, sl, r0, r3
 8020068:	fb0e 3304 	mla	r3, lr, r4, r3
 802006c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020070:	2b00      	cmp	r3, #0
 8020072:	f000 8105 	beq.w	8020280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8020076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020078:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802007a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802007e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020082:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8020086:	f000 815d 	beq.w	8020344 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 802008a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802008e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020092:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020096:	fb09 f101 	mul.w	r1, r9, r1
 802009a:	fb0a fe0e 	mul.w	lr, sl, lr
 802009e:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80200a2:	f101 0b20 	add.w	fp, r1, #32
 80200a6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80200aa:	44ce      	add	lr, r9
 80200ac:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 80200b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80200b4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80200b8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80200bc:	ea4e 0909 	orr.w	r9, lr, r9
 80200c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80200c4:	8841      	ldrh	r1, [r0, #2]
 80200c6:	d019      	beq.n	80200fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 80200c8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80200cc:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80200d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80200d4:	fb0a fe0e 	mul.w	lr, sl, lr
 80200d8:	fb08 f801 	mul.w	r8, r8, r1
 80200dc:	f108 0b20 	add.w	fp, r8, #32
 80200e0:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 80200e4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80200e8:	448e      	add	lr, r1
 80200ea:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 80200ee:	0a09      	lsrs	r1, r1, #8
 80200f0:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 80200f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80200f8:	ea4a 0101 	orr.w	r1, sl, r1
 80200fc:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8020100:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020104:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020108:	ea4e 0909 	orr.w	r9, lr, r9
 802010c:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8020110:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020114:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020118:	ea4e 0e01 	orr.w	lr, lr, r1
 802011c:	f1bc 0f00 	cmp.w	ip, #0
 8020120:	f000 8112 	beq.w	8020348 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8020124:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020126:	eb00 0801 	add.w	r8, r0, r1
 802012a:	5a41      	ldrh	r1, [r0, r1]
 802012c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802012e:	28ff      	cmp	r0, #255	; 0xff
 8020130:	d019      	beq.n	8020166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8020132:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020134:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8020138:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802013c:	fb04 fb01 	mul.w	fp, r4, r1
 8020140:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020144:	fb0a fa00 	mul.w	sl, sl, r0
 8020148:	f10b 0020 	add.w	r0, fp, #32
 802014c:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8020150:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020154:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020158:	4451      	add	r1, sl
 802015a:	0a00      	lsrs	r0, r0, #8
 802015c:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8020160:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020164:	4301      	orrs	r1, r0
 8020166:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020168:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802016c:	2cff      	cmp	r4, #255	; 0xff
 802016e:	d01a      	beq.n	80201a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020170:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8020174:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020178:	fb04 fb00 	mul.w	fp, r4, r0
 802017c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020180:	fb0a fa08 	mul.w	sl, sl, r8
 8020184:	f10b 0820 	add.w	r8, fp, #32
 8020188:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 802018c:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 8020190:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020194:	4450      	add	r0, sl
 8020196:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802019a:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802019e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80201a2:	ea40 0008 	orr.w	r0, r0, r8
 80201a6:	fb1c f802 	smulbb	r8, ip, r2
 80201aa:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80201ae:	f1cc 0a10 	rsb	sl, ip, #16
 80201b2:	ebaa 0a02 	sub.w	sl, sl, r2
 80201b6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80201ba:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 80201be:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 80201c2:	fb0e f202 	mul.w	r2, lr, r2
 80201c6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80201ca:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 80201ce:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80201d2:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80201d6:	fb09 220a 	mla	r2, r9, sl, r2
 80201da:	ea4b 0101 	orr.w	r1, fp, r1
 80201de:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80201e2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80201e6:	fb0c 2201 	mla	r2, ip, r1, r2
 80201ea:	ea4e 0000 	orr.w	r0, lr, r0
 80201ee:	fb08 2800 	mla	r8, r8, r0, r2
 80201f2:	ea4f 5258 	mov.w	r2, r8, lsr #21
 80201f6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80201fa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80201fe:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8020202:	ea42 0808 	orr.w	r8, r2, r8
 8020206:	fa1f f288 	uxth.w	r2, r8
 802020a:	2bff      	cmp	r3, #255	; 0xff
 802020c:	f000 80b1 	beq.w	8020372 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8020210:	f8b7 8000 	ldrh.w	r8, [r7]
 8020214:	43db      	mvns	r3, r3
 8020216:	ea4f 2028 	mov.w	r0, r8, asr #8
 802021a:	fa5f fe83 	uxtb.w	lr, r3
 802021e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020222:	fb00 f00e 	mul.w	r0, r0, lr
 8020226:	1c41      	adds	r1, r0, #1
 8020228:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802022c:	1210      	asrs	r0, r2, #8
 802022e:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020232:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020236:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 802023a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802023e:	495a      	ldr	r1, [pc, #360]	; (80203a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 8020240:	fb0c fc0e 	mul.w	ip, ip, lr
 8020244:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8020248:	f10c 0101 	add.w	r1, ip, #1
 802024c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8020250:	10d1      	asrs	r1, r2, #3
 8020252:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020256:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 802025a:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 802025e:	b2db      	uxtb	r3, r3
 8020260:	00c9      	lsls	r1, r1, #3
 8020262:	fb03 f30e 	mul.w	r3, r3, lr
 8020266:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802026a:	4301      	orrs	r1, r0
 802026c:	1c58      	adds	r0, r3, #1
 802026e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020272:	00d3      	lsls	r3, r2, #3
 8020274:	b2db      	uxtb	r3, r3
 8020276:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802027a:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 802027e:	803b      	strh	r3, [r7, #0]
 8020280:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020282:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020284:	4413      	add	r3, r2
 8020286:	9327      	str	r3, [sp, #156]	; 0x9c
 8020288:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802028a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802028c:	441a      	add	r2, r3
 802028e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020290:	9228      	str	r2, [sp, #160]	; 0xa0
 8020292:	3b01      	subs	r3, #1
 8020294:	3702      	adds	r7, #2
 8020296:	9311      	str	r3, [sp, #68]	; 0x44
 8020298:	e69a      	b.n	801ffd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802029a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802029c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802029e:	4413      	add	r3, r2
 80202a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80202a2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80202a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80202a6:	441a      	add	r2, r3
 80202a8:	9b06      	ldr	r3, [sp, #24]
 80202aa:	9228      	str	r2, [sp, #160]	; 0xa0
 80202ac:	3b01      	subs	r3, #1
 80202ae:	9306      	str	r3, [sp, #24]
 80202b0:	9b07      	ldr	r3, [sp, #28]
 80202b2:	3302      	adds	r3, #2
 80202b4:	9307      	str	r3, [sp, #28]
 80202b6:	e63f      	b.n	801ff38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80202b8:	f47f ae51 	bne.w	801ff5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80202bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202be:	2b00      	cmp	r3, #0
 80202c0:	f340 81dd 	ble.w	802067e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 80202c4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80202c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80202cc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80202d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80202d2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80202d6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80202da:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80202de:	eef0 6a48 	vmov.f32	s13, s16
 80202e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80202e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202ea:	ee37 8a48 	vsub.f32	s16, s14, s16
 80202ee:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 80202f2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80202f6:	eef0 6a68 	vmov.f32	s13, s17
 80202fa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80202fe:	ee18 2a10 	vmov	r2, s16
 8020302:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020306:	fb92 f3f3 	sdiv	r3, r2, r3
 802030a:	ee18 2a90 	vmov	r2, s17
 802030e:	9329      	str	r3, [sp, #164]	; 0xa4
 8020310:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020312:	fb92 f3f3 	sdiv	r3, r2, r3
 8020316:	932a      	str	r3, [sp, #168]	; 0xa8
 8020318:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802031a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802031c:	3b01      	subs	r3, #1
 802031e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020322:	9310      	str	r3, [sp, #64]	; 0x40
 8020324:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020326:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 802032a:	bf08      	it	eq
 802032c:	4613      	moveq	r3, r2
 802032e:	9306      	str	r3, [sp, #24]
 8020330:	eef0 8a67 	vmov.f32	s17, s15
 8020334:	eeb0 8a47 	vmov.f32	s16, s14
 8020338:	e5f7      	b.n	801ff2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 802033a:	fb08 f000 	mul.w	r0, r8, r0
 802033e:	fb09 0303 	mla	r3, r9, r3, r0
 8020342:	e693      	b.n	802006c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 8020344:	4689      	mov	r9, r1
 8020346:	e6bb      	b.n	80200c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 8020348:	f1c2 0010 	rsb	r0, r2, #16
 802034c:	fb0e f202 	mul.w	r2, lr, r2
 8020350:	fb09 2900 	mla	r9, r9, r0, r2
 8020354:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020358:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802035c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020360:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020364:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020368:	ea42 0909 	orr.w	r9, r2, r9
 802036c:	fa1f f289 	uxth.w	r2, r9
 8020370:	e74b      	b.n	802020a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8020372:	803a      	strh	r2, [r7, #0]
 8020374:	e784      	b.n	8020280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8020376:	1c5c      	adds	r4, r3, #1
 8020378:	d182      	bne.n	8020280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 802037a:	429d      	cmp	r5, r3
 802037c:	dd80      	ble.n	8020280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 802037e:	1c48      	adds	r0, r1, #1
 8020380:	f6ff af7e 	blt.w	8020280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8020384:	9808      	ldr	r0, [sp, #32]
 8020386:	4288      	cmp	r0, r1
 8020388:	f77f af7a 	ble.w	8020280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 802038c:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8020390:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 8020394:	e9cd 5000 	strd	r5, r0, [sp]
 8020398:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802039c:	4639      	mov	r1, r7
 802039e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80203a0:	f7ff fbf2 	bl	801fb88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80203a4:	e76c      	b.n	8020280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 80203a6:	bf00      	nop
 80203a8:	fffff800 	.word	0xfffff800
 80203ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80203ae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80203b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80203b4:	141f      	asrs	r7, r3, #16
 80203b6:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80203ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80203bc:	141b      	asrs	r3, r3, #16
 80203be:	fb05 3707 	mla	r7, r5, r7, r3
 80203c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203c4:	fa1f fc82 	uxth.w	ip, r2
 80203c8:	eb03 0a07 	add.w	sl, r3, r7
 80203cc:	ea4f 110c 	mov.w	r1, ip, lsl #4
 80203d0:	f813 9007 	ldrb.w	r9, [r3, r7]
 80203d4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80203d8:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 80203dc:	b29b      	uxth	r3, r3
 80203de:	2800      	cmp	r0, #0
 80203e0:	f000 8132 	beq.w	8020648 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 80203e4:	f81a 4005 	ldrb.w	r4, [sl, r5]
 80203e8:	940d      	str	r4, [sp, #52]	; 0x34
 80203ea:	eb0a 0b05 	add.w	fp, sl, r5
 80203ee:	fa1f fa80 	uxth.w	sl, r0
 80203f2:	fb0a fc0c 	mul.w	ip, sl, ip
 80203f6:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80203fa:	fa1f fa8a 	uxth.w	sl, sl
 80203fe:	eba1 010c 	sub.w	r1, r1, ip
 8020402:	eba3 030a 	sub.w	r3, r3, sl
 8020406:	b289      	uxth	r1, r1
 8020408:	fb08 f101 	mul.w	r1, r8, r1
 802040c:	b29b      	uxth	r3, r3
 802040e:	fb09 1303 	mla	r3, r9, r3, r1
 8020412:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020414:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020418:	940e      	str	r4, [sp, #56]	; 0x38
 802041a:	fb0a 3301 	mla	r3, sl, r1, r3
 802041e:	fb0c 3304 	mla	r3, ip, r4, r3
 8020422:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020426:	2b00      	cmp	r3, #0
 8020428:	f000 8100 	beq.w	802062c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 802042c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802042e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020430:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020434:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8020438:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802043c:	f000 8109 	beq.w	8020652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 8020440:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020444:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020448:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802044c:	fb09 f707 	mul.w	r7, r9, r7
 8020450:	fb0a fc0c 	mul.w	ip, sl, ip
 8020454:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8020458:	f107 0b20 	add.w	fp, r7, #32
 802045c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8020460:	44cc      	add	ip, r9
 8020462:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8020466:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802046a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802046e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020472:	ea4c 0909 	orr.w	r9, ip, r9
 8020476:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802047a:	884f      	ldrh	r7, [r1, #2]
 802047c:	d019      	beq.n	80204b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 802047e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020482:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020486:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802048a:	fb08 f807 	mul.w	r8, r8, r7
 802048e:	fb0a fc0c 	mul.w	ip, sl, ip
 8020492:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8020496:	f108 0b20 	add.w	fp, r8, #32
 802049a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802049e:	44bc      	add	ip, r7
 80204a0:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80204a4:	0a3f      	lsrs	r7, r7, #8
 80204a6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80204aa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80204ae:	ea4c 0707 	orr.w	r7, ip, r7
 80204b2:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80204b6:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80204ba:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80204be:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80204c2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80204c6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80204ca:	ea4c 0909 	orr.w	r9, ip, r9
 80204ce:	ea4a 0707 	orr.w	r7, sl, r7
 80204d2:	2800      	cmp	r0, #0
 80204d4:	f000 80bf 	beq.w	8020656 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 80204d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80204da:	eb01 0c04 	add.w	ip, r1, r4
 80204de:	f831 8004 	ldrh.w	r8, [r1, r4]
 80204e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80204e4:	29ff      	cmp	r1, #255	; 0xff
 80204e6:	d01a      	beq.n	802051e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 80204e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80204ea:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 80204ee:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80204f2:	fb04 fb08 	mul.w	fp, r4, r8
 80204f6:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80204fa:	fb0a fa01 	mul.w	sl, sl, r1
 80204fe:	f10b 0120 	add.w	r1, fp, #32
 8020502:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8020506:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 802050a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802050e:	44d0      	add	r8, sl
 8020510:	0a09      	lsrs	r1, r1, #8
 8020512:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 8020516:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802051a:	ea48 0801 	orr.w	r8, r8, r1
 802051e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020520:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 8020524:	2cff      	cmp	r4, #255	; 0xff
 8020526:	d01a      	beq.n	802055e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 8020528:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 802052c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020530:	fb04 fb01 	mul.w	fp, r4, r1
 8020534:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8020538:	fb0a fa0c 	mul.w	sl, sl, ip
 802053c:	f10b 0c20 	add.w	ip, fp, #32
 8020540:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8020544:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 8020548:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802054c:	4451      	add	r1, sl
 802054e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020552:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8020556:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802055a:	ea41 010c 	orr.w	r1, r1, ip
 802055e:	fb10 fc02 	smulbb	ip, r0, r2
 8020562:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8020566:	f1c0 0a10 	rsb	sl, r0, #16
 802056a:	ebaa 0a02 	sub.w	sl, sl, r2
 802056e:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8020572:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8020576:	437a      	muls	r2, r7
 8020578:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 802057c:	040f      	lsls	r7, r1, #16
 802057e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020582:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8020586:	fb09 220a 	mla	r2, r9, sl, r2
 802058a:	ea4b 0808 	orr.w	r8, fp, r8
 802058e:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 8020592:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8020596:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802059a:	fb00 2208 	mla	r2, r0, r8, r2
 802059e:	4339      	orrs	r1, r7
 80205a0:	fb0c 2201 	mla	r2, ip, r1, r2
 80205a4:	ea4f 5952 	mov.w	r9, r2, lsr #21
 80205a8:	0952      	lsrs	r2, r2, #5
 80205aa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80205ae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80205b2:	ea49 0202 	orr.w	r2, r9, r2
 80205b6:	2bff      	cmp	r3, #255	; 0xff
 80205b8:	b292      	uxth	r2, r2
 80205ba:	d05d      	beq.n	8020678 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 80205bc:	f8be 8000 	ldrh.w	r8, [lr]
 80205c0:	4c31      	ldr	r4, [pc, #196]	; (8020688 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 80205c2:	43db      	mvns	r3, r3
 80205c4:	ea4f 2028 	mov.w	r0, r8, asr #8
 80205c8:	fa5f fc83 	uxtb.w	ip, r3
 80205cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80205d0:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80205d4:	fb00 f00c 	mul.w	r0, r0, ip
 80205d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80205dc:	fb07 f10c 	mul.w	r1, r7, ip
 80205e0:	1c47      	adds	r7, r0, #1
 80205e2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80205e6:	1217      	asrs	r7, r2, #8
 80205e8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80205ec:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80205f0:	1c4f      	adds	r7, r1, #1
 80205f2:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 80205f6:	10d1      	asrs	r1, r2, #3
 80205f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80205fc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8020600:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 8020604:	b2db      	uxtb	r3, r3
 8020606:	00c9      	lsls	r1, r1, #3
 8020608:	fb03 f30c 	mul.w	r3, r3, ip
 802060c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020610:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8020614:	4308      	orrs	r0, r1
 8020616:	00d2      	lsls	r2, r2, #3
 8020618:	1c59      	adds	r1, r3, #1
 802061a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802061e:	b2d2      	uxtb	r2, r2
 8020620:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020624:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8020628:	f8ae 0000 	strh.w	r0, [lr]
 802062c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802062e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020630:	4413      	add	r3, r2
 8020632:	9327      	str	r3, [sp, #156]	; 0x9c
 8020634:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020636:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020638:	441a      	add	r2, r3
 802063a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802063c:	9228      	str	r2, [sp, #160]	; 0xa0
 802063e:	3b01      	subs	r3, #1
 8020640:	f10e 0e02 	add.w	lr, lr, #2
 8020644:	9311      	str	r3, [sp, #68]	; 0x44
 8020646:	e4a5      	b.n	801ff94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8020648:	fb08 f101 	mul.w	r1, r8, r1
 802064c:	fb09 1303 	mla	r3, r9, r3, r1
 8020650:	e6e7      	b.n	8020422 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8020652:	46b9      	mov	r9, r7
 8020654:	e70f      	b.n	8020476 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 8020656:	f1c2 0110 	rsb	r1, r2, #16
 802065a:	437a      	muls	r2, r7
 802065c:	fb09 2901 	mla	r9, r9, r1, r2
 8020660:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020664:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8020668:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802066c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020670:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020674:	4302      	orrs	r2, r0
 8020676:	e79e      	b.n	80205b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 8020678:	f8ae 2000 	strh.w	r2, [lr]
 802067c:	e7d6      	b.n	802062c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 802067e:	b015      	add	sp, #84	; 0x54
 8020680:	ecbd 8b08 	vpop	{d8-d11}
 8020684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020688:	fffff800 	.word	0xfffff800

0802068c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802068c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020690:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8020694:	fb0c 4e03 	mla	lr, ip, r3, r4
 8020698:	f1bc 0f00 	cmp.w	ip, #0
 802069c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80206a0:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80206a4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80206a8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80206ac:	8808      	ldrh	r0, [r1, #0]
 80206ae:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 80206b2:	db2f      	blt.n	8020714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80206b4:	45e2      	cmp	sl, ip
 80206b6:	dd2d      	ble.n	8020714 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80206b8:	2c00      	cmp	r4, #0
 80206ba:	db29      	blt.n	8020710 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80206bc:	42a3      	cmp	r3, r4
 80206be:	dd27      	ble.n	8020710 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80206c0:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80206c4:	1c62      	adds	r2, r4, #1
 80206c6:	d428      	bmi.n	802071a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80206c8:	4293      	cmp	r3, r2
 80206ca:	dd26      	ble.n	802071a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80206cc:	b32f      	cbz	r7, 802071a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80206ce:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80206d2:	f11c 0c01 	adds.w	ip, ip, #1
 80206d6:	d424      	bmi.n	8020722 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80206d8:	45e2      	cmp	sl, ip
 80206da:	dd22      	ble.n	8020722 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80206dc:	2e00      	cmp	r6, #0
 80206de:	f000 809c 	beq.w	802081a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 80206e2:	2c00      	cmp	r4, #0
 80206e4:	db1b      	blt.n	802071e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80206e6:	42a3      	cmp	r3, r4
 80206e8:	dd19      	ble.n	802071e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80206ea:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 80206ee:	3401      	adds	r4, #1
 80206f0:	d41a      	bmi.n	8020728 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80206f2:	42a3      	cmp	r3, r4
 80206f4:	dd18      	ble.n	8020728 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80206f6:	b1cf      	cbz	r7, 802072c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 80206f8:	3301      	adds	r3, #1
 80206fa:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 80206fe:	2f0f      	cmp	r7, #15
 8020700:	d915      	bls.n	802072e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8020702:	4b49      	ldr	r3, [pc, #292]	; (8020828 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8020704:	4a49      	ldr	r2, [pc, #292]	; (802082c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8020706:	484a      	ldr	r0, [pc, #296]	; (8020830 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8020708:	f240 3155 	movw	r1, #853	; 0x355
 802070c:	f002 ff38 	bl	8023580 <__assert_func>
 8020710:	4681      	mov	r9, r0
 8020712:	e7d7      	b.n	80206c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8020714:	4686      	mov	lr, r0
 8020716:	4681      	mov	r9, r0
 8020718:	e7db      	b.n	80206d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802071a:	4686      	mov	lr, r0
 802071c:	e7d9      	b.n	80206d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802071e:	4684      	mov	ip, r0
 8020720:	e7e5      	b.n	80206ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8020722:	4603      	mov	r3, r0
 8020724:	4684      	mov	ip, r0
 8020726:	e7ea      	b.n	80206fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8020728:	4603      	mov	r3, r0
 802072a:	e7e8      	b.n	80206fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802072c:	4603      	mov	r3, r0
 802072e:	2e0f      	cmp	r6, #15
 8020730:	d8e7      	bhi.n	8020702 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8020732:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8020736:	fb17 f806 	smulbb	r8, r7, r6
 802073a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802073e:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8020742:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020746:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802074a:	ea44 0909 	orr.w	r9, r4, r9
 802074e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020752:	f1c6 0410 	rsb	r4, r6, #16
 8020756:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802075a:	1be4      	subs	r4, r4, r7
 802075c:	041a      	lsls	r2, r3, #16
 802075e:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8020762:	ea4a 0e0e 	orr.w	lr, sl, lr
 8020766:	fb07 fe0e 	mul.w	lr, r7, lr
 802076a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802076e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8020772:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020776:	fb04 e409 	mla	r4, r4, r9, lr
 802077a:	4313      	orrs	r3, r2
 802077c:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8020780:	fb08 4303 	mla	r3, r8, r3, r4
 8020784:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020788:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802078c:	4322      	orrs	r2, r4
 802078e:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8020792:	fb06 3202 	mla	r2, r6, r2, r3
 8020796:	0d53      	lsrs	r3, r2, #21
 8020798:	0952      	lsrs	r2, r2, #5
 802079a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802079e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80207a2:	431a      	orrs	r2, r3
 80207a4:	b293      	uxth	r3, r2
 80207a6:	b2af      	uxth	r7, r5
 80207a8:	1202      	asrs	r2, r0, #8
 80207aa:	43ed      	mvns	r5, r5
 80207ac:	b2ed      	uxtb	r5, r5
 80207ae:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80207b2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80207b6:	fb12 f205 	smulbb	r2, r2, r5
 80207ba:	10c6      	asrs	r6, r0, #3
 80207bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80207c0:	fb0c 2c07 	mla	ip, ip, r7, r2
 80207c4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80207c8:	10da      	asrs	r2, r3, #3
 80207ca:	fb16 f605 	smulbb	r6, r6, r5
 80207ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80207d2:	fb02 6207 	mla	r2, r2, r7, r6
 80207d6:	b296      	uxth	r6, r2
 80207d8:	00c2      	lsls	r2, r0, #3
 80207da:	00dc      	lsls	r4, r3, #3
 80207dc:	b2d2      	uxtb	r2, r2
 80207de:	b2e4      	uxtb	r4, r4
 80207e0:	fb12 f205 	smulbb	r2, r2, r5
 80207e4:	fb04 2207 	mla	r2, r4, r7, r2
 80207e8:	fa1f fc8c 	uxth.w	ip, ip
 80207ec:	b292      	uxth	r2, r2
 80207ee:	f10c 0301 	add.w	r3, ip, #1
 80207f2:	1c50      	adds	r0, r2, #1
 80207f4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80207f8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80207fc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020800:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020804:	4313      	orrs	r3, r2
 8020806:	1c72      	adds	r2, r6, #1
 8020808:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802080c:	0952      	lsrs	r2, r2, #5
 802080e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020812:	4313      	orrs	r3, r2
 8020814:	800b      	strh	r3, [r1, #0]
 8020816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802081a:	2f0f      	cmp	r7, #15
 802081c:	f63f af71 	bhi.w	8020702 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8020820:	4603      	mov	r3, r0
 8020822:	4684      	mov	ip, r0
 8020824:	e785      	b.n	8020732 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8020826:	bf00      	nop
 8020828:	080288e7 	.word	0x080288e7
 802082c:	08028eee 	.word	0x08028eee
 8020830:	0802896f 	.word	0x0802896f

08020834 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020838:	ed2d 8b08 	vpush	{d8-d11}
 802083c:	b095      	sub	sp, #84	; 0x54
 802083e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8020842:	9306      	str	r3, [sp, #24]
 8020844:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8020848:	9212      	str	r2, [sp, #72]	; 0x48
 802084a:	9307      	str	r3, [sp, #28]
 802084c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802084e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020852:	930c      	str	r3, [sp, #48]	; 0x30
 8020854:	910b      	str	r1, [sp, #44]	; 0x2c
 8020856:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802085a:	9013      	str	r0, [sp, #76]	; 0x4c
 802085c:	6850      	ldr	r0, [r2, #4]
 802085e:	6812      	ldr	r2, [r2, #0]
 8020860:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 8020864:	fb00 1303 	mla	r3, r0, r3, r1
 8020868:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802086c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	9309      	str	r3, [sp, #36]	; 0x24
 8020872:	007b      	lsls	r3, r7, #1
 8020874:	930a      	str	r3, [sp, #40]	; 0x28
 8020876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020878:	43db      	mvns	r3, r3
 802087a:	b2db      	uxtb	r3, r3
 802087c:	eeb0 aa40 	vmov.f32	s20, s0
 8020880:	eef0 9a60 	vmov.f32	s19, s1
 8020884:	eeb0 9a41 	vmov.f32	s18, s2
 8020888:	eeb0 8a62 	vmov.f32	s16, s5
 802088c:	eef0 8a43 	vmov.f32	s17, s6
 8020890:	eef0 ba44 	vmov.f32	s23, s8
 8020894:	eeb0 ba64 	vmov.f32	s22, s9
 8020898:	eef0 aa45 	vmov.f32	s21, s10
 802089c:	9308      	str	r3, [sp, #32]
 802089e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	dc03      	bgt.n	80208ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80208a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	f340 81f3 	ble.w	8020c92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 80208ac:	9b06      	ldr	r3, [sp, #24]
 80208ae:	2b00      	cmp	r3, #0
 80208b0:	f340 80fa 	ble.w	8020aa8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80208b4:	1422      	asrs	r2, r4, #16
 80208b6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80208ba:	d42b      	bmi.n	8020914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80208bc:	1c51      	adds	r1, r2, #1
 80208be:	428f      	cmp	r7, r1
 80208c0:	dd2b      	ble.n	802091a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	db29      	blt.n	802091a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80208c6:	9807      	ldr	r0, [sp, #28]
 80208c8:	1c59      	adds	r1, r3, #1
 80208ca:	4288      	cmp	r0, r1
 80208cc:	dd25      	ble.n	802091a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80208ce:	9b06      	ldr	r3, [sp, #24]
 80208d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80208d2:	3b01      	subs	r3, #1
 80208d4:	fb02 4203 	mla	r2, r2, r3, r4
 80208d8:	1412      	asrs	r2, r2, #16
 80208da:	d428      	bmi.n	802092e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80208dc:	3201      	adds	r2, #1
 80208de:	4297      	cmp	r7, r2
 80208e0:	dd25      	ble.n	802092e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80208e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80208e4:	fb02 6303 	mla	r3, r2, r3, r6
 80208e8:	141b      	asrs	r3, r3, #16
 80208ea:	d420      	bmi.n	802092e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80208ec:	9a07      	ldr	r2, [sp, #28]
 80208ee:	3301      	adds	r3, #1
 80208f0:	429a      	cmp	r2, r3
 80208f2:	dd1c      	ble.n	802092e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80208f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80208f8:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 80208fc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8020900:	f1b8 0f00 	cmp.w	r8, #0
 8020904:	f300 8129 	bgt.w	8020b5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 8020908:	9b06      	ldr	r3, [sp, #24]
 802090a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802090e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8020912:	e0cb      	b.n	8020aac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020914:	1c51      	adds	r1, r2, #1
 8020916:	f040 80bd 	bne.w	8020a94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802091a:	42ba      	cmp	r2, r7
 802091c:	f280 80ba 	bge.w	8020a94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8020920:	1c5a      	adds	r2, r3, #1
 8020922:	f2c0 80b7 	blt.w	8020a94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8020926:	9a07      	ldr	r2, [sp, #28]
 8020928:	4293      	cmp	r3, r2
 802092a:	f280 80b3 	bge.w	8020a94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 802092e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020932:	46c8      	mov	r8, r9
 8020934:	f1bb 0f00 	cmp.w	fp, #0
 8020938:	dde6      	ble.n	8020908 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802093a:	1421      	asrs	r1, r4, #16
 802093c:	ea4f 4226 	mov.w	r2, r6, asr #16
 8020940:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020944:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020948:	f100 80ef 	bmi.w	8020b2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 802094c:	f101 0c01 	add.w	ip, r1, #1
 8020950:	4567      	cmp	r7, ip
 8020952:	f340 80ec 	ble.w	8020b2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020956:	2a00      	cmp	r2, #0
 8020958:	f2c0 80e9 	blt.w	8020b2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802095c:	9d07      	ldr	r5, [sp, #28]
 802095e:	f102 0c01 	add.w	ip, r2, #1
 8020962:	4565      	cmp	r5, ip
 8020964:	f340 80e3 	ble.w	8020b2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020968:	fb02 1207 	mla	r2, r2, r7, r1
 802096c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802096e:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 8020972:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8020976:	f8be 1002 	ldrh.w	r1, [lr, #2]
 802097a:	b138      	cbz	r0, 802098c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 802097c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802097e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020980:	4472      	add	r2, lr
 8020982:	f83e 5005 	ldrh.w	r5, [lr, r5]
 8020986:	8852      	ldrh	r2, [r2, #2]
 8020988:	950e      	str	r5, [sp, #56]	; 0x38
 802098a:	920f      	str	r2, [sp, #60]	; 0x3c
 802098c:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 8020990:	fb13 f200 	smulbb	r2, r3, r0
 8020994:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020998:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802099c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80209a0:	10d2      	asrs	r2, r2, #3
 80209a2:	ea4e 0c0c 	orr.w	ip, lr, ip
 80209a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80209aa:	f1c0 0e10 	rsb	lr, r0, #16
 80209ae:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80209b2:	ebae 0e03 	sub.w	lr, lr, r3
 80209b6:	ea4a 0101 	orr.w	r1, sl, r1
 80209ba:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 80209be:	4359      	muls	r1, r3
 80209c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80209c2:	9d08      	ldr	r5, [sp, #32]
 80209c4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80209c8:	fb0e 1e0c 	mla	lr, lr, ip, r1
 80209cc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80209d0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80209d4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80209d8:	ea4c 0c03 	orr.w	ip, ip, r3
 80209dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80209e0:	041b      	lsls	r3, r3, #16
 80209e2:	fb02 ec0c 	mla	ip, r2, ip, lr
 80209e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80209ea:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80209ee:	ea43 030e 	orr.w	r3, r3, lr
 80209f2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80209f6:	fb02 c203 	mla	r2, r2, r3, ip
 80209fa:	0d53      	lsrs	r3, r2, #21
 80209fc:	0952      	lsrs	r2, r2, #5
 80209fe:	f8b8 c000 	ldrh.w	ip, [r8]
 8020a02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020a06:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020a0a:	431a      	orrs	r2, r3
 8020a0c:	b292      	uxth	r2, r2
 8020a0e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8020a12:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8020a16:	1210      	asrs	r0, r2, #8
 8020a18:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020a1c:	fb11 f105 	smulbb	r1, r1, r5
 8020a20:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8020a24:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020a28:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020a2c:	fb00 1003 	mla	r0, r0, r3, r1
 8020a30:	fa5f fc8c 	uxtb.w	ip, ip
 8020a34:	10d1      	asrs	r1, r2, #3
 8020a36:	00d2      	lsls	r2, r2, #3
 8020a38:	fb1c fc05 	smulbb	ip, ip, r5
 8020a3c:	b2d2      	uxtb	r2, r2
 8020a3e:	fb02 c203 	mla	r2, r2, r3, ip
 8020a42:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020a46:	b280      	uxth	r0, r0
 8020a48:	b292      	uxth	r2, r2
 8020a4a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020a4e:	fb1e fe05 	smulbb	lr, lr, r5
 8020a52:	fb01 e103 	mla	r1, r1, r3, lr
 8020a56:	f102 0c01 	add.w	ip, r2, #1
 8020a5a:	1c43      	adds	r3, r0, #1
 8020a5c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020a60:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020a64:	b289      	uxth	r1, r1
 8020a66:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020a6a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020a6e:	4313      	orrs	r3, r2
 8020a70:	1c4a      	adds	r2, r1, #1
 8020a72:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020a76:	0949      	lsrs	r1, r1, #5
 8020a78:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020a7c:	430b      	orrs	r3, r1
 8020a7e:	f8a8 3000 	strh.w	r3, [r8]
 8020a82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a84:	441c      	add	r4, r3
 8020a86:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a88:	f108 0802 	add.w	r8, r8, #2
 8020a8c:	441e      	add	r6, r3
 8020a8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020a92:	e74f      	b.n	8020934 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020a94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a96:	441c      	add	r4, r3
 8020a98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a9a:	441e      	add	r6, r3
 8020a9c:	9b06      	ldr	r3, [sp, #24]
 8020a9e:	3b01      	subs	r3, #1
 8020aa0:	9306      	str	r3, [sp, #24]
 8020aa2:	f109 0902 	add.w	r9, r9, #2
 8020aa6:	e701      	b.n	80208ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8020aa8:	f47f af11 	bne.w	80208ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8020aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	f340 80ef 	ble.w	8020c92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 8020ab4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020abc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020ac0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020ac2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020ac6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020aca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020ace:	eef0 6a48 	vmov.f32	s13, s16
 8020ad2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020ad6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ada:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020ade:	ee16 4a90 	vmov	r4, s13
 8020ae2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020ae6:	eef0 6a68 	vmov.f32	s13, s17
 8020aea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020aee:	ee18 2a10 	vmov	r2, s16
 8020af2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020afa:	ee18 2a90 	vmov	r2, s17
 8020afe:	9329      	str	r3, [sp, #164]	; 0xa4
 8020b00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b06:	932a      	str	r3, [sp, #168]	; 0xa8
 8020b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020b0c:	3b01      	subs	r3, #1
 8020b0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8020b14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020b16:	bf08      	it	eq
 8020b18:	4613      	moveq	r3, r2
 8020b1a:	ee16 6a90 	vmov	r6, s13
 8020b1e:	9306      	str	r3, [sp, #24]
 8020b20:	eef0 8a67 	vmov.f32	s17, s15
 8020b24:	eeb0 8a47 	vmov.f32	s16, s14
 8020b28:	e6b9      	b.n	802089e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020b2a:	1c4d      	adds	r5, r1, #1
 8020b2c:	d1a9      	bne.n	8020a82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b2e:	428f      	cmp	r7, r1
 8020b30:	dda7      	ble.n	8020a82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b32:	1c55      	adds	r5, r2, #1
 8020b34:	dba5      	blt.n	8020a82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b36:	9d07      	ldr	r5, [sp, #28]
 8020b38:	4295      	cmp	r5, r2
 8020b3a:	dda2      	ble.n	8020a82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020b3e:	9101      	str	r1, [sp, #4]
 8020b40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020b44:	9b07      	ldr	r3, [sp, #28]
 8020b46:	9300      	str	r3, [sp, #0]
 8020b48:	e9cd 0504 	strd	r0, r5, [sp, #16]
 8020b4c:	463b      	mov	r3, r7
 8020b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b50:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020b52:	4641      	mov	r1, r8
 8020b54:	f7ff fd9a 	bl	802068c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8020b58:	e793      	b.n	8020a82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b5a:	1422      	asrs	r2, r4, #16
 8020b5c:	1431      	asrs	r1, r6, #16
 8020b5e:	fb07 2101 	mla	r1, r7, r1, r2
 8020b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020b66:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8020b6a:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020b6e:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 8020b72:	8851      	ldrh	r1, [r2, #2]
 8020b74:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020b78:	f1be 0f00 	cmp.w	lr, #0
 8020b7c:	d006      	beq.n	8020b8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 8020b7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020b80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020b82:	1810      	adds	r0, r2, r0
 8020b84:	5b52      	ldrh	r2, [r2, r5]
 8020b86:	9210      	str	r2, [sp, #64]	; 0x40
 8020b88:	8842      	ldrh	r2, [r0, #2]
 8020b8a:	9211      	str	r2, [sp, #68]	; 0x44
 8020b8c:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020b90:	fb13 f20e 	smulbb	r2, r3, lr
 8020b94:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020b98:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020b9c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020ba0:	10d2      	asrs	r2, r2, #3
 8020ba2:	ea40 000c 	orr.w	r0, r0, ip
 8020ba6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020baa:	f1ce 0c10 	rsb	ip, lr, #16
 8020bae:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020bb2:	ebac 0c03 	sub.w	ip, ip, r3
 8020bb6:	ea4b 0101 	orr.w	r1, fp, r1
 8020bba:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 8020bbe:	4359      	muls	r1, r3
 8020bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020bc2:	9d08      	ldr	r5, [sp, #32]
 8020bc4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8020bc8:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020bcc:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8020bd0:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8020bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020bd6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020bda:	ea4b 0000 	orr.w	r0, fp, r0
 8020bde:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8020be2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020be6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020bea:	fb02 c000 	mla	r0, r2, r0, ip
 8020bee:	ea4b 0b03 	orr.w	fp, fp, r3
 8020bf2:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8020bf6:	fb02 0b0b 	mla	fp, r2, fp, r0
 8020bfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020bfc:	ea4f 515b 	mov.w	r1, fp, lsr #21
 8020c00:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020c04:	8812      	ldrh	r2, [r2, #0]
 8020c06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020c0a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020c0e:	ea41 0b0b 	orr.w	fp, r1, fp
 8020c12:	fa1f f38b 	uxth.w	r3, fp
 8020c16:	1211      	asrs	r1, r2, #8
 8020c18:	1218      	asrs	r0, r3, #8
 8020c1a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020c1e:	fb11 f105 	smulbb	r1, r1, r5
 8020c22:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020c26:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020c2a:	00d2      	lsls	r2, r2, #3
 8020c2c:	fb00 100a 	mla	r0, r0, sl, r1
 8020c30:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020c34:	10d9      	asrs	r1, r3, #3
 8020c36:	b2d2      	uxtb	r2, r2
 8020c38:	00db      	lsls	r3, r3, #3
 8020c3a:	fb1c fc05 	smulbb	ip, ip, r5
 8020c3e:	fb12 f205 	smulbb	r2, r2, r5
 8020c42:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020c46:	b2db      	uxtb	r3, r3
 8020c48:	b280      	uxth	r0, r0
 8020c4a:	fb01 c10a 	mla	r1, r1, sl, ip
 8020c4e:	fb03 230a 	mla	r3, r3, sl, r2
 8020c52:	b29b      	uxth	r3, r3
 8020c54:	b289      	uxth	r1, r1
 8020c56:	1c42      	adds	r2, r0, #1
 8020c58:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020c5c:	f101 0c01 	add.w	ip, r1, #1
 8020c60:	1c5a      	adds	r2, r3, #1
 8020c62:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020c66:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020c6a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020c6e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020c72:	0949      	lsrs	r1, r1, #5
 8020c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020c76:	4310      	orrs	r0, r2
 8020c78:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020c7c:	4308      	orrs	r0, r1
 8020c7e:	f823 0b02 	strh.w	r0, [r3], #2
 8020c82:	930d      	str	r3, [sp, #52]	; 0x34
 8020c84:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020c86:	441c      	add	r4, r3
 8020c88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8020c8e:	441e      	add	r6, r3
 8020c90:	e636      	b.n	8020900 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020c92:	b015      	add	sp, #84	; 0x54
 8020c94:	ecbd 8b08 	vpop	{d8-d11}
 8020c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8020c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ca0:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8020ca4:	fb06 5c03 	mla	ip, r6, r3, r5
 8020ca8:	2e00      	cmp	r6, #0
 8020caa:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8020cae:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8020cb2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8020cb6:	8808      	ldrh	r0, [r1, #0]
 8020cb8:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8020cbc:	db2e      	blt.n	8020d1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8020cbe:	45b0      	cmp	r8, r6
 8020cc0:	dd2c      	ble.n	8020d1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8020cc2:	2d00      	cmp	r5, #0
 8020cc4:	db28      	blt.n	8020d18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8020cc6:	42ab      	cmp	r3, r5
 8020cc8:	dd26      	ble.n	8020d18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8020cca:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8020cce:	1c6a      	adds	r2, r5, #1
 8020cd0:	d427      	bmi.n	8020d22 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8020cd2:	4293      	cmp	r3, r2
 8020cd4:	dd25      	ble.n	8020d22 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8020cd6:	b324      	cbz	r4, 8020d22 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8020cd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8020cdc:	3601      	adds	r6, #1
 8020cde:	d424      	bmi.n	8020d2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8020ce0:	45b0      	cmp	r8, r6
 8020ce2:	dd22      	ble.n	8020d2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8020ce4:	b31f      	cbz	r7, 8020d2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8020ce6:	2d00      	cmp	r5, #0
 8020ce8:	db1d      	blt.n	8020d26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8020cea:	42ab      	cmp	r3, r5
 8020cec:	dd1b      	ble.n	8020d26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8020cee:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8020cf2:	3501      	adds	r5, #1
 8020cf4:	d405      	bmi.n	8020d02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020cf6:	42ab      	cmp	r3, r5
 8020cf8:	dd03      	ble.n	8020d02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020cfa:	b124      	cbz	r4, 8020d06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8020cfc:	3301      	adds	r3, #1
 8020cfe:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8020d02:	2c0f      	cmp	r4, #15
 8020d04:	d801      	bhi.n	8020d0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020d06:	2f0f      	cmp	r7, #15
 8020d08:	d914      	bls.n	8020d34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8020d0a:	4b27      	ldr	r3, [pc, #156]	; (8020da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8020d0c:	4a27      	ldr	r2, [pc, #156]	; (8020dac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8020d0e:	4828      	ldr	r0, [pc, #160]	; (8020db0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8020d10:	f240 3155 	movw	r1, #853	; 0x355
 8020d14:	f002 fc34 	bl	8023580 <__assert_func>
 8020d18:	4684      	mov	ip, r0
 8020d1a:	e7d8      	b.n	8020cce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8020d1c:	4602      	mov	r2, r0
 8020d1e:	4684      	mov	ip, r0
 8020d20:	e7dc      	b.n	8020cdc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8020d22:	4602      	mov	r2, r0
 8020d24:	e7da      	b.n	8020cdc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8020d26:	4606      	mov	r6, r0
 8020d28:	e7e3      	b.n	8020cf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8020d2a:	4606      	mov	r6, r0
 8020d2c:	e7e9      	b.n	8020d02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020d2e:	2c0f      	cmp	r4, #15
 8020d30:	d8eb      	bhi.n	8020d0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020d32:	4606      	mov	r6, r0
 8020d34:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8020d38:	fb14 f307 	smulbb	r3, r4, r7
 8020d3c:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8020d40:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8020d44:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020d48:	10db      	asrs	r3, r3, #3
 8020d4a:	ea45 0c0c 	orr.w	ip, r5, ip
 8020d4e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020d52:	f1c7 0510 	rsb	r5, r7, #16
 8020d56:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020d5a:	1b2d      	subs	r5, r5, r4
 8020d5c:	ea4e 0202 	orr.w	r2, lr, r2
 8020d60:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8020d64:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020d68:	4354      	muls	r4, r2
 8020d6a:	fb05 450c 	mla	r5, r5, ip, r4
 8020d6e:	0404      	lsls	r4, r0, #16
 8020d70:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020d74:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020d78:	4320      	orrs	r0, r4
 8020d7a:	fb03 5400 	mla	r4, r3, r0, r5
 8020d7e:	0430      	lsls	r0, r6, #16
 8020d80:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020d84:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8020d88:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8020d8c:	4330      	orrs	r0, r6
 8020d8e:	fb07 4000 	mla	r0, r7, r0, r4
 8020d92:	0d43      	lsrs	r3, r0, #21
 8020d94:	0940      	lsrs	r0, r0, #5
 8020d96:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020d9a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020d9e:	4318      	orrs	r0, r3
 8020da0:	8008      	strh	r0, [r1, #0]
 8020da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020da6:	bf00      	nop
 8020da8:	080288e7 	.word	0x080288e7
 8020dac:	08028eee 	.word	0x08028eee
 8020db0:	0802896f 	.word	0x0802896f

08020db4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020db8:	ed2d 8b0a 	vpush	{d8-d12}
 8020dbc:	b093      	sub	sp, #76	; 0x4c
 8020dbe:	461d      	mov	r5, r3
 8020dc0:	9210      	str	r2, [sp, #64]	; 0x40
 8020dc2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020dc4:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 8020dc8:	9208      	str	r2, [sp, #32]
 8020dca:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 8020dce:	910b      	str	r1, [sp, #44]	; 0x2c
 8020dd0:	6859      	ldr	r1, [r3, #4]
 8020dd2:	681b      	ldr	r3, [r3, #0]
 8020dd4:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 8020dd8:	9011      	str	r0, [sp, #68]	; 0x44
 8020dda:	fb01 2707 	mla	r7, r1, r7, r2
 8020dde:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8020de2:	9307      	str	r3, [sp, #28]
 8020de4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020de6:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	9309      	str	r3, [sp, #36]	; 0x24
 8020dee:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020df2:	eeb0 aa40 	vmov.f32	s20, s0
 8020df6:	eef0 9a60 	vmov.f32	s19, s1
 8020dfa:	eeb0 9a41 	vmov.f32	s18, s2
 8020dfe:	eeb0 8a62 	vmov.f32	s16, s5
 8020e02:	eef0 8a43 	vmov.f32	s17, s6
 8020e06:	eeb0 ca44 	vmov.f32	s24, s8
 8020e0a:	eef0 ba64 	vmov.f32	s23, s9
 8020e0e:	eeb0 ba45 	vmov.f32	s22, s10
 8020e12:	930a      	str	r3, [sp, #40]	; 0x28
 8020e14:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	dc03      	bgt.n	8020e26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020e1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	f340 816c 	ble.w	80210fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 8020e26:	2d00      	cmp	r5, #0
 8020e28:	f340 80b6 	ble.w	8020f98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 8020e2c:	1422      	asrs	r2, r4, #16
 8020e2e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020e32:	d428      	bmi.n	8020e86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8020e34:	1c51      	adds	r1, r2, #1
 8020e36:	4588      	cmp	r8, r1
 8020e38:	dd27      	ble.n	8020e8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	db25      	blt.n	8020e8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 8020e3e:	9808      	ldr	r0, [sp, #32]
 8020e40:	1c59      	adds	r1, r3, #1
 8020e42:	4288      	cmp	r0, r1
 8020e44:	dd21      	ble.n	8020e8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 8020e46:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020e48:	1e6b      	subs	r3, r5, #1
 8020e4a:	fb02 4203 	mla	r2, r2, r3, r4
 8020e4e:	1412      	asrs	r2, r2, #16
 8020e50:	d422      	bmi.n	8020e98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020e52:	3201      	adds	r2, #1
 8020e54:	4590      	cmp	r8, r2
 8020e56:	dd1f      	ble.n	8020e98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020e58:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020e5a:	fb02 6303 	mla	r3, r2, r3, r6
 8020e5e:	141b      	asrs	r3, r3, #16
 8020e60:	d41a      	bmi.n	8020e98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020e62:	9a08      	ldr	r2, [sp, #32]
 8020e64:	3301      	adds	r3, #1
 8020e66:	429a      	cmp	r2, r3
 8020e68:	dd16      	ble.n	8020e98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020e6a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020e6e:	46a9      	mov	r9, r5
 8020e70:	f1b9 0f00 	cmp.w	r9, #0
 8020e74:	f300 80e4 	bgt.w	8021040 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 8020e78:	9b07      	ldr	r3, [sp, #28]
 8020e7a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020e7e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8020e82:	9307      	str	r3, [sp, #28]
 8020e84:	e08a      	b.n	8020f9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8020e86:	1c51      	adds	r1, r2, #1
 8020e88:	d17d      	bne.n	8020f86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8020e8a:	4542      	cmp	r2, r8
 8020e8c:	da7b      	bge.n	8020f86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8020e8e:	1c5a      	adds	r2, r3, #1
 8020e90:	db79      	blt.n	8020f86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8020e92:	9a08      	ldr	r2, [sp, #32]
 8020e94:	4293      	cmp	r3, r2
 8020e96:	da76      	bge.n	8020f86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8020e98:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020e9c:	46aa      	mov	sl, r5
 8020e9e:	f1ba 0f00 	cmp.w	sl, #0
 8020ea2:	dde9      	ble.n	8020e78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8020ea4:	1421      	asrs	r1, r4, #16
 8020ea6:	ea4f 4226 	mov.w	r2, r6, asr #16
 8020eaa:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020eae:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020eb2:	f100 80b0 	bmi.w	8021016 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 8020eb6:	f101 0c01 	add.w	ip, r1, #1
 8020eba:	45e0      	cmp	r8, ip
 8020ebc:	f340 80ad 	ble.w	802101a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020ec0:	2a00      	cmp	r2, #0
 8020ec2:	f2c0 80aa 	blt.w	802101a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020ec6:	9f08      	ldr	r7, [sp, #32]
 8020ec8:	f102 0c01 	add.w	ip, r2, #1
 8020ecc:	4567      	cmp	r7, ip
 8020ece:	f340 80a4 	ble.w	802101a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020ed2:	fb02 1208 	mla	r2, r2, r8, r1
 8020ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020ed8:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 8020edc:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8020ee0:	f8be 1002 	ldrh.w	r1, [lr, #2]
 8020ee4:	b138      	cbz	r0, 8020ef6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8020ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020ee8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020eea:	4472      	add	r2, lr
 8020eec:	f83e 7007 	ldrh.w	r7, [lr, r7]
 8020ef0:	8852      	ldrh	r2, [r2, #2]
 8020ef2:	970c      	str	r7, [sp, #48]	; 0x30
 8020ef4:	920d      	str	r2, [sp, #52]	; 0x34
 8020ef6:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 8020efa:	fb13 f200 	smulbb	r2, r3, r0
 8020efe:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020f02:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020f06:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020f0a:	10d2      	asrs	r2, r2, #3
 8020f0c:	ea4e 0c0c 	orr.w	ip, lr, ip
 8020f10:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020f14:	f1c0 0e10 	rsb	lr, r0, #16
 8020f18:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020f1c:	ebae 0e03 	sub.w	lr, lr, r3
 8020f20:	ea4b 0101 	orr.w	r1, fp, r1
 8020f24:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 8020f28:	4359      	muls	r1, r3
 8020f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f2c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8020f30:	fb0e 1e0c 	mla	lr, lr, ip, r1
 8020f34:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020f38:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020f3c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020f40:	ea4c 0c03 	orr.w	ip, ip, r3
 8020f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020f48:	041b      	lsls	r3, r3, #16
 8020f4a:	fb02 ec0c 	mla	ip, r2, ip, lr
 8020f4e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020f52:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020f56:	ea43 030e 	orr.w	r3, r3, lr
 8020f5a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8020f5e:	fb02 c203 	mla	r2, r2, r3, ip
 8020f62:	0d53      	lsrs	r3, r2, #21
 8020f64:	0952      	lsrs	r2, r2, #5
 8020f66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f6a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020f6e:	431a      	orrs	r2, r3
 8020f70:	f8a9 2000 	strh.w	r2, [r9]
 8020f74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020f76:	441c      	add	r4, r3
 8020f78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020f7a:	f109 0902 	add.w	r9, r9, #2
 8020f7e:	441e      	add	r6, r3
 8020f80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020f84:	e78b      	b.n	8020e9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8020f86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020f88:	441c      	add	r4, r3
 8020f8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020f8c:	441e      	add	r6, r3
 8020f8e:	9b07      	ldr	r3, [sp, #28]
 8020f90:	3302      	adds	r3, #2
 8020f92:	3d01      	subs	r5, #1
 8020f94:	9307      	str	r3, [sp, #28]
 8020f96:	e746      	b.n	8020e26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020f98:	f47f af55 	bne.w	8020e46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8020f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	f340 80ad 	ble.w	80210fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 8020fa4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020fa8:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020fac:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020fb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020fb2:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020fb6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020fba:	eef0 6a48 	vmov.f32	s13, s16
 8020fbe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020fc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020fc6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020fca:	ee16 4a90 	vmov	r4, s13
 8020fce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020fd2:	eef0 6a68 	vmov.f32	s13, s17
 8020fd6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020fda:	ee18 2a10 	vmov	r2, s16
 8020fde:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020fe2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fe6:	ee18 2a90 	vmov	r2, s17
 8020fea:	9329      	str	r3, [sp, #164]	; 0xa4
 8020fec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020fee:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ff2:	932a      	str	r3, [sp, #168]	; 0xa8
 8020ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ff8:	3b01      	subs	r3, #1
 8020ffa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8021000:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021002:	ee16 6a90 	vmov	r6, s13
 8021006:	bf14      	ite	ne
 8021008:	461d      	movne	r5, r3
 802100a:	4615      	moveq	r5, r2
 802100c:	eef0 8a67 	vmov.f32	s17, s15
 8021010:	eeb0 8a47 	vmov.f32	s16, s14
 8021014:	e700      	b.n	8020e18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021016:	1c4f      	adds	r7, r1, #1
 8021018:	d1ac      	bne.n	8020f74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802101a:	4588      	cmp	r8, r1
 802101c:	ddaa      	ble.n	8020f74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 802101e:	1c57      	adds	r7, r2, #1
 8021020:	dba8      	blt.n	8020f74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8021022:	9f08      	ldr	r7, [sp, #32]
 8021024:	4297      	cmp	r7, r2
 8021026:	dda5      	ble.n	8020f74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8021028:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802102c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8021030:	9700      	str	r7, [sp, #0]
 8021032:	4643      	mov	r3, r8
 8021034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021036:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021038:	4649      	mov	r1, r9
 802103a:	f7ff fe2f 	bl	8020c9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802103e:	e799      	b.n	8020f74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8021040:	1422      	asrs	r2, r4, #16
 8021042:	1431      	asrs	r1, r6, #16
 8021044:	fb08 2101 	mla	r1, r8, r1, r2
 8021048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802104a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802104c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8021050:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8021054:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 8021058:	8851      	ldrh	r1, [r2, #2]
 802105a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802105e:	f1be 0f00 	cmp.w	lr, #0
 8021062:	d006      	beq.n	8021072 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8021064:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021066:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021068:	1810      	adds	r0, r2, r0
 802106a:	5bd2      	ldrh	r2, [r2, r7]
 802106c:	920e      	str	r2, [sp, #56]	; 0x38
 802106e:	8842      	ldrh	r2, [r0, #2]
 8021070:	920f      	str	r2, [sp, #60]	; 0x3c
 8021072:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8021076:	fb13 f20e 	smulbb	r2, r3, lr
 802107a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802107e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021082:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021086:	10d2      	asrs	r2, r2, #3
 8021088:	ea40 000c 	orr.w	r0, r0, ip
 802108c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021090:	f1ce 0c10 	rsb	ip, lr, #16
 8021094:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021098:	ebac 0c03 	sub.w	ip, ip, r3
 802109c:	ea4a 0101 	orr.w	r1, sl, r1
 80210a0:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 80210a4:	4359      	muls	r1, r3
 80210a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80210a8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80210ac:	fb0c 1c00 	mla	ip, ip, r0, r1
 80210b0:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80210b4:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 80210b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80210ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80210bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80210c0:	041b      	lsls	r3, r3, #16
 80210c2:	ea4a 0000 	orr.w	r0, sl, r0
 80210c6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80210ca:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 80210ce:	fb02 c000 	mla	r0, r2, r0, ip
 80210d2:	ea43 0a0a 	orr.w	sl, r3, sl
 80210d6:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 80210da:	fb02 000a 	mla	r0, r2, sl, r0
 80210de:	0d43      	lsrs	r3, r0, #21
 80210e0:	0940      	lsrs	r0, r0, #5
 80210e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80210e6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80210ea:	4318      	orrs	r0, r3
 80210ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80210ee:	f82b 0b02 	strh.w	r0, [fp], #2
 80210f2:	441c      	add	r4, r3
 80210f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80210f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80210fa:	441e      	add	r6, r3
 80210fc:	e6b8      	b.n	8020e70 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 80210fe:	b013      	add	sp, #76	; 0x4c
 8021100:	ecbd 8b0a 	vpop	{d8-d12}
 8021104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021108 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8021108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802110c:	8808      	ldrh	r0, [r1, #0]
 802110e:	b085      	sub	sp, #20
 8021110:	1206      	asrs	r6, r0, #8
 8021112:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021116:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802111a:	9600      	str	r6, [sp, #0]
 802111c:	10c6      	asrs	r6, r0, #3
 802111e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021122:	9601      	str	r6, [sp, #4]
 8021124:	00c0      	lsls	r0, r0, #3
 8021126:	fb04 c603 	mla	r6, r4, r3, ip
 802112a:	b2c0      	uxtb	r0, r0
 802112c:	4691      	mov	r9, r2
 802112e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021132:	9a00      	ldr	r2, [sp, #0]
 8021134:	9002      	str	r0, [sp, #8]
 8021136:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802113a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802113e:	9a01      	ldr	r2, [sp, #4]
 8021140:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021144:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021148:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802114c:	2c00      	cmp	r4, #0
 802114e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021152:	db3a      	blt.n	80211ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 8021154:	45a0      	cmp	r8, r4
 8021156:	dd38      	ble.n	80211ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 8021158:	f1bc 0f00 	cmp.w	ip, #0
 802115c:	db33      	blt.n	80211c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 802115e:	4563      	cmp	r3, ip
 8021160:	dd31      	ble.n	80211c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 8021162:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021166:	f11c 0601 	adds.w	r6, ip, #1
 802116a:	d431      	bmi.n	80211d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 802116c:	42b3      	cmp	r3, r6
 802116e:	dd2f      	ble.n	80211d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 8021170:	b375      	cbz	r5, 80211d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 8021172:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021176:	3401      	adds	r4, #1
 8021178:	d42e      	bmi.n	80211d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802117a:	45a0      	cmp	r8, r4
 802117c:	dd2c      	ble.n	80211d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802117e:	b35f      	cbz	r7, 80211d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8021180:	f1bc 0f00 	cmp.w	ip, #0
 8021184:	db26      	blt.n	80211d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8021186:	4563      	cmp	r3, ip
 8021188:	dd24      	ble.n	80211d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 802118a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802118e:	f11c 0c01 	adds.w	ip, ip, #1
 8021192:	d405      	bmi.n	80211a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8021194:	4563      	cmp	r3, ip
 8021196:	dd03      	ble.n	80211a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8021198:	b115      	cbz	r5, 80211a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802119a:	3301      	adds	r3, #1
 802119c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80211a0:	2d0f      	cmp	r5, #15
 80211a2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80211a6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80211aa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80211ae:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80211b2:	d801      	bhi.n	80211b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 80211b4:	2f0f      	cmp	r7, #15
 80211b6:	d911      	bls.n	80211dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 80211b8:	4b82      	ldr	r3, [pc, #520]	; (80213c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 80211ba:	4a83      	ldr	r2, [pc, #524]	; (80213c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 80211bc:	4883      	ldr	r0, [pc, #524]	; (80213cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 80211be:	f240 3173 	movw	r1, #883	; 0x373
 80211c2:	f002 f9dd 	bl	8023580 <__assert_func>
 80211c6:	4602      	mov	r2, r0
 80211c8:	e7cd      	b.n	8021166 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 80211ca:	4606      	mov	r6, r0
 80211cc:	4602      	mov	r2, r0
 80211ce:	e7d2      	b.n	8021176 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 80211d0:	4606      	mov	r6, r0
 80211d2:	e7d0      	b.n	8021176 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 80211d4:	4604      	mov	r4, r0
 80211d6:	e7da      	b.n	802118e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 80211d8:	4604      	mov	r4, r0
 80211da:	e7e1      	b.n	80211a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80211dc:	b2ab      	uxth	r3, r5
 80211de:	b2bf      	uxth	r7, r7
 80211e0:	fb03 fe07 	mul.w	lr, r3, r7
 80211e4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80211e8:	011b      	lsls	r3, r3, #4
 80211ea:	eba3 0c0e 	sub.w	ip, r3, lr
 80211ee:	b2bf      	uxth	r7, r7
 80211f0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80211f4:	fa1f fc8c 	uxth.w	ip, ip
 80211f8:	1bed      	subs	r5, r5, r7
 80211fa:	b2ad      	uxth	r5, r5
 80211fc:	fb0c f30a 	mul.w	r3, ip, sl
 8021200:	fb05 330b 	mla	r3, r5, fp, r3
 8021204:	fb07 3309 	mla	r3, r7, r9, r3
 8021208:	fb0e 3308 	mla	r3, lr, r8, r3
 802120c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021210:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021214:	9303      	str	r3, [sp, #12]
 8021216:	d018      	beq.n	802124a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8021218:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802121c:	fb0b f303 	mul.w	r3, fp, r3
 8021220:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021224:	fb0b fb02 	mul.w	fp, fp, r2
 8021228:	0a1a      	lsrs	r2, r3, #8
 802122a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802122e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021232:	441a      	add	r2, r3
 8021234:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021238:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802123c:	0a12      	lsrs	r2, r2, #8
 802123e:	0a1b      	lsrs	r3, r3, #8
 8021240:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021244:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021248:	431a      	orrs	r2, r3
 802124a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802124e:	d019      	beq.n	8021284 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 8021250:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021254:	fb0a fb0b 	mul.w	fp, sl, fp
 8021258:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802125c:	fb0a fa06 	mul.w	sl, sl, r6
 8021260:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021264:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021268:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802126c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021270:	445e      	add	r6, fp
 8021272:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021276:	0a36      	lsrs	r6, r6, #8
 8021278:	0a1b      	lsrs	r3, r3, #8
 802127a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802127e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021282:	431e      	orrs	r6, r3
 8021284:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021288:	d019      	beq.n	80212be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 802128a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802128e:	fb09 fa0a 	mul.w	sl, r9, sl
 8021292:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021296:	fb09 f904 	mul.w	r9, r9, r4
 802129a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802129e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80212a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80212a6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80212aa:	4454      	add	r4, sl
 80212ac:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80212b0:	0a24      	lsrs	r4, r4, #8
 80212b2:	0a1b      	lsrs	r3, r3, #8
 80212b4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80212b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212bc:	431c      	orrs	r4, r3
 80212be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80212c2:	d019      	beq.n	80212f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 80212c4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80212c8:	fb08 f909 	mul.w	r9, r8, r9
 80212cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80212d0:	fb08 f800 	mul.w	r8, r8, r0
 80212d4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80212d8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80212dc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80212e0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80212e4:	4448      	add	r0, r9
 80212e6:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80212ea:	0a00      	lsrs	r0, r0, #8
 80212ec:	0a1b      	lsrs	r3, r3, #8
 80212ee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80212f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212f6:	4318      	orrs	r0, r3
 80212f8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80212fc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021300:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021304:	fb0c f808 	mul.w	r8, ip, r8
 8021308:	fb0c f606 	mul.w	r6, ip, r6
 802130c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021310:	fb05 6202 	mla	r2, r5, r2, r6
 8021314:	fb05 8803 	mla	r8, r5, r3, r8
 8021318:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802131c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021320:	fb07 8803 	mla	r8, r7, r3, r8
 8021324:	fb07 2704 	mla	r7, r7, r4, r2
 8021328:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802132c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021330:	fb0e 8303 	mla	r3, lr, r3, r8
 8021334:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021338:	0a1b      	lsrs	r3, r3, #8
 802133a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802133e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021342:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8021346:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802134a:	ea43 0e0e 	orr.w	lr, r3, lr
 802134e:	9b03      	ldr	r3, [sp, #12]
 8021350:	b2a4      	uxth	r4, r4
 8021352:	4363      	muls	r3, r4
 8021354:	1c5a      	adds	r2, r3, #1
 8021356:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802135a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802135e:	9b00      	ldr	r3, [sp, #0]
 8021360:	b2d2      	uxtb	r2, r2
 8021362:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8021366:	fb13 f302 	smulbb	r3, r3, r2
 802136a:	fb05 3304 	mla	r3, r5, r4, r3
 802136e:	b29d      	uxth	r5, r3
 8021370:	9b01      	ldr	r3, [sp, #4]
 8021372:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021376:	fb13 f302 	smulbb	r3, r3, r2
 802137a:	fb00 3004 	mla	r0, r0, r4, r3
 802137e:	9b02      	ldr	r3, [sp, #8]
 8021380:	fa5f fe8e 	uxtb.w	lr, lr
 8021384:	fb13 f202 	smulbb	r2, r3, r2
 8021388:	fb0e 2e04 	mla	lr, lr, r4, r2
 802138c:	fa1f fe8e 	uxth.w	lr, lr
 8021390:	b280      	uxth	r0, r0
 8021392:	f10e 0201 	add.w	r2, lr, #1
 8021396:	1c6b      	adds	r3, r5, #1
 8021398:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802139c:	1c42      	adds	r2, r0, #1
 802139e:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80213a2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80213a6:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80213aa:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80213ae:	0952      	lsrs	r2, r2, #5
 80213b0:	ea43 030e 	orr.w	r3, r3, lr
 80213b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80213b8:	4313      	orrs	r3, r2
 80213ba:	800b      	strh	r3, [r1, #0]
 80213bc:	b005      	add	sp, #20
 80213be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213c2:	bf00      	nop
 80213c4:	080288e7 	.word	0x080288e7
 80213c8:	08028e45 	.word	0x08028e45
 80213cc:	0802896f 	.word	0x0802896f

080213d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80213d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213d4:	ed2d 8b08 	vpush	{d8-d11}
 80213d8:	b099      	sub	sp, #100	; 0x64
 80213da:	eeb0 aa40 	vmov.f32	s20, s0
 80213de:	9306      	str	r3, [sp, #24]
 80213e0:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 80213e4:	9307      	str	r3, [sp, #28]
 80213e6:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 80213ea:	9216      	str	r2, [sp, #88]	; 0x58
 80213ec:	9310      	str	r3, [sp, #64]	; 0x40
 80213ee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80213f0:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 80213f4:	9113      	str	r1, [sp, #76]	; 0x4c
 80213f6:	9315      	str	r3, [sp, #84]	; 0x54
 80213f8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80213fc:	9017      	str	r0, [sp, #92]	; 0x5c
 80213fe:	6850      	ldr	r0, [r2, #4]
 8021400:	6812      	ldr	r2, [r2, #0]
 8021402:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021404:	fb00 1303 	mla	r3, r0, r3, r1
 8021408:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802140c:	930a      	str	r3, [sp, #40]	; 0x28
 802140e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021410:	681b      	ldr	r3, [r3, #0]
 8021412:	9312      	str	r3, [sp, #72]	; 0x48
 8021414:	9b07      	ldr	r3, [sp, #28]
 8021416:	009b      	lsls	r3, r3, #2
 8021418:	eef0 9a60 	vmov.f32	s19, s1
 802141c:	eeb0 9a41 	vmov.f32	s18, s2
 8021420:	eeb0 8a62 	vmov.f32	s16, s5
 8021424:	eef0 8a43 	vmov.f32	s17, s6
 8021428:	eef0 ba44 	vmov.f32	s23, s8
 802142c:	eeb0 ba64 	vmov.f32	s22, s9
 8021430:	eef0 aa45 	vmov.f32	s21, s10
 8021434:	930e      	str	r3, [sp, #56]	; 0x38
 8021436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021438:	2b00      	cmp	r3, #0
 802143a:	dc03      	bgt.n	8021444 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 802143c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802143e:	2b00      	cmp	r3, #0
 8021440:	f340 8352 	ble.w	8021ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 8021444:	9b06      	ldr	r3, [sp, #24]
 8021446:	2b00      	cmp	r3, #0
 8021448:	f340 81a8 	ble.w	802179c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 802144c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802144e:	1412      	asrs	r2, r2, #16
 8021450:	ea4f 4324 	mov.w	r3, r4, asr #16
 8021454:	d430      	bmi.n	80214b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8021456:	9807      	ldr	r0, [sp, #28]
 8021458:	1c51      	adds	r1, r2, #1
 802145a:	4288      	cmp	r0, r1
 802145c:	dd2f      	ble.n	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802145e:	2b00      	cmp	r3, #0
 8021460:	db2d      	blt.n	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8021462:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021464:	1c59      	adds	r1, r3, #1
 8021466:	4288      	cmp	r0, r1
 8021468:	dd29      	ble.n	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802146a:	9b06      	ldr	r3, [sp, #24]
 802146c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802146e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8021470:	3b01      	subs	r3, #1
 8021472:	fb02 1203 	mla	r2, r2, r3, r1
 8021476:	1412      	asrs	r2, r2, #16
 8021478:	d42c      	bmi.n	80214d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802147a:	9907      	ldr	r1, [sp, #28]
 802147c:	3201      	adds	r2, #1
 802147e:	4291      	cmp	r1, r2
 8021480:	dd28      	ble.n	80214d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021482:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021484:	fb02 4303 	mla	r3, r2, r3, r4
 8021488:	141b      	asrs	r3, r3, #16
 802148a:	d423      	bmi.n	80214d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802148c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802148e:	3301      	adds	r3, #1
 8021490:	429a      	cmp	r2, r3
 8021492:	dd1f      	ble.n	80214d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021494:	9b06      	ldr	r3, [sp, #24]
 8021496:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802149a:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 802149e:	9311      	str	r3, [sp, #68]	; 0x44
 80214a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80214a2:	2b00      	cmp	r3, #0
 80214a4:	f300 81e3 	bgt.w	802186e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 80214a8:	9b06      	ldr	r3, [sp, #24]
 80214aa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80214ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214b0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80214b4:	930a      	str	r3, [sp, #40]	; 0x28
 80214b6:	e173      	b.n	80217a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80214b8:	1c51      	adds	r1, r2, #1
 80214ba:	f040 8162 	bne.w	8021782 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 80214be:	9907      	ldr	r1, [sp, #28]
 80214c0:	428a      	cmp	r2, r1
 80214c2:	f280 815e 	bge.w	8021782 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 80214c6:	1c5f      	adds	r7, r3, #1
 80214c8:	f2c0 815b 	blt.w	8021782 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 80214cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214ce:	4293      	cmp	r3, r2
 80214d0:	f280 8157 	bge.w	8021782 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 80214d4:	9b06      	ldr	r3, [sp, #24]
 80214d6:	9314      	str	r3, [sp, #80]	; 0x50
 80214d8:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 80214dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214de:	9311      	str	r3, [sp, #68]	; 0x44
 80214e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	dde0      	ble.n	80214a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80214e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80214e8:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80214ec:	1412      	asrs	r2, r2, #16
 80214ee:	ea4f 4324 	mov.w	r3, r4, asr #16
 80214f2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80214f6:	f100 81a1 	bmi.w	802183c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 80214fa:	9e07      	ldr	r6, [sp, #28]
 80214fc:	1c55      	adds	r5, r2, #1
 80214fe:	42ae      	cmp	r6, r5
 8021500:	f340 819e 	ble.w	8021840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8021504:	2b00      	cmp	r3, #0
 8021506:	f2c0 819b 	blt.w	8021840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 802150a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802150c:	1c5d      	adds	r5, r3, #1
 802150e:	42ae      	cmp	r6, r5
 8021510:	f340 8196 	ble.w	8021840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8021514:	9d07      	ldr	r5, [sp, #28]
 8021516:	fb03 2305 	mla	r3, r3, r5, r2
 802151a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802151c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021524:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021528:	2800      	cmp	r0, #0
 802152a:	f000 8178 	beq.w	802181e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 802152e:	686a      	ldr	r2, [r5, #4]
 8021530:	920b      	str	r2, [sp, #44]	; 0x2c
 8021532:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021536:	2900      	cmp	r1, #0
 8021538:	f000 817a 	beq.w	8021830 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 802153c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802153e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8021540:	18aa      	adds	r2, r5, r2
 8021542:	59ad      	ldr	r5, [r5, r6]
 8021544:	6852      	ldr	r2, [r2, #4]
 8021546:	9508      	str	r5, [sp, #32]
 8021548:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802154c:	920c      	str	r2, [sp, #48]	; 0x30
 802154e:	0e15      	lsrs	r5, r2, #24
 8021550:	b280      	uxth	r0, r0
 8021552:	b289      	uxth	r1, r1
 8021554:	fb00 fb01 	mul.w	fp, r0, r1
 8021558:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802155c:	0100      	lsls	r0, r0, #4
 802155e:	eba0 090b 	sub.w	r9, r0, fp
 8021562:	b289      	uxth	r1, r1
 8021564:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8021568:	fa1f f989 	uxth.w	r9, r9
 802156c:	1a52      	subs	r2, r2, r1
 802156e:	b292      	uxth	r2, r2
 8021570:	fb09 f008 	mul.w	r0, r9, r8
 8021574:	fb02 000c 	mla	r0, r2, ip, r0
 8021578:	fb01 000a 	mla	r0, r1, sl, r0
 802157c:	fb0b 0005 	mla	r0, fp, r5, r0
 8021580:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021584:	2800      	cmp	r0, #0
 8021586:	f000 80ef 	beq.w	8021768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802158a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802158e:	d01b      	beq.n	80215c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 8021590:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021594:	fb0c fe0e 	mul.w	lr, ip, lr
 8021598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802159c:	fb0c fc03 	mul.w	ip, ip, r3
 80215a0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80215a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215a8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80215ac:	4473      	add	r3, lr
 80215ae:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80215b2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80215b6:	0a1b      	lsrs	r3, r3, #8
 80215b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215c0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80215c4:	ea43 030e 	orr.w	r3, r3, lr
 80215c8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80215cc:	d01e      	beq.n	802160c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80215ce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80215d0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80215d4:	fb08 fc0c 	mul.w	ip, r8, ip
 80215d8:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 80215dc:	fb08 f80e 	mul.w	r8, r8, lr
 80215e0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80215e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215e8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80215ec:	44e6      	add	lr, ip
 80215ee:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80215f2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80215f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215fa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80215fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021602:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021606:	ea4e 0608 	orr.w	r6, lr, r8
 802160a:	960b      	str	r6, [sp, #44]	; 0x2c
 802160c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021610:	d01e      	beq.n	8021650 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8021612:	9e08      	ldr	r6, [sp, #32]
 8021614:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021618:	fb0a f808 	mul.w	r8, sl, r8
 802161c:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8021620:	fb0a fa0c 	mul.w	sl, sl, ip
 8021624:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021628:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802162c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021630:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021634:	44c6      	add	lr, r8
 8021636:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802163a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802163e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021642:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021646:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802164a:	ea4e 060a 	orr.w	r6, lr, sl
 802164e:	9608      	str	r6, [sp, #32]
 8021650:	2dff      	cmp	r5, #255	; 0xff
 8021652:	d01d      	beq.n	8021690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 8021654:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021656:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802165a:	fb05 f808 	mul.w	r8, r5, r8
 802165e:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8021662:	fb05 f50c 	mul.w	r5, r5, ip
 8021666:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802166a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802166e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021672:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021676:	44c6      	add	lr, r8
 8021678:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802167c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021680:	0a2d      	lsrs	r5, r5, #8
 8021682:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021686:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802168a:	ea4e 0505 	orr.w	r5, lr, r5
 802168e:	950c      	str	r5, [sp, #48]	; 0x30
 8021690:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021692:	9e08      	ldr	r6, [sp, #32]
 8021694:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021698:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802169c:	fb09 f505 	mul.w	r5, r9, r5
 80216a0:	fb02 550c 	mla	r5, r2, ip, r5
 80216a4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80216a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80216aa:	fb01 550c 	mla	r5, r1, ip, r5
 80216ae:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80216b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80216b4:	fb0b 550c 	mla	r5, fp, ip, r5
 80216b8:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 80216bc:	fb09 f90c 	mul.w	r9, r9, ip
 80216c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216c4:	fb02 9303 	mla	r3, r2, r3, r9
 80216c8:	9a08      	ldr	r2, [sp, #32]
 80216ca:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80216ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216d0:	fb01 330e 	mla	r3, r1, lr, r3
 80216d4:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80216d8:	fb0b 3b01 	mla	fp, fp, r1, r3
 80216dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80216de:	0a2d      	lsrs	r5, r5, #8
 80216e0:	f8b3 c000 	ldrh.w	ip, [r3]
 80216e4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80216e8:	fb00 f307 	mul.w	r3, r0, r7
 80216ec:	1c58      	adds	r0, r3, #1
 80216ee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80216f2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80216f6:	ea45 050b 	orr.w	r5, r5, fp
 80216fa:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80216fe:	0c29      	lsrs	r1, r5, #16
 8021700:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021704:	ea4f 232c 	mov.w	r3, ip, asr #8
 8021708:	b2c0      	uxtb	r0, r0
 802170a:	fb11 f107 	smulbb	r1, r1, r7
 802170e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021712:	fb03 1300 	mla	r3, r3, r0, r1
 8021716:	b299      	uxth	r1, r3
 8021718:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802171c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021720:	fb13 f307 	smulbb	r3, r3, r7
 8021724:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021728:	fb02 3200 	mla	r2, r2, r0, r3
 802172c:	b2ed      	uxtb	r5, r5
 802172e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8021732:	b2db      	uxtb	r3, r3
 8021734:	fb15 f507 	smulbb	r5, r5, r7
 8021738:	fb03 5500 	mla	r5, r3, r0, r5
 802173c:	b292      	uxth	r2, r2
 802173e:	b2ad      	uxth	r5, r5
 8021740:	1c4b      	adds	r3, r1, #1
 8021742:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021746:	1c68      	adds	r0, r5, #1
 8021748:	1c51      	adds	r1, r2, #1
 802174a:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802174e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021752:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021756:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802175a:	0952      	lsrs	r2, r2, #5
 802175c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021760:	432b      	orrs	r3, r5
 8021762:	4313      	orrs	r3, r2
 8021764:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021766:	8013      	strh	r3, [r2, #0]
 8021768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802176a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802176c:	3302      	adds	r3, #2
 802176e:	9311      	str	r3, [sp, #68]	; 0x44
 8021770:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021772:	4413      	add	r3, r2
 8021774:	932b      	str	r3, [sp, #172]	; 0xac
 8021776:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021778:	441c      	add	r4, r3
 802177a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802177c:	3b01      	subs	r3, #1
 802177e:	9314      	str	r3, [sp, #80]	; 0x50
 8021780:	e6ae      	b.n	80214e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021782:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021784:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021786:	4413      	add	r3, r2
 8021788:	932b      	str	r3, [sp, #172]	; 0xac
 802178a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802178c:	441c      	add	r4, r3
 802178e:	9b06      	ldr	r3, [sp, #24]
 8021790:	3b01      	subs	r3, #1
 8021792:	9306      	str	r3, [sp, #24]
 8021794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021796:	3302      	adds	r3, #2
 8021798:	930a      	str	r3, [sp, #40]	; 0x28
 802179a:	e653      	b.n	8021444 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 802179c:	f47f ae65 	bne.w	802146a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80217a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	f340 81a0 	ble.w	8021ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 80217a8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80217ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80217b0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80217b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217b6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80217ba:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80217be:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80217c2:	eef0 6a48 	vmov.f32	s13, s16
 80217c6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80217ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217ce:	ee37 8a48 	vsub.f32	s16, s14, s16
 80217d2:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80217d6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80217da:	eef0 6a68 	vmov.f32	s13, s17
 80217de:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80217e2:	ee18 2a10 	vmov	r2, s16
 80217e6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80217ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80217ee:	ee18 2a90 	vmov	r2, s17
 80217f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80217f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80217fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80217fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80217fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021800:	3b01      	subs	r3, #1
 8021802:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021806:	9313      	str	r3, [sp, #76]	; 0x4c
 8021808:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802180a:	bf08      	it	eq
 802180c:	4613      	moveq	r3, r2
 802180e:	ee16 4a90 	vmov	r4, s13
 8021812:	9306      	str	r3, [sp, #24]
 8021814:	eef0 8a67 	vmov.f32	s17, s15
 8021818:	eeb0 8a47 	vmov.f32	s16, s14
 802181c:	e60b      	b.n	8021436 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 802181e:	b151      	cbz	r1, 8021836 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021822:	58aa      	ldr	r2, [r5, r2]
 8021824:	9208      	str	r2, [sp, #32]
 8021826:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802182a:	25ff      	movs	r5, #255	; 0xff
 802182c:	46a8      	mov	r8, r5
 802182e:	e68f      	b.n	8021550 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 8021830:	25ff      	movs	r5, #255	; 0xff
 8021832:	46aa      	mov	sl, r5
 8021834:	e68c      	b.n	8021550 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 8021836:	25ff      	movs	r5, #255	; 0xff
 8021838:	46aa      	mov	sl, r5
 802183a:	e7f7      	b.n	802182c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 802183c:	1c56      	adds	r6, r2, #1
 802183e:	d193      	bne.n	8021768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 8021840:	9d07      	ldr	r5, [sp, #28]
 8021842:	4295      	cmp	r5, r2
 8021844:	dd90      	ble.n	8021768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 8021846:	1c5d      	adds	r5, r3, #1
 8021848:	db8e      	blt.n	8021768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802184a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802184c:	429d      	cmp	r5, r3
 802184e:	dd8b      	ble.n	8021768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 8021850:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021852:	9201      	str	r2, [sp, #4]
 8021854:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8021858:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802185a:	9300      	str	r3, [sp, #0]
 802185c:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8021860:	9b07      	ldr	r3, [sp, #28]
 8021862:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021864:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 8021868:	f7ff fc4e 	bl	8021108 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802186c:	e77c      	b.n	8021768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 802186e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021870:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021872:	9d07      	ldr	r5, [sp, #28]
 8021874:	1412      	asrs	r2, r2, #16
 8021876:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802187a:	1423      	asrs	r3, r4, #16
 802187c:	fb05 2303 	mla	r3, r5, r3, r2
 8021880:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021882:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802188a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802188e:	0e1e      	lsrs	r6, r3, #24
 8021890:	2900      	cmp	r1, #0
 8021892:	f000 811a 	beq.w	8021aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 8021896:	686a      	ldr	r2, [r5, #4]
 8021898:	920d      	str	r2, [sp, #52]	; 0x34
 802189a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802189e:	2800      	cmp	r0, #0
 80218a0:	f000 811c 	beq.w	8021adc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 80218a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80218a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80218a8:	18aa      	adds	r2, r5, r2
 80218aa:	59ed      	ldr	r5, [r5, r7]
 80218ac:	6852      	ldr	r2, [r2, #4]
 80218ae:	9509      	str	r5, [sp, #36]	; 0x24
 80218b0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80218b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80218b6:	0e15      	lsrs	r5, r2, #24
 80218b8:	b289      	uxth	r1, r1
 80218ba:	b280      	uxth	r0, r0
 80218bc:	fb01 f900 	mul.w	r9, r1, r0
 80218c0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80218c4:	0109      	lsls	r1, r1, #4
 80218c6:	eba1 0e09 	sub.w	lr, r1, r9
 80218ca:	b280      	uxth	r0, r0
 80218cc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80218d0:	fa1f fe8e 	uxth.w	lr, lr
 80218d4:	1a12      	subs	r2, r2, r0
 80218d6:	b292      	uxth	r2, r2
 80218d8:	fb0e f10c 	mul.w	r1, lr, ip
 80218dc:	fb02 1106 	mla	r1, r2, r6, r1
 80218e0:	fb00 1108 	mla	r1, r0, r8, r1
 80218e4:	fb09 1105 	mla	r1, r9, r5, r1
 80218e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80218ec:	2900      	cmp	r1, #0
 80218ee:	f000 80e0 	beq.w	8021ab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 80218f2:	2eff      	cmp	r6, #255	; 0xff
 80218f4:	d016      	beq.n	8021924 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 80218f6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80218fa:	4377      	muls	r7, r6
 80218fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021900:	435e      	muls	r6, r3
 8021902:	0a3b      	lsrs	r3, r7, #8
 8021904:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021908:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802190c:	443b      	add	r3, r7
 802190e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021912:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021916:	0a1b      	lsrs	r3, r3, #8
 8021918:	0a3f      	lsrs	r7, r7, #8
 802191a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802191e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021922:	433b      	orrs	r3, r7
 8021924:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021928:	d01d      	beq.n	8021966 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 802192a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802192c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802192e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021932:	fb0c f606 	mul.w	r6, ip, r6
 8021936:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802193a:	fb0c fc07 	mul.w	ip, ip, r7
 802193e:	0a37      	lsrs	r7, r6, #8
 8021940:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021944:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021948:	4437      	add	r7, r6
 802194a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802194e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021952:	0a3f      	lsrs	r7, r7, #8
 8021954:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021958:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802195c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021960:	ea47 060c 	orr.w	r6, r7, ip
 8021964:	960d      	str	r6, [sp, #52]	; 0x34
 8021966:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802196a:	d01d      	beq.n	80219a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 802196c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802196e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021972:	fb08 fc0c 	mul.w	ip, r8, ip
 8021976:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802197a:	fb08 f806 	mul.w	r8, r8, r6
 802197e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021982:	f508 7680 	add.w	r6, r8, #256	; 0x100
 8021986:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802198a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802198e:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 8021992:	4467      	add	r7, ip
 8021994:	0a3f      	lsrs	r7, r7, #8
 8021996:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802199a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802199e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80219a2:	ea47 0608 	orr.w	r6, r7, r8
 80219a6:	9609      	str	r6, [sp, #36]	; 0x24
 80219a8:	2dff      	cmp	r5, #255	; 0xff
 80219aa:	d01a      	beq.n	80219e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 80219ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80219ae:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80219b2:	fb05 fc0c 	mul.w	ip, r5, ip
 80219b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80219ba:	4375      	muls	r5, r6
 80219bc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80219c0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219c4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80219c8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80219cc:	4467      	add	r7, ip
 80219ce:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80219d2:	0a3f      	lsrs	r7, r7, #8
 80219d4:	0a2d      	lsrs	r5, r5, #8
 80219d6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219da:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80219de:	433d      	orrs	r5, r7
 80219e0:	950f      	str	r5, [sp, #60]	; 0x3c
 80219e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80219e4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80219e8:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80219ec:	fb0e f505 	mul.w	r5, lr, r5
 80219f0:	fb02 5506 	mla	r5, r2, r6, r5
 80219f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80219f6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80219fa:	fb00 5506 	mla	r5, r0, r6, r5
 80219fe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021a00:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a04:	fb09 5506 	mla	r5, r9, r6, r5
 8021a08:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021a0a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a0e:	fb0e fe06 	mul.w	lr, lr, r6
 8021a12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a16:	fb02 e303 	mla	r3, r2, r3, lr
 8021a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a1c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021a22:	fb00 3307 	mla	r3, r0, r7, r3
 8021a26:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021a2a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021a2e:	fb01 f10b 	mul.w	r1, r1, fp
 8021a32:	0a2d      	lsrs	r5, r5, #8
 8021a34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a38:	f8ba 0000 	ldrh.w	r0, [sl]
 8021a3c:	1c4b      	adds	r3, r1, #1
 8021a3e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a46:	ea45 050c 	orr.w	r5, r5, ip
 8021a4a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021a4e:	1202      	asrs	r2, r0, #8
 8021a50:	0c2b      	lsrs	r3, r5, #16
 8021a52:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021a56:	b2c9      	uxtb	r1, r1
 8021a58:	fb13 f30b 	smulbb	r3, r3, fp
 8021a5c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021a60:	fb02 3201 	mla	r2, r2, r1, r3
 8021a64:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8021a68:	10c3      	asrs	r3, r0, #3
 8021a6a:	b2ed      	uxtb	r5, r5
 8021a6c:	00c0      	lsls	r0, r0, #3
 8021a6e:	b2c0      	uxtb	r0, r0
 8021a70:	fb15 f50b 	smulbb	r5, r5, fp
 8021a74:	fb00 5001 	mla	r0, r0, r1, r5
 8021a78:	b292      	uxth	r2, r2
 8021a7a:	fb16 f60b 	smulbb	r6, r6, fp
 8021a7e:	b280      	uxth	r0, r0
 8021a80:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021a84:	fb03 6301 	mla	r3, r3, r1, r6
 8021a88:	1c51      	adds	r1, r2, #1
 8021a8a:	1c46      	adds	r6, r0, #1
 8021a8c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021a90:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8021a94:	b29b      	uxth	r3, r3
 8021a96:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021a9a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021a9e:	4332      	orrs	r2, r6
 8021aa0:	1c5e      	adds	r6, r3, #1
 8021aa2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021aa6:	095b      	lsrs	r3, r3, #5
 8021aa8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021aac:	431a      	orrs	r2, r3
 8021aae:	f8aa 2000 	strh.w	r2, [sl]
 8021ab2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021ab4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021ab6:	4413      	add	r3, r2
 8021ab8:	932b      	str	r3, [sp, #172]	; 0xac
 8021aba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021abc:	441c      	add	r4, r3
 8021abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021ac0:	3b01      	subs	r3, #1
 8021ac2:	f10a 0a02 	add.w	sl, sl, #2
 8021ac6:	9311      	str	r3, [sp, #68]	; 0x44
 8021ac8:	e4ea      	b.n	80214a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8021aca:	b150      	cbz	r0, 8021ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 8021acc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021ace:	58aa      	ldr	r2, [r5, r2]
 8021ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8021ad2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021ad6:	25ff      	movs	r5, #255	; 0xff
 8021ad8:	46ac      	mov	ip, r5
 8021ada:	e6ed      	b.n	80218b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 8021adc:	25ff      	movs	r5, #255	; 0xff
 8021ade:	46a8      	mov	r8, r5
 8021ae0:	e6ea      	b.n	80218b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 8021ae2:	25ff      	movs	r5, #255	; 0xff
 8021ae4:	46a8      	mov	r8, r5
 8021ae6:	e7f7      	b.n	8021ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 8021ae8:	b019      	add	sp, #100	; 0x64
 8021aea:	ecbd 8b08 	vpop	{d8-d11}
 8021aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021af4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8021af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021af8:	8808      	ldrh	r0, [r1, #0]
 8021afa:	b085      	sub	sp, #20
 8021afc:	1206      	asrs	r6, r0, #8
 8021afe:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021b02:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021b06:	9600      	str	r6, [sp, #0]
 8021b08:	10c6      	asrs	r6, r0, #3
 8021b0a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021b0e:	9601      	str	r6, [sp, #4]
 8021b10:	00c0      	lsls	r0, r0, #3
 8021b12:	fb04 c603 	mla	r6, r4, r3, ip
 8021b16:	b2c0      	uxtb	r0, r0
 8021b18:	4691      	mov	r9, r2
 8021b1a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021b1e:	9a00      	ldr	r2, [sp, #0]
 8021b20:	9002      	str	r0, [sp, #8]
 8021b22:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021b26:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021b2a:	9a01      	ldr	r2, [sp, #4]
 8021b2c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021b30:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021b34:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021b38:	2c00      	cmp	r4, #0
 8021b3a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021b3e:	db3a      	blt.n	8021bb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 8021b40:	45a0      	cmp	r8, r4
 8021b42:	dd38      	ble.n	8021bb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 8021b44:	f1bc 0f00 	cmp.w	ip, #0
 8021b48:	db33      	blt.n	8021bb2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 8021b4a:	4563      	cmp	r3, ip
 8021b4c:	dd31      	ble.n	8021bb2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 8021b4e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021b52:	f11c 0601 	adds.w	r6, ip, #1
 8021b56:	d431      	bmi.n	8021bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 8021b58:	42b3      	cmp	r3, r6
 8021b5a:	dd2f      	ble.n	8021bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 8021b5c:	b375      	cbz	r5, 8021bbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 8021b5e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021b62:	3401      	adds	r4, #1
 8021b64:	d42e      	bmi.n	8021bc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8021b66:	45a0      	cmp	r8, r4
 8021b68:	dd2c      	ble.n	8021bc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8021b6a:	b35f      	cbz	r7, 8021bc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8021b6c:	f1bc 0f00 	cmp.w	ip, #0
 8021b70:	db26      	blt.n	8021bc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8021b72:	4563      	cmp	r3, ip
 8021b74:	dd24      	ble.n	8021bc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8021b76:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021b7a:	f11c 0c01 	adds.w	ip, ip, #1
 8021b7e:	d405      	bmi.n	8021b8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 8021b80:	4563      	cmp	r3, ip
 8021b82:	dd03      	ble.n	8021b8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 8021b84:	b115      	cbz	r5, 8021b8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 8021b86:	3301      	adds	r3, #1
 8021b88:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021b8c:	2d0f      	cmp	r5, #15
 8021b8e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021b92:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021b96:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021b9a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021b9e:	d801      	bhi.n	8021ba4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 8021ba0:	2f0f      	cmp	r7, #15
 8021ba2:	d911      	bls.n	8021bc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 8021ba4:	4b7b      	ldr	r3, [pc, #492]	; (8021d94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8021ba6:	4a7c      	ldr	r2, [pc, #496]	; (8021d98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8021ba8:	487c      	ldr	r0, [pc, #496]	; (8021d9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 8021baa:	f240 3173 	movw	r1, #883	; 0x373
 8021bae:	f001 fce7 	bl	8023580 <__assert_func>
 8021bb2:	4602      	mov	r2, r0
 8021bb4:	e7cd      	b.n	8021b52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8021bb6:	4606      	mov	r6, r0
 8021bb8:	4602      	mov	r2, r0
 8021bba:	e7d2      	b.n	8021b62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 8021bbc:	4606      	mov	r6, r0
 8021bbe:	e7d0      	b.n	8021b62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 8021bc0:	4604      	mov	r4, r0
 8021bc2:	e7da      	b.n	8021b7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 8021bc4:	4604      	mov	r4, r0
 8021bc6:	e7e1      	b.n	8021b8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 8021bc8:	b2ab      	uxth	r3, r5
 8021bca:	b2bf      	uxth	r7, r7
 8021bcc:	fb03 fe07 	mul.w	lr, r3, r7
 8021bd0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021bd4:	011b      	lsls	r3, r3, #4
 8021bd6:	eba3 0c0e 	sub.w	ip, r3, lr
 8021bda:	b2bf      	uxth	r7, r7
 8021bdc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021be0:	fa1f fc8c 	uxth.w	ip, ip
 8021be4:	1bed      	subs	r5, r5, r7
 8021be6:	b2ad      	uxth	r5, r5
 8021be8:	fb0c f30a 	mul.w	r3, ip, sl
 8021bec:	fb05 330b 	mla	r3, r5, fp, r3
 8021bf0:	fb07 3309 	mla	r3, r7, r9, r3
 8021bf4:	fb0e 3308 	mla	r3, lr, r8, r3
 8021bf8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021bfc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021c00:	9303      	str	r3, [sp, #12]
 8021c02:	d018      	beq.n	8021c36 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 8021c04:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021c08:	fb0b f303 	mul.w	r3, fp, r3
 8021c0c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021c10:	fb0b fb02 	mul.w	fp, fp, r2
 8021c14:	0a1a      	lsrs	r2, r3, #8
 8021c16:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c1a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021c1e:	441a      	add	r2, r3
 8021c20:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021c24:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021c28:	0a12      	lsrs	r2, r2, #8
 8021c2a:	0a1b      	lsrs	r3, r3, #8
 8021c2c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c34:	431a      	orrs	r2, r3
 8021c36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021c3a:	d019      	beq.n	8021c70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 8021c3c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021c40:	fb0a fb0b 	mul.w	fp, sl, fp
 8021c44:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c48:	fb0a fa06 	mul.w	sl, sl, r6
 8021c4c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021c50:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c54:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021c58:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021c5c:	445e      	add	r6, fp
 8021c5e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021c62:	0a36      	lsrs	r6, r6, #8
 8021c64:	0a1b      	lsrs	r3, r3, #8
 8021c66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c6e:	431e      	orrs	r6, r3
 8021c70:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021c74:	d019      	beq.n	8021caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 8021c76:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021c7a:	fb09 fa0a 	mul.w	sl, r9, sl
 8021c7e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021c82:	fb09 f904 	mul.w	r9, r9, r4
 8021c86:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021c8a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021c8e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021c92:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021c96:	4454      	add	r4, sl
 8021c98:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021c9c:	0a24      	lsrs	r4, r4, #8
 8021c9e:	0a1b      	lsrs	r3, r3, #8
 8021ca0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ca8:	431c      	orrs	r4, r3
 8021caa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021cae:	d019      	beq.n	8021ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 8021cb0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021cb4:	fb08 f909 	mul.w	r9, r8, r9
 8021cb8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021cbc:	fb08 f800 	mul.w	r8, r8, r0
 8021cc0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021cc4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021cc8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021ccc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021cd0:	4448      	add	r0, r9
 8021cd2:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021cd6:	0a00      	lsrs	r0, r0, #8
 8021cd8:	0a1b      	lsrs	r3, r3, #8
 8021cda:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021cde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ce2:	4318      	orrs	r0, r3
 8021ce4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021ce8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021cec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021cf0:	fb0c f808 	mul.w	r8, ip, r8
 8021cf4:	fb0c f606 	mul.w	r6, ip, r6
 8021cf8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021cfc:	fb05 8803 	mla	r8, r5, r3, r8
 8021d00:	fb05 6202 	mla	r2, r5, r2, r6
 8021d04:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021d08:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021d0c:	fb07 8803 	mla	r8, r7, r3, r8
 8021d10:	fb07 2704 	mla	r7, r7, r4, r2
 8021d14:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021d18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021d1c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021d20:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021d24:	0a1b      	lsrs	r3, r3, #8
 8021d26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021d2e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021d32:	ea43 0e0e 	orr.w	lr, r3, lr
 8021d36:	9b03      	ldr	r3, [sp, #12]
 8021d38:	9800      	ldr	r0, [sp, #0]
 8021d3a:	9c01      	ldr	r4, [sp, #4]
 8021d3c:	9a02      	ldr	r2, [sp, #8]
 8021d3e:	43db      	mvns	r3, r3
 8021d40:	b2db      	uxtb	r3, r3
 8021d42:	4358      	muls	r0, r3
 8021d44:	435c      	muls	r4, r3
 8021d46:	435a      	muls	r2, r3
 8021d48:	1c43      	adds	r3, r0, #1
 8021d4a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8021d52:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021d56:	4b12      	ldr	r3, [pc, #72]	; (8021da0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 8021d58:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 8021d5c:	1c50      	adds	r0, r2, #1
 8021d5e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021d62:	fa5f f28e 	uxtb.w	r2, lr
 8021d66:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021d6a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021d6e:	1c62      	adds	r2, r4, #1
 8021d70:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021d74:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021d78:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8021d7c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021d80:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021d84:	ea43 0e0e 	orr.w	lr, r3, lr
 8021d88:	f8a1 e000 	strh.w	lr, [r1]
 8021d8c:	b005      	add	sp, #20
 8021d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d92:	bf00      	nop
 8021d94:	080288e7 	.word	0x080288e7
 8021d98:	08028e45 	.word	0x08028e45
 8021d9c:	0802896f 	.word	0x0802896f
 8021da0:	fffff800 	.word	0xfffff800

08021da4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021da8:	ed2d 8b08 	vpush	{d8-d11}
 8021dac:	b097      	sub	sp, #92	; 0x5c
 8021dae:	eeb0 aa40 	vmov.f32	s20, s0
 8021db2:	9306      	str	r3, [sp, #24]
 8021db4:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8021db8:	9307      	str	r3, [sp, #28]
 8021dba:	9214      	str	r2, [sp, #80]	; 0x50
 8021dbc:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021dc0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021dc2:	9112      	str	r1, [sp, #72]	; 0x48
 8021dc4:	9310      	str	r3, [sp, #64]	; 0x40
 8021dc6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021dca:	9015      	str	r0, [sp, #84]	; 0x54
 8021dcc:	6850      	ldr	r0, [r2, #4]
 8021dce:	6812      	ldr	r2, [r2, #0]
 8021dd0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8021dd2:	fb00 1303 	mla	r3, r0, r3, r1
 8021dd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021dda:	930a      	str	r3, [sp, #40]	; 0x28
 8021ddc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021dde:	681b      	ldr	r3, [r3, #0]
 8021de0:	9311      	str	r3, [sp, #68]	; 0x44
 8021de2:	9b07      	ldr	r3, [sp, #28]
 8021de4:	009b      	lsls	r3, r3, #2
 8021de6:	eef0 9a60 	vmov.f32	s19, s1
 8021dea:	eeb0 9a41 	vmov.f32	s18, s2
 8021dee:	eeb0 8a62 	vmov.f32	s16, s5
 8021df2:	eef0 8a43 	vmov.f32	s17, s6
 8021df6:	eef0 ba44 	vmov.f32	s23, s8
 8021dfa:	eeb0 ba64 	vmov.f32	s22, s9
 8021dfe:	eef0 aa45 	vmov.f32	s21, s10
 8021e02:	930e      	str	r3, [sp, #56]	; 0x38
 8021e04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	dc03      	bgt.n	8021e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	f340 8361 	ble.w	80224d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 8021e12:	9b06      	ldr	r3, [sp, #24]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	f340 819b 	ble.w	8022150 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8021e1a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021e1c:	1412      	asrs	r2, r2, #16
 8021e1e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021e22:	d42e      	bmi.n	8021e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021e24:	9807      	ldr	r0, [sp, #28]
 8021e26:	1c51      	adds	r1, r2, #1
 8021e28:	4288      	cmp	r0, r1
 8021e2a:	dd2d      	ble.n	8021e88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	db2b      	blt.n	8021e88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021e30:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021e32:	1c59      	adds	r1, r3, #1
 8021e34:	4288      	cmp	r0, r1
 8021e36:	dd27      	ble.n	8021e88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021e38:	9b06      	ldr	r3, [sp, #24]
 8021e3a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e3c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021e3e:	3b01      	subs	r3, #1
 8021e40:	fb02 1203 	mla	r2, r2, r3, r1
 8021e44:	1412      	asrs	r2, r2, #16
 8021e46:	d42a      	bmi.n	8021e9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021e48:	9907      	ldr	r1, [sp, #28]
 8021e4a:	3201      	adds	r2, #1
 8021e4c:	4291      	cmp	r1, r2
 8021e4e:	dd26      	ble.n	8021e9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021e50:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021e52:	fb02 5303 	mla	r3, r2, r3, r5
 8021e56:	141b      	asrs	r3, r3, #16
 8021e58:	d421      	bmi.n	8021e9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021e5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e5c:	3301      	adds	r3, #1
 8021e5e:	429a      	cmp	r2, r3
 8021e60:	dd1d      	ble.n	8021e9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021e62:	9b06      	ldr	r3, [sp, #24]
 8021e64:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8021e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	f300 81e3 	bgt.w	8022238 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8021e72:	9b06      	ldr	r3, [sp, #24]
 8021e74:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e7a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8021e80:	e168      	b.n	8022154 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8021e82:	1c51      	adds	r1, r2, #1
 8021e84:	f040 8157 	bne.w	8022136 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e88:	9907      	ldr	r1, [sp, #28]
 8021e8a:	428a      	cmp	r2, r1
 8021e8c:	f280 8153 	bge.w	8022136 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e90:	1c5f      	adds	r7, r3, #1
 8021e92:	f2c0 8150 	blt.w	8022136 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e98:	4293      	cmp	r3, r2
 8021e9a:	f280 814c 	bge.w	8022136 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e9e:	9b06      	ldr	r3, [sp, #24]
 8021ea0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021ea2:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	dde3      	ble.n	8021e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8021eaa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021eac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021eae:	1409      	asrs	r1, r1, #16
 8021eb0:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021eb4:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8021eb8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021ebc:	f100 81a3 	bmi.w	8022206 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8021ec0:	9c07      	ldr	r4, [sp, #28]
 8021ec2:	1c4e      	adds	r6, r1, #1
 8021ec4:	42b4      	cmp	r4, r6
 8021ec6:	f340 81a0 	ble.w	802220a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	f2c0 819d 	blt.w	802220a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021ed0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021ed2:	1c5e      	adds	r6, r3, #1
 8021ed4:	42b4      	cmp	r4, r6
 8021ed6:	f340 8198 	ble.w	802220a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021eda:	9c07      	ldr	r4, [sp, #28]
 8021edc:	fb03 1304 	mla	r3, r3, r4, r1
 8021ee0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021ee2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021ee6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021eea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021eee:	2a00      	cmp	r2, #0
 8021ef0:	f000 816f 	beq.w	80221d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021ef4:	6871      	ldr	r1, [r6, #4]
 8021ef6:	910b      	str	r1, [sp, #44]	; 0x2c
 8021ef8:	ea4f 6811 	mov.w	r8, r1, lsr #24
 8021efc:	2800      	cmp	r0, #0
 8021efe:	f000 8171 	beq.w	80221e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8021f02:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021f04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f06:	1871      	adds	r1, r6, r1
 8021f08:	5934      	ldr	r4, [r6, r4]
 8021f0a:	6849      	ldr	r1, [r1, #4]
 8021f0c:	9408      	str	r4, [sp, #32]
 8021f0e:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8021f12:	910c      	str	r1, [sp, #48]	; 0x30
 8021f14:	0e0e      	lsrs	r6, r1, #24
 8021f16:	b292      	uxth	r2, r2
 8021f18:	b280      	uxth	r0, r0
 8021f1a:	fb02 fb00 	mul.w	fp, r2, r0
 8021f1e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8021f22:	0112      	lsls	r2, r2, #4
 8021f24:	eba2 090b 	sub.w	r9, r2, fp
 8021f28:	b280      	uxth	r0, r0
 8021f2a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021f2e:	fa1f f989 	uxth.w	r9, r9
 8021f32:	1a09      	subs	r1, r1, r0
 8021f34:	b289      	uxth	r1, r1
 8021f36:	fb09 f208 	mul.w	r2, r9, r8
 8021f3a:	fb01 220c 	mla	r2, r1, ip, r2
 8021f3e:	fb00 220a 	mla	r2, r0, sl, r2
 8021f42:	fb0b 2206 	mla	r2, fp, r6, r2
 8021f46:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021f4a:	2a00      	cmp	r2, #0
 8021f4c:	f000 80e8 	beq.w	8022120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021f50:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021f54:	d01b      	beq.n	8021f8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8021f56:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021f5a:	fb0c fe0e 	mul.w	lr, ip, lr
 8021f5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f62:	fb0c fc03 	mul.w	ip, ip, r3
 8021f66:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021f6a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f6e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021f72:	4473      	add	r3, lr
 8021f74:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021f78:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021f7c:	0a1b      	lsrs	r3, r3, #8
 8021f7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f86:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021f8a:	ea43 030e 	orr.w	r3, r3, lr
 8021f8e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021f92:	d01e      	beq.n	8021fd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 8021f94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f96:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f9a:	fb08 fc0c 	mul.w	ip, r8, ip
 8021f9e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021fa2:	fb08 f80e 	mul.w	r8, r8, lr
 8021fa6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021faa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021fb2:	44e6      	add	lr, ip
 8021fb4:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021fb8:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021fbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fc0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021fc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fc8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021fcc:	ea4e 0408 	orr.w	r4, lr, r8
 8021fd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8021fd2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021fd6:	d01e      	beq.n	8022016 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021fd8:	9c08      	ldr	r4, [sp, #32]
 8021fda:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8021fde:	fb0a f808 	mul.w	r8, sl, r8
 8021fe2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021fe6:	fb0a fa0c 	mul.w	sl, sl, ip
 8021fea:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021fee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ff2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021ff6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021ffa:	44c6      	add	lr, r8
 8021ffc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022000:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022004:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022008:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802200c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022010:	ea4e 040a 	orr.w	r4, lr, sl
 8022014:	9408      	str	r4, [sp, #32]
 8022016:	2eff      	cmp	r6, #255	; 0xff
 8022018:	d01d      	beq.n	8022056 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 802201a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802201c:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8022020:	fb06 f808 	mul.w	r8, r6, r8
 8022024:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022028:	fb06 f60c 	mul.w	r6, r6, ip
 802202c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022030:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022034:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022038:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802203c:	44c6      	add	lr, r8
 802203e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022042:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022046:	0a36      	lsrs	r6, r6, #8
 8022048:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802204c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022050:	ea4e 0406 	orr.w	r4, lr, r6
 8022054:	940c      	str	r4, [sp, #48]	; 0x30
 8022056:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022058:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 802205c:	9c08      	ldr	r4, [sp, #32]
 802205e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022062:	fb09 f606 	mul.w	r6, r9, r6
 8022066:	fb01 660c 	mla	r6, r1, ip, r6
 802206a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802206e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022070:	fb00 660c 	mla	r6, r0, ip, r6
 8022074:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022078:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802207a:	fb0b 660c 	mla	r6, fp, ip, r6
 802207e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022082:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022086:	fb09 f90c 	mul.w	r9, r9, ip
 802208a:	fb01 9303 	mla	r3, r1, r3, r9
 802208e:	9908      	ldr	r1, [sp, #32]
 8022090:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022094:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022096:	fb00 330e 	mla	r3, r0, lr, r3
 802209a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802209e:	fb0b 3b00 	mla	fp, fp, r0, r3
 80220a2:	0a36      	lsrs	r6, r6, #8
 80220a4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80220a8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80220ac:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80220b0:	ea46 060b 	orr.w	r6, r6, fp
 80220b4:	2aff      	cmp	r2, #255	; 0xff
 80220b6:	ea4f 2316 	mov.w	r3, r6, lsr #8
 80220ba:	f000 8099 	beq.w	80221f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 80220be:	8839      	ldrh	r1, [r7, #0]
 80220c0:	43d2      	mvns	r2, r2
 80220c2:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80220c6:	fa5f fe82 	uxtb.w	lr, r2
 80220ca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80220ce:	fb0c fc0e 	mul.w	ip, ip, lr
 80220d2:	10c8      	asrs	r0, r1, #3
 80220d4:	00ca      	lsls	r2, r1, #3
 80220d6:	f10c 0101 	add.w	r1, ip, #1
 80220da:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 80220de:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 80220e2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80220e6:	b2d2      	uxtb	r2, r2
 80220e8:	4952      	ldr	r1, [pc, #328]	; (8022234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 80220ea:	fb02 f20e 	mul.w	r2, r2, lr
 80220ee:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80220f2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80220f6:	1c51      	adds	r1, r2, #1
 80220f8:	fb00 f00e 	mul.w	r0, r0, lr
 80220fc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022100:	b2f6      	uxtb	r6, r6
 8022102:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022106:	1c42      	adds	r2, r0, #1
 8022108:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802210c:	b2db      	uxtb	r3, r3
 802210e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022112:	00db      	lsls	r3, r3, #3
 8022114:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 8022118:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802211c:	431e      	orrs	r6, r3
 802211e:	803e      	strh	r6, [r7, #0]
 8022120:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022122:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022124:	441a      	add	r2, r3
 8022126:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022128:	9229      	str	r2, [sp, #164]	; 0xa4
 802212a:	441d      	add	r5, r3
 802212c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802212e:	3b01      	subs	r3, #1
 8022130:	3702      	adds	r7, #2
 8022132:	9313      	str	r3, [sp, #76]	; 0x4c
 8022134:	e6b6      	b.n	8021ea4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8022136:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022138:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802213a:	441a      	add	r2, r3
 802213c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802213e:	9229      	str	r2, [sp, #164]	; 0xa4
 8022140:	441d      	add	r5, r3
 8022142:	9b06      	ldr	r3, [sp, #24]
 8022144:	3b01      	subs	r3, #1
 8022146:	9306      	str	r3, [sp, #24]
 8022148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802214a:	3302      	adds	r3, #2
 802214c:	930a      	str	r3, [sp, #40]	; 0x28
 802214e:	e660      	b.n	8021e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022150:	f47f ae72 	bne.w	8021e38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022156:	2b00      	cmp	r3, #0
 8022158:	f340 81bc 	ble.w	80224d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 802215c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022164:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022168:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802216a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802216e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022172:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022176:	eef0 6a48 	vmov.f32	s13, s16
 802217a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802217e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022182:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022186:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802218a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802218e:	eef0 6a68 	vmov.f32	s13, s17
 8022192:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022196:	ee18 2a10 	vmov	r2, s16
 802219a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802219e:	fb92 f3f3 	sdiv	r3, r2, r3
 80221a2:	ee18 2a90 	vmov	r2, s17
 80221a6:	932b      	str	r3, [sp, #172]	; 0xac
 80221a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80221ae:	932c      	str	r3, [sp, #176]	; 0xb0
 80221b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80221b4:	3b01      	subs	r3, #1
 80221b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221ba:	9312      	str	r3, [sp, #72]	; 0x48
 80221bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221be:	bf08      	it	eq
 80221c0:	4613      	moveq	r3, r2
 80221c2:	ee16 5a90 	vmov	r5, s13
 80221c6:	9306      	str	r3, [sp, #24]
 80221c8:	eef0 8a67 	vmov.f32	s17, s15
 80221cc:	eeb0 8a47 	vmov.f32	s16, s14
 80221d0:	e618      	b.n	8021e04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80221d2:	b150      	cbz	r0, 80221ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80221d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80221d6:	5871      	ldr	r1, [r6, r1]
 80221d8:	9108      	str	r1, [sp, #32]
 80221da:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80221de:	26ff      	movs	r6, #255	; 0xff
 80221e0:	46b0      	mov	r8, r6
 80221e2:	e698      	b.n	8021f16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80221e4:	26ff      	movs	r6, #255	; 0xff
 80221e6:	46b2      	mov	sl, r6
 80221e8:	e695      	b.n	8021f16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80221ea:	26ff      	movs	r6, #255	; 0xff
 80221ec:	46b2      	mov	sl, r6
 80221ee:	e7f7      	b.n	80221e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80221f0:	0972      	lsrs	r2, r6, #5
 80221f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80221f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80221fa:	f023 0307 	bic.w	r3, r3, #7
 80221fe:	4313      	orrs	r3, r2
 8022200:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022204:	e78a      	b.n	802211c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 8022206:	1c4e      	adds	r6, r1, #1
 8022208:	d18a      	bne.n	8022120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802220a:	9c07      	ldr	r4, [sp, #28]
 802220c:	428c      	cmp	r4, r1
 802220e:	dd87      	ble.n	8022120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022210:	1c5c      	adds	r4, r3, #1
 8022212:	db85      	blt.n	8022120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022214:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022216:	429c      	cmp	r4, r3
 8022218:	dd82      	ble.n	8022120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802221a:	e9cd 2003 	strd	r2, r0, [sp, #12]
 802221e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022222:	9400      	str	r4, [sp, #0]
 8022224:	9b07      	ldr	r3, [sp, #28]
 8022226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022228:	9815      	ldr	r0, [sp, #84]	; 0x54
 802222a:	4639      	mov	r1, r7
 802222c:	f7ff fc62 	bl	8021af4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8022230:	e776      	b.n	8022120 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022232:	bf00      	nop
 8022234:	fffff800 	.word	0xfffff800
 8022238:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802223a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802223c:	9c07      	ldr	r4, [sp, #28]
 802223e:	1409      	asrs	r1, r1, #16
 8022240:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022244:	142b      	asrs	r3, r5, #16
 8022246:	fb04 1303 	mla	r3, r4, r3, r1
 802224a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802224c:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022250:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022254:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022258:	0e1f      	lsrs	r7, r3, #24
 802225a:	2a00      	cmp	r2, #0
 802225c:	f000 811d 	beq.w	802249a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8022260:	6871      	ldr	r1, [r6, #4]
 8022262:	910d      	str	r1, [sp, #52]	; 0x34
 8022264:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022268:	2800      	cmp	r0, #0
 802226a:	f000 811f 	beq.w	80224ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 802226e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022270:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022272:	1871      	adds	r1, r6, r1
 8022274:	5934      	ldr	r4, [r6, r4]
 8022276:	6849      	ldr	r1, [r1, #4]
 8022278:	9409      	str	r4, [sp, #36]	; 0x24
 802227a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802227e:	910f      	str	r1, [sp, #60]	; 0x3c
 8022280:	0e0e      	lsrs	r6, r1, #24
 8022282:	b292      	uxth	r2, r2
 8022284:	b280      	uxth	r0, r0
 8022286:	fb02 fb00 	mul.w	fp, r2, r0
 802228a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802228e:	0112      	lsls	r2, r2, #4
 8022290:	eba2 080b 	sub.w	r8, r2, fp
 8022294:	b280      	uxth	r0, r0
 8022296:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802229a:	fa1f f888 	uxth.w	r8, r8
 802229e:	1a09      	subs	r1, r1, r0
 80222a0:	b289      	uxth	r1, r1
 80222a2:	fb08 f20e 	mul.w	r2, r8, lr
 80222a6:	fb01 2207 	mla	r2, r1, r7, r2
 80222aa:	fb00 2209 	mla	r2, r0, r9, r2
 80222ae:	fb0b 2206 	mla	r2, fp, r6, r2
 80222b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80222b6:	2a00      	cmp	r2, #0
 80222b8:	f000 80e3 	beq.w	8022482 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 80222bc:	2fff      	cmp	r7, #255	; 0xff
 80222be:	d01a      	beq.n	80222f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 80222c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80222c4:	fb07 fc0c 	mul.w	ip, r7, ip
 80222c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222cc:	435f      	muls	r7, r3
 80222ce:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80222d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80222da:	4463      	add	r3, ip
 80222dc:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80222e0:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80222e4:	0a1b      	lsrs	r3, r3, #8
 80222e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222ee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80222f2:	ea43 030c 	orr.w	r3, r3, ip
 80222f6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80222fa:	d01e      	beq.n	802233a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 80222fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022302:	fb0e f707 	mul.w	r7, lr, r7
 8022306:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802230a:	fb0e fe0c 	mul.w	lr, lr, ip
 802230e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022312:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022316:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802231a:	44bc      	add	ip, r7
 802231c:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022320:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022324:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022328:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802232c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022330:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022334:	ea4c 040e 	orr.w	r4, ip, lr
 8022338:	940d      	str	r4, [sp, #52]	; 0x34
 802233a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802233e:	d01e      	beq.n	802237e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8022340:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022342:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022346:	fb09 fe0e 	mul.w	lr, r9, lr
 802234a:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 802234e:	fb09 f907 	mul.w	r9, r9, r7
 8022352:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022356:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802235a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802235e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022362:	44f4      	add	ip, lr
 8022364:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022368:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802236c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022370:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022374:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022378:	ea4c 0409 	orr.w	r4, ip, r9
 802237c:	9409      	str	r4, [sp, #36]	; 0x24
 802237e:	2eff      	cmp	r6, #255	; 0xff
 8022380:	d01c      	beq.n	80223bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 8022382:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022384:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022388:	fb06 fe0e 	mul.w	lr, r6, lr
 802238c:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 8022390:	437e      	muls	r6, r7
 8022392:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022396:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802239a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802239e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80223a2:	44f4      	add	ip, lr
 80223a4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80223a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223ac:	0a36      	lsrs	r6, r6, #8
 80223ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223b2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80223b6:	ea4c 0406 	orr.w	r4, ip, r6
 80223ba:	940f      	str	r4, [sp, #60]	; 0x3c
 80223bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80223be:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 80223c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80223c4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80223c8:	fb08 f606 	mul.w	r6, r8, r6
 80223cc:	fb01 6607 	mla	r6, r1, r7, r6
 80223d0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80223d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80223d6:	fb00 6607 	mla	r6, r0, r7, r6
 80223da:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80223de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80223e0:	fb0b 6607 	mla	r6, fp, r7, r6
 80223e4:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 80223e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223ec:	fb08 f807 	mul.w	r8, r8, r7
 80223f0:	fb01 8303 	mla	r3, r1, r3, r8
 80223f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80223f6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80223fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80223fc:	fb00 330c 	mla	r3, r0, ip, r3
 8022400:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022404:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8022408:	0a36      	lsrs	r6, r6, #8
 802240a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802240e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022412:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022416:	ea46 060e 	orr.w	r6, r6, lr
 802241a:	2aff      	cmp	r2, #255	; 0xff
 802241c:	ea4f 2316 	mov.w	r3, r6, lsr #8
 8022420:	d04a      	beq.n	80224b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 8022422:	f8ba 1000 	ldrh.w	r1, [sl]
 8022426:	43d2      	mvns	r2, r2
 8022428:	120f      	asrs	r7, r1, #8
 802242a:	fa5f fc82 	uxtb.w	ip, r2
 802242e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022432:	fb07 f70c 	mul.w	r7, r7, ip
 8022436:	10c8      	asrs	r0, r1, #3
 8022438:	00ca      	lsls	r2, r1, #3
 802243a:	1c79      	adds	r1, r7, #1
 802243c:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 8022440:	0c37      	lsrs	r7, r6, #16
 8022442:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8022446:	b2d2      	uxtb	r2, r2
 8022448:	4925      	ldr	r1, [pc, #148]	; (80224e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 802244a:	fb02 f20c 	mul.w	r2, r2, ip
 802244e:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 8022452:	1c51      	adds	r1, r2, #1
 8022454:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022458:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802245c:	b2f6      	uxtb	r6, r6
 802245e:	fb00 f00c 	mul.w	r0, r0, ip
 8022462:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022466:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 802246a:	1c46      	adds	r6, r0, #1
 802246c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8022470:	b2de      	uxtb	r6, r3
 8022472:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8022476:	00f6      	lsls	r6, r6, #3
 8022478:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802247c:	4337      	orrs	r7, r6
 802247e:	f8aa 7000 	strh.w	r7, [sl]
 8022482:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022484:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022486:	441a      	add	r2, r3
 8022488:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802248a:	9229      	str	r2, [sp, #164]	; 0xa4
 802248c:	441d      	add	r5, r3
 802248e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022490:	3b01      	subs	r3, #1
 8022492:	f10a 0a02 	add.w	sl, sl, #2
 8022496:	9313      	str	r3, [sp, #76]	; 0x4c
 8022498:	e4e7      	b.n	8021e6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 802249a:	b150      	cbz	r0, 80224b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 802249c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802249e:	5871      	ldr	r1, [r6, r1]
 80224a0:	9109      	str	r1, [sp, #36]	; 0x24
 80224a2:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80224a6:	26ff      	movs	r6, #255	; 0xff
 80224a8:	46b6      	mov	lr, r6
 80224aa:	e6ea      	b.n	8022282 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 80224ac:	26ff      	movs	r6, #255	; 0xff
 80224ae:	46b1      	mov	r9, r6
 80224b0:	e6e7      	b.n	8022282 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 80224b2:	26ff      	movs	r6, #255	; 0xff
 80224b4:	46b1      	mov	r9, r6
 80224b6:	e7f7      	b.n	80224a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 80224b8:	0972      	lsrs	r2, r6, #5
 80224ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80224be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80224c2:	f023 0307 	bic.w	r3, r3, #7
 80224c6:	4313      	orrs	r3, r2
 80224c8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80224cc:	431e      	orrs	r6, r3
 80224ce:	f8aa 6000 	strh.w	r6, [sl]
 80224d2:	e7d6      	b.n	8022482 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 80224d4:	b017      	add	sp, #92	; 0x5c
 80224d6:	ecbd 8b08 	vpop	{d8-d11}
 80224da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224de:	bf00      	nop
 80224e0:	fffff800 	.word	0xfffff800

080224e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80224e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80224e8:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80224ec:	2c00      	cmp	r4, #0
 80224ee:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80224f2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80224f6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80224fa:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80224fe:	fb04 ce03 	mla	lr, r4, r3, ip
 8022502:	db60      	blt.n	80225c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8022504:	45a1      	cmp	r9, r4
 8022506:	dd5e      	ble.n	80225c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8022508:	f1bc 0f00 	cmp.w	ip, #0
 802250c:	db59      	blt.n	80225c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802250e:	45e0      	cmp	r8, ip
 8022510:	dd57      	ble.n	80225c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8022512:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8022516:	f01e 0f01 	tst.w	lr, #1
 802251a:	5c16      	ldrb	r6, [r2, r0]
 802251c:	bf0c      	ite	eq
 802251e:	f006 060f 	andeq.w	r6, r6, #15
 8022522:	1136      	asrne	r6, r6, #4
 8022524:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022528:	b2f6      	uxtb	r6, r6
 802252a:	f11c 0001 	adds.w	r0, ip, #1
 802252e:	d44d      	bmi.n	80225cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8022530:	4580      	cmp	r8, r0
 8022532:	dd4b      	ble.n	80225cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8022534:	2d00      	cmp	r5, #0
 8022536:	d04b      	beq.n	80225d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8022538:	f10e 0a01 	add.w	sl, lr, #1
 802253c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8022540:	f01a 0f01 	tst.w	sl, #1
 8022544:	5c10      	ldrb	r0, [r2, r0]
 8022546:	bf0c      	ite	eq
 8022548:	f000 000f 	andeq.w	r0, r0, #15
 802254c:	1100      	asrne	r0, r0, #4
 802254e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022552:	b2c0      	uxtb	r0, r0
 8022554:	3401      	adds	r4, #1
 8022556:	d43f      	bmi.n	80225d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8022558:	45a1      	cmp	r9, r4
 802255a:	dd3d      	ble.n	80225d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802255c:	2f00      	cmp	r7, #0
 802255e:	f000 80a0 	beq.w	80226a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1be>
 8022562:	f1bc 0f00 	cmp.w	ip, #0
 8022566:	db35      	blt.n	80225d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8022568:	45e0      	cmp	r8, ip
 802256a:	dd33      	ble.n	80225d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802256c:	eb03 090e 	add.w	r9, r3, lr
 8022570:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8022574:	f019 0f01 	tst.w	r9, #1
 8022578:	5d14      	ldrb	r4, [r2, r4]
 802257a:	bf0c      	ite	eq
 802257c:	f004 040f 	andeq.w	r4, r4, #15
 8022580:	1124      	asrne	r4, r4, #4
 8022582:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022586:	b2e4      	uxtb	r4, r4
 8022588:	f11c 0c01 	adds.w	ip, ip, #1
 802258c:	d427      	bmi.n	80225de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802258e:	45e0      	cmp	r8, ip
 8022590:	dd25      	ble.n	80225de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8022592:	b335      	cbz	r5, 80225e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8022594:	3301      	adds	r3, #1
 8022596:	449e      	add	lr, r3
 8022598:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802259c:	f01e 0f01 	tst.w	lr, #1
 80225a0:	5cd2      	ldrb	r2, [r2, r3]
 80225a2:	bf0c      	ite	eq
 80225a4:	f002 020f 	andeq.w	r2, r2, #15
 80225a8:	1112      	asrne	r2, r2, #4
 80225aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80225ae:	b2d3      	uxtb	r3, r2
 80225b0:	2d0f      	cmp	r5, #15
 80225b2:	d917      	bls.n	80225e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 80225b4:	4b3d      	ldr	r3, [pc, #244]	; (80226ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80225b6:	4a3e      	ldr	r2, [pc, #248]	; (80226b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80225b8:	483e      	ldr	r0, [pc, #248]	; (80226b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 80225ba:	f240 3173 	movw	r1, #883	; 0x373
 80225be:	f000 ffdf 	bl	8023580 <__assert_func>
 80225c2:	2600      	movs	r6, #0
 80225c4:	e7b1      	b.n	802252a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 80225c6:	2000      	movs	r0, #0
 80225c8:	4606      	mov	r6, r0
 80225ca:	e7c3      	b.n	8022554 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80225cc:	2000      	movs	r0, #0
 80225ce:	e7c1      	b.n	8022554 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80225d0:	4628      	mov	r0, r5
 80225d2:	e7bf      	b.n	8022554 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80225d4:	2400      	movs	r4, #0
 80225d6:	e7d7      	b.n	8022588 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 80225d8:	2300      	movs	r3, #0
 80225da:	461c      	mov	r4, r3
 80225dc:	e7e8      	b.n	80225b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80225de:	2300      	movs	r3, #0
 80225e0:	e7e6      	b.n	80225b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80225e2:	462b      	mov	r3, r5
 80225e4:	2f0f      	cmp	r7, #15
 80225e6:	d8e5      	bhi.n	80225b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80225e8:	b2ad      	uxth	r5, r5
 80225ea:	b2bf      	uxth	r7, r7
 80225ec:	fb05 fc07 	mul.w	ip, r5, r7
 80225f0:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80225f4:	012d      	lsls	r5, r5, #4
 80225f6:	b2bf      	uxth	r7, r7
 80225f8:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80225fc:	eba5 050c 	sub.w	r5, r5, ip
 8022600:	1bd2      	subs	r2, r2, r7
 8022602:	b2ad      	uxth	r5, r5
 8022604:	b292      	uxth	r2, r2
 8022606:	4368      	muls	r0, r5
 8022608:	fb06 0002 	mla	r0, r6, r2, r0
 802260c:	fb07 0404 	mla	r4, r7, r4, r0
 8022610:	fb0c 4303 	mla	r3, ip, r3, r4
 8022614:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022618:	2b00      	cmp	r3, #0
 802261a:	d040      	beq.n	802269e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 802261c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8022620:	4a25      	ldr	r2, [pc, #148]	; (80226b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d4>)
 8022622:	4343      	muls	r3, r0
 8022624:	1c58      	adds	r0, r3, #1
 8022626:	6816      	ldr	r6, [r2, #0]
 8022628:	880a      	ldrh	r2, [r1, #0]
 802262a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802262e:	1200      	asrs	r0, r0, #8
 8022630:	b284      	uxth	r4, r0
 8022632:	1215      	asrs	r5, r2, #8
 8022634:	43c0      	mvns	r0, r0
 8022636:	b2c3      	uxtb	r3, r0
 8022638:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802263c:	1230      	asrs	r0, r6, #8
 802263e:	fb15 f503 	smulbb	r5, r5, r3
 8022642:	10d7      	asrs	r7, r2, #3
 8022644:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022648:	fb00 5004 	mla	r0, r0, r4, r5
 802264c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022650:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 8022654:	00d2      	lsls	r2, r2, #3
 8022656:	fb17 f703 	smulbb	r7, r7, r3
 802265a:	b2d2      	uxtb	r2, r2
 802265c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022660:	00f6      	lsls	r6, r6, #3
 8022662:	fb05 7504 	mla	r5, r5, r4, r7
 8022666:	fb12 f303 	smulbb	r3, r2, r3
 802266a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802266e:	fb06 3304 	mla	r3, r6, r4, r3
 8022672:	b2ad      	uxth	r5, r5
 8022674:	b29a      	uxth	r2, r3
 8022676:	b280      	uxth	r0, r0
 8022678:	1c6b      	adds	r3, r5, #1
 802267a:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802267e:	1c44      	adds	r4, r0, #1
 8022680:	095b      	lsrs	r3, r3, #5
 8022682:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022686:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802268a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802268e:	4303      	orrs	r3, r0
 8022690:	1c50      	adds	r0, r2, #1
 8022692:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022696:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802269a:	4313      	orrs	r3, r2
 802269c:	800b      	strh	r3, [r1, #0]
 802269e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226a2:	2d0f      	cmp	r5, #15
 80226a4:	d886      	bhi.n	80225b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80226a6:	463b      	mov	r3, r7
 80226a8:	463c      	mov	r4, r7
 80226aa:	e79d      	b.n	80225e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 80226ac:	080288e7 	.word	0x080288e7
 80226b0:	08028e45 	.word	0x08028e45
 80226b4:	0802896f 	.word	0x0802896f
 80226b8:	2002b090 	.word	0x2002b090

080226bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80226bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226c0:	ed2d 8b08 	vpush	{d8-d11}
 80226c4:	b099      	sub	sp, #100	; 0x64
 80226c6:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 80226ca:	9309      	str	r3, [sp, #36]	; 0x24
 80226cc:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 80226d0:	930a      	str	r3, [sp, #40]	; 0x28
 80226d2:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 80226d6:	9216      	str	r2, [sp, #88]	; 0x58
 80226d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80226da:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80226dc:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 80226e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80226e2:	9310      	str	r3, [sp, #64]	; 0x40
 80226e4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80226e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80226ea:	6850      	ldr	r0, [r2, #4]
 80226ec:	6812      	ldr	r2, [r2, #0]
 80226ee:	fb00 1303 	mla	r3, r0, r3, r1
 80226f2:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 80226f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226f8:	3301      	adds	r3, #1
 80226fa:	f023 0301 	bic.w	r3, r3, #1
 80226fe:	930c      	str	r3, [sp, #48]	; 0x30
 8022700:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022702:	681f      	ldr	r7, [r3, #0]
 8022704:	eeb0 aa40 	vmov.f32	s20, s0
 8022708:	eef0 9a60 	vmov.f32	s19, s1
 802270c:	eeb0 9a41 	vmov.f32	s18, s2
 8022710:	eeb0 8a62 	vmov.f32	s16, s5
 8022714:	eef0 8a43 	vmov.f32	s17, s6
 8022718:	eef0 ba44 	vmov.f32	s23, s8
 802271c:	eeb0 ba64 	vmov.f32	s22, s9
 8022720:	eef0 aa45 	vmov.f32	s21, s10
 8022724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022726:	2b00      	cmp	r3, #0
 8022728:	dc03      	bgt.n	8022732 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802272a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802272c:	2b00      	cmp	r3, #0
 802272e:	f340 826b 	ble.w	8022c08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 8022732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022734:	2b00      	cmp	r3, #0
 8022736:	f340 811f 	ble.w	8022978 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 802273a:	1422      	asrs	r2, r4, #16
 802273c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022740:	d42d      	bmi.n	802279e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022742:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022744:	1c51      	adds	r1, r2, #1
 8022746:	4288      	cmp	r0, r1
 8022748:	dd2c      	ble.n	80227a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802274a:	2b00      	cmp	r3, #0
 802274c:	db2a      	blt.n	80227a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802274e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022750:	1c59      	adds	r1, r3, #1
 8022752:	4288      	cmp	r0, r1
 8022754:	dd26      	ble.n	80227a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022758:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802275a:	3b01      	subs	r3, #1
 802275c:	fb02 4203 	mla	r2, r2, r3, r4
 8022760:	1412      	asrs	r2, r2, #16
 8022762:	d42a      	bmi.n	80227ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8022764:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022766:	3201      	adds	r2, #1
 8022768:	4291      	cmp	r1, r2
 802276a:	dd26      	ble.n	80227ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802276c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802276e:	fb02 6303 	mla	r3, r2, r3, r6
 8022772:	141b      	asrs	r3, r3, #16
 8022774:	d421      	bmi.n	80227ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8022776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022778:	3301      	adds	r3, #1
 802277a:	429a      	cmp	r2, r3
 802277c:	dd1d      	ble.n	80227ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 802277e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8022782:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022786:	9311      	str	r3, [sp, #68]	; 0x44
 8022788:	46d1      	mov	r9, sl
 802278a:	f1bb 0f00 	cmp.w	fp, #0
 802278e:	f300 8163 	bgt.w	8022a58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39c>
 8022792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022794:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022798:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 802279c:	e0ee      	b.n	802297c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 802279e:	1c51      	adds	r1, r2, #1
 80227a0:	f040 80e0 	bne.w	8022964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80227a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80227a6:	4291      	cmp	r1, r2
 80227a8:	f340 80dc 	ble.w	8022964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80227ac:	1c5a      	adds	r2, r3, #1
 80227ae:	f2c0 80d9 	blt.w	8022964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80227b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80227b4:	4293      	cmp	r3, r2
 80227b6:	f280 80d5 	bge.w	8022964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80227ba:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80227be:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80227c2:	9311      	str	r3, [sp, #68]	; 0x44
 80227c4:	46d0      	mov	r8, sl
 80227c6:	f1b9 0f00 	cmp.w	r9, #0
 80227ca:	dde2      	ble.n	8022792 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 80227cc:	1420      	asrs	r0, r4, #16
 80227ce:	ea4f 4326 	mov.w	r3, r6, asr #16
 80227d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80227d6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80227da:	f100 8122 	bmi.w	8022a22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 80227de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80227e0:	f100 0c01 	add.w	ip, r0, #1
 80227e4:	4565      	cmp	r5, ip
 80227e6:	f340 811e 	ble.w	8022a26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	f2c0 811b 	blt.w	8022a26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80227f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80227f2:	f103 0c01 	add.w	ip, r3, #1
 80227f6:	4565      	cmp	r5, ip
 80227f8:	f340 8115 	ble.w	8022a26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80227fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80227fe:	fb03 0305 	mla	r3, r3, r5, r0
 8022802:	0858      	lsrs	r0, r3, #1
 8022804:	07dd      	lsls	r5, r3, #31
 8022806:	5c38      	ldrb	r0, [r7, r0]
 8022808:	bf54      	ite	pl
 802280a:	f000 000f 	andpl.w	r0, r0, #15
 802280e:	1100      	asrmi	r0, r0, #4
 8022810:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022814:	b2c0      	uxtb	r0, r0
 8022816:	2a00      	cmp	r2, #0
 8022818:	f000 80ef 	beq.w	80229fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 802281c:	f103 0e01 	add.w	lr, r3, #1
 8022820:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022824:	f01e 0f01 	tst.w	lr, #1
 8022828:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802282c:	bf0c      	ite	eq
 802282e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022832:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022836:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802283a:	fa5f f58c 	uxtb.w	r5, ip
 802283e:	9512      	str	r5, [sp, #72]	; 0x48
 8022840:	b1f9      	cbz	r1, 8022882 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 8022842:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022844:	442b      	add	r3, r5
 8022846:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802284a:	07dd      	lsls	r5, r3, #31
 802284c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022850:	bf54      	ite	pl
 8022852:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022856:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802285a:	3301      	adds	r3, #1
 802285c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022860:	fa5f f58c 	uxtb.w	r5, ip
 8022864:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022868:	950d      	str	r5, [sp, #52]	; 0x34
 802286a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802286e:	07dd      	lsls	r5, r3, #31
 8022870:	bf54      	ite	pl
 8022872:	f00c 030f 	andpl.w	r3, ip, #15
 8022876:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802287a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802287e:	b2db      	uxtb	r3, r3
 8022880:	9313      	str	r3, [sp, #76]	; 0x4c
 8022882:	b292      	uxth	r2, r2
 8022884:	b289      	uxth	r1, r1
 8022886:	fb02 f301 	mul.w	r3, r2, r1
 802288a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802288e:	0112      	lsls	r2, r2, #4
 8022890:	b289      	uxth	r1, r1
 8022892:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022896:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022898:	1ad2      	subs	r2, r2, r3
 802289a:	ebac 0c01 	sub.w	ip, ip, r1
 802289e:	b292      	uxth	r2, r2
 80228a0:	436a      	muls	r2, r5
 80228a2:	fa1f fc8c 	uxth.w	ip, ip
 80228a6:	fb00 200c 	mla	r0, r0, ip, r2
 80228aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80228ac:	fb01 0102 	mla	r1, r1, r2, r0
 80228b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80228b2:	fb03 1302 	mla	r3, r3, r2, r1
 80228b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d049      	beq.n	8022952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80228be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80228c0:	4ac5      	ldr	r2, [pc, #788]	; (8022bd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 80228c2:	4dc6      	ldr	r5, [pc, #792]	; (8022bdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 80228c4:	f8d2 e000 	ldr.w	lr, [r2]
 80228c8:	f8b8 2000 	ldrh.w	r2, [r8]
 80228cc:	434b      	muls	r3, r1
 80228ce:	1c59      	adds	r1, r3, #1
 80228d0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80228d4:	121b      	asrs	r3, r3, #8
 80228d6:	b299      	uxth	r1, r3
 80228d8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80228dc:	43db      	mvns	r3, r3
 80228de:	b2db      	uxtb	r3, r3
 80228e0:	ea4f 202e 	mov.w	r0, lr, asr #8
 80228e4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80228e8:	fb1c fc03 	smulbb	ip, ip, r3
 80228ec:	ea4f 0be2 	mov.w	fp, r2, asr #3
 80228f0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80228f4:	fb00 c001 	mla	r0, r0, r1, ip
 80228f8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80228fc:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 8022900:	fb1b fb03 	smulbb	fp, fp, r3
 8022904:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022908:	00d2      	lsls	r2, r2, #3
 802290a:	fb0c bc01 	mla	ip, ip, r1, fp
 802290e:	b2d2      	uxtb	r2, r2
 8022910:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 8022914:	fb12 f303 	smulbb	r3, r2, r3
 8022918:	fa1f fc8c 	uxth.w	ip, ip
 802291c:	fa5f fe8e 	uxtb.w	lr, lr
 8022920:	b280      	uxth	r0, r0
 8022922:	fb0e 3101 	mla	r1, lr, r1, r3
 8022926:	f10c 0201 	add.w	r2, ip, #1
 802292a:	b289      	uxth	r1, r1
 802292c:	1c43      	adds	r3, r0, #1
 802292e:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8022932:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022936:	0952      	lsrs	r2, r2, #5
 8022938:	1c4b      	adds	r3, r1, #1
 802293a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802293e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022942:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022946:	4310      	orrs	r0, r2
 8022948:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802294c:	4308      	orrs	r0, r1
 802294e:	f8a8 0000 	strh.w	r0, [r8]
 8022952:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022954:	441c      	add	r4, r3
 8022956:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022958:	f108 0802 	add.w	r8, r8, #2
 802295c:	441e      	add	r6, r3
 802295e:	f109 39ff 	add.w	r9, r9, #4294967295
 8022962:	e730      	b.n	80227c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022964:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022966:	441c      	add	r4, r3
 8022968:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802296a:	441e      	add	r6, r3
 802296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802296e:	3b01      	subs	r3, #1
 8022970:	9309      	str	r3, [sp, #36]	; 0x24
 8022972:	f10a 0a02 	add.w	sl, sl, #2
 8022976:	e6dc      	b.n	8022732 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022978:	f47f aeed 	bne.w	8022756 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802297c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802297e:	2b00      	cmp	r3, #0
 8022980:	f340 8142 	ble.w	8022c08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 8022984:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802298c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022990:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022992:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022996:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802299a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802299e:	eef0 6a48 	vmov.f32	s13, s16
 80229a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80229a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229aa:	ee37 8a48 	vsub.f32	s16, s14, s16
 80229ae:	ee16 4a90 	vmov	r4, s13
 80229b2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80229b6:	eef0 6a68 	vmov.f32	s13, s17
 80229ba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80229be:	ee18 2a10 	vmov	r2, s16
 80229c2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80229c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80229ca:	ee18 2a90 	vmov	r2, s17
 80229ce:	932d      	str	r3, [sp, #180]	; 0xb4
 80229d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80229d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80229d6:	932e      	str	r3, [sp, #184]	; 0xb8
 80229d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80229da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80229dc:	3b01      	subs	r3, #1
 80229de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80229e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80229e6:	bf08      	it	eq
 80229e8:	4613      	moveq	r3, r2
 80229ea:	ee16 6a90 	vmov	r6, s13
 80229ee:	9309      	str	r3, [sp, #36]	; 0x24
 80229f0:	eef0 8a67 	vmov.f32	s17, s15
 80229f4:	eeb0 8a47 	vmov.f32	s16, s14
 80229f8:	e694      	b.n	8022724 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80229fa:	2900      	cmp	r1, #0
 80229fc:	f43f af41 	beq.w	8022882 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 8022a00:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022a02:	442b      	add	r3, r5
 8022a04:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a08:	07db      	lsls	r3, r3, #31
 8022a0a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a0e:	bf54      	ite	pl
 8022a10:	f00c 030f 	andpl.w	r3, ip, #15
 8022a14:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022a18:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022a1c:	b2db      	uxtb	r3, r3
 8022a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8022a20:	e72f      	b.n	8022882 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 8022a22:	1c45      	adds	r5, r0, #1
 8022a24:	d195      	bne.n	8022952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022a26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022a28:	4285      	cmp	r5, r0
 8022a2a:	dd92      	ble.n	8022952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022a2c:	1c5d      	adds	r5, r3, #1
 8022a2e:	db90      	blt.n	8022952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022a30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022a32:	429d      	cmp	r5, r3
 8022a34:	dd8d      	ble.n	8022952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022a36:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022a3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a3e:	9301      	str	r3, [sp, #4]
 8022a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a42:	9002      	str	r0, [sp, #8]
 8022a44:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022a48:	9300      	str	r3, [sp, #0]
 8022a4a:	463a      	mov	r2, r7
 8022a4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022a4e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022a50:	4641      	mov	r1, r8
 8022a52:	f7ff fd47 	bl	80224e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8022a56:	e77c      	b.n	8022952 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022a58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022a5a:	1422      	asrs	r2, r4, #16
 8022a5c:	1433      	asrs	r3, r6, #16
 8022a5e:	fb05 2303 	mla	r3, r5, r3, r2
 8022a62:	085a      	lsrs	r2, r3, #1
 8022a64:	07dd      	lsls	r5, r3, #31
 8022a66:	5cba      	ldrb	r2, [r7, r2]
 8022a68:	bf54      	ite	pl
 8022a6a:	f002 020f 	andpl.w	r2, r2, #15
 8022a6e:	1112      	asrmi	r2, r2, #4
 8022a70:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022a74:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022a78:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022a7c:	b2d2      	uxtb	r2, r2
 8022a7e:	2900      	cmp	r1, #0
 8022a80:	f000 80ae 	beq.w	8022be0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 8022a84:	f103 0e01 	add.w	lr, r3, #1
 8022a88:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022a8c:	f01e 0f01 	tst.w	lr, #1
 8022a90:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a94:	bf0c      	ite	eq
 8022a96:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022a9a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022a9e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022aa2:	fa5f f58c 	uxtb.w	r5, ip
 8022aa6:	9514      	str	r5, [sp, #80]	; 0x50
 8022aa8:	b300      	cbz	r0, 8022aec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 8022aaa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022aac:	442b      	add	r3, r5
 8022aae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022ab2:	07dd      	lsls	r5, r3, #31
 8022ab4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ab8:	bf54      	ite	pl
 8022aba:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022abe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022ac2:	3301      	adds	r3, #1
 8022ac4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022ac8:	fa5f f58c 	uxtb.w	r5, ip
 8022acc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022ad0:	950e      	str	r5, [sp, #56]	; 0x38
 8022ad2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ad6:	07dd      	lsls	r5, r3, #31
 8022ad8:	bf54      	ite	pl
 8022ada:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ade:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022ae2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022ae6:	fa5f f38c 	uxtb.w	r3, ip
 8022aea:	9315      	str	r3, [sp, #84]	; 0x54
 8022aec:	b289      	uxth	r1, r1
 8022aee:	b280      	uxth	r0, r0
 8022af0:	fb01 f300 	mul.w	r3, r1, r0
 8022af4:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022af8:	0109      	lsls	r1, r1, #4
 8022afa:	b280      	uxth	r0, r0
 8022afc:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022b00:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022b02:	1ac9      	subs	r1, r1, r3
 8022b04:	ebac 0c00 	sub.w	ip, ip, r0
 8022b08:	b289      	uxth	r1, r1
 8022b0a:	4369      	muls	r1, r5
 8022b0c:	fa1f fc8c 	uxth.w	ip, ip
 8022b10:	fb02 120c 	mla	r2, r2, ip, r1
 8022b14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022b16:	fb00 2001 	mla	r0, r0, r1, r2
 8022b1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022b1c:	fb03 0302 	mla	r3, r3, r2, r0
 8022b20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d04d      	beq.n	8022bc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x508>
 8022b28:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022b2a:	4a2b      	ldr	r2, [pc, #172]	; (8022bd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 8022b2c:	4d2b      	ldr	r5, [pc, #172]	; (8022bdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 8022b2e:	f8d2 e000 	ldr.w	lr, [r2]
 8022b32:	f8b9 2000 	ldrh.w	r2, [r9]
 8022b36:	434b      	muls	r3, r1
 8022b38:	1c59      	adds	r1, r3, #1
 8022b3a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022b3e:	121b      	asrs	r3, r3, #8
 8022b40:	b299      	uxth	r1, r3
 8022b42:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022b46:	43db      	mvns	r3, r3
 8022b48:	b2db      	uxtb	r3, r3
 8022b4a:	ea4f 202e 	mov.w	r0, lr, asr #8
 8022b4e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022b52:	fb1c fc03 	smulbb	ip, ip, r3
 8022b56:	ea4f 08e2 	mov.w	r8, r2, asr #3
 8022b5a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022b5e:	fb00 c001 	mla	r0, r0, r1, ip
 8022b62:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8022b66:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 8022b6a:	fb18 f803 	smulbb	r8, r8, r3
 8022b6e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022b72:	00d2      	lsls	r2, r2, #3
 8022b74:	fb0c 8c01 	mla	ip, ip, r1, r8
 8022b78:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 8022b7c:	b2d2      	uxtb	r2, r2
 8022b7e:	fa1f fc8c 	uxth.w	ip, ip
 8022b82:	fa5f fe8e 	uxtb.w	lr, lr
 8022b86:	fb12 f203 	smulbb	r2, r2, r3
 8022b8a:	b280      	uxth	r0, r0
 8022b8c:	fb0e 2201 	mla	r2, lr, r1, r2
 8022b90:	f10c 0801 	add.w	r8, ip, #1
 8022b94:	b292      	uxth	r2, r2
 8022b96:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8022b9a:	f100 0801 	add.w	r8, r0, #1
 8022b9e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022ba2:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 8022ba6:	1c51      	adds	r1, r2, #1
 8022ba8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022bac:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022bb0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022bb4:	ea4c 0c00 	orr.w	ip, ip, r0
 8022bb8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022bbc:	ea4c 0c02 	orr.w	ip, ip, r2
 8022bc0:	f8a9 c000 	strh.w	ip, [r9]
 8022bc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022bc6:	441c      	add	r4, r3
 8022bc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022bca:	f109 0902 	add.w	r9, r9, #2
 8022bce:	441e      	add	r6, r3
 8022bd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022bd4:	e5d9      	b.n	802278a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022bd6:	bf00      	nop
 8022bd8:	2002b090 	.word	0x2002b090
 8022bdc:	0007fff8 	.word	0x0007fff8
 8022be0:	2800      	cmp	r0, #0
 8022be2:	d083      	beq.n	8022aec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 8022be4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022be6:	442b      	add	r3, r5
 8022be8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022bec:	07db      	lsls	r3, r3, #31
 8022bee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022bf2:	bf54      	ite	pl
 8022bf4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022bf8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022bfc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022c00:	fa5f f38c 	uxtb.w	r3, ip
 8022c04:	930e      	str	r3, [sp, #56]	; 0x38
 8022c06:	e771      	b.n	8022aec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 8022c08:	b019      	add	sp, #100	; 0x64
 8022c0a:	ecbd 8b08 	vpop	{d8-d11}
 8022c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c12:	bf00      	nop

08022c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8022c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c18:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8022c1c:	2c00      	cmp	r4, #0
 8022c1e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022c22:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022c26:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8022c2a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8022c2e:	fb04 ce03 	mla	lr, r4, r3, ip
 8022c32:	db60      	blt.n	8022cf6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8022c34:	45a1      	cmp	r9, r4
 8022c36:	dd5e      	ble.n	8022cf6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8022c38:	f1bc 0f00 	cmp.w	ip, #0
 8022c3c:	db59      	blt.n	8022cf2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8022c3e:	45e0      	cmp	r8, ip
 8022c40:	dd57      	ble.n	8022cf2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8022c42:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8022c46:	f01e 0f01 	tst.w	lr, #1
 8022c4a:	5c16      	ldrb	r6, [r2, r0]
 8022c4c:	bf0c      	ite	eq
 8022c4e:	f006 060f 	andeq.w	r6, r6, #15
 8022c52:	1136      	asrne	r6, r6, #4
 8022c54:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022c58:	b2f6      	uxtb	r6, r6
 8022c5a:	f11c 0001 	adds.w	r0, ip, #1
 8022c5e:	d44d      	bmi.n	8022cfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8022c60:	4580      	cmp	r8, r0
 8022c62:	dd4b      	ble.n	8022cfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8022c64:	2d00      	cmp	r5, #0
 8022c66:	d04b      	beq.n	8022d00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8022c68:	f10e 0a01 	add.w	sl, lr, #1
 8022c6c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8022c70:	f01a 0f01 	tst.w	sl, #1
 8022c74:	5c10      	ldrb	r0, [r2, r0]
 8022c76:	bf0c      	ite	eq
 8022c78:	f000 000f 	andeq.w	r0, r0, #15
 8022c7c:	1100      	asrne	r0, r0, #4
 8022c7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022c82:	b2c0      	uxtb	r0, r0
 8022c84:	3401      	adds	r4, #1
 8022c86:	d43f      	bmi.n	8022d08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8022c88:	45a1      	cmp	r9, r4
 8022c8a:	dd3d      	ble.n	8022d08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8022c8c:	2f00      	cmp	r7, #0
 8022c8e:	f000 8099 	beq.w	8022dc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>
 8022c92:	f1bc 0f00 	cmp.w	ip, #0
 8022c96:	db35      	blt.n	8022d04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8022c98:	45e0      	cmp	r8, ip
 8022c9a:	dd33      	ble.n	8022d04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8022c9c:	eb03 090e 	add.w	r9, r3, lr
 8022ca0:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8022ca4:	f019 0f01 	tst.w	r9, #1
 8022ca8:	5d14      	ldrb	r4, [r2, r4]
 8022caa:	bf0c      	ite	eq
 8022cac:	f004 040f 	andeq.w	r4, r4, #15
 8022cb0:	1124      	asrne	r4, r4, #4
 8022cb2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022cb6:	b2e4      	uxtb	r4, r4
 8022cb8:	f11c 0c01 	adds.w	ip, ip, #1
 8022cbc:	d427      	bmi.n	8022d0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8022cbe:	45e0      	cmp	r8, ip
 8022cc0:	dd25      	ble.n	8022d0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8022cc2:	b335      	cbz	r5, 8022d12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8022cc4:	3301      	adds	r3, #1
 8022cc6:	449e      	add	lr, r3
 8022cc8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022ccc:	f01e 0f01 	tst.w	lr, #1
 8022cd0:	5cd2      	ldrb	r2, [r2, r3]
 8022cd2:	bf0c      	ite	eq
 8022cd4:	f002 020f 	andeq.w	r2, r2, #15
 8022cd8:	1112      	asrne	r2, r2, #4
 8022cda:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022cde:	b2d3      	uxtb	r3, r2
 8022ce0:	2d0f      	cmp	r5, #15
 8022ce2:	d917      	bls.n	8022d14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8022ce4:	4b3a      	ldr	r3, [pc, #232]	; (8022dd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8022ce6:	4a3b      	ldr	r2, [pc, #236]	; (8022dd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8022ce8:	483b      	ldr	r0, [pc, #236]	; (8022dd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 8022cea:	f240 3173 	movw	r1, #883	; 0x373
 8022cee:	f000 fc47 	bl	8023580 <__assert_func>
 8022cf2:	2600      	movs	r6, #0
 8022cf4:	e7b1      	b.n	8022c5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8022cf6:	2000      	movs	r0, #0
 8022cf8:	4606      	mov	r6, r0
 8022cfa:	e7c3      	b.n	8022c84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8022cfc:	2000      	movs	r0, #0
 8022cfe:	e7c1      	b.n	8022c84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8022d00:	4628      	mov	r0, r5
 8022d02:	e7bf      	b.n	8022c84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8022d04:	2400      	movs	r4, #0
 8022d06:	e7d7      	b.n	8022cb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8022d08:	2300      	movs	r3, #0
 8022d0a:	461c      	mov	r4, r3
 8022d0c:	e7e8      	b.n	8022ce0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8022d0e:	2300      	movs	r3, #0
 8022d10:	e7e6      	b.n	8022ce0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8022d12:	462b      	mov	r3, r5
 8022d14:	2f0f      	cmp	r7, #15
 8022d16:	d8e5      	bhi.n	8022ce4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8022d18:	b2ad      	uxth	r5, r5
 8022d1a:	b2bf      	uxth	r7, r7
 8022d1c:	fb05 fc07 	mul.w	ip, r5, r7
 8022d20:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8022d24:	012d      	lsls	r5, r5, #4
 8022d26:	b2bf      	uxth	r7, r7
 8022d28:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8022d2c:	eba5 050c 	sub.w	r5, r5, ip
 8022d30:	1bd2      	subs	r2, r2, r7
 8022d32:	b2ad      	uxth	r5, r5
 8022d34:	b292      	uxth	r2, r2
 8022d36:	4368      	muls	r0, r5
 8022d38:	fb06 0002 	mla	r0, r6, r2, r0
 8022d3c:	fb07 0404 	mla	r4, r7, r4, r0
 8022d40:	fb0c 4303 	mla	r3, ip, r3, r4
 8022d44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d48:	2b00      	cmp	r3, #0
 8022d4a:	d039      	beq.n	8022dc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 8022d4c:	4a23      	ldr	r2, [pc, #140]	; (8022ddc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c8>)
 8022d4e:	6816      	ldr	r6, [r2, #0]
 8022d50:	880a      	ldrh	r2, [r1, #0]
 8022d52:	b298      	uxth	r0, r3
 8022d54:	1215      	asrs	r5, r2, #8
 8022d56:	43db      	mvns	r3, r3
 8022d58:	b2db      	uxtb	r3, r3
 8022d5a:	1234      	asrs	r4, r6, #8
 8022d5c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022d60:	fb15 f503 	smulbb	r5, r5, r3
 8022d64:	10d7      	asrs	r7, r2, #3
 8022d66:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022d6a:	fb04 5400 	mla	r4, r4, r0, r5
 8022d6e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022d72:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 8022d76:	fb17 f703 	smulbb	r7, r7, r3
 8022d7a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022d7e:	00d2      	lsls	r2, r2, #3
 8022d80:	fb05 7500 	mla	r5, r5, r0, r7
 8022d84:	b2d2      	uxtb	r2, r2
 8022d86:	00f6      	lsls	r6, r6, #3
 8022d88:	fb12 f303 	smulbb	r3, r2, r3
 8022d8c:	b2ad      	uxth	r5, r5
 8022d8e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022d92:	b2a4      	uxth	r4, r4
 8022d94:	fb06 3000 	mla	r0, r6, r0, r3
 8022d98:	1c6b      	adds	r3, r5, #1
 8022d9a:	b280      	uxth	r0, r0
 8022d9c:	1c62      	adds	r2, r4, #1
 8022d9e:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8022da2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8022da6:	095b      	lsrs	r3, r3, #5
 8022da8:	1c42      	adds	r2, r0, #1
 8022daa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022dae:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022db2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022db6:	4323      	orrs	r3, r4
 8022db8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022dbc:	4303      	orrs	r3, r0
 8022dbe:	800b      	strh	r3, [r1, #0]
 8022dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022dc4:	2d0f      	cmp	r5, #15
 8022dc6:	d88d      	bhi.n	8022ce4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8022dc8:	463b      	mov	r3, r7
 8022dca:	463c      	mov	r4, r7
 8022dcc:	e7a4      	b.n	8022d18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8022dce:	bf00      	nop
 8022dd0:	080288e7 	.word	0x080288e7
 8022dd4:	08028e45 	.word	0x08028e45
 8022dd8:	0802896f 	.word	0x0802896f
 8022ddc:	2002b090 	.word	0x2002b090

08022de0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022de4:	ed2d 8b08 	vpush	{d8-d11}
 8022de8:	b095      	sub	sp, #84	; 0x54
 8022dea:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8022dee:	9306      	str	r3, [sp, #24]
 8022df0:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8022df4:	9307      	str	r3, [sp, #28]
 8022df6:	920d      	str	r2, [sp, #52]	; 0x34
 8022df8:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022dfc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022dfe:	910a      	str	r1, [sp, #40]	; 0x28
 8022e00:	9308      	str	r3, [sp, #32]
 8022e02:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022e06:	9013      	str	r0, [sp, #76]	; 0x4c
 8022e08:	6850      	ldr	r0, [r2, #4]
 8022e0a:	6812      	ldr	r2, [r2, #0]
 8022e0c:	fb00 1303 	mla	r3, r0, r3, r1
 8022e10:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 8022e14:	9b07      	ldr	r3, [sp, #28]
 8022e16:	3301      	adds	r3, #1
 8022e18:	f023 0301 	bic.w	r3, r3, #1
 8022e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8022e1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022e20:	681f      	ldr	r7, [r3, #0]
 8022e22:	eeb0 aa40 	vmov.f32	s20, s0
 8022e26:	eef0 9a60 	vmov.f32	s19, s1
 8022e2a:	eeb0 9a41 	vmov.f32	s18, s2
 8022e2e:	eeb0 8a62 	vmov.f32	s16, s5
 8022e32:	eef0 8a43 	vmov.f32	s17, s6
 8022e36:	eef0 ba44 	vmov.f32	s23, s8
 8022e3a:	eeb0 ba64 	vmov.f32	s22, s9
 8022e3e:	eef0 aa45 	vmov.f32	s21, s10
 8022e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e44:	2b00      	cmp	r3, #0
 8022e46:	dc03      	bgt.n	8022e50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022e48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	f340 8260 	ble.w	8023310 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8022e50:	9b06      	ldr	r3, [sp, #24]
 8022e52:	2b00      	cmp	r3, #0
 8022e54:	f340 811c 	ble.w	8023090 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022e58:	1422      	asrs	r2, r4, #16
 8022e5a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e5e:	d42d      	bmi.n	8022ebc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8022e60:	9807      	ldr	r0, [sp, #28]
 8022e62:	1c51      	adds	r1, r2, #1
 8022e64:	4288      	cmp	r0, r1
 8022e66:	dd2c      	ble.n	8022ec2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022e68:	2b00      	cmp	r3, #0
 8022e6a:	db2a      	blt.n	8022ec2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022e6c:	9808      	ldr	r0, [sp, #32]
 8022e6e:	1c59      	adds	r1, r3, #1
 8022e70:	4288      	cmp	r0, r1
 8022e72:	dd26      	ble.n	8022ec2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022e74:	9b06      	ldr	r3, [sp, #24]
 8022e76:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022e78:	3b01      	subs	r3, #1
 8022e7a:	fb02 4203 	mla	r2, r2, r3, r4
 8022e7e:	1412      	asrs	r2, r2, #16
 8022e80:	d42a      	bmi.n	8022ed8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022e82:	9907      	ldr	r1, [sp, #28]
 8022e84:	3201      	adds	r2, #1
 8022e86:	4291      	cmp	r1, r2
 8022e88:	dd26      	ble.n	8022ed8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022e8a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022e8c:	fb02 6303 	mla	r3, r2, r3, r6
 8022e90:	141b      	asrs	r3, r3, #16
 8022e92:	d421      	bmi.n	8022ed8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022e94:	9a08      	ldr	r2, [sp, #32]
 8022e96:	3301      	adds	r3, #1
 8022e98:	429a      	cmp	r2, r3
 8022e9a:	dd1d      	ble.n	8022ed8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022e9c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8022ea0:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8022ea6:	46d8      	mov	r8, fp
 8022ea8:	f1ba 0f00 	cmp.w	sl, #0
 8022eac:	f300 8164 	bgt.w	8023178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 8022eb0:	9b06      	ldr	r3, [sp, #24]
 8022eb2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022eb6:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 8022eba:	e0eb      	b.n	8023094 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8022ebc:	1c51      	adds	r1, r2, #1
 8022ebe:	f040 80dd 	bne.w	802307c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8022ec2:	9907      	ldr	r1, [sp, #28]
 8022ec4:	4291      	cmp	r1, r2
 8022ec6:	f340 80d9 	ble.w	802307c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8022eca:	1c5a      	adds	r2, r3, #1
 8022ecc:	f2c0 80d6 	blt.w	802307c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8022ed0:	9a08      	ldr	r2, [sp, #32]
 8022ed2:	4293      	cmp	r3, r2
 8022ed4:	f280 80d2 	bge.w	802307c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8022ed8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8022edc:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8022ee0:	46d8      	mov	r8, fp
 8022ee2:	f1b9 0f00 	cmp.w	r9, #0
 8022ee6:	dde3      	ble.n	8022eb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8022ee8:	1420      	asrs	r0, r4, #16
 8022eea:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022eee:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022ef2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022ef6:	f100 8127 	bmi.w	8023148 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8022efa:	9d07      	ldr	r5, [sp, #28]
 8022efc:	f100 0c01 	add.w	ip, r0, #1
 8022f00:	4565      	cmp	r5, ip
 8022f02:	f340 8123 	ble.w	802314c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	f2c0 8120 	blt.w	802314c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8022f0c:	9d08      	ldr	r5, [sp, #32]
 8022f0e:	f103 0c01 	add.w	ip, r3, #1
 8022f12:	4565      	cmp	r5, ip
 8022f14:	f340 811a 	ble.w	802314c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8022f18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022f1a:	fb03 0305 	mla	r3, r3, r5, r0
 8022f1e:	0858      	lsrs	r0, r3, #1
 8022f20:	07dd      	lsls	r5, r3, #31
 8022f22:	5c38      	ldrb	r0, [r7, r0]
 8022f24:	bf54      	ite	pl
 8022f26:	f000 000f 	andpl.w	r0, r0, #15
 8022f2a:	1100      	asrmi	r0, r0, #4
 8022f2c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022f30:	b2c0      	uxtb	r0, r0
 8022f32:	2a00      	cmp	r2, #0
 8022f34:	f000 80ed 	beq.w	8023112 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x332>
 8022f38:	f103 0e01 	add.w	lr, r3, #1
 8022f3c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022f40:	f01e 0f01 	tst.w	lr, #1
 8022f44:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f48:	bf0c      	ite	eq
 8022f4a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022f4e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022f52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f56:	fa5f fc8c 	uxtb.w	ip, ip
 8022f5a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8022f5e:	b1f9      	cbz	r1, 8022fa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8022f60:	4453      	add	r3, sl
 8022f62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022f66:	07dd      	lsls	r5, r3, #31
 8022f68:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f6c:	bf54      	ite	pl
 8022f6e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022f72:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022f76:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f7a:	3301      	adds	r3, #1
 8022f7c:	fa5f fc8c 	uxtb.w	ip, ip
 8022f80:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8022f84:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022f88:	07dd      	lsls	r5, r3, #31
 8022f8a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f8e:	bf54      	ite	pl
 8022f90:	f00c 030f 	andpl.w	r3, ip, #15
 8022f94:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022f98:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f9c:	b2db      	uxtb	r3, r3
 8022f9e:	9310      	str	r3, [sp, #64]	; 0x40
 8022fa0:	b292      	uxth	r2, r2
 8022fa2:	b289      	uxth	r1, r1
 8022fa4:	fb02 f301 	mul.w	r3, r2, r1
 8022fa8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022fac:	0112      	lsls	r2, r2, #4
 8022fae:	b289      	uxth	r1, r1
 8022fb0:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022fb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022fb6:	1ad2      	subs	r2, r2, r3
 8022fb8:	ebac 0c01 	sub.w	ip, ip, r1
 8022fbc:	b292      	uxth	r2, r2
 8022fbe:	436a      	muls	r2, r5
 8022fc0:	fa1f fc8c 	uxth.w	ip, ip
 8022fc4:	fb00 200c 	mla	r0, r0, ip, r2
 8022fc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022fca:	fb01 0102 	mla	r1, r1, r2, r0
 8022fce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022fd0:	fb03 1302 	mla	r3, r3, r2, r1
 8022fd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022fd8:	2b00      	cmp	r3, #0
 8022fda:	d046      	beq.n	802306a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8022fdc:	4ac7      	ldr	r2, [pc, #796]	; (80232fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 8022fde:	49c8      	ldr	r1, [pc, #800]	; (8023300 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 8022fe0:	6812      	ldr	r2, [r2, #0]
 8022fe2:	ea4f 2e22 	mov.w	lr, r2, asr #8
 8022fe6:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 8022fea:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 8022fee:	b2d2      	uxtb	r2, r2
 8022ff0:	2bff      	cmp	r3, #255	; 0xff
 8022ff2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8022ff6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022ffa:	4615      	mov	r5, r2
 8022ffc:	f000 809c 	beq.w	8023138 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 8023000:	f8b8 0000 	ldrh.w	r0, [r8]
 8023004:	b29a      	uxth	r2, r3
 8023006:	1201      	asrs	r1, r0, #8
 8023008:	43db      	mvns	r3, r3
 802300a:	b2db      	uxtb	r3, r3
 802300c:	fb1e fe02 	smulbb	lr, lr, r2
 8023010:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023014:	fb01 e103 	mla	r1, r1, r3, lr
 8023018:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802301c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023020:	fb1c fc02 	smulbb	ip, ip, r2
 8023024:	fb0e cc03 	mla	ip, lr, r3, ip
 8023028:	00c0      	lsls	r0, r0, #3
 802302a:	fa1f fc8c 	uxth.w	ip, ip
 802302e:	fb15 f202 	smulbb	r2, r5, r2
 8023032:	b2c0      	uxtb	r0, r0
 8023034:	b289      	uxth	r1, r1
 8023036:	fb00 2303 	mla	r3, r0, r3, r2
 802303a:	f10c 0e01 	add.w	lr, ip, #1
 802303e:	b29b      	uxth	r3, r3
 8023040:	1c4a      	adds	r2, r1, #1
 8023042:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8023046:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802304a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802304e:	1c5a      	adds	r2, r3, #1
 8023050:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023054:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023058:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802305c:	ea4c 0101 	orr.w	r1, ip, r1
 8023060:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023064:	4319      	orrs	r1, r3
 8023066:	f8a8 1000 	strh.w	r1, [r8]
 802306a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802306c:	441c      	add	r4, r3
 802306e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023070:	f108 0802 	add.w	r8, r8, #2
 8023074:	441e      	add	r6, r3
 8023076:	f109 39ff 	add.w	r9, r9, #4294967295
 802307a:	e732      	b.n	8022ee2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802307c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802307e:	441c      	add	r4, r3
 8023080:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023082:	441e      	add	r6, r3
 8023084:	9b06      	ldr	r3, [sp, #24]
 8023086:	3b01      	subs	r3, #1
 8023088:	9306      	str	r3, [sp, #24]
 802308a:	f10b 0b02 	add.w	fp, fp, #2
 802308e:	e6df      	b.n	8022e50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023090:	f47f aef0 	bne.w	8022e74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023096:	2b00      	cmp	r3, #0
 8023098:	f340 813a 	ble.w	8023310 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 802309c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80230a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80230a4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80230a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80230aa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80230ae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80230b2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80230b6:	eef0 6a48 	vmov.f32	s13, s16
 80230ba:	ee69 7a27 	vmul.f32	s15, s18, s15
 80230be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230c2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80230c6:	ee16 4a90 	vmov	r4, s13
 80230ca:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80230ce:	eef0 6a68 	vmov.f32	s13, s17
 80230d2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80230d6:	ee18 2a10 	vmov	r2, s16
 80230da:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80230de:	fb92 f3f3 	sdiv	r3, r2, r3
 80230e2:	ee18 2a90 	vmov	r2, s17
 80230e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80230e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80230ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80230ee:	932a      	str	r3, [sp, #168]	; 0xa8
 80230f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80230f4:	3b01      	subs	r3, #1
 80230f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230fa:	930a      	str	r3, [sp, #40]	; 0x28
 80230fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80230fe:	bf08      	it	eq
 8023100:	4613      	moveq	r3, r2
 8023102:	ee16 6a90 	vmov	r6, s13
 8023106:	9306      	str	r3, [sp, #24]
 8023108:	eef0 8a67 	vmov.f32	s17, s15
 802310c:	eeb0 8a47 	vmov.f32	s16, s14
 8023110:	e697      	b.n	8022e42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8023112:	2900      	cmp	r1, #0
 8023114:	f43f af44 	beq.w	8022fa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8023118:	4453      	add	r3, sl
 802311a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802311e:	07db      	lsls	r3, r3, #31
 8023120:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023124:	bf54      	ite	pl
 8023126:	f00c 030f 	andpl.w	r3, ip, #15
 802312a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802312e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023132:	b2db      	uxtb	r3, r3
 8023134:	930b      	str	r3, [sp, #44]	; 0x2c
 8023136:	e733      	b.n	8022fa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8023138:	08d2      	lsrs	r2, r2, #3
 802313a:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 802313e:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 8023142:	f8a8 c000 	strh.w	ip, [r8]
 8023146:	e790      	b.n	802306a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023148:	1c45      	adds	r5, r0, #1
 802314a:	d18e      	bne.n	802306a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 802314c:	9d07      	ldr	r5, [sp, #28]
 802314e:	4285      	cmp	r5, r0
 8023150:	dd8b      	ble.n	802306a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023152:	1c5d      	adds	r5, r3, #1
 8023154:	db89      	blt.n	802306a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023156:	9d08      	ldr	r5, [sp, #32]
 8023158:	429d      	cmp	r5, r3
 802315a:	dd86      	ble.n	802306a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 802315c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8023160:	9b07      	ldr	r3, [sp, #28]
 8023162:	9300      	str	r3, [sp, #0]
 8023164:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8023168:	9501      	str	r5, [sp, #4]
 802316a:	4653      	mov	r3, sl
 802316c:	463a      	mov	r2, r7
 802316e:	4641      	mov	r1, r8
 8023170:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023172:	f7ff fd4f 	bl	8022c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8023176:	e778      	b.n	802306a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023178:	9909      	ldr	r1, [sp, #36]	; 0x24
 802317a:	1422      	asrs	r2, r4, #16
 802317c:	1433      	asrs	r3, r6, #16
 802317e:	fb01 2303 	mla	r3, r1, r3, r2
 8023182:	085a      	lsrs	r2, r3, #1
 8023184:	07d9      	lsls	r1, r3, #31
 8023186:	5cba      	ldrb	r2, [r7, r2]
 8023188:	bf54      	ite	pl
 802318a:	f002 020f 	andpl.w	r2, r2, #15
 802318e:	1112      	asrmi	r2, r2, #4
 8023190:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023194:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023198:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802319c:	b2d2      	uxtb	r2, r2
 802319e:	2800      	cmp	r0, #0
 80231a0:	f000 809b 	beq.w	80232da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fa>
 80231a4:	f103 0e01 	add.w	lr, r3, #1
 80231a8:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80231ac:	f01e 0f01 	tst.w	lr, #1
 80231b0:	5c79      	ldrb	r1, [r7, r1]
 80231b2:	bf0c      	ite	eq
 80231b4:	f001 010f 	andeq.w	r1, r1, #15
 80231b8:	1109      	asrne	r1, r1, #4
 80231ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231be:	b2c9      	uxtb	r1, r1
 80231c0:	9111      	str	r1, [sp, #68]	; 0x44
 80231c2:	f1bc 0f00 	cmp.w	ip, #0
 80231c6:	d018      	beq.n	80231fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 80231c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80231ca:	440b      	add	r3, r1
 80231cc:	0859      	lsrs	r1, r3, #1
 80231ce:	07dd      	lsls	r5, r3, #31
 80231d0:	5c79      	ldrb	r1, [r7, r1]
 80231d2:	bf54      	ite	pl
 80231d4:	f001 010f 	andpl.w	r1, r1, #15
 80231d8:	1109      	asrmi	r1, r1, #4
 80231da:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231de:	b2c9      	uxtb	r1, r1
 80231e0:	3301      	adds	r3, #1
 80231e2:	910c      	str	r1, [sp, #48]	; 0x30
 80231e4:	0859      	lsrs	r1, r3, #1
 80231e6:	07dd      	lsls	r5, r3, #31
 80231e8:	5c79      	ldrb	r1, [r7, r1]
 80231ea:	bf54      	ite	pl
 80231ec:	f001 010f 	andpl.w	r1, r1, #15
 80231f0:	1109      	asrmi	r1, r1, #4
 80231f2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231f6:	b2c9      	uxtb	r1, r1
 80231f8:	9112      	str	r1, [sp, #72]	; 0x48
 80231fa:	b280      	uxth	r0, r0
 80231fc:	fa1f fc8c 	uxth.w	ip, ip
 8023200:	fb00 f30c 	mul.w	r3, r0, ip
 8023204:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023208:	0100      	lsls	r0, r0, #4
 802320a:	fa1f fc8c 	uxth.w	ip, ip
 802320e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023212:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023214:	1ac0      	subs	r0, r0, r3
 8023216:	eba1 010c 	sub.w	r1, r1, ip
 802321a:	b280      	uxth	r0, r0
 802321c:	b289      	uxth	r1, r1
 802321e:	4368      	muls	r0, r5
 8023220:	fb02 0201 	mla	r2, r2, r1, r0
 8023224:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023226:	fb0c 2c01 	mla	ip, ip, r1, r2
 802322a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802322c:	fb03 c302 	mla	r3, r3, r2, ip
 8023230:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023234:	2b00      	cmp	r3, #0
 8023236:	d047      	beq.n	80232c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 8023238:	4a30      	ldr	r2, [pc, #192]	; (80232fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 802323a:	4931      	ldr	r1, [pc, #196]	; (8023300 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 802323c:	6812      	ldr	r2, [r2, #0]
 802323e:	2bff      	cmp	r3, #255	; 0xff
 8023240:	ea4f 2e22 	mov.w	lr, r2, asr #8
 8023244:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 8023248:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 802324c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023250:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023254:	b2d2      	uxtb	r2, r2
 8023256:	d055      	beq.n	8023304 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 8023258:	f8b8 0000 	ldrh.w	r0, [r8]
 802325c:	fa1f f983 	uxth.w	r9, r3
 8023260:	1201      	asrs	r1, r0, #8
 8023262:	43db      	mvns	r3, r3
 8023264:	b2db      	uxtb	r3, r3
 8023266:	fb1e fe09 	smulbb	lr, lr, r9
 802326a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802326e:	fb01 e103 	mla	r1, r1, r3, lr
 8023272:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023276:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802327a:	fb1c fc09 	smulbb	ip, ip, r9
 802327e:	fb0e cc03 	mla	ip, lr, r3, ip
 8023282:	00c0      	lsls	r0, r0, #3
 8023284:	fa1f fc8c 	uxth.w	ip, ip
 8023288:	b2c0      	uxtb	r0, r0
 802328a:	fb12 f209 	smulbb	r2, r2, r9
 802328e:	b289      	uxth	r1, r1
 8023290:	fb00 2203 	mla	r2, r0, r3, r2
 8023294:	f10c 0e01 	add.w	lr, ip, #1
 8023298:	b292      	uxth	r2, r2
 802329a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 802329e:	f101 0e01 	add.w	lr, r1, #1
 80232a2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80232a6:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 80232aa:	1c53      	adds	r3, r2, #1
 80232ac:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80232b0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80232b4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80232b8:	ea4c 0c01 	orr.w	ip, ip, r1
 80232bc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80232c0:	ea4c 0c02 	orr.w	ip, ip, r2
 80232c4:	f8a8 c000 	strh.w	ip, [r8]
 80232c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80232ca:	441c      	add	r4, r3
 80232cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80232ce:	f108 0802 	add.w	r8, r8, #2
 80232d2:	441e      	add	r6, r3
 80232d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80232d8:	e5e6      	b.n	8022ea8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80232da:	f1bc 0f00 	cmp.w	ip, #0
 80232de:	d08c      	beq.n	80231fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 80232e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80232e2:	440b      	add	r3, r1
 80232e4:	0859      	lsrs	r1, r3, #1
 80232e6:	07db      	lsls	r3, r3, #31
 80232e8:	5c79      	ldrb	r1, [r7, r1]
 80232ea:	bf54      	ite	pl
 80232ec:	f001 010f 	andpl.w	r1, r1, #15
 80232f0:	1109      	asrmi	r1, r1, #4
 80232f2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80232f6:	b2c9      	uxtb	r1, r1
 80232f8:	910c      	str	r1, [sp, #48]	; 0x30
 80232fa:	e77e      	b.n	80231fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 80232fc:	2002b090 	.word	0x2002b090
 8023300:	0007fff8 	.word	0x0007fff8
 8023304:	08d2      	lsrs	r2, r2, #3
 8023306:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 802330a:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 802330e:	e7d9      	b.n	80232c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e4>
 8023310:	b015      	add	sp, #84	; 0x54
 8023312:	ecbd 8b08 	vpop	{d8-d11}
 8023316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802331a:	bf00      	nop

0802331c <CRC_Lock>:
 802331c:	b530      	push	{r4, r5, lr}
 802331e:	4a1d      	ldr	r2, [pc, #116]	; (8023394 <CRC_Lock+0x78>)
 8023320:	6813      	ldr	r3, [r2, #0]
 8023322:	f023 0301 	bic.w	r3, r3, #1
 8023326:	6013      	str	r3, [r2, #0]
 8023328:	4b1b      	ldr	r3, [pc, #108]	; (8023398 <CRC_Lock+0x7c>)
 802332a:	681a      	ldr	r2, [r3, #0]
 802332c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023330:	4022      	ands	r2, r4
 8023332:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023336:	42aa      	cmp	r2, r5
 8023338:	d005      	beq.n	8023346 <CRC_Lock+0x2a>
 802333a:	681b      	ldr	r3, [r3, #0]
 802333c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023340:	4023      	ands	r3, r4
 8023342:	4293      	cmp	r3, r2
 8023344:	d11d      	bne.n	8023382 <CRC_Lock+0x66>
 8023346:	4b15      	ldr	r3, [pc, #84]	; (802339c <CRC_Lock+0x80>)
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	b9d3      	cbnz	r3, 8023382 <CRC_Lock+0x66>
 802334c:	4a14      	ldr	r2, [pc, #80]	; (80233a0 <CRC_Lock+0x84>)
 802334e:	6813      	ldr	r3, [r2, #0]
 8023350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023354:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023358:	d006      	beq.n	8023368 <CRC_Lock+0x4c>
 802335a:	6813      	ldr	r3, [r2, #0]
 802335c:	f240 4283 	movw	r2, #1155	; 0x483
 8023360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023364:	4293      	cmp	r3, r2
 8023366:	d10c      	bne.n	8023382 <CRC_Lock+0x66>
 8023368:	4b0e      	ldr	r3, [pc, #56]	; (80233a4 <CRC_Lock+0x88>)
 802336a:	2201      	movs	r2, #1
 802336c:	601a      	str	r2, [r3, #0]
 802336e:	681a      	ldr	r2, [r3, #0]
 8023370:	2a00      	cmp	r2, #0
 8023372:	d1fc      	bne.n	802336e <CRC_Lock+0x52>
 8023374:	4b0c      	ldr	r3, [pc, #48]	; (80233a8 <CRC_Lock+0x8c>)
 8023376:	6018      	str	r0, [r3, #0]
 8023378:	6818      	ldr	r0, [r3, #0]
 802337a:	1a43      	subs	r3, r0, r1
 802337c:	4258      	negs	r0, r3
 802337e:	4158      	adcs	r0, r3
 8023380:	bd30      	pop	{r4, r5, pc}
 8023382:	4b0a      	ldr	r3, [pc, #40]	; (80233ac <CRC_Lock+0x90>)
 8023384:	2201      	movs	r2, #1
 8023386:	601a      	str	r2, [r3, #0]
 8023388:	681a      	ldr	r2, [r3, #0]
 802338a:	2a00      	cmp	r2, #0
 802338c:	d1fc      	bne.n	8023388 <CRC_Lock+0x6c>
 802338e:	4b08      	ldr	r3, [pc, #32]	; (80233b0 <CRC_Lock+0x94>)
 8023390:	e7f1      	b.n	8023376 <CRC_Lock+0x5a>
 8023392:	bf00      	nop
 8023394:	e0002000 	.word	0xe0002000
 8023398:	e000ed00 	.word	0xe000ed00
 802339c:	e0042000 	.word	0xe0042000
 80233a0:	5c001000 	.word	0x5c001000
 80233a4:	58024c08 	.word	0x58024c08
 80233a8:	58024c00 	.word	0x58024c00
 80233ac:	40023008 	.word	0x40023008
 80233b0:	40023000 	.word	0x40023000

080233b4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80233b4:	6101      	str	r1, [r0, #16]
 80233b6:	4770      	bx	lr

080233b8 <_ZN8touchgfx8Gestures4tickEv>:
 80233b8:	7b83      	ldrb	r3, [r0, #14]
 80233ba:	b14b      	cbz	r3, 80233d0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80233bc:	8903      	ldrh	r3, [r0, #8]
 80233be:	3301      	adds	r3, #1
 80233c0:	b29b      	uxth	r3, r3
 80233c2:	2b07      	cmp	r3, #7
 80233c4:	8103      	strh	r3, [r0, #8]
 80233c6:	bf81      	itttt	hi
 80233c8:	2300      	movhi	r3, #0
 80233ca:	8143      	strhhi	r3, [r0, #10]
 80233cc:	8183      	strhhi	r3, [r0, #12]
 80233ce:	7383      	strbhi	r3, [r0, #14]
 80233d0:	4770      	bx	lr
	...

080233d4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80233d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80233d8:	4604      	mov	r4, r0
 80233da:	8880      	ldrh	r0, [r0, #4]
 80233dc:	f8ad 0006 	strh.w	r0, [sp, #6]
 80233e0:	4698      	mov	r8, r3
 80233e2:	eba8 0000 	sub.w	r0, r8, r0
 80233e6:	4b1c      	ldr	r3, [pc, #112]	; (8023458 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80233e8:	9300      	str	r3, [sp, #0]
 80233ea:	b280      	uxth	r0, r0
 80233ec:	2300      	movs	r3, #0
 80233ee:	f88d 3004 	strb.w	r3, [sp, #4]
 80233f2:	b203      	sxth	r3, r0
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	bfb8      	it	lt
 80233f8:	4240      	neglt	r0, r0
 80233fa:	4617      	mov	r7, r2
 80233fc:	8aa2      	ldrh	r2, [r4, #20]
 80233fe:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023402:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023406:	bfb8      	it	lt
 8023408:	b203      	sxthlt	r3, r0
 802340a:	460e      	mov	r6, r1
 802340c:	4293      	cmp	r3, r2
 802340e:	88e1      	ldrh	r1, [r4, #6]
 8023410:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023414:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023418:	dc08      	bgt.n	802342c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802341a:	1a69      	subs	r1, r5, r1
 802341c:	b289      	uxth	r1, r1
 802341e:	b20b      	sxth	r3, r1
 8023420:	2b00      	cmp	r3, #0
 8023422:	bfbc      	itt	lt
 8023424:	4249      	neglt	r1, r1
 8023426:	b20b      	sxthlt	r3, r1
 8023428:	429a      	cmp	r2, r3
 802342a:	da13      	bge.n	8023454 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802342c:	6920      	ldr	r0, [r4, #16]
 802342e:	6803      	ldr	r3, [r0, #0]
 8023430:	4669      	mov	r1, sp
 8023432:	685b      	ldr	r3, [r3, #4]
 8023434:	4798      	blx	r3
 8023436:	eba8 0606 	sub.w	r6, r8, r6
 802343a:	2300      	movs	r3, #0
 802343c:	1bef      	subs	r7, r5, r7
 802343e:	2001      	movs	r0, #1
 8023440:	8123      	strh	r3, [r4, #8]
 8023442:	8166      	strh	r6, [r4, #10]
 8023444:	81a7      	strh	r7, [r4, #12]
 8023446:	f8a4 8004 	strh.w	r8, [r4, #4]
 802344a:	80e5      	strh	r5, [r4, #6]
 802344c:	73a0      	strb	r0, [r4, #14]
 802344e:	b004      	add	sp, #16
 8023450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023454:	2000      	movs	r0, #0
 8023456:	e7fa      	b.n	802344e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023458:	08027b5c 	.word	0x08027b5c

0802345c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802345e:	461e      	mov	r6, r3
 8023460:	1e4b      	subs	r3, r1, #1
 8023462:	2b01      	cmp	r3, #1
 8023464:	b085      	sub	sp, #20
 8023466:	4604      	mov	r4, r0
 8023468:	460d      	mov	r5, r1
 802346a:	4617      	mov	r7, r2
 802346c:	d84b      	bhi.n	8023506 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802346e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023472:	1cd3      	adds	r3, r2, #3
 8023474:	b29b      	uxth	r3, r3
 8023476:	2b06      	cmp	r3, #6
 8023478:	d916      	bls.n	80234a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802347a:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023514 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 802347e:	f8cd c004 	str.w	ip, [sp, #4]
 8023482:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023486:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802348a:	6900      	ldr	r0, [r0, #16]
 802348c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023490:	f04f 0c00 	mov.w	ip, #0
 8023494:	f88d c008 	strb.w	ip, [sp, #8]
 8023498:	f8ad 200a 	strh.w	r2, [sp, #10]
 802349c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80234a0:	6803      	ldr	r3, [r0, #0]
 80234a2:	a901      	add	r1, sp, #4
 80234a4:	689b      	ldr	r3, [r3, #8]
 80234a6:	4798      	blx	r3
 80234a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80234ac:	1cd3      	adds	r3, r2, #3
 80234ae:	b29b      	uxth	r3, r3
 80234b0:	2b06      	cmp	r3, #6
 80234b2:	d916      	bls.n	80234e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80234b4:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023514 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80234b8:	f8cd c004 	str.w	ip, [sp, #4]
 80234bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80234c0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80234c4:	6920      	ldr	r0, [r4, #16]
 80234c6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80234ca:	f04f 0c01 	mov.w	ip, #1
 80234ce:	f88d c008 	strb.w	ip, [sp, #8]
 80234d2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80234d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80234da:	6803      	ldr	r3, [r0, #0]
 80234dc:	a901      	add	r1, sp, #4
 80234de:	689b      	ldr	r3, [r3, #8]
 80234e0:	4798      	blx	r3
 80234e2:	4b0b      	ldr	r3, [pc, #44]	; (8023510 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 80234e4:	9301      	str	r3, [sp, #4]
 80234e6:	6920      	ldr	r0, [r4, #16]
 80234e8:	f88d 5008 	strb.w	r5, [sp, #8]
 80234ec:	2300      	movs	r3, #0
 80234ee:	f8ad 700a 	strh.w	r7, [sp, #10]
 80234f2:	f8ad 600c 	strh.w	r6, [sp, #12]
 80234f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80234fa:	6803      	ldr	r3, [r0, #0]
 80234fc:	a901      	add	r1, sp, #4
 80234fe:	681b      	ldr	r3, [r3, #0]
 8023500:	4798      	blx	r3
 8023502:	b005      	add	sp, #20
 8023504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023506:	2900      	cmp	r1, #0
 8023508:	d1eb      	bne.n	80234e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802350a:	80a2      	strh	r2, [r4, #4]
 802350c:	80c6      	strh	r6, [r0, #6]
 802350e:	e7e8      	b.n	80234e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023510:	08027b48 	.word	0x08027b48
 8023514:	08027b70 	.word	0x08027b70

08023518 <__aeabi_atexit>:
 8023518:	460b      	mov	r3, r1
 802351a:	4601      	mov	r1, r0
 802351c:	4618      	mov	r0, r3
 802351e:	f000 b853 	b.w	80235c8 <__cxa_atexit>

08023522 <__cxa_pure_virtual>:
 8023522:	b508      	push	{r3, lr}
 8023524:	f000 f820 	bl	8023568 <_ZSt9terminatev>

08023528 <_ZdlPvj>:
 8023528:	f000 b80f 	b.w	802354a <_ZdlPv>

0802352c <__cxa_guard_acquire>:
 802352c:	6803      	ldr	r3, [r0, #0]
 802352e:	07db      	lsls	r3, r3, #31
 8023530:	d406      	bmi.n	8023540 <__cxa_guard_acquire+0x14>
 8023532:	7843      	ldrb	r3, [r0, #1]
 8023534:	b103      	cbz	r3, 8023538 <__cxa_guard_acquire+0xc>
 8023536:	deff      	udf	#255	; 0xff
 8023538:	2301      	movs	r3, #1
 802353a:	7043      	strb	r3, [r0, #1]
 802353c:	4618      	mov	r0, r3
 802353e:	4770      	bx	lr
 8023540:	2000      	movs	r0, #0
 8023542:	4770      	bx	lr

08023544 <__cxa_guard_release>:
 8023544:	2301      	movs	r3, #1
 8023546:	6003      	str	r3, [r0, #0]
 8023548:	4770      	bx	lr

0802354a <_ZdlPv>:
 802354a:	f000 b88f 	b.w	802366c <free>

0802354e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802354e:	b508      	push	{r3, lr}
 8023550:	4780      	blx	r0
 8023552:	f000 f80e 	bl	8023572 <abort>
	...

08023558 <_ZSt13get_terminatev>:
 8023558:	4b02      	ldr	r3, [pc, #8]	; (8023564 <_ZSt13get_terminatev+0xc>)
 802355a:	6818      	ldr	r0, [r3, #0]
 802355c:	f3bf 8f5b 	dmb	ish
 8023560:	4770      	bx	lr
 8023562:	bf00      	nop
 8023564:	200000a0 	.word	0x200000a0

08023568 <_ZSt9terminatev>:
 8023568:	b508      	push	{r3, lr}
 802356a:	f7ff fff5 	bl	8023558 <_ZSt13get_terminatev>
 802356e:	f7ff ffee 	bl	802354e <_ZN10__cxxabiv111__terminateEPFvvE>

08023572 <abort>:
 8023572:	b508      	push	{r3, lr}
 8023574:	2006      	movs	r0, #6
 8023576:	f000 fc3d 	bl	8023df4 <raise>
 802357a:	2001      	movs	r0, #1
 802357c:	f7df fa7a 	bl	8002a74 <_exit>

08023580 <__assert_func>:
 8023580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023582:	461c      	mov	r4, r3
 8023584:	4b09      	ldr	r3, [pc, #36]	; (80235ac <__assert_func+0x2c>)
 8023586:	681b      	ldr	r3, [r3, #0]
 8023588:	4605      	mov	r5, r0
 802358a:	68d8      	ldr	r0, [r3, #12]
 802358c:	b152      	cbz	r2, 80235a4 <__assert_func+0x24>
 802358e:	4b08      	ldr	r3, [pc, #32]	; (80235b0 <__assert_func+0x30>)
 8023590:	9100      	str	r1, [sp, #0]
 8023592:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8023596:	4907      	ldr	r1, [pc, #28]	; (80235b4 <__assert_func+0x34>)
 8023598:	462b      	mov	r3, r5
 802359a:	4622      	mov	r2, r4
 802359c:	f000 f828 	bl	80235f0 <fiprintf>
 80235a0:	f7ff ffe7 	bl	8023572 <abort>
 80235a4:	4b04      	ldr	r3, [pc, #16]	; (80235b8 <__assert_func+0x38>)
 80235a6:	461a      	mov	r2, r3
 80235a8:	e7f2      	b.n	8023590 <__assert_func+0x10>
 80235aa:	bf00      	nop
 80235ac:	200000a4 	.word	0x200000a4
 80235b0:	08029080 	.word	0x08029080
 80235b4:	0802908d 	.word	0x0802908d
 80235b8:	080290bb 	.word	0x080290bb

080235bc <atexit>:
 80235bc:	2300      	movs	r3, #0
 80235be:	4601      	mov	r1, r0
 80235c0:	461a      	mov	r2, r3
 80235c2:	4618      	mov	r0, r3
 80235c4:	f000 bd12 	b.w	8023fec <__register_exitproc>

080235c8 <__cxa_atexit>:
 80235c8:	b510      	push	{r4, lr}
 80235ca:	4c05      	ldr	r4, [pc, #20]	; (80235e0 <__cxa_atexit+0x18>)
 80235cc:	4613      	mov	r3, r2
 80235ce:	b12c      	cbz	r4, 80235dc <__cxa_atexit+0x14>
 80235d0:	460a      	mov	r2, r1
 80235d2:	4601      	mov	r1, r0
 80235d4:	2002      	movs	r0, #2
 80235d6:	f000 fd09 	bl	8023fec <__register_exitproc>
 80235da:	bd10      	pop	{r4, pc}
 80235dc:	4620      	mov	r0, r4
 80235de:	e7fc      	b.n	80235da <__cxa_atexit+0x12>
 80235e0:	08023fed 	.word	0x08023fed

080235e4 <__errno>:
 80235e4:	4b01      	ldr	r3, [pc, #4]	; (80235ec <__errno+0x8>)
 80235e6:	6818      	ldr	r0, [r3, #0]
 80235e8:	4770      	bx	lr
 80235ea:	bf00      	nop
 80235ec:	200000a4 	.word	0x200000a4

080235f0 <fiprintf>:
 80235f0:	b40e      	push	{r1, r2, r3}
 80235f2:	b503      	push	{r0, r1, lr}
 80235f4:	4601      	mov	r1, r0
 80235f6:	ab03      	add	r3, sp, #12
 80235f8:	4805      	ldr	r0, [pc, #20]	; (8023610 <fiprintf+0x20>)
 80235fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80235fe:	6800      	ldr	r0, [r0, #0]
 8023600:	9301      	str	r3, [sp, #4]
 8023602:	f000 f921 	bl	8023848 <_vfiprintf_r>
 8023606:	b002      	add	sp, #8
 8023608:	f85d eb04 	ldr.w	lr, [sp], #4
 802360c:	b003      	add	sp, #12
 802360e:	4770      	bx	lr
 8023610:	200000a4 	.word	0x200000a4

08023614 <__libc_init_array>:
 8023614:	b570      	push	{r4, r5, r6, lr}
 8023616:	4e0d      	ldr	r6, [pc, #52]	; (802364c <__libc_init_array+0x38>)
 8023618:	4c0d      	ldr	r4, [pc, #52]	; (8023650 <__libc_init_array+0x3c>)
 802361a:	1ba4      	subs	r4, r4, r6
 802361c:	10a4      	asrs	r4, r4, #2
 802361e:	2500      	movs	r5, #0
 8023620:	42a5      	cmp	r5, r4
 8023622:	d109      	bne.n	8023638 <__libc_init_array+0x24>
 8023624:	4e0b      	ldr	r6, [pc, #44]	; (8023654 <__libc_init_array+0x40>)
 8023626:	4c0c      	ldr	r4, [pc, #48]	; (8023658 <__libc_init_array+0x44>)
 8023628:	f001 f96a 	bl	8024900 <_init>
 802362c:	1ba4      	subs	r4, r4, r6
 802362e:	10a4      	asrs	r4, r4, #2
 8023630:	2500      	movs	r5, #0
 8023632:	42a5      	cmp	r5, r4
 8023634:	d105      	bne.n	8023642 <__libc_init_array+0x2e>
 8023636:	bd70      	pop	{r4, r5, r6, pc}
 8023638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802363c:	4798      	blx	r3
 802363e:	3501      	adds	r5, #1
 8023640:	e7ee      	b.n	8023620 <__libc_init_array+0xc>
 8023642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023646:	4798      	blx	r3
 8023648:	3501      	adds	r5, #1
 802364a:	e7f2      	b.n	8023632 <__libc_init_array+0x1e>
 802364c:	081272dc 	.word	0x081272dc
 8023650:	081272dc 	.word	0x081272dc
 8023654:	081272dc 	.word	0x081272dc
 8023658:	081272f0 	.word	0x081272f0

0802365c <malloc>:
 802365c:	4b02      	ldr	r3, [pc, #8]	; (8023668 <malloc+0xc>)
 802365e:	4601      	mov	r1, r0
 8023660:	6818      	ldr	r0, [r3, #0]
 8023662:	f000 b86d 	b.w	8023740 <_malloc_r>
 8023666:	bf00      	nop
 8023668:	200000a4 	.word	0x200000a4

0802366c <free>:
 802366c:	4b02      	ldr	r3, [pc, #8]	; (8023678 <free+0xc>)
 802366e:	4601      	mov	r1, r0
 8023670:	6818      	ldr	r0, [r3, #0]
 8023672:	f000 b817 	b.w	80236a4 <_free_r>
 8023676:	bf00      	nop
 8023678:	200000a4 	.word	0x200000a4

0802367c <memcpy>:
 802367c:	b510      	push	{r4, lr}
 802367e:	1e43      	subs	r3, r0, #1
 8023680:	440a      	add	r2, r1
 8023682:	4291      	cmp	r1, r2
 8023684:	d100      	bne.n	8023688 <memcpy+0xc>
 8023686:	bd10      	pop	{r4, pc}
 8023688:	f811 4b01 	ldrb.w	r4, [r1], #1
 802368c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023690:	e7f7      	b.n	8023682 <memcpy+0x6>

08023692 <memset>:
 8023692:	4402      	add	r2, r0
 8023694:	4603      	mov	r3, r0
 8023696:	4293      	cmp	r3, r2
 8023698:	d100      	bne.n	802369c <memset+0xa>
 802369a:	4770      	bx	lr
 802369c:	f803 1b01 	strb.w	r1, [r3], #1
 80236a0:	e7f9      	b.n	8023696 <memset+0x4>
	...

080236a4 <_free_r>:
 80236a4:	b538      	push	{r3, r4, r5, lr}
 80236a6:	4605      	mov	r5, r0
 80236a8:	2900      	cmp	r1, #0
 80236aa:	d045      	beq.n	8023738 <_free_r+0x94>
 80236ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80236b0:	1f0c      	subs	r4, r1, #4
 80236b2:	2b00      	cmp	r3, #0
 80236b4:	bfb8      	it	lt
 80236b6:	18e4      	addlt	r4, r4, r3
 80236b8:	f000 fef3 	bl	80244a2 <__malloc_lock>
 80236bc:	4a1f      	ldr	r2, [pc, #124]	; (802373c <_free_r+0x98>)
 80236be:	6813      	ldr	r3, [r2, #0]
 80236c0:	4610      	mov	r0, r2
 80236c2:	b933      	cbnz	r3, 80236d2 <_free_r+0x2e>
 80236c4:	6063      	str	r3, [r4, #4]
 80236c6:	6014      	str	r4, [r2, #0]
 80236c8:	4628      	mov	r0, r5
 80236ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80236ce:	f000 bee9 	b.w	80244a4 <__malloc_unlock>
 80236d2:	42a3      	cmp	r3, r4
 80236d4:	d90c      	bls.n	80236f0 <_free_r+0x4c>
 80236d6:	6821      	ldr	r1, [r4, #0]
 80236d8:	1862      	adds	r2, r4, r1
 80236da:	4293      	cmp	r3, r2
 80236dc:	bf04      	itt	eq
 80236de:	681a      	ldreq	r2, [r3, #0]
 80236e0:	685b      	ldreq	r3, [r3, #4]
 80236e2:	6063      	str	r3, [r4, #4]
 80236e4:	bf04      	itt	eq
 80236e6:	1852      	addeq	r2, r2, r1
 80236e8:	6022      	streq	r2, [r4, #0]
 80236ea:	6004      	str	r4, [r0, #0]
 80236ec:	e7ec      	b.n	80236c8 <_free_r+0x24>
 80236ee:	4613      	mov	r3, r2
 80236f0:	685a      	ldr	r2, [r3, #4]
 80236f2:	b10a      	cbz	r2, 80236f8 <_free_r+0x54>
 80236f4:	42a2      	cmp	r2, r4
 80236f6:	d9fa      	bls.n	80236ee <_free_r+0x4a>
 80236f8:	6819      	ldr	r1, [r3, #0]
 80236fa:	1858      	adds	r0, r3, r1
 80236fc:	42a0      	cmp	r0, r4
 80236fe:	d10b      	bne.n	8023718 <_free_r+0x74>
 8023700:	6820      	ldr	r0, [r4, #0]
 8023702:	4401      	add	r1, r0
 8023704:	1858      	adds	r0, r3, r1
 8023706:	4282      	cmp	r2, r0
 8023708:	6019      	str	r1, [r3, #0]
 802370a:	d1dd      	bne.n	80236c8 <_free_r+0x24>
 802370c:	6810      	ldr	r0, [r2, #0]
 802370e:	6852      	ldr	r2, [r2, #4]
 8023710:	605a      	str	r2, [r3, #4]
 8023712:	4401      	add	r1, r0
 8023714:	6019      	str	r1, [r3, #0]
 8023716:	e7d7      	b.n	80236c8 <_free_r+0x24>
 8023718:	d902      	bls.n	8023720 <_free_r+0x7c>
 802371a:	230c      	movs	r3, #12
 802371c:	602b      	str	r3, [r5, #0]
 802371e:	e7d3      	b.n	80236c8 <_free_r+0x24>
 8023720:	6820      	ldr	r0, [r4, #0]
 8023722:	1821      	adds	r1, r4, r0
 8023724:	428a      	cmp	r2, r1
 8023726:	bf04      	itt	eq
 8023728:	6811      	ldreq	r1, [r2, #0]
 802372a:	6852      	ldreq	r2, [r2, #4]
 802372c:	6062      	str	r2, [r4, #4]
 802372e:	bf04      	itt	eq
 8023730:	1809      	addeq	r1, r1, r0
 8023732:	6021      	streq	r1, [r4, #0]
 8023734:	605c      	str	r4, [r3, #4]
 8023736:	e7c7      	b.n	80236c8 <_free_r+0x24>
 8023738:	bd38      	pop	{r3, r4, r5, pc}
 802373a:	bf00      	nop
 802373c:	2002b1a4 	.word	0x2002b1a4

08023740 <_malloc_r>:
 8023740:	b570      	push	{r4, r5, r6, lr}
 8023742:	1ccd      	adds	r5, r1, #3
 8023744:	f025 0503 	bic.w	r5, r5, #3
 8023748:	3508      	adds	r5, #8
 802374a:	2d0c      	cmp	r5, #12
 802374c:	bf38      	it	cc
 802374e:	250c      	movcc	r5, #12
 8023750:	2d00      	cmp	r5, #0
 8023752:	4606      	mov	r6, r0
 8023754:	db01      	blt.n	802375a <_malloc_r+0x1a>
 8023756:	42a9      	cmp	r1, r5
 8023758:	d903      	bls.n	8023762 <_malloc_r+0x22>
 802375a:	230c      	movs	r3, #12
 802375c:	6033      	str	r3, [r6, #0]
 802375e:	2000      	movs	r0, #0
 8023760:	bd70      	pop	{r4, r5, r6, pc}
 8023762:	f000 fe9e 	bl	80244a2 <__malloc_lock>
 8023766:	4a21      	ldr	r2, [pc, #132]	; (80237ec <_malloc_r+0xac>)
 8023768:	6814      	ldr	r4, [r2, #0]
 802376a:	4621      	mov	r1, r4
 802376c:	b991      	cbnz	r1, 8023794 <_malloc_r+0x54>
 802376e:	4c20      	ldr	r4, [pc, #128]	; (80237f0 <_malloc_r+0xb0>)
 8023770:	6823      	ldr	r3, [r4, #0]
 8023772:	b91b      	cbnz	r3, 802377c <_malloc_r+0x3c>
 8023774:	4630      	mov	r0, r6
 8023776:	f000 fb05 	bl	8023d84 <_sbrk_r>
 802377a:	6020      	str	r0, [r4, #0]
 802377c:	4629      	mov	r1, r5
 802377e:	4630      	mov	r0, r6
 8023780:	f000 fb00 	bl	8023d84 <_sbrk_r>
 8023784:	1c43      	adds	r3, r0, #1
 8023786:	d124      	bne.n	80237d2 <_malloc_r+0x92>
 8023788:	230c      	movs	r3, #12
 802378a:	6033      	str	r3, [r6, #0]
 802378c:	4630      	mov	r0, r6
 802378e:	f000 fe89 	bl	80244a4 <__malloc_unlock>
 8023792:	e7e4      	b.n	802375e <_malloc_r+0x1e>
 8023794:	680b      	ldr	r3, [r1, #0]
 8023796:	1b5b      	subs	r3, r3, r5
 8023798:	d418      	bmi.n	80237cc <_malloc_r+0x8c>
 802379a:	2b0b      	cmp	r3, #11
 802379c:	d90f      	bls.n	80237be <_malloc_r+0x7e>
 802379e:	600b      	str	r3, [r1, #0]
 80237a0:	50cd      	str	r5, [r1, r3]
 80237a2:	18cc      	adds	r4, r1, r3
 80237a4:	4630      	mov	r0, r6
 80237a6:	f000 fe7d 	bl	80244a4 <__malloc_unlock>
 80237aa:	f104 000b 	add.w	r0, r4, #11
 80237ae:	1d23      	adds	r3, r4, #4
 80237b0:	f020 0007 	bic.w	r0, r0, #7
 80237b4:	1ac3      	subs	r3, r0, r3
 80237b6:	d0d3      	beq.n	8023760 <_malloc_r+0x20>
 80237b8:	425a      	negs	r2, r3
 80237ba:	50e2      	str	r2, [r4, r3]
 80237bc:	e7d0      	b.n	8023760 <_malloc_r+0x20>
 80237be:	428c      	cmp	r4, r1
 80237c0:	684b      	ldr	r3, [r1, #4]
 80237c2:	bf16      	itet	ne
 80237c4:	6063      	strne	r3, [r4, #4]
 80237c6:	6013      	streq	r3, [r2, #0]
 80237c8:	460c      	movne	r4, r1
 80237ca:	e7eb      	b.n	80237a4 <_malloc_r+0x64>
 80237cc:	460c      	mov	r4, r1
 80237ce:	6849      	ldr	r1, [r1, #4]
 80237d0:	e7cc      	b.n	802376c <_malloc_r+0x2c>
 80237d2:	1cc4      	adds	r4, r0, #3
 80237d4:	f024 0403 	bic.w	r4, r4, #3
 80237d8:	42a0      	cmp	r0, r4
 80237da:	d005      	beq.n	80237e8 <_malloc_r+0xa8>
 80237dc:	1a21      	subs	r1, r4, r0
 80237de:	4630      	mov	r0, r6
 80237e0:	f000 fad0 	bl	8023d84 <_sbrk_r>
 80237e4:	3001      	adds	r0, #1
 80237e6:	d0cf      	beq.n	8023788 <_malloc_r+0x48>
 80237e8:	6025      	str	r5, [r4, #0]
 80237ea:	e7db      	b.n	80237a4 <_malloc_r+0x64>
 80237ec:	2002b1a4 	.word	0x2002b1a4
 80237f0:	2002b1a8 	.word	0x2002b1a8

080237f4 <__sfputc_r>:
 80237f4:	6893      	ldr	r3, [r2, #8]
 80237f6:	3b01      	subs	r3, #1
 80237f8:	2b00      	cmp	r3, #0
 80237fa:	b410      	push	{r4}
 80237fc:	6093      	str	r3, [r2, #8]
 80237fe:	da08      	bge.n	8023812 <__sfputc_r+0x1e>
 8023800:	6994      	ldr	r4, [r2, #24]
 8023802:	42a3      	cmp	r3, r4
 8023804:	db01      	blt.n	802380a <__sfputc_r+0x16>
 8023806:	290a      	cmp	r1, #10
 8023808:	d103      	bne.n	8023812 <__sfputc_r+0x1e>
 802380a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802380e:	f000 bb2d 	b.w	8023e6c <__swbuf_r>
 8023812:	6813      	ldr	r3, [r2, #0]
 8023814:	1c58      	adds	r0, r3, #1
 8023816:	6010      	str	r0, [r2, #0]
 8023818:	7019      	strb	r1, [r3, #0]
 802381a:	4608      	mov	r0, r1
 802381c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023820:	4770      	bx	lr

08023822 <__sfputs_r>:
 8023822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023824:	4606      	mov	r6, r0
 8023826:	460f      	mov	r7, r1
 8023828:	4614      	mov	r4, r2
 802382a:	18d5      	adds	r5, r2, r3
 802382c:	42ac      	cmp	r4, r5
 802382e:	d101      	bne.n	8023834 <__sfputs_r+0x12>
 8023830:	2000      	movs	r0, #0
 8023832:	e007      	b.n	8023844 <__sfputs_r+0x22>
 8023834:	463a      	mov	r2, r7
 8023836:	f814 1b01 	ldrb.w	r1, [r4], #1
 802383a:	4630      	mov	r0, r6
 802383c:	f7ff ffda 	bl	80237f4 <__sfputc_r>
 8023840:	1c43      	adds	r3, r0, #1
 8023842:	d1f3      	bne.n	802382c <__sfputs_r+0xa>
 8023844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023848 <_vfiprintf_r>:
 8023848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802384c:	460c      	mov	r4, r1
 802384e:	b09d      	sub	sp, #116	; 0x74
 8023850:	4617      	mov	r7, r2
 8023852:	461d      	mov	r5, r3
 8023854:	4606      	mov	r6, r0
 8023856:	b118      	cbz	r0, 8023860 <_vfiprintf_r+0x18>
 8023858:	6983      	ldr	r3, [r0, #24]
 802385a:	b90b      	cbnz	r3, 8023860 <_vfiprintf_r+0x18>
 802385c:	f000 fd1a 	bl	8024294 <__sinit>
 8023860:	4b7c      	ldr	r3, [pc, #496]	; (8023a54 <_vfiprintf_r+0x20c>)
 8023862:	429c      	cmp	r4, r3
 8023864:	d158      	bne.n	8023918 <_vfiprintf_r+0xd0>
 8023866:	6874      	ldr	r4, [r6, #4]
 8023868:	89a3      	ldrh	r3, [r4, #12]
 802386a:	0718      	lsls	r0, r3, #28
 802386c:	d55e      	bpl.n	802392c <_vfiprintf_r+0xe4>
 802386e:	6923      	ldr	r3, [r4, #16]
 8023870:	2b00      	cmp	r3, #0
 8023872:	d05b      	beq.n	802392c <_vfiprintf_r+0xe4>
 8023874:	2300      	movs	r3, #0
 8023876:	9309      	str	r3, [sp, #36]	; 0x24
 8023878:	2320      	movs	r3, #32
 802387a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802387e:	2330      	movs	r3, #48	; 0x30
 8023880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023884:	9503      	str	r5, [sp, #12]
 8023886:	f04f 0b01 	mov.w	fp, #1
 802388a:	46b8      	mov	r8, r7
 802388c:	4645      	mov	r5, r8
 802388e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023892:	b10b      	cbz	r3, 8023898 <_vfiprintf_r+0x50>
 8023894:	2b25      	cmp	r3, #37	; 0x25
 8023896:	d154      	bne.n	8023942 <_vfiprintf_r+0xfa>
 8023898:	ebb8 0a07 	subs.w	sl, r8, r7
 802389c:	d00b      	beq.n	80238b6 <_vfiprintf_r+0x6e>
 802389e:	4653      	mov	r3, sl
 80238a0:	463a      	mov	r2, r7
 80238a2:	4621      	mov	r1, r4
 80238a4:	4630      	mov	r0, r6
 80238a6:	f7ff ffbc 	bl	8023822 <__sfputs_r>
 80238aa:	3001      	adds	r0, #1
 80238ac:	f000 80c2 	beq.w	8023a34 <_vfiprintf_r+0x1ec>
 80238b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238b2:	4453      	add	r3, sl
 80238b4:	9309      	str	r3, [sp, #36]	; 0x24
 80238b6:	f898 3000 	ldrb.w	r3, [r8]
 80238ba:	2b00      	cmp	r3, #0
 80238bc:	f000 80ba 	beq.w	8023a34 <_vfiprintf_r+0x1ec>
 80238c0:	2300      	movs	r3, #0
 80238c2:	f04f 32ff 	mov.w	r2, #4294967295
 80238c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80238ca:	9304      	str	r3, [sp, #16]
 80238cc:	9307      	str	r3, [sp, #28]
 80238ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80238d2:	931a      	str	r3, [sp, #104]	; 0x68
 80238d4:	46a8      	mov	r8, r5
 80238d6:	2205      	movs	r2, #5
 80238d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80238dc:	485e      	ldr	r0, [pc, #376]	; (8023a58 <_vfiprintf_r+0x210>)
 80238de:	f7dc fc8f 	bl	8000200 <memchr>
 80238e2:	9b04      	ldr	r3, [sp, #16]
 80238e4:	bb78      	cbnz	r0, 8023946 <_vfiprintf_r+0xfe>
 80238e6:	06d9      	lsls	r1, r3, #27
 80238e8:	bf44      	itt	mi
 80238ea:	2220      	movmi	r2, #32
 80238ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80238f0:	071a      	lsls	r2, r3, #28
 80238f2:	bf44      	itt	mi
 80238f4:	222b      	movmi	r2, #43	; 0x2b
 80238f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80238fa:	782a      	ldrb	r2, [r5, #0]
 80238fc:	2a2a      	cmp	r2, #42	; 0x2a
 80238fe:	d02a      	beq.n	8023956 <_vfiprintf_r+0x10e>
 8023900:	9a07      	ldr	r2, [sp, #28]
 8023902:	46a8      	mov	r8, r5
 8023904:	2000      	movs	r0, #0
 8023906:	250a      	movs	r5, #10
 8023908:	4641      	mov	r1, r8
 802390a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802390e:	3b30      	subs	r3, #48	; 0x30
 8023910:	2b09      	cmp	r3, #9
 8023912:	d969      	bls.n	80239e8 <_vfiprintf_r+0x1a0>
 8023914:	b360      	cbz	r0, 8023970 <_vfiprintf_r+0x128>
 8023916:	e024      	b.n	8023962 <_vfiprintf_r+0x11a>
 8023918:	4b50      	ldr	r3, [pc, #320]	; (8023a5c <_vfiprintf_r+0x214>)
 802391a:	429c      	cmp	r4, r3
 802391c:	d101      	bne.n	8023922 <_vfiprintf_r+0xda>
 802391e:	68b4      	ldr	r4, [r6, #8]
 8023920:	e7a2      	b.n	8023868 <_vfiprintf_r+0x20>
 8023922:	4b4f      	ldr	r3, [pc, #316]	; (8023a60 <_vfiprintf_r+0x218>)
 8023924:	429c      	cmp	r4, r3
 8023926:	bf08      	it	eq
 8023928:	68f4      	ldreq	r4, [r6, #12]
 802392a:	e79d      	b.n	8023868 <_vfiprintf_r+0x20>
 802392c:	4621      	mov	r1, r4
 802392e:	4630      	mov	r0, r6
 8023930:	f000 faee 	bl	8023f10 <__swsetup_r>
 8023934:	2800      	cmp	r0, #0
 8023936:	d09d      	beq.n	8023874 <_vfiprintf_r+0x2c>
 8023938:	f04f 30ff 	mov.w	r0, #4294967295
 802393c:	b01d      	add	sp, #116	; 0x74
 802393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023942:	46a8      	mov	r8, r5
 8023944:	e7a2      	b.n	802388c <_vfiprintf_r+0x44>
 8023946:	4a44      	ldr	r2, [pc, #272]	; (8023a58 <_vfiprintf_r+0x210>)
 8023948:	1a80      	subs	r0, r0, r2
 802394a:	fa0b f000 	lsl.w	r0, fp, r0
 802394e:	4318      	orrs	r0, r3
 8023950:	9004      	str	r0, [sp, #16]
 8023952:	4645      	mov	r5, r8
 8023954:	e7be      	b.n	80238d4 <_vfiprintf_r+0x8c>
 8023956:	9a03      	ldr	r2, [sp, #12]
 8023958:	1d11      	adds	r1, r2, #4
 802395a:	6812      	ldr	r2, [r2, #0]
 802395c:	9103      	str	r1, [sp, #12]
 802395e:	2a00      	cmp	r2, #0
 8023960:	db01      	blt.n	8023966 <_vfiprintf_r+0x11e>
 8023962:	9207      	str	r2, [sp, #28]
 8023964:	e004      	b.n	8023970 <_vfiprintf_r+0x128>
 8023966:	4252      	negs	r2, r2
 8023968:	f043 0302 	orr.w	r3, r3, #2
 802396c:	9207      	str	r2, [sp, #28]
 802396e:	9304      	str	r3, [sp, #16]
 8023970:	f898 3000 	ldrb.w	r3, [r8]
 8023974:	2b2e      	cmp	r3, #46	; 0x2e
 8023976:	d10e      	bne.n	8023996 <_vfiprintf_r+0x14e>
 8023978:	f898 3001 	ldrb.w	r3, [r8, #1]
 802397c:	2b2a      	cmp	r3, #42	; 0x2a
 802397e:	d138      	bne.n	80239f2 <_vfiprintf_r+0x1aa>
 8023980:	9b03      	ldr	r3, [sp, #12]
 8023982:	1d1a      	adds	r2, r3, #4
 8023984:	681b      	ldr	r3, [r3, #0]
 8023986:	9203      	str	r2, [sp, #12]
 8023988:	2b00      	cmp	r3, #0
 802398a:	bfb8      	it	lt
 802398c:	f04f 33ff 	movlt.w	r3, #4294967295
 8023990:	f108 0802 	add.w	r8, r8, #2
 8023994:	9305      	str	r3, [sp, #20]
 8023996:	4d33      	ldr	r5, [pc, #204]	; (8023a64 <_vfiprintf_r+0x21c>)
 8023998:	f898 1000 	ldrb.w	r1, [r8]
 802399c:	2203      	movs	r2, #3
 802399e:	4628      	mov	r0, r5
 80239a0:	f7dc fc2e 	bl	8000200 <memchr>
 80239a4:	b140      	cbz	r0, 80239b8 <_vfiprintf_r+0x170>
 80239a6:	2340      	movs	r3, #64	; 0x40
 80239a8:	1b40      	subs	r0, r0, r5
 80239aa:	fa03 f000 	lsl.w	r0, r3, r0
 80239ae:	9b04      	ldr	r3, [sp, #16]
 80239b0:	4303      	orrs	r3, r0
 80239b2:	f108 0801 	add.w	r8, r8, #1
 80239b6:	9304      	str	r3, [sp, #16]
 80239b8:	f898 1000 	ldrb.w	r1, [r8]
 80239bc:	482a      	ldr	r0, [pc, #168]	; (8023a68 <_vfiprintf_r+0x220>)
 80239be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80239c2:	2206      	movs	r2, #6
 80239c4:	f108 0701 	add.w	r7, r8, #1
 80239c8:	f7dc fc1a 	bl	8000200 <memchr>
 80239cc:	2800      	cmp	r0, #0
 80239ce:	d037      	beq.n	8023a40 <_vfiprintf_r+0x1f8>
 80239d0:	4b26      	ldr	r3, [pc, #152]	; (8023a6c <_vfiprintf_r+0x224>)
 80239d2:	bb1b      	cbnz	r3, 8023a1c <_vfiprintf_r+0x1d4>
 80239d4:	9b03      	ldr	r3, [sp, #12]
 80239d6:	3307      	adds	r3, #7
 80239d8:	f023 0307 	bic.w	r3, r3, #7
 80239dc:	3308      	adds	r3, #8
 80239de:	9303      	str	r3, [sp, #12]
 80239e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239e2:	444b      	add	r3, r9
 80239e4:	9309      	str	r3, [sp, #36]	; 0x24
 80239e6:	e750      	b.n	802388a <_vfiprintf_r+0x42>
 80239e8:	fb05 3202 	mla	r2, r5, r2, r3
 80239ec:	2001      	movs	r0, #1
 80239ee:	4688      	mov	r8, r1
 80239f0:	e78a      	b.n	8023908 <_vfiprintf_r+0xc0>
 80239f2:	2300      	movs	r3, #0
 80239f4:	f108 0801 	add.w	r8, r8, #1
 80239f8:	9305      	str	r3, [sp, #20]
 80239fa:	4619      	mov	r1, r3
 80239fc:	250a      	movs	r5, #10
 80239fe:	4640      	mov	r0, r8
 8023a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023a04:	3a30      	subs	r2, #48	; 0x30
 8023a06:	2a09      	cmp	r2, #9
 8023a08:	d903      	bls.n	8023a12 <_vfiprintf_r+0x1ca>
 8023a0a:	2b00      	cmp	r3, #0
 8023a0c:	d0c3      	beq.n	8023996 <_vfiprintf_r+0x14e>
 8023a0e:	9105      	str	r1, [sp, #20]
 8023a10:	e7c1      	b.n	8023996 <_vfiprintf_r+0x14e>
 8023a12:	fb05 2101 	mla	r1, r5, r1, r2
 8023a16:	2301      	movs	r3, #1
 8023a18:	4680      	mov	r8, r0
 8023a1a:	e7f0      	b.n	80239fe <_vfiprintf_r+0x1b6>
 8023a1c:	ab03      	add	r3, sp, #12
 8023a1e:	9300      	str	r3, [sp, #0]
 8023a20:	4622      	mov	r2, r4
 8023a22:	4b13      	ldr	r3, [pc, #76]	; (8023a70 <_vfiprintf_r+0x228>)
 8023a24:	a904      	add	r1, sp, #16
 8023a26:	4630      	mov	r0, r6
 8023a28:	f3af 8000 	nop.w
 8023a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8023a30:	4681      	mov	r9, r0
 8023a32:	d1d5      	bne.n	80239e0 <_vfiprintf_r+0x198>
 8023a34:	89a3      	ldrh	r3, [r4, #12]
 8023a36:	065b      	lsls	r3, r3, #25
 8023a38:	f53f af7e 	bmi.w	8023938 <_vfiprintf_r+0xf0>
 8023a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023a3e:	e77d      	b.n	802393c <_vfiprintf_r+0xf4>
 8023a40:	ab03      	add	r3, sp, #12
 8023a42:	9300      	str	r3, [sp, #0]
 8023a44:	4622      	mov	r2, r4
 8023a46:	4b0a      	ldr	r3, [pc, #40]	; (8023a70 <_vfiprintf_r+0x228>)
 8023a48:	a904      	add	r1, sp, #16
 8023a4a:	4630      	mov	r0, r6
 8023a4c:	f000 f888 	bl	8023b60 <_printf_i>
 8023a50:	e7ec      	b.n	8023a2c <_vfiprintf_r+0x1e4>
 8023a52:	bf00      	nop
 8023a54:	08029118 	.word	0x08029118
 8023a58:	080290c0 	.word	0x080290c0
 8023a5c:	08029138 	.word	0x08029138
 8023a60:	080290f8 	.word	0x080290f8
 8023a64:	080290c6 	.word	0x080290c6
 8023a68:	080290ca 	.word	0x080290ca
 8023a6c:	00000000 	.word	0x00000000
 8023a70:	08023823 	.word	0x08023823

08023a74 <_printf_common>:
 8023a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a78:	4691      	mov	r9, r2
 8023a7a:	461f      	mov	r7, r3
 8023a7c:	688a      	ldr	r2, [r1, #8]
 8023a7e:	690b      	ldr	r3, [r1, #16]
 8023a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023a84:	4293      	cmp	r3, r2
 8023a86:	bfb8      	it	lt
 8023a88:	4613      	movlt	r3, r2
 8023a8a:	f8c9 3000 	str.w	r3, [r9]
 8023a8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023a92:	4606      	mov	r6, r0
 8023a94:	460c      	mov	r4, r1
 8023a96:	b112      	cbz	r2, 8023a9e <_printf_common+0x2a>
 8023a98:	3301      	adds	r3, #1
 8023a9a:	f8c9 3000 	str.w	r3, [r9]
 8023a9e:	6823      	ldr	r3, [r4, #0]
 8023aa0:	0699      	lsls	r1, r3, #26
 8023aa2:	bf42      	ittt	mi
 8023aa4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8023aa8:	3302      	addmi	r3, #2
 8023aaa:	f8c9 3000 	strmi.w	r3, [r9]
 8023aae:	6825      	ldr	r5, [r4, #0]
 8023ab0:	f015 0506 	ands.w	r5, r5, #6
 8023ab4:	d107      	bne.n	8023ac6 <_printf_common+0x52>
 8023ab6:	f104 0a19 	add.w	sl, r4, #25
 8023aba:	68e3      	ldr	r3, [r4, #12]
 8023abc:	f8d9 2000 	ldr.w	r2, [r9]
 8023ac0:	1a9b      	subs	r3, r3, r2
 8023ac2:	42ab      	cmp	r3, r5
 8023ac4:	dc28      	bgt.n	8023b18 <_printf_common+0xa4>
 8023ac6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8023aca:	6822      	ldr	r2, [r4, #0]
 8023acc:	3300      	adds	r3, #0
 8023ace:	bf18      	it	ne
 8023ad0:	2301      	movne	r3, #1
 8023ad2:	0692      	lsls	r2, r2, #26
 8023ad4:	d42d      	bmi.n	8023b32 <_printf_common+0xbe>
 8023ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023ada:	4639      	mov	r1, r7
 8023adc:	4630      	mov	r0, r6
 8023ade:	47c0      	blx	r8
 8023ae0:	3001      	adds	r0, #1
 8023ae2:	d020      	beq.n	8023b26 <_printf_common+0xb2>
 8023ae4:	6823      	ldr	r3, [r4, #0]
 8023ae6:	68e5      	ldr	r5, [r4, #12]
 8023ae8:	f8d9 2000 	ldr.w	r2, [r9]
 8023aec:	f003 0306 	and.w	r3, r3, #6
 8023af0:	2b04      	cmp	r3, #4
 8023af2:	bf08      	it	eq
 8023af4:	1aad      	subeq	r5, r5, r2
 8023af6:	68a3      	ldr	r3, [r4, #8]
 8023af8:	6922      	ldr	r2, [r4, #16]
 8023afa:	bf0c      	ite	eq
 8023afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023b00:	2500      	movne	r5, #0
 8023b02:	4293      	cmp	r3, r2
 8023b04:	bfc4      	itt	gt
 8023b06:	1a9b      	subgt	r3, r3, r2
 8023b08:	18ed      	addgt	r5, r5, r3
 8023b0a:	f04f 0900 	mov.w	r9, #0
 8023b0e:	341a      	adds	r4, #26
 8023b10:	454d      	cmp	r5, r9
 8023b12:	d11a      	bne.n	8023b4a <_printf_common+0xd6>
 8023b14:	2000      	movs	r0, #0
 8023b16:	e008      	b.n	8023b2a <_printf_common+0xb6>
 8023b18:	2301      	movs	r3, #1
 8023b1a:	4652      	mov	r2, sl
 8023b1c:	4639      	mov	r1, r7
 8023b1e:	4630      	mov	r0, r6
 8023b20:	47c0      	blx	r8
 8023b22:	3001      	adds	r0, #1
 8023b24:	d103      	bne.n	8023b2e <_printf_common+0xba>
 8023b26:	f04f 30ff 	mov.w	r0, #4294967295
 8023b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b2e:	3501      	adds	r5, #1
 8023b30:	e7c3      	b.n	8023aba <_printf_common+0x46>
 8023b32:	18e1      	adds	r1, r4, r3
 8023b34:	1c5a      	adds	r2, r3, #1
 8023b36:	2030      	movs	r0, #48	; 0x30
 8023b38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023b3c:	4422      	add	r2, r4
 8023b3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023b42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023b46:	3302      	adds	r3, #2
 8023b48:	e7c5      	b.n	8023ad6 <_printf_common+0x62>
 8023b4a:	2301      	movs	r3, #1
 8023b4c:	4622      	mov	r2, r4
 8023b4e:	4639      	mov	r1, r7
 8023b50:	4630      	mov	r0, r6
 8023b52:	47c0      	blx	r8
 8023b54:	3001      	adds	r0, #1
 8023b56:	d0e6      	beq.n	8023b26 <_printf_common+0xb2>
 8023b58:	f109 0901 	add.w	r9, r9, #1
 8023b5c:	e7d8      	b.n	8023b10 <_printf_common+0x9c>
	...

08023b60 <_printf_i>:
 8023b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023b64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8023b68:	460c      	mov	r4, r1
 8023b6a:	7e09      	ldrb	r1, [r1, #24]
 8023b6c:	b085      	sub	sp, #20
 8023b6e:	296e      	cmp	r1, #110	; 0x6e
 8023b70:	4617      	mov	r7, r2
 8023b72:	4606      	mov	r6, r0
 8023b74:	4698      	mov	r8, r3
 8023b76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023b78:	f000 80b3 	beq.w	8023ce2 <_printf_i+0x182>
 8023b7c:	d822      	bhi.n	8023bc4 <_printf_i+0x64>
 8023b7e:	2963      	cmp	r1, #99	; 0x63
 8023b80:	d036      	beq.n	8023bf0 <_printf_i+0x90>
 8023b82:	d80a      	bhi.n	8023b9a <_printf_i+0x3a>
 8023b84:	2900      	cmp	r1, #0
 8023b86:	f000 80b9 	beq.w	8023cfc <_printf_i+0x19c>
 8023b8a:	2958      	cmp	r1, #88	; 0x58
 8023b8c:	f000 8083 	beq.w	8023c96 <_printf_i+0x136>
 8023b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023b94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8023b98:	e032      	b.n	8023c00 <_printf_i+0xa0>
 8023b9a:	2964      	cmp	r1, #100	; 0x64
 8023b9c:	d001      	beq.n	8023ba2 <_printf_i+0x42>
 8023b9e:	2969      	cmp	r1, #105	; 0x69
 8023ba0:	d1f6      	bne.n	8023b90 <_printf_i+0x30>
 8023ba2:	6820      	ldr	r0, [r4, #0]
 8023ba4:	6813      	ldr	r3, [r2, #0]
 8023ba6:	0605      	lsls	r5, r0, #24
 8023ba8:	f103 0104 	add.w	r1, r3, #4
 8023bac:	d52a      	bpl.n	8023c04 <_printf_i+0xa4>
 8023bae:	681b      	ldr	r3, [r3, #0]
 8023bb0:	6011      	str	r1, [r2, #0]
 8023bb2:	2b00      	cmp	r3, #0
 8023bb4:	da03      	bge.n	8023bbe <_printf_i+0x5e>
 8023bb6:	222d      	movs	r2, #45	; 0x2d
 8023bb8:	425b      	negs	r3, r3
 8023bba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8023bbe:	486f      	ldr	r0, [pc, #444]	; (8023d7c <_printf_i+0x21c>)
 8023bc0:	220a      	movs	r2, #10
 8023bc2:	e039      	b.n	8023c38 <_printf_i+0xd8>
 8023bc4:	2973      	cmp	r1, #115	; 0x73
 8023bc6:	f000 809d 	beq.w	8023d04 <_printf_i+0x1a4>
 8023bca:	d808      	bhi.n	8023bde <_printf_i+0x7e>
 8023bcc:	296f      	cmp	r1, #111	; 0x6f
 8023bce:	d020      	beq.n	8023c12 <_printf_i+0xb2>
 8023bd0:	2970      	cmp	r1, #112	; 0x70
 8023bd2:	d1dd      	bne.n	8023b90 <_printf_i+0x30>
 8023bd4:	6823      	ldr	r3, [r4, #0]
 8023bd6:	f043 0320 	orr.w	r3, r3, #32
 8023bda:	6023      	str	r3, [r4, #0]
 8023bdc:	e003      	b.n	8023be6 <_printf_i+0x86>
 8023bde:	2975      	cmp	r1, #117	; 0x75
 8023be0:	d017      	beq.n	8023c12 <_printf_i+0xb2>
 8023be2:	2978      	cmp	r1, #120	; 0x78
 8023be4:	d1d4      	bne.n	8023b90 <_printf_i+0x30>
 8023be6:	2378      	movs	r3, #120	; 0x78
 8023be8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023bec:	4864      	ldr	r0, [pc, #400]	; (8023d80 <_printf_i+0x220>)
 8023bee:	e055      	b.n	8023c9c <_printf_i+0x13c>
 8023bf0:	6813      	ldr	r3, [r2, #0]
 8023bf2:	1d19      	adds	r1, r3, #4
 8023bf4:	681b      	ldr	r3, [r3, #0]
 8023bf6:	6011      	str	r1, [r2, #0]
 8023bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023c00:	2301      	movs	r3, #1
 8023c02:	e08c      	b.n	8023d1e <_printf_i+0x1be>
 8023c04:	681b      	ldr	r3, [r3, #0]
 8023c06:	6011      	str	r1, [r2, #0]
 8023c08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023c0c:	bf18      	it	ne
 8023c0e:	b21b      	sxthne	r3, r3
 8023c10:	e7cf      	b.n	8023bb2 <_printf_i+0x52>
 8023c12:	6813      	ldr	r3, [r2, #0]
 8023c14:	6825      	ldr	r5, [r4, #0]
 8023c16:	1d18      	adds	r0, r3, #4
 8023c18:	6010      	str	r0, [r2, #0]
 8023c1a:	0628      	lsls	r0, r5, #24
 8023c1c:	d501      	bpl.n	8023c22 <_printf_i+0xc2>
 8023c1e:	681b      	ldr	r3, [r3, #0]
 8023c20:	e002      	b.n	8023c28 <_printf_i+0xc8>
 8023c22:	0668      	lsls	r0, r5, #25
 8023c24:	d5fb      	bpl.n	8023c1e <_printf_i+0xbe>
 8023c26:	881b      	ldrh	r3, [r3, #0]
 8023c28:	4854      	ldr	r0, [pc, #336]	; (8023d7c <_printf_i+0x21c>)
 8023c2a:	296f      	cmp	r1, #111	; 0x6f
 8023c2c:	bf14      	ite	ne
 8023c2e:	220a      	movne	r2, #10
 8023c30:	2208      	moveq	r2, #8
 8023c32:	2100      	movs	r1, #0
 8023c34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023c38:	6865      	ldr	r5, [r4, #4]
 8023c3a:	60a5      	str	r5, [r4, #8]
 8023c3c:	2d00      	cmp	r5, #0
 8023c3e:	f2c0 8095 	blt.w	8023d6c <_printf_i+0x20c>
 8023c42:	6821      	ldr	r1, [r4, #0]
 8023c44:	f021 0104 	bic.w	r1, r1, #4
 8023c48:	6021      	str	r1, [r4, #0]
 8023c4a:	2b00      	cmp	r3, #0
 8023c4c:	d13d      	bne.n	8023cca <_printf_i+0x16a>
 8023c4e:	2d00      	cmp	r5, #0
 8023c50:	f040 808e 	bne.w	8023d70 <_printf_i+0x210>
 8023c54:	4665      	mov	r5, ip
 8023c56:	2a08      	cmp	r2, #8
 8023c58:	d10b      	bne.n	8023c72 <_printf_i+0x112>
 8023c5a:	6823      	ldr	r3, [r4, #0]
 8023c5c:	07db      	lsls	r3, r3, #31
 8023c5e:	d508      	bpl.n	8023c72 <_printf_i+0x112>
 8023c60:	6923      	ldr	r3, [r4, #16]
 8023c62:	6862      	ldr	r2, [r4, #4]
 8023c64:	429a      	cmp	r2, r3
 8023c66:	bfde      	ittt	le
 8023c68:	2330      	movle	r3, #48	; 0x30
 8023c6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023c6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023c72:	ebac 0305 	sub.w	r3, ip, r5
 8023c76:	6123      	str	r3, [r4, #16]
 8023c78:	f8cd 8000 	str.w	r8, [sp]
 8023c7c:	463b      	mov	r3, r7
 8023c7e:	aa03      	add	r2, sp, #12
 8023c80:	4621      	mov	r1, r4
 8023c82:	4630      	mov	r0, r6
 8023c84:	f7ff fef6 	bl	8023a74 <_printf_common>
 8023c88:	3001      	adds	r0, #1
 8023c8a:	d14d      	bne.n	8023d28 <_printf_i+0x1c8>
 8023c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8023c90:	b005      	add	sp, #20
 8023c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023c96:	4839      	ldr	r0, [pc, #228]	; (8023d7c <_printf_i+0x21c>)
 8023c98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8023c9c:	6813      	ldr	r3, [r2, #0]
 8023c9e:	6821      	ldr	r1, [r4, #0]
 8023ca0:	1d1d      	adds	r5, r3, #4
 8023ca2:	681b      	ldr	r3, [r3, #0]
 8023ca4:	6015      	str	r5, [r2, #0]
 8023ca6:	060a      	lsls	r2, r1, #24
 8023ca8:	d50b      	bpl.n	8023cc2 <_printf_i+0x162>
 8023caa:	07ca      	lsls	r2, r1, #31
 8023cac:	bf44      	itt	mi
 8023cae:	f041 0120 	orrmi.w	r1, r1, #32
 8023cb2:	6021      	strmi	r1, [r4, #0]
 8023cb4:	b91b      	cbnz	r3, 8023cbe <_printf_i+0x15e>
 8023cb6:	6822      	ldr	r2, [r4, #0]
 8023cb8:	f022 0220 	bic.w	r2, r2, #32
 8023cbc:	6022      	str	r2, [r4, #0]
 8023cbe:	2210      	movs	r2, #16
 8023cc0:	e7b7      	b.n	8023c32 <_printf_i+0xd2>
 8023cc2:	064d      	lsls	r5, r1, #25
 8023cc4:	bf48      	it	mi
 8023cc6:	b29b      	uxthmi	r3, r3
 8023cc8:	e7ef      	b.n	8023caa <_printf_i+0x14a>
 8023cca:	4665      	mov	r5, ip
 8023ccc:	fbb3 f1f2 	udiv	r1, r3, r2
 8023cd0:	fb02 3311 	mls	r3, r2, r1, r3
 8023cd4:	5cc3      	ldrb	r3, [r0, r3]
 8023cd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8023cda:	460b      	mov	r3, r1
 8023cdc:	2900      	cmp	r1, #0
 8023cde:	d1f5      	bne.n	8023ccc <_printf_i+0x16c>
 8023ce0:	e7b9      	b.n	8023c56 <_printf_i+0xf6>
 8023ce2:	6813      	ldr	r3, [r2, #0]
 8023ce4:	6825      	ldr	r5, [r4, #0]
 8023ce6:	6961      	ldr	r1, [r4, #20]
 8023ce8:	1d18      	adds	r0, r3, #4
 8023cea:	6010      	str	r0, [r2, #0]
 8023cec:	0628      	lsls	r0, r5, #24
 8023cee:	681b      	ldr	r3, [r3, #0]
 8023cf0:	d501      	bpl.n	8023cf6 <_printf_i+0x196>
 8023cf2:	6019      	str	r1, [r3, #0]
 8023cf4:	e002      	b.n	8023cfc <_printf_i+0x19c>
 8023cf6:	066a      	lsls	r2, r5, #25
 8023cf8:	d5fb      	bpl.n	8023cf2 <_printf_i+0x192>
 8023cfa:	8019      	strh	r1, [r3, #0]
 8023cfc:	2300      	movs	r3, #0
 8023cfe:	6123      	str	r3, [r4, #16]
 8023d00:	4665      	mov	r5, ip
 8023d02:	e7b9      	b.n	8023c78 <_printf_i+0x118>
 8023d04:	6813      	ldr	r3, [r2, #0]
 8023d06:	1d19      	adds	r1, r3, #4
 8023d08:	6011      	str	r1, [r2, #0]
 8023d0a:	681d      	ldr	r5, [r3, #0]
 8023d0c:	6862      	ldr	r2, [r4, #4]
 8023d0e:	2100      	movs	r1, #0
 8023d10:	4628      	mov	r0, r5
 8023d12:	f7dc fa75 	bl	8000200 <memchr>
 8023d16:	b108      	cbz	r0, 8023d1c <_printf_i+0x1bc>
 8023d18:	1b40      	subs	r0, r0, r5
 8023d1a:	6060      	str	r0, [r4, #4]
 8023d1c:	6863      	ldr	r3, [r4, #4]
 8023d1e:	6123      	str	r3, [r4, #16]
 8023d20:	2300      	movs	r3, #0
 8023d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023d26:	e7a7      	b.n	8023c78 <_printf_i+0x118>
 8023d28:	6923      	ldr	r3, [r4, #16]
 8023d2a:	462a      	mov	r2, r5
 8023d2c:	4639      	mov	r1, r7
 8023d2e:	4630      	mov	r0, r6
 8023d30:	47c0      	blx	r8
 8023d32:	3001      	adds	r0, #1
 8023d34:	d0aa      	beq.n	8023c8c <_printf_i+0x12c>
 8023d36:	6823      	ldr	r3, [r4, #0]
 8023d38:	079b      	lsls	r3, r3, #30
 8023d3a:	d413      	bmi.n	8023d64 <_printf_i+0x204>
 8023d3c:	68e0      	ldr	r0, [r4, #12]
 8023d3e:	9b03      	ldr	r3, [sp, #12]
 8023d40:	4298      	cmp	r0, r3
 8023d42:	bfb8      	it	lt
 8023d44:	4618      	movlt	r0, r3
 8023d46:	e7a3      	b.n	8023c90 <_printf_i+0x130>
 8023d48:	2301      	movs	r3, #1
 8023d4a:	464a      	mov	r2, r9
 8023d4c:	4639      	mov	r1, r7
 8023d4e:	4630      	mov	r0, r6
 8023d50:	47c0      	blx	r8
 8023d52:	3001      	adds	r0, #1
 8023d54:	d09a      	beq.n	8023c8c <_printf_i+0x12c>
 8023d56:	3501      	adds	r5, #1
 8023d58:	68e3      	ldr	r3, [r4, #12]
 8023d5a:	9a03      	ldr	r2, [sp, #12]
 8023d5c:	1a9b      	subs	r3, r3, r2
 8023d5e:	42ab      	cmp	r3, r5
 8023d60:	dcf2      	bgt.n	8023d48 <_printf_i+0x1e8>
 8023d62:	e7eb      	b.n	8023d3c <_printf_i+0x1dc>
 8023d64:	2500      	movs	r5, #0
 8023d66:	f104 0919 	add.w	r9, r4, #25
 8023d6a:	e7f5      	b.n	8023d58 <_printf_i+0x1f8>
 8023d6c:	2b00      	cmp	r3, #0
 8023d6e:	d1ac      	bne.n	8023cca <_printf_i+0x16a>
 8023d70:	7803      	ldrb	r3, [r0, #0]
 8023d72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023d76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023d7a:	e76c      	b.n	8023c56 <_printf_i+0xf6>
 8023d7c:	080290d1 	.word	0x080290d1
 8023d80:	080290e2 	.word	0x080290e2

08023d84 <_sbrk_r>:
 8023d84:	b538      	push	{r3, r4, r5, lr}
 8023d86:	4c06      	ldr	r4, [pc, #24]	; (8023da0 <_sbrk_r+0x1c>)
 8023d88:	2300      	movs	r3, #0
 8023d8a:	4605      	mov	r5, r0
 8023d8c:	4608      	mov	r0, r1
 8023d8e:	6023      	str	r3, [r4, #0]
 8023d90:	f7de fee8 	bl	8002b64 <_sbrk>
 8023d94:	1c43      	adds	r3, r0, #1
 8023d96:	d102      	bne.n	8023d9e <_sbrk_r+0x1a>
 8023d98:	6823      	ldr	r3, [r4, #0]
 8023d9a:	b103      	cbz	r3, 8023d9e <_sbrk_r+0x1a>
 8023d9c:	602b      	str	r3, [r5, #0]
 8023d9e:	bd38      	pop	{r3, r4, r5, pc}
 8023da0:	2002b948 	.word	0x2002b948

08023da4 <_raise_r>:
 8023da4:	291f      	cmp	r1, #31
 8023da6:	b538      	push	{r3, r4, r5, lr}
 8023da8:	4604      	mov	r4, r0
 8023daa:	460d      	mov	r5, r1
 8023dac:	d904      	bls.n	8023db8 <_raise_r+0x14>
 8023dae:	2316      	movs	r3, #22
 8023db0:	6003      	str	r3, [r0, #0]
 8023db2:	f04f 30ff 	mov.w	r0, #4294967295
 8023db6:	bd38      	pop	{r3, r4, r5, pc}
 8023db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023dba:	b112      	cbz	r2, 8023dc2 <_raise_r+0x1e>
 8023dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023dc0:	b94b      	cbnz	r3, 8023dd6 <_raise_r+0x32>
 8023dc2:	4620      	mov	r0, r4
 8023dc4:	f000 f830 	bl	8023e28 <_getpid_r>
 8023dc8:	462a      	mov	r2, r5
 8023dca:	4601      	mov	r1, r0
 8023dcc:	4620      	mov	r0, r4
 8023dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023dd2:	f000 b817 	b.w	8023e04 <_kill_r>
 8023dd6:	2b01      	cmp	r3, #1
 8023dd8:	d00a      	beq.n	8023df0 <_raise_r+0x4c>
 8023dda:	1c59      	adds	r1, r3, #1
 8023ddc:	d103      	bne.n	8023de6 <_raise_r+0x42>
 8023dde:	2316      	movs	r3, #22
 8023de0:	6003      	str	r3, [r0, #0]
 8023de2:	2001      	movs	r0, #1
 8023de4:	e7e7      	b.n	8023db6 <_raise_r+0x12>
 8023de6:	2400      	movs	r4, #0
 8023de8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023dec:	4628      	mov	r0, r5
 8023dee:	4798      	blx	r3
 8023df0:	2000      	movs	r0, #0
 8023df2:	e7e0      	b.n	8023db6 <_raise_r+0x12>

08023df4 <raise>:
 8023df4:	4b02      	ldr	r3, [pc, #8]	; (8023e00 <raise+0xc>)
 8023df6:	4601      	mov	r1, r0
 8023df8:	6818      	ldr	r0, [r3, #0]
 8023dfa:	f7ff bfd3 	b.w	8023da4 <_raise_r>
 8023dfe:	bf00      	nop
 8023e00:	200000a4 	.word	0x200000a4

08023e04 <_kill_r>:
 8023e04:	b538      	push	{r3, r4, r5, lr}
 8023e06:	4c07      	ldr	r4, [pc, #28]	; (8023e24 <_kill_r+0x20>)
 8023e08:	2300      	movs	r3, #0
 8023e0a:	4605      	mov	r5, r0
 8023e0c:	4608      	mov	r0, r1
 8023e0e:	4611      	mov	r1, r2
 8023e10:	6023      	str	r3, [r4, #0]
 8023e12:	f7de fe1f 	bl	8002a54 <_kill>
 8023e16:	1c43      	adds	r3, r0, #1
 8023e18:	d102      	bne.n	8023e20 <_kill_r+0x1c>
 8023e1a:	6823      	ldr	r3, [r4, #0]
 8023e1c:	b103      	cbz	r3, 8023e20 <_kill_r+0x1c>
 8023e1e:	602b      	str	r3, [r5, #0]
 8023e20:	bd38      	pop	{r3, r4, r5, pc}
 8023e22:	bf00      	nop
 8023e24:	2002b948 	.word	0x2002b948

08023e28 <_getpid_r>:
 8023e28:	f7de be0c 	b.w	8002a44 <_getpid>

08023e2c <siprintf>:
 8023e2c:	b40e      	push	{r1, r2, r3}
 8023e2e:	b500      	push	{lr}
 8023e30:	b09c      	sub	sp, #112	; 0x70
 8023e32:	ab1d      	add	r3, sp, #116	; 0x74
 8023e34:	9002      	str	r0, [sp, #8]
 8023e36:	9006      	str	r0, [sp, #24]
 8023e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023e3c:	4809      	ldr	r0, [pc, #36]	; (8023e64 <siprintf+0x38>)
 8023e3e:	9107      	str	r1, [sp, #28]
 8023e40:	9104      	str	r1, [sp, #16]
 8023e42:	4909      	ldr	r1, [pc, #36]	; (8023e68 <siprintf+0x3c>)
 8023e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8023e48:	9105      	str	r1, [sp, #20]
 8023e4a:	6800      	ldr	r0, [r0, #0]
 8023e4c:	9301      	str	r3, [sp, #4]
 8023e4e:	a902      	add	r1, sp, #8
 8023e50:	f000 fbaa 	bl	80245a8 <_svfiprintf_r>
 8023e54:	9b02      	ldr	r3, [sp, #8]
 8023e56:	2200      	movs	r2, #0
 8023e58:	701a      	strb	r2, [r3, #0]
 8023e5a:	b01c      	add	sp, #112	; 0x70
 8023e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023e60:	b003      	add	sp, #12
 8023e62:	4770      	bx	lr
 8023e64:	200000a4 	.word	0x200000a4
 8023e68:	ffff0208 	.word	0xffff0208

08023e6c <__swbuf_r>:
 8023e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e6e:	460e      	mov	r6, r1
 8023e70:	4614      	mov	r4, r2
 8023e72:	4605      	mov	r5, r0
 8023e74:	b118      	cbz	r0, 8023e7e <__swbuf_r+0x12>
 8023e76:	6983      	ldr	r3, [r0, #24]
 8023e78:	b90b      	cbnz	r3, 8023e7e <__swbuf_r+0x12>
 8023e7a:	f000 fa0b 	bl	8024294 <__sinit>
 8023e7e:	4b21      	ldr	r3, [pc, #132]	; (8023f04 <__swbuf_r+0x98>)
 8023e80:	429c      	cmp	r4, r3
 8023e82:	d12a      	bne.n	8023eda <__swbuf_r+0x6e>
 8023e84:	686c      	ldr	r4, [r5, #4]
 8023e86:	69a3      	ldr	r3, [r4, #24]
 8023e88:	60a3      	str	r3, [r4, #8]
 8023e8a:	89a3      	ldrh	r3, [r4, #12]
 8023e8c:	071a      	lsls	r2, r3, #28
 8023e8e:	d52e      	bpl.n	8023eee <__swbuf_r+0x82>
 8023e90:	6923      	ldr	r3, [r4, #16]
 8023e92:	b363      	cbz	r3, 8023eee <__swbuf_r+0x82>
 8023e94:	6923      	ldr	r3, [r4, #16]
 8023e96:	6820      	ldr	r0, [r4, #0]
 8023e98:	1ac0      	subs	r0, r0, r3
 8023e9a:	6963      	ldr	r3, [r4, #20]
 8023e9c:	b2f6      	uxtb	r6, r6
 8023e9e:	4283      	cmp	r3, r0
 8023ea0:	4637      	mov	r7, r6
 8023ea2:	dc04      	bgt.n	8023eae <__swbuf_r+0x42>
 8023ea4:	4621      	mov	r1, r4
 8023ea6:	4628      	mov	r0, r5
 8023ea8:	f000 f98a 	bl	80241c0 <_fflush_r>
 8023eac:	bb28      	cbnz	r0, 8023efa <__swbuf_r+0x8e>
 8023eae:	68a3      	ldr	r3, [r4, #8]
 8023eb0:	3b01      	subs	r3, #1
 8023eb2:	60a3      	str	r3, [r4, #8]
 8023eb4:	6823      	ldr	r3, [r4, #0]
 8023eb6:	1c5a      	adds	r2, r3, #1
 8023eb8:	6022      	str	r2, [r4, #0]
 8023eba:	701e      	strb	r6, [r3, #0]
 8023ebc:	6963      	ldr	r3, [r4, #20]
 8023ebe:	3001      	adds	r0, #1
 8023ec0:	4283      	cmp	r3, r0
 8023ec2:	d004      	beq.n	8023ece <__swbuf_r+0x62>
 8023ec4:	89a3      	ldrh	r3, [r4, #12]
 8023ec6:	07db      	lsls	r3, r3, #31
 8023ec8:	d519      	bpl.n	8023efe <__swbuf_r+0x92>
 8023eca:	2e0a      	cmp	r6, #10
 8023ecc:	d117      	bne.n	8023efe <__swbuf_r+0x92>
 8023ece:	4621      	mov	r1, r4
 8023ed0:	4628      	mov	r0, r5
 8023ed2:	f000 f975 	bl	80241c0 <_fflush_r>
 8023ed6:	b190      	cbz	r0, 8023efe <__swbuf_r+0x92>
 8023ed8:	e00f      	b.n	8023efa <__swbuf_r+0x8e>
 8023eda:	4b0b      	ldr	r3, [pc, #44]	; (8023f08 <__swbuf_r+0x9c>)
 8023edc:	429c      	cmp	r4, r3
 8023ede:	d101      	bne.n	8023ee4 <__swbuf_r+0x78>
 8023ee0:	68ac      	ldr	r4, [r5, #8]
 8023ee2:	e7d0      	b.n	8023e86 <__swbuf_r+0x1a>
 8023ee4:	4b09      	ldr	r3, [pc, #36]	; (8023f0c <__swbuf_r+0xa0>)
 8023ee6:	429c      	cmp	r4, r3
 8023ee8:	bf08      	it	eq
 8023eea:	68ec      	ldreq	r4, [r5, #12]
 8023eec:	e7cb      	b.n	8023e86 <__swbuf_r+0x1a>
 8023eee:	4621      	mov	r1, r4
 8023ef0:	4628      	mov	r0, r5
 8023ef2:	f000 f80d 	bl	8023f10 <__swsetup_r>
 8023ef6:	2800      	cmp	r0, #0
 8023ef8:	d0cc      	beq.n	8023e94 <__swbuf_r+0x28>
 8023efa:	f04f 37ff 	mov.w	r7, #4294967295
 8023efe:	4638      	mov	r0, r7
 8023f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023f02:	bf00      	nop
 8023f04:	08029118 	.word	0x08029118
 8023f08:	08029138 	.word	0x08029138
 8023f0c:	080290f8 	.word	0x080290f8

08023f10 <__swsetup_r>:
 8023f10:	4b32      	ldr	r3, [pc, #200]	; (8023fdc <__swsetup_r+0xcc>)
 8023f12:	b570      	push	{r4, r5, r6, lr}
 8023f14:	681d      	ldr	r5, [r3, #0]
 8023f16:	4606      	mov	r6, r0
 8023f18:	460c      	mov	r4, r1
 8023f1a:	b125      	cbz	r5, 8023f26 <__swsetup_r+0x16>
 8023f1c:	69ab      	ldr	r3, [r5, #24]
 8023f1e:	b913      	cbnz	r3, 8023f26 <__swsetup_r+0x16>
 8023f20:	4628      	mov	r0, r5
 8023f22:	f000 f9b7 	bl	8024294 <__sinit>
 8023f26:	4b2e      	ldr	r3, [pc, #184]	; (8023fe0 <__swsetup_r+0xd0>)
 8023f28:	429c      	cmp	r4, r3
 8023f2a:	d10f      	bne.n	8023f4c <__swsetup_r+0x3c>
 8023f2c:	686c      	ldr	r4, [r5, #4]
 8023f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023f32:	b29a      	uxth	r2, r3
 8023f34:	0715      	lsls	r5, r2, #28
 8023f36:	d42c      	bmi.n	8023f92 <__swsetup_r+0x82>
 8023f38:	06d0      	lsls	r0, r2, #27
 8023f3a:	d411      	bmi.n	8023f60 <__swsetup_r+0x50>
 8023f3c:	2209      	movs	r2, #9
 8023f3e:	6032      	str	r2, [r6, #0]
 8023f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f44:	81a3      	strh	r3, [r4, #12]
 8023f46:	f04f 30ff 	mov.w	r0, #4294967295
 8023f4a:	e03e      	b.n	8023fca <__swsetup_r+0xba>
 8023f4c:	4b25      	ldr	r3, [pc, #148]	; (8023fe4 <__swsetup_r+0xd4>)
 8023f4e:	429c      	cmp	r4, r3
 8023f50:	d101      	bne.n	8023f56 <__swsetup_r+0x46>
 8023f52:	68ac      	ldr	r4, [r5, #8]
 8023f54:	e7eb      	b.n	8023f2e <__swsetup_r+0x1e>
 8023f56:	4b24      	ldr	r3, [pc, #144]	; (8023fe8 <__swsetup_r+0xd8>)
 8023f58:	429c      	cmp	r4, r3
 8023f5a:	bf08      	it	eq
 8023f5c:	68ec      	ldreq	r4, [r5, #12]
 8023f5e:	e7e6      	b.n	8023f2e <__swsetup_r+0x1e>
 8023f60:	0751      	lsls	r1, r2, #29
 8023f62:	d512      	bpl.n	8023f8a <__swsetup_r+0x7a>
 8023f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023f66:	b141      	cbz	r1, 8023f7a <__swsetup_r+0x6a>
 8023f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023f6c:	4299      	cmp	r1, r3
 8023f6e:	d002      	beq.n	8023f76 <__swsetup_r+0x66>
 8023f70:	4630      	mov	r0, r6
 8023f72:	f7ff fb97 	bl	80236a4 <_free_r>
 8023f76:	2300      	movs	r3, #0
 8023f78:	6363      	str	r3, [r4, #52]	; 0x34
 8023f7a:	89a3      	ldrh	r3, [r4, #12]
 8023f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023f80:	81a3      	strh	r3, [r4, #12]
 8023f82:	2300      	movs	r3, #0
 8023f84:	6063      	str	r3, [r4, #4]
 8023f86:	6923      	ldr	r3, [r4, #16]
 8023f88:	6023      	str	r3, [r4, #0]
 8023f8a:	89a3      	ldrh	r3, [r4, #12]
 8023f8c:	f043 0308 	orr.w	r3, r3, #8
 8023f90:	81a3      	strh	r3, [r4, #12]
 8023f92:	6923      	ldr	r3, [r4, #16]
 8023f94:	b94b      	cbnz	r3, 8023faa <__swsetup_r+0x9a>
 8023f96:	89a3      	ldrh	r3, [r4, #12]
 8023f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023fa0:	d003      	beq.n	8023faa <__swsetup_r+0x9a>
 8023fa2:	4621      	mov	r1, r4
 8023fa4:	4630      	mov	r0, r6
 8023fa6:	f000 fa23 	bl	80243f0 <__smakebuf_r>
 8023faa:	89a2      	ldrh	r2, [r4, #12]
 8023fac:	f012 0301 	ands.w	r3, r2, #1
 8023fb0:	d00c      	beq.n	8023fcc <__swsetup_r+0xbc>
 8023fb2:	2300      	movs	r3, #0
 8023fb4:	60a3      	str	r3, [r4, #8]
 8023fb6:	6963      	ldr	r3, [r4, #20]
 8023fb8:	425b      	negs	r3, r3
 8023fba:	61a3      	str	r3, [r4, #24]
 8023fbc:	6923      	ldr	r3, [r4, #16]
 8023fbe:	b953      	cbnz	r3, 8023fd6 <__swsetup_r+0xc6>
 8023fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023fc4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8023fc8:	d1ba      	bne.n	8023f40 <__swsetup_r+0x30>
 8023fca:	bd70      	pop	{r4, r5, r6, pc}
 8023fcc:	0792      	lsls	r2, r2, #30
 8023fce:	bf58      	it	pl
 8023fd0:	6963      	ldrpl	r3, [r4, #20]
 8023fd2:	60a3      	str	r3, [r4, #8]
 8023fd4:	e7f2      	b.n	8023fbc <__swsetup_r+0xac>
 8023fd6:	2000      	movs	r0, #0
 8023fd8:	e7f7      	b.n	8023fca <__swsetup_r+0xba>
 8023fda:	bf00      	nop
 8023fdc:	200000a4 	.word	0x200000a4
 8023fe0:	08029118 	.word	0x08029118
 8023fe4:	08029138 	.word	0x08029138
 8023fe8:	080290f8 	.word	0x080290f8

08023fec <__register_exitproc>:
 8023fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023ff0:	4d2c      	ldr	r5, [pc, #176]	; (80240a4 <__register_exitproc+0xb8>)
 8023ff2:	682c      	ldr	r4, [r5, #0]
 8023ff4:	4607      	mov	r7, r0
 8023ff6:	460e      	mov	r6, r1
 8023ff8:	4691      	mov	r9, r2
 8023ffa:	4698      	mov	r8, r3
 8023ffc:	b934      	cbnz	r4, 802400c <__register_exitproc+0x20>
 8023ffe:	4b2a      	ldr	r3, [pc, #168]	; (80240a8 <__register_exitproc+0xbc>)
 8024000:	4c2a      	ldr	r4, [pc, #168]	; (80240ac <__register_exitproc+0xc0>)
 8024002:	602c      	str	r4, [r5, #0]
 8024004:	b113      	cbz	r3, 802400c <__register_exitproc+0x20>
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802400c:	6863      	ldr	r3, [r4, #4]
 802400e:	2b1f      	cmp	r3, #31
 8024010:	dd3d      	ble.n	802408e <__register_exitproc+0xa2>
 8024012:	4b27      	ldr	r3, [pc, #156]	; (80240b0 <__register_exitproc+0xc4>)
 8024014:	b91b      	cbnz	r3, 802401e <__register_exitproc+0x32>
 8024016:	f04f 30ff 	mov.w	r0, #4294967295
 802401a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802401e:	208c      	movs	r0, #140	; 0x8c
 8024020:	f7ff fb1c 	bl	802365c <malloc>
 8024024:	4604      	mov	r4, r0
 8024026:	2800      	cmp	r0, #0
 8024028:	d0f5      	beq.n	8024016 <__register_exitproc+0x2a>
 802402a:	2300      	movs	r3, #0
 802402c:	682a      	ldr	r2, [r5, #0]
 802402e:	6002      	str	r2, [r0, #0]
 8024030:	6043      	str	r3, [r0, #4]
 8024032:	6028      	str	r0, [r5, #0]
 8024034:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8024038:	b30f      	cbz	r7, 802407e <__register_exitproc+0x92>
 802403a:	f44f 7084 	mov.w	r0, #264	; 0x108
 802403e:	f7ff fb0d 	bl	802365c <malloc>
 8024042:	2800      	cmp	r0, #0
 8024044:	d0e7      	beq.n	8024016 <__register_exitproc+0x2a>
 8024046:	2300      	movs	r3, #0
 8024048:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802404c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8024050:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024054:	6862      	ldr	r2, [r4, #4]
 8024056:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802405a:	2301      	movs	r3, #1
 802405c:	4093      	lsls	r3, r2
 802405e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8024062:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8024066:	431a      	orrs	r2, r3
 8024068:	2f02      	cmp	r7, #2
 802406a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802406e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8024072:	bf02      	ittt	eq
 8024074:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8024078:	4313      	orreq	r3, r2
 802407a:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802407e:	6863      	ldr	r3, [r4, #4]
 8024080:	1c5a      	adds	r2, r3, #1
 8024082:	3302      	adds	r3, #2
 8024084:	6062      	str	r2, [r4, #4]
 8024086:	2000      	movs	r0, #0
 8024088:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802408c:	e7c5      	b.n	802401a <__register_exitproc+0x2e>
 802408e:	2f00      	cmp	r7, #0
 8024090:	d0f5      	beq.n	802407e <__register_exitproc+0x92>
 8024092:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024096:	2800      	cmp	r0, #0
 8024098:	d1dc      	bne.n	8024054 <__register_exitproc+0x68>
 802409a:	4b05      	ldr	r3, [pc, #20]	; (80240b0 <__register_exitproc+0xc4>)
 802409c:	2b00      	cmp	r3, #0
 802409e:	d0ba      	beq.n	8024016 <__register_exitproc+0x2a>
 80240a0:	e7cb      	b.n	802403a <__register_exitproc+0x4e>
 80240a2:	bf00      	nop
 80240a4:	2002b340 	.word	0x2002b340
 80240a8:	080290f4 	.word	0x080290f4
 80240ac:	2002b2b4 	.word	0x2002b2b4
 80240b0:	0802365d 	.word	0x0802365d

080240b4 <__sflush_r>:
 80240b4:	898a      	ldrh	r2, [r1, #12]
 80240b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80240ba:	4605      	mov	r5, r0
 80240bc:	0710      	lsls	r0, r2, #28
 80240be:	460c      	mov	r4, r1
 80240c0:	d458      	bmi.n	8024174 <__sflush_r+0xc0>
 80240c2:	684b      	ldr	r3, [r1, #4]
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	dc05      	bgt.n	80240d4 <__sflush_r+0x20>
 80240c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	dc02      	bgt.n	80240d4 <__sflush_r+0x20>
 80240ce:	2000      	movs	r0, #0
 80240d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80240d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80240d6:	2e00      	cmp	r6, #0
 80240d8:	d0f9      	beq.n	80240ce <__sflush_r+0x1a>
 80240da:	2300      	movs	r3, #0
 80240dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80240e0:	682f      	ldr	r7, [r5, #0]
 80240e2:	6a21      	ldr	r1, [r4, #32]
 80240e4:	602b      	str	r3, [r5, #0]
 80240e6:	d032      	beq.n	802414e <__sflush_r+0x9a>
 80240e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80240ea:	89a3      	ldrh	r3, [r4, #12]
 80240ec:	075a      	lsls	r2, r3, #29
 80240ee:	d505      	bpl.n	80240fc <__sflush_r+0x48>
 80240f0:	6863      	ldr	r3, [r4, #4]
 80240f2:	1ac0      	subs	r0, r0, r3
 80240f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80240f6:	b10b      	cbz	r3, 80240fc <__sflush_r+0x48>
 80240f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80240fa:	1ac0      	subs	r0, r0, r3
 80240fc:	2300      	movs	r3, #0
 80240fe:	4602      	mov	r2, r0
 8024100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024102:	6a21      	ldr	r1, [r4, #32]
 8024104:	4628      	mov	r0, r5
 8024106:	47b0      	blx	r6
 8024108:	1c43      	adds	r3, r0, #1
 802410a:	89a3      	ldrh	r3, [r4, #12]
 802410c:	d106      	bne.n	802411c <__sflush_r+0x68>
 802410e:	6829      	ldr	r1, [r5, #0]
 8024110:	291d      	cmp	r1, #29
 8024112:	d848      	bhi.n	80241a6 <__sflush_r+0xf2>
 8024114:	4a29      	ldr	r2, [pc, #164]	; (80241bc <__sflush_r+0x108>)
 8024116:	40ca      	lsrs	r2, r1
 8024118:	07d6      	lsls	r6, r2, #31
 802411a:	d544      	bpl.n	80241a6 <__sflush_r+0xf2>
 802411c:	2200      	movs	r2, #0
 802411e:	6062      	str	r2, [r4, #4]
 8024120:	04d9      	lsls	r1, r3, #19
 8024122:	6922      	ldr	r2, [r4, #16]
 8024124:	6022      	str	r2, [r4, #0]
 8024126:	d504      	bpl.n	8024132 <__sflush_r+0x7e>
 8024128:	1c42      	adds	r2, r0, #1
 802412a:	d101      	bne.n	8024130 <__sflush_r+0x7c>
 802412c:	682b      	ldr	r3, [r5, #0]
 802412e:	b903      	cbnz	r3, 8024132 <__sflush_r+0x7e>
 8024130:	6560      	str	r0, [r4, #84]	; 0x54
 8024132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024134:	602f      	str	r7, [r5, #0]
 8024136:	2900      	cmp	r1, #0
 8024138:	d0c9      	beq.n	80240ce <__sflush_r+0x1a>
 802413a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802413e:	4299      	cmp	r1, r3
 8024140:	d002      	beq.n	8024148 <__sflush_r+0x94>
 8024142:	4628      	mov	r0, r5
 8024144:	f7ff faae 	bl	80236a4 <_free_r>
 8024148:	2000      	movs	r0, #0
 802414a:	6360      	str	r0, [r4, #52]	; 0x34
 802414c:	e7c0      	b.n	80240d0 <__sflush_r+0x1c>
 802414e:	2301      	movs	r3, #1
 8024150:	4628      	mov	r0, r5
 8024152:	47b0      	blx	r6
 8024154:	1c41      	adds	r1, r0, #1
 8024156:	d1c8      	bne.n	80240ea <__sflush_r+0x36>
 8024158:	682b      	ldr	r3, [r5, #0]
 802415a:	2b00      	cmp	r3, #0
 802415c:	d0c5      	beq.n	80240ea <__sflush_r+0x36>
 802415e:	2b1d      	cmp	r3, #29
 8024160:	d001      	beq.n	8024166 <__sflush_r+0xb2>
 8024162:	2b16      	cmp	r3, #22
 8024164:	d101      	bne.n	802416a <__sflush_r+0xb6>
 8024166:	602f      	str	r7, [r5, #0]
 8024168:	e7b1      	b.n	80240ce <__sflush_r+0x1a>
 802416a:	89a3      	ldrh	r3, [r4, #12]
 802416c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024170:	81a3      	strh	r3, [r4, #12]
 8024172:	e7ad      	b.n	80240d0 <__sflush_r+0x1c>
 8024174:	690f      	ldr	r7, [r1, #16]
 8024176:	2f00      	cmp	r7, #0
 8024178:	d0a9      	beq.n	80240ce <__sflush_r+0x1a>
 802417a:	0793      	lsls	r3, r2, #30
 802417c:	680e      	ldr	r6, [r1, #0]
 802417e:	bf08      	it	eq
 8024180:	694b      	ldreq	r3, [r1, #20]
 8024182:	600f      	str	r7, [r1, #0]
 8024184:	bf18      	it	ne
 8024186:	2300      	movne	r3, #0
 8024188:	eba6 0807 	sub.w	r8, r6, r7
 802418c:	608b      	str	r3, [r1, #8]
 802418e:	f1b8 0f00 	cmp.w	r8, #0
 8024192:	dd9c      	ble.n	80240ce <__sflush_r+0x1a>
 8024194:	4643      	mov	r3, r8
 8024196:	463a      	mov	r2, r7
 8024198:	6a21      	ldr	r1, [r4, #32]
 802419a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802419c:	4628      	mov	r0, r5
 802419e:	47b0      	blx	r6
 80241a0:	2800      	cmp	r0, #0
 80241a2:	dc06      	bgt.n	80241b2 <__sflush_r+0xfe>
 80241a4:	89a3      	ldrh	r3, [r4, #12]
 80241a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80241aa:	81a3      	strh	r3, [r4, #12]
 80241ac:	f04f 30ff 	mov.w	r0, #4294967295
 80241b0:	e78e      	b.n	80240d0 <__sflush_r+0x1c>
 80241b2:	4407      	add	r7, r0
 80241b4:	eba8 0800 	sub.w	r8, r8, r0
 80241b8:	e7e9      	b.n	802418e <__sflush_r+0xda>
 80241ba:	bf00      	nop
 80241bc:	20400001 	.word	0x20400001

080241c0 <_fflush_r>:
 80241c0:	b538      	push	{r3, r4, r5, lr}
 80241c2:	690b      	ldr	r3, [r1, #16]
 80241c4:	4605      	mov	r5, r0
 80241c6:	460c      	mov	r4, r1
 80241c8:	b1db      	cbz	r3, 8024202 <_fflush_r+0x42>
 80241ca:	b118      	cbz	r0, 80241d4 <_fflush_r+0x14>
 80241cc:	6983      	ldr	r3, [r0, #24]
 80241ce:	b90b      	cbnz	r3, 80241d4 <_fflush_r+0x14>
 80241d0:	f000 f860 	bl	8024294 <__sinit>
 80241d4:	4b0c      	ldr	r3, [pc, #48]	; (8024208 <_fflush_r+0x48>)
 80241d6:	429c      	cmp	r4, r3
 80241d8:	d109      	bne.n	80241ee <_fflush_r+0x2e>
 80241da:	686c      	ldr	r4, [r5, #4]
 80241dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80241e0:	b17b      	cbz	r3, 8024202 <_fflush_r+0x42>
 80241e2:	4621      	mov	r1, r4
 80241e4:	4628      	mov	r0, r5
 80241e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80241ea:	f7ff bf63 	b.w	80240b4 <__sflush_r>
 80241ee:	4b07      	ldr	r3, [pc, #28]	; (802420c <_fflush_r+0x4c>)
 80241f0:	429c      	cmp	r4, r3
 80241f2:	d101      	bne.n	80241f8 <_fflush_r+0x38>
 80241f4:	68ac      	ldr	r4, [r5, #8]
 80241f6:	e7f1      	b.n	80241dc <_fflush_r+0x1c>
 80241f8:	4b05      	ldr	r3, [pc, #20]	; (8024210 <_fflush_r+0x50>)
 80241fa:	429c      	cmp	r4, r3
 80241fc:	bf08      	it	eq
 80241fe:	68ec      	ldreq	r4, [r5, #12]
 8024200:	e7ec      	b.n	80241dc <_fflush_r+0x1c>
 8024202:	2000      	movs	r0, #0
 8024204:	bd38      	pop	{r3, r4, r5, pc}
 8024206:	bf00      	nop
 8024208:	08029118 	.word	0x08029118
 802420c:	08029138 	.word	0x08029138
 8024210:	080290f8 	.word	0x080290f8

08024214 <std>:
 8024214:	2300      	movs	r3, #0
 8024216:	b510      	push	{r4, lr}
 8024218:	4604      	mov	r4, r0
 802421a:	e9c0 3300 	strd	r3, r3, [r0]
 802421e:	6083      	str	r3, [r0, #8]
 8024220:	8181      	strh	r1, [r0, #12]
 8024222:	6643      	str	r3, [r0, #100]	; 0x64
 8024224:	81c2      	strh	r2, [r0, #14]
 8024226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802422a:	6183      	str	r3, [r0, #24]
 802422c:	4619      	mov	r1, r3
 802422e:	2208      	movs	r2, #8
 8024230:	305c      	adds	r0, #92	; 0x5c
 8024232:	f7ff fa2e 	bl	8023692 <memset>
 8024236:	4b05      	ldr	r3, [pc, #20]	; (802424c <std+0x38>)
 8024238:	6263      	str	r3, [r4, #36]	; 0x24
 802423a:	4b05      	ldr	r3, [pc, #20]	; (8024250 <std+0x3c>)
 802423c:	62a3      	str	r3, [r4, #40]	; 0x28
 802423e:	4b05      	ldr	r3, [pc, #20]	; (8024254 <std+0x40>)
 8024240:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024242:	4b05      	ldr	r3, [pc, #20]	; (8024258 <std+0x44>)
 8024244:	6224      	str	r4, [r4, #32]
 8024246:	6323      	str	r3, [r4, #48]	; 0x30
 8024248:	bd10      	pop	{r4, pc}
 802424a:	bf00      	nop
 802424c:	08024799 	.word	0x08024799
 8024250:	080247bb 	.word	0x080247bb
 8024254:	080247f3 	.word	0x080247f3
 8024258:	08024817 	.word	0x08024817

0802425c <_cleanup_r>:
 802425c:	4901      	ldr	r1, [pc, #4]	; (8024264 <_cleanup_r+0x8>)
 802425e:	f000 b885 	b.w	802436c <_fwalk_reent>
 8024262:	bf00      	nop
 8024264:	080241c1 	.word	0x080241c1

08024268 <__sfmoreglue>:
 8024268:	b570      	push	{r4, r5, r6, lr}
 802426a:	1e4a      	subs	r2, r1, #1
 802426c:	2568      	movs	r5, #104	; 0x68
 802426e:	4355      	muls	r5, r2
 8024270:	460e      	mov	r6, r1
 8024272:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024276:	f7ff fa63 	bl	8023740 <_malloc_r>
 802427a:	4604      	mov	r4, r0
 802427c:	b140      	cbz	r0, 8024290 <__sfmoreglue+0x28>
 802427e:	2100      	movs	r1, #0
 8024280:	e9c0 1600 	strd	r1, r6, [r0]
 8024284:	300c      	adds	r0, #12
 8024286:	60a0      	str	r0, [r4, #8]
 8024288:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802428c:	f7ff fa01 	bl	8023692 <memset>
 8024290:	4620      	mov	r0, r4
 8024292:	bd70      	pop	{r4, r5, r6, pc}

08024294 <__sinit>:
 8024294:	6983      	ldr	r3, [r0, #24]
 8024296:	b510      	push	{r4, lr}
 8024298:	4604      	mov	r4, r0
 802429a:	bb33      	cbnz	r3, 80242ea <__sinit+0x56>
 802429c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80242a0:	6503      	str	r3, [r0, #80]	; 0x50
 80242a2:	4b12      	ldr	r3, [pc, #72]	; (80242ec <__sinit+0x58>)
 80242a4:	4a12      	ldr	r2, [pc, #72]	; (80242f0 <__sinit+0x5c>)
 80242a6:	681b      	ldr	r3, [r3, #0]
 80242a8:	6282      	str	r2, [r0, #40]	; 0x28
 80242aa:	4298      	cmp	r0, r3
 80242ac:	bf04      	itt	eq
 80242ae:	2301      	moveq	r3, #1
 80242b0:	6183      	streq	r3, [r0, #24]
 80242b2:	f000 f81f 	bl	80242f4 <__sfp>
 80242b6:	6060      	str	r0, [r4, #4]
 80242b8:	4620      	mov	r0, r4
 80242ba:	f000 f81b 	bl	80242f4 <__sfp>
 80242be:	60a0      	str	r0, [r4, #8]
 80242c0:	4620      	mov	r0, r4
 80242c2:	f000 f817 	bl	80242f4 <__sfp>
 80242c6:	2200      	movs	r2, #0
 80242c8:	60e0      	str	r0, [r4, #12]
 80242ca:	2104      	movs	r1, #4
 80242cc:	6860      	ldr	r0, [r4, #4]
 80242ce:	f7ff ffa1 	bl	8024214 <std>
 80242d2:	2201      	movs	r2, #1
 80242d4:	2109      	movs	r1, #9
 80242d6:	68a0      	ldr	r0, [r4, #8]
 80242d8:	f7ff ff9c 	bl	8024214 <std>
 80242dc:	2202      	movs	r2, #2
 80242de:	2112      	movs	r1, #18
 80242e0:	68e0      	ldr	r0, [r4, #12]
 80242e2:	f7ff ff97 	bl	8024214 <std>
 80242e6:	2301      	movs	r3, #1
 80242e8:	61a3      	str	r3, [r4, #24]
 80242ea:	bd10      	pop	{r4, pc}
 80242ec:	080290bc 	.word	0x080290bc
 80242f0:	0802425d 	.word	0x0802425d

080242f4 <__sfp>:
 80242f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242f6:	4b1b      	ldr	r3, [pc, #108]	; (8024364 <__sfp+0x70>)
 80242f8:	681e      	ldr	r6, [r3, #0]
 80242fa:	69b3      	ldr	r3, [r6, #24]
 80242fc:	4607      	mov	r7, r0
 80242fe:	b913      	cbnz	r3, 8024306 <__sfp+0x12>
 8024300:	4630      	mov	r0, r6
 8024302:	f7ff ffc7 	bl	8024294 <__sinit>
 8024306:	3648      	adds	r6, #72	; 0x48
 8024308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802430c:	3b01      	subs	r3, #1
 802430e:	d503      	bpl.n	8024318 <__sfp+0x24>
 8024310:	6833      	ldr	r3, [r6, #0]
 8024312:	b133      	cbz	r3, 8024322 <__sfp+0x2e>
 8024314:	6836      	ldr	r6, [r6, #0]
 8024316:	e7f7      	b.n	8024308 <__sfp+0x14>
 8024318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802431c:	b16d      	cbz	r5, 802433a <__sfp+0x46>
 802431e:	3468      	adds	r4, #104	; 0x68
 8024320:	e7f4      	b.n	802430c <__sfp+0x18>
 8024322:	2104      	movs	r1, #4
 8024324:	4638      	mov	r0, r7
 8024326:	f7ff ff9f 	bl	8024268 <__sfmoreglue>
 802432a:	6030      	str	r0, [r6, #0]
 802432c:	2800      	cmp	r0, #0
 802432e:	d1f1      	bne.n	8024314 <__sfp+0x20>
 8024330:	230c      	movs	r3, #12
 8024332:	603b      	str	r3, [r7, #0]
 8024334:	4604      	mov	r4, r0
 8024336:	4620      	mov	r0, r4
 8024338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802433a:	4b0b      	ldr	r3, [pc, #44]	; (8024368 <__sfp+0x74>)
 802433c:	6665      	str	r5, [r4, #100]	; 0x64
 802433e:	e9c4 5500 	strd	r5, r5, [r4]
 8024342:	60a5      	str	r5, [r4, #8]
 8024344:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8024348:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802434c:	2208      	movs	r2, #8
 802434e:	4629      	mov	r1, r5
 8024350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024354:	f7ff f99d 	bl	8023692 <memset>
 8024358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802435c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024360:	e7e9      	b.n	8024336 <__sfp+0x42>
 8024362:	bf00      	nop
 8024364:	080290bc 	.word	0x080290bc
 8024368:	ffff0001 	.word	0xffff0001

0802436c <_fwalk_reent>:
 802436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024370:	4680      	mov	r8, r0
 8024372:	4689      	mov	r9, r1
 8024374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024378:	2600      	movs	r6, #0
 802437a:	b914      	cbnz	r4, 8024382 <_fwalk_reent+0x16>
 802437c:	4630      	mov	r0, r6
 802437e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024382:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8024386:	3f01      	subs	r7, #1
 8024388:	d501      	bpl.n	802438e <_fwalk_reent+0x22>
 802438a:	6824      	ldr	r4, [r4, #0]
 802438c:	e7f5      	b.n	802437a <_fwalk_reent+0xe>
 802438e:	89ab      	ldrh	r3, [r5, #12]
 8024390:	2b01      	cmp	r3, #1
 8024392:	d907      	bls.n	80243a4 <_fwalk_reent+0x38>
 8024394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024398:	3301      	adds	r3, #1
 802439a:	d003      	beq.n	80243a4 <_fwalk_reent+0x38>
 802439c:	4629      	mov	r1, r5
 802439e:	4640      	mov	r0, r8
 80243a0:	47c8      	blx	r9
 80243a2:	4306      	orrs	r6, r0
 80243a4:	3568      	adds	r5, #104	; 0x68
 80243a6:	e7ee      	b.n	8024386 <_fwalk_reent+0x1a>

080243a8 <__swhatbuf_r>:
 80243a8:	b570      	push	{r4, r5, r6, lr}
 80243aa:	460e      	mov	r6, r1
 80243ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80243b0:	2900      	cmp	r1, #0
 80243b2:	b096      	sub	sp, #88	; 0x58
 80243b4:	4614      	mov	r4, r2
 80243b6:	461d      	mov	r5, r3
 80243b8:	da07      	bge.n	80243ca <__swhatbuf_r+0x22>
 80243ba:	2300      	movs	r3, #0
 80243bc:	602b      	str	r3, [r5, #0]
 80243be:	89b3      	ldrh	r3, [r6, #12]
 80243c0:	061a      	lsls	r2, r3, #24
 80243c2:	d410      	bmi.n	80243e6 <__swhatbuf_r+0x3e>
 80243c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80243c8:	e00e      	b.n	80243e8 <__swhatbuf_r+0x40>
 80243ca:	466a      	mov	r2, sp
 80243cc:	f000 fa4a 	bl	8024864 <_fstat_r>
 80243d0:	2800      	cmp	r0, #0
 80243d2:	dbf2      	blt.n	80243ba <__swhatbuf_r+0x12>
 80243d4:	9a01      	ldr	r2, [sp, #4]
 80243d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80243da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80243de:	425a      	negs	r2, r3
 80243e0:	415a      	adcs	r2, r3
 80243e2:	602a      	str	r2, [r5, #0]
 80243e4:	e7ee      	b.n	80243c4 <__swhatbuf_r+0x1c>
 80243e6:	2340      	movs	r3, #64	; 0x40
 80243e8:	2000      	movs	r0, #0
 80243ea:	6023      	str	r3, [r4, #0]
 80243ec:	b016      	add	sp, #88	; 0x58
 80243ee:	bd70      	pop	{r4, r5, r6, pc}

080243f0 <__smakebuf_r>:
 80243f0:	898b      	ldrh	r3, [r1, #12]
 80243f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80243f4:	079d      	lsls	r5, r3, #30
 80243f6:	4606      	mov	r6, r0
 80243f8:	460c      	mov	r4, r1
 80243fa:	d507      	bpl.n	802440c <__smakebuf_r+0x1c>
 80243fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024400:	6023      	str	r3, [r4, #0]
 8024402:	6123      	str	r3, [r4, #16]
 8024404:	2301      	movs	r3, #1
 8024406:	6163      	str	r3, [r4, #20]
 8024408:	b002      	add	sp, #8
 802440a:	bd70      	pop	{r4, r5, r6, pc}
 802440c:	ab01      	add	r3, sp, #4
 802440e:	466a      	mov	r2, sp
 8024410:	f7ff ffca 	bl	80243a8 <__swhatbuf_r>
 8024414:	9900      	ldr	r1, [sp, #0]
 8024416:	4605      	mov	r5, r0
 8024418:	4630      	mov	r0, r6
 802441a:	f7ff f991 	bl	8023740 <_malloc_r>
 802441e:	b948      	cbnz	r0, 8024434 <__smakebuf_r+0x44>
 8024420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024424:	059a      	lsls	r2, r3, #22
 8024426:	d4ef      	bmi.n	8024408 <__smakebuf_r+0x18>
 8024428:	f023 0303 	bic.w	r3, r3, #3
 802442c:	f043 0302 	orr.w	r3, r3, #2
 8024430:	81a3      	strh	r3, [r4, #12]
 8024432:	e7e3      	b.n	80243fc <__smakebuf_r+0xc>
 8024434:	4b0d      	ldr	r3, [pc, #52]	; (802446c <__smakebuf_r+0x7c>)
 8024436:	62b3      	str	r3, [r6, #40]	; 0x28
 8024438:	89a3      	ldrh	r3, [r4, #12]
 802443a:	6020      	str	r0, [r4, #0]
 802443c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024440:	81a3      	strh	r3, [r4, #12]
 8024442:	9b00      	ldr	r3, [sp, #0]
 8024444:	6163      	str	r3, [r4, #20]
 8024446:	9b01      	ldr	r3, [sp, #4]
 8024448:	6120      	str	r0, [r4, #16]
 802444a:	b15b      	cbz	r3, 8024464 <__smakebuf_r+0x74>
 802444c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024450:	4630      	mov	r0, r6
 8024452:	f000 fa19 	bl	8024888 <_isatty_r>
 8024456:	b128      	cbz	r0, 8024464 <__smakebuf_r+0x74>
 8024458:	89a3      	ldrh	r3, [r4, #12]
 802445a:	f023 0303 	bic.w	r3, r3, #3
 802445e:	f043 0301 	orr.w	r3, r3, #1
 8024462:	81a3      	strh	r3, [r4, #12]
 8024464:	89a3      	ldrh	r3, [r4, #12]
 8024466:	431d      	orrs	r5, r3
 8024468:	81a5      	strh	r5, [r4, #12]
 802446a:	e7cd      	b.n	8024408 <__smakebuf_r+0x18>
 802446c:	0802425d 	.word	0x0802425d

08024470 <memmove>:
 8024470:	4288      	cmp	r0, r1
 8024472:	b510      	push	{r4, lr}
 8024474:	eb01 0302 	add.w	r3, r1, r2
 8024478:	d807      	bhi.n	802448a <memmove+0x1a>
 802447a:	1e42      	subs	r2, r0, #1
 802447c:	4299      	cmp	r1, r3
 802447e:	d00a      	beq.n	8024496 <memmove+0x26>
 8024480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024484:	f802 4f01 	strb.w	r4, [r2, #1]!
 8024488:	e7f8      	b.n	802447c <memmove+0xc>
 802448a:	4283      	cmp	r3, r0
 802448c:	d9f5      	bls.n	802447a <memmove+0xa>
 802448e:	1881      	adds	r1, r0, r2
 8024490:	1ad2      	subs	r2, r2, r3
 8024492:	42d3      	cmn	r3, r2
 8024494:	d100      	bne.n	8024498 <memmove+0x28>
 8024496:	bd10      	pop	{r4, pc}
 8024498:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802449c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80244a0:	e7f7      	b.n	8024492 <memmove+0x22>

080244a2 <__malloc_lock>:
 80244a2:	4770      	bx	lr

080244a4 <__malloc_unlock>:
 80244a4:	4770      	bx	lr

080244a6 <_realloc_r>:
 80244a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244a8:	4607      	mov	r7, r0
 80244aa:	4614      	mov	r4, r2
 80244ac:	460e      	mov	r6, r1
 80244ae:	b921      	cbnz	r1, 80244ba <_realloc_r+0x14>
 80244b0:	4611      	mov	r1, r2
 80244b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80244b6:	f7ff b943 	b.w	8023740 <_malloc_r>
 80244ba:	b922      	cbnz	r2, 80244c6 <_realloc_r+0x20>
 80244bc:	f7ff f8f2 	bl	80236a4 <_free_r>
 80244c0:	4625      	mov	r5, r4
 80244c2:	4628      	mov	r0, r5
 80244c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80244c6:	f000 fa01 	bl	80248cc <_malloc_usable_size_r>
 80244ca:	42a0      	cmp	r0, r4
 80244cc:	d20f      	bcs.n	80244ee <_realloc_r+0x48>
 80244ce:	4621      	mov	r1, r4
 80244d0:	4638      	mov	r0, r7
 80244d2:	f7ff f935 	bl	8023740 <_malloc_r>
 80244d6:	4605      	mov	r5, r0
 80244d8:	2800      	cmp	r0, #0
 80244da:	d0f2      	beq.n	80244c2 <_realloc_r+0x1c>
 80244dc:	4631      	mov	r1, r6
 80244de:	4622      	mov	r2, r4
 80244e0:	f7ff f8cc 	bl	802367c <memcpy>
 80244e4:	4631      	mov	r1, r6
 80244e6:	4638      	mov	r0, r7
 80244e8:	f7ff f8dc 	bl	80236a4 <_free_r>
 80244ec:	e7e9      	b.n	80244c2 <_realloc_r+0x1c>
 80244ee:	4635      	mov	r5, r6
 80244f0:	e7e7      	b.n	80244c2 <_realloc_r+0x1c>

080244f2 <__ssputs_r>:
 80244f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244f6:	688e      	ldr	r6, [r1, #8]
 80244f8:	429e      	cmp	r6, r3
 80244fa:	4682      	mov	sl, r0
 80244fc:	460c      	mov	r4, r1
 80244fe:	4690      	mov	r8, r2
 8024500:	4699      	mov	r9, r3
 8024502:	d837      	bhi.n	8024574 <__ssputs_r+0x82>
 8024504:	898a      	ldrh	r2, [r1, #12]
 8024506:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802450a:	d031      	beq.n	8024570 <__ssputs_r+0x7e>
 802450c:	6825      	ldr	r5, [r4, #0]
 802450e:	6909      	ldr	r1, [r1, #16]
 8024510:	1a6f      	subs	r7, r5, r1
 8024512:	6965      	ldr	r5, [r4, #20]
 8024514:	2302      	movs	r3, #2
 8024516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802451a:	fb95 f5f3 	sdiv	r5, r5, r3
 802451e:	f109 0301 	add.w	r3, r9, #1
 8024522:	443b      	add	r3, r7
 8024524:	429d      	cmp	r5, r3
 8024526:	bf38      	it	cc
 8024528:	461d      	movcc	r5, r3
 802452a:	0553      	lsls	r3, r2, #21
 802452c:	d530      	bpl.n	8024590 <__ssputs_r+0x9e>
 802452e:	4629      	mov	r1, r5
 8024530:	f7ff f906 	bl	8023740 <_malloc_r>
 8024534:	4606      	mov	r6, r0
 8024536:	b950      	cbnz	r0, 802454e <__ssputs_r+0x5c>
 8024538:	230c      	movs	r3, #12
 802453a:	f8ca 3000 	str.w	r3, [sl]
 802453e:	89a3      	ldrh	r3, [r4, #12]
 8024540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024544:	81a3      	strh	r3, [r4, #12]
 8024546:	f04f 30ff 	mov.w	r0, #4294967295
 802454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802454e:	463a      	mov	r2, r7
 8024550:	6921      	ldr	r1, [r4, #16]
 8024552:	f7ff f893 	bl	802367c <memcpy>
 8024556:	89a3      	ldrh	r3, [r4, #12]
 8024558:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802455c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024560:	81a3      	strh	r3, [r4, #12]
 8024562:	6126      	str	r6, [r4, #16]
 8024564:	6165      	str	r5, [r4, #20]
 8024566:	443e      	add	r6, r7
 8024568:	1bed      	subs	r5, r5, r7
 802456a:	6026      	str	r6, [r4, #0]
 802456c:	60a5      	str	r5, [r4, #8]
 802456e:	464e      	mov	r6, r9
 8024570:	454e      	cmp	r6, r9
 8024572:	d900      	bls.n	8024576 <__ssputs_r+0x84>
 8024574:	464e      	mov	r6, r9
 8024576:	4632      	mov	r2, r6
 8024578:	4641      	mov	r1, r8
 802457a:	6820      	ldr	r0, [r4, #0]
 802457c:	f7ff ff78 	bl	8024470 <memmove>
 8024580:	68a3      	ldr	r3, [r4, #8]
 8024582:	1b9b      	subs	r3, r3, r6
 8024584:	60a3      	str	r3, [r4, #8]
 8024586:	6823      	ldr	r3, [r4, #0]
 8024588:	441e      	add	r6, r3
 802458a:	6026      	str	r6, [r4, #0]
 802458c:	2000      	movs	r0, #0
 802458e:	e7dc      	b.n	802454a <__ssputs_r+0x58>
 8024590:	462a      	mov	r2, r5
 8024592:	f7ff ff88 	bl	80244a6 <_realloc_r>
 8024596:	4606      	mov	r6, r0
 8024598:	2800      	cmp	r0, #0
 802459a:	d1e2      	bne.n	8024562 <__ssputs_r+0x70>
 802459c:	6921      	ldr	r1, [r4, #16]
 802459e:	4650      	mov	r0, sl
 80245a0:	f7ff f880 	bl	80236a4 <_free_r>
 80245a4:	e7c8      	b.n	8024538 <__ssputs_r+0x46>
	...

080245a8 <_svfiprintf_r>:
 80245a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245ac:	461d      	mov	r5, r3
 80245ae:	898b      	ldrh	r3, [r1, #12]
 80245b0:	061f      	lsls	r7, r3, #24
 80245b2:	b09d      	sub	sp, #116	; 0x74
 80245b4:	4680      	mov	r8, r0
 80245b6:	460c      	mov	r4, r1
 80245b8:	4616      	mov	r6, r2
 80245ba:	d50f      	bpl.n	80245dc <_svfiprintf_r+0x34>
 80245bc:	690b      	ldr	r3, [r1, #16]
 80245be:	b96b      	cbnz	r3, 80245dc <_svfiprintf_r+0x34>
 80245c0:	2140      	movs	r1, #64	; 0x40
 80245c2:	f7ff f8bd 	bl	8023740 <_malloc_r>
 80245c6:	6020      	str	r0, [r4, #0]
 80245c8:	6120      	str	r0, [r4, #16]
 80245ca:	b928      	cbnz	r0, 80245d8 <_svfiprintf_r+0x30>
 80245cc:	230c      	movs	r3, #12
 80245ce:	f8c8 3000 	str.w	r3, [r8]
 80245d2:	f04f 30ff 	mov.w	r0, #4294967295
 80245d6:	e0c8      	b.n	802476a <_svfiprintf_r+0x1c2>
 80245d8:	2340      	movs	r3, #64	; 0x40
 80245da:	6163      	str	r3, [r4, #20]
 80245dc:	2300      	movs	r3, #0
 80245de:	9309      	str	r3, [sp, #36]	; 0x24
 80245e0:	2320      	movs	r3, #32
 80245e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80245e6:	2330      	movs	r3, #48	; 0x30
 80245e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80245ec:	9503      	str	r5, [sp, #12]
 80245ee:	f04f 0b01 	mov.w	fp, #1
 80245f2:	4637      	mov	r7, r6
 80245f4:	463d      	mov	r5, r7
 80245f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80245fa:	b10b      	cbz	r3, 8024600 <_svfiprintf_r+0x58>
 80245fc:	2b25      	cmp	r3, #37	; 0x25
 80245fe:	d13e      	bne.n	802467e <_svfiprintf_r+0xd6>
 8024600:	ebb7 0a06 	subs.w	sl, r7, r6
 8024604:	d00b      	beq.n	802461e <_svfiprintf_r+0x76>
 8024606:	4653      	mov	r3, sl
 8024608:	4632      	mov	r2, r6
 802460a:	4621      	mov	r1, r4
 802460c:	4640      	mov	r0, r8
 802460e:	f7ff ff70 	bl	80244f2 <__ssputs_r>
 8024612:	3001      	adds	r0, #1
 8024614:	f000 80a4 	beq.w	8024760 <_svfiprintf_r+0x1b8>
 8024618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802461a:	4453      	add	r3, sl
 802461c:	9309      	str	r3, [sp, #36]	; 0x24
 802461e:	783b      	ldrb	r3, [r7, #0]
 8024620:	2b00      	cmp	r3, #0
 8024622:	f000 809d 	beq.w	8024760 <_svfiprintf_r+0x1b8>
 8024626:	2300      	movs	r3, #0
 8024628:	f04f 32ff 	mov.w	r2, #4294967295
 802462c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024630:	9304      	str	r3, [sp, #16]
 8024632:	9307      	str	r3, [sp, #28]
 8024634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024638:	931a      	str	r3, [sp, #104]	; 0x68
 802463a:	462f      	mov	r7, r5
 802463c:	2205      	movs	r2, #5
 802463e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8024642:	4850      	ldr	r0, [pc, #320]	; (8024784 <_svfiprintf_r+0x1dc>)
 8024644:	f7db fddc 	bl	8000200 <memchr>
 8024648:	9b04      	ldr	r3, [sp, #16]
 802464a:	b9d0      	cbnz	r0, 8024682 <_svfiprintf_r+0xda>
 802464c:	06d9      	lsls	r1, r3, #27
 802464e:	bf44      	itt	mi
 8024650:	2220      	movmi	r2, #32
 8024652:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024656:	071a      	lsls	r2, r3, #28
 8024658:	bf44      	itt	mi
 802465a:	222b      	movmi	r2, #43	; 0x2b
 802465c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024660:	782a      	ldrb	r2, [r5, #0]
 8024662:	2a2a      	cmp	r2, #42	; 0x2a
 8024664:	d015      	beq.n	8024692 <_svfiprintf_r+0xea>
 8024666:	9a07      	ldr	r2, [sp, #28]
 8024668:	462f      	mov	r7, r5
 802466a:	2000      	movs	r0, #0
 802466c:	250a      	movs	r5, #10
 802466e:	4639      	mov	r1, r7
 8024670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024674:	3b30      	subs	r3, #48	; 0x30
 8024676:	2b09      	cmp	r3, #9
 8024678:	d94d      	bls.n	8024716 <_svfiprintf_r+0x16e>
 802467a:	b1b8      	cbz	r0, 80246ac <_svfiprintf_r+0x104>
 802467c:	e00f      	b.n	802469e <_svfiprintf_r+0xf6>
 802467e:	462f      	mov	r7, r5
 8024680:	e7b8      	b.n	80245f4 <_svfiprintf_r+0x4c>
 8024682:	4a40      	ldr	r2, [pc, #256]	; (8024784 <_svfiprintf_r+0x1dc>)
 8024684:	1a80      	subs	r0, r0, r2
 8024686:	fa0b f000 	lsl.w	r0, fp, r0
 802468a:	4318      	orrs	r0, r3
 802468c:	9004      	str	r0, [sp, #16]
 802468e:	463d      	mov	r5, r7
 8024690:	e7d3      	b.n	802463a <_svfiprintf_r+0x92>
 8024692:	9a03      	ldr	r2, [sp, #12]
 8024694:	1d11      	adds	r1, r2, #4
 8024696:	6812      	ldr	r2, [r2, #0]
 8024698:	9103      	str	r1, [sp, #12]
 802469a:	2a00      	cmp	r2, #0
 802469c:	db01      	blt.n	80246a2 <_svfiprintf_r+0xfa>
 802469e:	9207      	str	r2, [sp, #28]
 80246a0:	e004      	b.n	80246ac <_svfiprintf_r+0x104>
 80246a2:	4252      	negs	r2, r2
 80246a4:	f043 0302 	orr.w	r3, r3, #2
 80246a8:	9207      	str	r2, [sp, #28]
 80246aa:	9304      	str	r3, [sp, #16]
 80246ac:	783b      	ldrb	r3, [r7, #0]
 80246ae:	2b2e      	cmp	r3, #46	; 0x2e
 80246b0:	d10c      	bne.n	80246cc <_svfiprintf_r+0x124>
 80246b2:	787b      	ldrb	r3, [r7, #1]
 80246b4:	2b2a      	cmp	r3, #42	; 0x2a
 80246b6:	d133      	bne.n	8024720 <_svfiprintf_r+0x178>
 80246b8:	9b03      	ldr	r3, [sp, #12]
 80246ba:	1d1a      	adds	r2, r3, #4
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	9203      	str	r2, [sp, #12]
 80246c0:	2b00      	cmp	r3, #0
 80246c2:	bfb8      	it	lt
 80246c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80246c8:	3702      	adds	r7, #2
 80246ca:	9305      	str	r3, [sp, #20]
 80246cc:	4d2e      	ldr	r5, [pc, #184]	; (8024788 <_svfiprintf_r+0x1e0>)
 80246ce:	7839      	ldrb	r1, [r7, #0]
 80246d0:	2203      	movs	r2, #3
 80246d2:	4628      	mov	r0, r5
 80246d4:	f7db fd94 	bl	8000200 <memchr>
 80246d8:	b138      	cbz	r0, 80246ea <_svfiprintf_r+0x142>
 80246da:	2340      	movs	r3, #64	; 0x40
 80246dc:	1b40      	subs	r0, r0, r5
 80246de:	fa03 f000 	lsl.w	r0, r3, r0
 80246e2:	9b04      	ldr	r3, [sp, #16]
 80246e4:	4303      	orrs	r3, r0
 80246e6:	3701      	adds	r7, #1
 80246e8:	9304      	str	r3, [sp, #16]
 80246ea:	7839      	ldrb	r1, [r7, #0]
 80246ec:	4827      	ldr	r0, [pc, #156]	; (802478c <_svfiprintf_r+0x1e4>)
 80246ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80246f2:	2206      	movs	r2, #6
 80246f4:	1c7e      	adds	r6, r7, #1
 80246f6:	f7db fd83 	bl	8000200 <memchr>
 80246fa:	2800      	cmp	r0, #0
 80246fc:	d038      	beq.n	8024770 <_svfiprintf_r+0x1c8>
 80246fe:	4b24      	ldr	r3, [pc, #144]	; (8024790 <_svfiprintf_r+0x1e8>)
 8024700:	bb13      	cbnz	r3, 8024748 <_svfiprintf_r+0x1a0>
 8024702:	9b03      	ldr	r3, [sp, #12]
 8024704:	3307      	adds	r3, #7
 8024706:	f023 0307 	bic.w	r3, r3, #7
 802470a:	3308      	adds	r3, #8
 802470c:	9303      	str	r3, [sp, #12]
 802470e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024710:	444b      	add	r3, r9
 8024712:	9309      	str	r3, [sp, #36]	; 0x24
 8024714:	e76d      	b.n	80245f2 <_svfiprintf_r+0x4a>
 8024716:	fb05 3202 	mla	r2, r5, r2, r3
 802471a:	2001      	movs	r0, #1
 802471c:	460f      	mov	r7, r1
 802471e:	e7a6      	b.n	802466e <_svfiprintf_r+0xc6>
 8024720:	2300      	movs	r3, #0
 8024722:	3701      	adds	r7, #1
 8024724:	9305      	str	r3, [sp, #20]
 8024726:	4619      	mov	r1, r3
 8024728:	250a      	movs	r5, #10
 802472a:	4638      	mov	r0, r7
 802472c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024730:	3a30      	subs	r2, #48	; 0x30
 8024732:	2a09      	cmp	r2, #9
 8024734:	d903      	bls.n	802473e <_svfiprintf_r+0x196>
 8024736:	2b00      	cmp	r3, #0
 8024738:	d0c8      	beq.n	80246cc <_svfiprintf_r+0x124>
 802473a:	9105      	str	r1, [sp, #20]
 802473c:	e7c6      	b.n	80246cc <_svfiprintf_r+0x124>
 802473e:	fb05 2101 	mla	r1, r5, r1, r2
 8024742:	2301      	movs	r3, #1
 8024744:	4607      	mov	r7, r0
 8024746:	e7f0      	b.n	802472a <_svfiprintf_r+0x182>
 8024748:	ab03      	add	r3, sp, #12
 802474a:	9300      	str	r3, [sp, #0]
 802474c:	4622      	mov	r2, r4
 802474e:	4b11      	ldr	r3, [pc, #68]	; (8024794 <_svfiprintf_r+0x1ec>)
 8024750:	a904      	add	r1, sp, #16
 8024752:	4640      	mov	r0, r8
 8024754:	f3af 8000 	nop.w
 8024758:	f1b0 3fff 	cmp.w	r0, #4294967295
 802475c:	4681      	mov	r9, r0
 802475e:	d1d6      	bne.n	802470e <_svfiprintf_r+0x166>
 8024760:	89a3      	ldrh	r3, [r4, #12]
 8024762:	065b      	lsls	r3, r3, #25
 8024764:	f53f af35 	bmi.w	80245d2 <_svfiprintf_r+0x2a>
 8024768:	9809      	ldr	r0, [sp, #36]	; 0x24
 802476a:	b01d      	add	sp, #116	; 0x74
 802476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024770:	ab03      	add	r3, sp, #12
 8024772:	9300      	str	r3, [sp, #0]
 8024774:	4622      	mov	r2, r4
 8024776:	4b07      	ldr	r3, [pc, #28]	; (8024794 <_svfiprintf_r+0x1ec>)
 8024778:	a904      	add	r1, sp, #16
 802477a:	4640      	mov	r0, r8
 802477c:	f7ff f9f0 	bl	8023b60 <_printf_i>
 8024780:	e7ea      	b.n	8024758 <_svfiprintf_r+0x1b0>
 8024782:	bf00      	nop
 8024784:	080290c0 	.word	0x080290c0
 8024788:	080290c6 	.word	0x080290c6
 802478c:	080290ca 	.word	0x080290ca
 8024790:	00000000 	.word	0x00000000
 8024794:	080244f3 	.word	0x080244f3

08024798 <__sread>:
 8024798:	b510      	push	{r4, lr}
 802479a:	460c      	mov	r4, r1
 802479c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247a0:	f000 f89c 	bl	80248dc <_read_r>
 80247a4:	2800      	cmp	r0, #0
 80247a6:	bfab      	itete	ge
 80247a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80247aa:	89a3      	ldrhlt	r3, [r4, #12]
 80247ac:	181b      	addge	r3, r3, r0
 80247ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80247b2:	bfac      	ite	ge
 80247b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80247b6:	81a3      	strhlt	r3, [r4, #12]
 80247b8:	bd10      	pop	{r4, pc}

080247ba <__swrite>:
 80247ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80247be:	461f      	mov	r7, r3
 80247c0:	898b      	ldrh	r3, [r1, #12]
 80247c2:	05db      	lsls	r3, r3, #23
 80247c4:	4605      	mov	r5, r0
 80247c6:	460c      	mov	r4, r1
 80247c8:	4616      	mov	r6, r2
 80247ca:	d505      	bpl.n	80247d8 <__swrite+0x1e>
 80247cc:	2302      	movs	r3, #2
 80247ce:	2200      	movs	r2, #0
 80247d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247d4:	f000 f868 	bl	80248a8 <_lseek_r>
 80247d8:	89a3      	ldrh	r3, [r4, #12]
 80247da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80247de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80247e2:	81a3      	strh	r3, [r4, #12]
 80247e4:	4632      	mov	r2, r6
 80247e6:	463b      	mov	r3, r7
 80247e8:	4628      	mov	r0, r5
 80247ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80247ee:	f000 b817 	b.w	8024820 <_write_r>

080247f2 <__sseek>:
 80247f2:	b510      	push	{r4, lr}
 80247f4:	460c      	mov	r4, r1
 80247f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247fa:	f000 f855 	bl	80248a8 <_lseek_r>
 80247fe:	1c43      	adds	r3, r0, #1
 8024800:	89a3      	ldrh	r3, [r4, #12]
 8024802:	bf15      	itete	ne
 8024804:	6560      	strne	r0, [r4, #84]	; 0x54
 8024806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802480a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802480e:	81a3      	strheq	r3, [r4, #12]
 8024810:	bf18      	it	ne
 8024812:	81a3      	strhne	r3, [r4, #12]
 8024814:	bd10      	pop	{r4, pc}

08024816 <__sclose>:
 8024816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802481a:	f000 b813 	b.w	8024844 <_close_r>
	...

08024820 <_write_r>:
 8024820:	b538      	push	{r3, r4, r5, lr}
 8024822:	4c07      	ldr	r4, [pc, #28]	; (8024840 <_write_r+0x20>)
 8024824:	4605      	mov	r5, r0
 8024826:	4608      	mov	r0, r1
 8024828:	4611      	mov	r1, r2
 802482a:	2200      	movs	r2, #0
 802482c:	6022      	str	r2, [r4, #0]
 802482e:	461a      	mov	r2, r3
 8024830:	f7de f947 	bl	8002ac2 <_write>
 8024834:	1c43      	adds	r3, r0, #1
 8024836:	d102      	bne.n	802483e <_write_r+0x1e>
 8024838:	6823      	ldr	r3, [r4, #0]
 802483a:	b103      	cbz	r3, 802483e <_write_r+0x1e>
 802483c:	602b      	str	r3, [r5, #0]
 802483e:	bd38      	pop	{r3, r4, r5, pc}
 8024840:	2002b948 	.word	0x2002b948

08024844 <_close_r>:
 8024844:	b538      	push	{r3, r4, r5, lr}
 8024846:	4c06      	ldr	r4, [pc, #24]	; (8024860 <_close_r+0x1c>)
 8024848:	2300      	movs	r3, #0
 802484a:	4605      	mov	r5, r0
 802484c:	4608      	mov	r0, r1
 802484e:	6023      	str	r3, [r4, #0]
 8024850:	f7de f953 	bl	8002afa <_close>
 8024854:	1c43      	adds	r3, r0, #1
 8024856:	d102      	bne.n	802485e <_close_r+0x1a>
 8024858:	6823      	ldr	r3, [r4, #0]
 802485a:	b103      	cbz	r3, 802485e <_close_r+0x1a>
 802485c:	602b      	str	r3, [r5, #0]
 802485e:	bd38      	pop	{r3, r4, r5, pc}
 8024860:	2002b948 	.word	0x2002b948

08024864 <_fstat_r>:
 8024864:	b538      	push	{r3, r4, r5, lr}
 8024866:	4c07      	ldr	r4, [pc, #28]	; (8024884 <_fstat_r+0x20>)
 8024868:	2300      	movs	r3, #0
 802486a:	4605      	mov	r5, r0
 802486c:	4608      	mov	r0, r1
 802486e:	4611      	mov	r1, r2
 8024870:	6023      	str	r3, [r4, #0]
 8024872:	f7de f94e 	bl	8002b12 <_fstat>
 8024876:	1c43      	adds	r3, r0, #1
 8024878:	d102      	bne.n	8024880 <_fstat_r+0x1c>
 802487a:	6823      	ldr	r3, [r4, #0]
 802487c:	b103      	cbz	r3, 8024880 <_fstat_r+0x1c>
 802487e:	602b      	str	r3, [r5, #0]
 8024880:	bd38      	pop	{r3, r4, r5, pc}
 8024882:	bf00      	nop
 8024884:	2002b948 	.word	0x2002b948

08024888 <_isatty_r>:
 8024888:	b538      	push	{r3, r4, r5, lr}
 802488a:	4c06      	ldr	r4, [pc, #24]	; (80248a4 <_isatty_r+0x1c>)
 802488c:	2300      	movs	r3, #0
 802488e:	4605      	mov	r5, r0
 8024890:	4608      	mov	r0, r1
 8024892:	6023      	str	r3, [r4, #0]
 8024894:	f7de f94d 	bl	8002b32 <_isatty>
 8024898:	1c43      	adds	r3, r0, #1
 802489a:	d102      	bne.n	80248a2 <_isatty_r+0x1a>
 802489c:	6823      	ldr	r3, [r4, #0]
 802489e:	b103      	cbz	r3, 80248a2 <_isatty_r+0x1a>
 80248a0:	602b      	str	r3, [r5, #0]
 80248a2:	bd38      	pop	{r3, r4, r5, pc}
 80248a4:	2002b948 	.word	0x2002b948

080248a8 <_lseek_r>:
 80248a8:	b538      	push	{r3, r4, r5, lr}
 80248aa:	4c07      	ldr	r4, [pc, #28]	; (80248c8 <_lseek_r+0x20>)
 80248ac:	4605      	mov	r5, r0
 80248ae:	4608      	mov	r0, r1
 80248b0:	4611      	mov	r1, r2
 80248b2:	2200      	movs	r2, #0
 80248b4:	6022      	str	r2, [r4, #0]
 80248b6:	461a      	mov	r2, r3
 80248b8:	f7de f946 	bl	8002b48 <_lseek>
 80248bc:	1c43      	adds	r3, r0, #1
 80248be:	d102      	bne.n	80248c6 <_lseek_r+0x1e>
 80248c0:	6823      	ldr	r3, [r4, #0]
 80248c2:	b103      	cbz	r3, 80248c6 <_lseek_r+0x1e>
 80248c4:	602b      	str	r3, [r5, #0]
 80248c6:	bd38      	pop	{r3, r4, r5, pc}
 80248c8:	2002b948 	.word	0x2002b948

080248cc <_malloc_usable_size_r>:
 80248cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80248d0:	1f18      	subs	r0, r3, #4
 80248d2:	2b00      	cmp	r3, #0
 80248d4:	bfbc      	itt	lt
 80248d6:	580b      	ldrlt	r3, [r1, r0]
 80248d8:	18c0      	addlt	r0, r0, r3
 80248da:	4770      	bx	lr

080248dc <_read_r>:
 80248dc:	b538      	push	{r3, r4, r5, lr}
 80248de:	4c07      	ldr	r4, [pc, #28]	; (80248fc <_read_r+0x20>)
 80248e0:	4605      	mov	r5, r0
 80248e2:	4608      	mov	r0, r1
 80248e4:	4611      	mov	r1, r2
 80248e6:	2200      	movs	r2, #0
 80248e8:	6022      	str	r2, [r4, #0]
 80248ea:	461a      	mov	r2, r3
 80248ec:	f7de f8cc 	bl	8002a88 <_read>
 80248f0:	1c43      	adds	r3, r0, #1
 80248f2:	d102      	bne.n	80248fa <_read_r+0x1e>
 80248f4:	6823      	ldr	r3, [r4, #0]
 80248f6:	b103      	cbz	r3, 80248fa <_read_r+0x1e>
 80248f8:	602b      	str	r3, [r5, #0]
 80248fa:	bd38      	pop	{r3, r4, r5, pc}
 80248fc:	2002b948 	.word	0x2002b948

08024900 <_init>:
 8024900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024902:	bf00      	nop
 8024904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024906:	bc08      	pop	{r3}
 8024908:	469e      	mov	lr, r3
 802490a:	4770      	bx	lr

0802490c <_fini>:
 802490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802490e:	bf00      	nop
 8024910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024912:	bc08      	pop	{r3}
 8024914:	469e      	mov	lr, r3
 8024916:	4770      	bx	lr
